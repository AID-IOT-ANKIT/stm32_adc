
adc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbdc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000134d8  0800ce7c  0800ce7c  0000de7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020354  08020354  00021354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802035c  0802035c  0002135c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08020360  08020360  00021360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  08020364  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000456c  24000088  080203ec  00022088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240045f4  080203ec  000225f4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00022088  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d9c4  00000000  00000000  000220b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003569  00000000  00000000  0003fa7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001680  00000000  00000000  00042fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000010df  00000000  00000000  00044668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a951  00000000  00000000  00045747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001dcc0  00000000  00000000  00080098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017bfe8  00000000  00000000  0009dd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b3  00000000  00000000  00219d40  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000067b4  00000000  00000000  00219df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  002205a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    0000318f  00000000  00000000  0022060a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000060  00000000  00000000  00223799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ce64 	.word	0x0800ce64

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	0800ce64 	.word	0x0800ce64

080002e0 <arm_bitreversal_32>:
 80002e0:	1c4b      	adds	r3, r1, #1
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	bf98      	it	ls
 80002e6:	4770      	bxls	lr
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002ec:	1c91      	adds	r1, r2, #2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002f8:	880a      	ldrh	r2, [r1, #0]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002fe:	4480      	add	r8, r0
 8000300:	4481      	add	r9, r0
 8000302:	4402      	add	r2, r0
 8000304:	4484      	add	ip, r0
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
 800030e:	6815      	ldr	r5, [r2, #0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
 8000314:	f8c9 6000 	str.w	r6, [r9]
 8000318:	f8c8 7000 	str.w	r7, [r8]
 800031c:	f8cc 5000 	str.w	r5, [ip]
 8000320:	6014      	str	r4, [r2, #0]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800032a:	6855      	ldr	r5, [r2, #4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
 800033c:	6054      	str	r4, [r2, #4]
 800033e:	3108      	adds	r1, #8
 8000340:	3b01      	subs	r3, #1
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
 800034a:	1c4b      	adds	r3, r1, #1
 800034c:	2b01      	cmp	r3, #1
 800034e:	bf98      	it	ls
 8000350:	4770      	bxls	lr
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000356:	1c91      	adds	r1, r2, #2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000362:	880a      	ldrh	r2, [r1, #0]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
 8000380:	6815      	ldr	r5, [r2, #0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
 8000386:	f8c9 6000 	str.w	r6, [r9]
 800038a:	f8c8 7000 	str.w	r7, [r8]
 800038e:	f8cc 5000 	str.w	r5, [ip]
 8000392:	6014      	str	r4, [r2, #0]
 8000394:	3108      	adds	r1, #8
 8000396:	3b01      	subs	r3, #1
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800039e:	4770      	bx	lr

080003a0 <memchr>:
 80003a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80003a4:	2a10      	cmp	r2, #16
 80003a6:	db2b      	blt.n	8000400 <memchr+0x60>
 80003a8:	f010 0f07 	tst.w	r0, #7
 80003ac:	d008      	beq.n	80003c0 <memchr+0x20>
 80003ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003b2:	3a01      	subs	r2, #1
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d02d      	beq.n	8000414 <memchr+0x74>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	b342      	cbz	r2, 8000410 <memchr+0x70>
 80003be:	d1f6      	bne.n	80003ae <memchr+0xe>
 80003c0:	b4f0      	push	{r4, r5, r6, r7}
 80003c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003ca:	f022 0407 	bic.w	r4, r2, #7
 80003ce:	f07f 0700 	mvns.w	r7, #0
 80003d2:	2300      	movs	r3, #0
 80003d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003d8:	3c08      	subs	r4, #8
 80003da:	ea85 0501 	eor.w	r5, r5, r1
 80003de:	ea86 0601 	eor.w	r6, r6, r1
 80003e2:	fa85 f547 	uadd8	r5, r5, r7
 80003e6:	faa3 f587 	sel	r5, r3, r7
 80003ea:	fa86 f647 	uadd8	r6, r6, r7
 80003ee:	faa5 f687 	sel	r6, r5, r7
 80003f2:	b98e      	cbnz	r6, 8000418 <memchr+0x78>
 80003f4:	d1ee      	bne.n	80003d4 <memchr+0x34>
 80003f6:	bcf0      	pop	{r4, r5, r6, r7}
 80003f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80003fc:	f002 0207 	and.w	r2, r2, #7
 8000400:	b132      	cbz	r2, 8000410 <memchr+0x70>
 8000402:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000406:	3a01      	subs	r2, #1
 8000408:	ea83 0301 	eor.w	r3, r3, r1
 800040c:	b113      	cbz	r3, 8000414 <memchr+0x74>
 800040e:	d1f8      	bne.n	8000402 <memchr+0x62>
 8000410:	2000      	movs	r0, #0
 8000412:	4770      	bx	lr
 8000414:	3801      	subs	r0, #1
 8000416:	4770      	bx	lr
 8000418:	2d00      	cmp	r5, #0
 800041a:	bf06      	itte	eq
 800041c:	4635      	moveq	r5, r6
 800041e:	3803      	subeq	r0, #3
 8000420:	3807      	subne	r0, #7
 8000422:	f015 0f01 	tst.w	r5, #1
 8000426:	d107      	bne.n	8000438 <memchr+0x98>
 8000428:	3001      	adds	r0, #1
 800042a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800042e:	bf02      	ittt	eq
 8000430:	3001      	addeq	r0, #1
 8000432:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000436:	3001      	addeq	r0, #1
 8000438:	bcf0      	pop	{r4, r5, r6, r7}
 800043a:	3801      	subs	r0, #1
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop

08000440 <__aeabi_uldivmod>:
 8000440:	b953      	cbnz	r3, 8000458 <__aeabi_uldivmod+0x18>
 8000442:	b94a      	cbnz	r2, 8000458 <__aeabi_uldivmod+0x18>
 8000444:	2900      	cmp	r1, #0
 8000446:	bf08      	it	eq
 8000448:	2800      	cmpeq	r0, #0
 800044a:	bf1c      	itt	ne
 800044c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000450:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000454:	f000 b96a 	b.w	800072c <__aeabi_idiv0>
 8000458:	f1ad 0c08 	sub.w	ip, sp, #8
 800045c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000460:	f000 f806 	bl	8000470 <__udivmoddi4>
 8000464:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800046c:	b004      	add	sp, #16
 800046e:	4770      	bx	lr

08000470 <__udivmoddi4>:
 8000470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000474:	9d08      	ldr	r5, [sp, #32]
 8000476:	460c      	mov	r4, r1
 8000478:	2b00      	cmp	r3, #0
 800047a:	d14e      	bne.n	800051a <__udivmoddi4+0xaa>
 800047c:	4694      	mov	ip, r2
 800047e:	458c      	cmp	ip, r1
 8000480:	4686      	mov	lr, r0
 8000482:	fab2 f282 	clz	r2, r2
 8000486:	d962      	bls.n	800054e <__udivmoddi4+0xde>
 8000488:	b14a      	cbz	r2, 800049e <__udivmoddi4+0x2e>
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	4091      	lsls	r1, r2
 8000490:	fa20 f303 	lsr.w	r3, r0, r3
 8000494:	fa0c fc02 	lsl.w	ip, ip, r2
 8000498:	4319      	orrs	r1, r3
 800049a:	fa00 fe02 	lsl.w	lr, r0, r2
 800049e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a2:	fa1f f68c 	uxth.w	r6, ip
 80004a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ae:	fb07 1114 	mls	r1, r7, r4, r1
 80004b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b6:	fb04 f106 	mul.w	r1, r4, r6
 80004ba:	4299      	cmp	r1, r3
 80004bc:	d90a      	bls.n	80004d4 <__udivmoddi4+0x64>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004c6:	f080 8112 	bcs.w	80006ee <__udivmoddi4+0x27e>
 80004ca:	4299      	cmp	r1, r3
 80004cc:	f240 810f 	bls.w	80006ee <__udivmoddi4+0x27e>
 80004d0:	3c02      	subs	r4, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	fa1f f38e 	uxth.w	r3, lr
 80004da:	fbb1 f0f7 	udiv	r0, r1, r7
 80004de:	fb07 1110 	mls	r1, r7, r0, r1
 80004e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e6:	fb00 f606 	mul.w	r6, r0, r6
 80004ea:	429e      	cmp	r6, r3
 80004ec:	d90a      	bls.n	8000504 <__udivmoddi4+0x94>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80004f6:	f080 80fc 	bcs.w	80006f2 <__udivmoddi4+0x282>
 80004fa:	429e      	cmp	r6, r3
 80004fc:	f240 80f9 	bls.w	80006f2 <__udivmoddi4+0x282>
 8000500:	4463      	add	r3, ip
 8000502:	3802      	subs	r0, #2
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800050a:	2100      	movs	r1, #0
 800050c:	b11d      	cbz	r5, 8000516 <__udivmoddi4+0xa6>
 800050e:	40d3      	lsrs	r3, r2
 8000510:	2200      	movs	r2, #0
 8000512:	e9c5 3200 	strd	r3, r2, [r5]
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	428b      	cmp	r3, r1
 800051c:	d905      	bls.n	800052a <__udivmoddi4+0xba>
 800051e:	b10d      	cbz	r5, 8000524 <__udivmoddi4+0xb4>
 8000520:	e9c5 0100 	strd	r0, r1, [r5]
 8000524:	2100      	movs	r1, #0
 8000526:	4608      	mov	r0, r1
 8000528:	e7f5      	b.n	8000516 <__udivmoddi4+0xa6>
 800052a:	fab3 f183 	clz	r1, r3
 800052e:	2900      	cmp	r1, #0
 8000530:	d146      	bne.n	80005c0 <__udivmoddi4+0x150>
 8000532:	42a3      	cmp	r3, r4
 8000534:	d302      	bcc.n	800053c <__udivmoddi4+0xcc>
 8000536:	4290      	cmp	r0, r2
 8000538:	f0c0 80f0 	bcc.w	800071c <__udivmoddi4+0x2ac>
 800053c:	1a86      	subs	r6, r0, r2
 800053e:	eb64 0303 	sbc.w	r3, r4, r3
 8000542:	2001      	movs	r0, #1
 8000544:	2d00      	cmp	r5, #0
 8000546:	d0e6      	beq.n	8000516 <__udivmoddi4+0xa6>
 8000548:	e9c5 6300 	strd	r6, r3, [r5]
 800054c:	e7e3      	b.n	8000516 <__udivmoddi4+0xa6>
 800054e:	2a00      	cmp	r2, #0
 8000550:	f040 8090 	bne.w	8000674 <__udivmoddi4+0x204>
 8000554:	eba1 040c 	sub.w	r4, r1, ip
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	2101      	movs	r1, #1
 8000562:	fbb4 f6f8 	udiv	r6, r4, r8
 8000566:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800056a:	fb08 4416 	mls	r4, r8, r6, r4
 800056e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000572:	fb07 f006 	mul.w	r0, r7, r6
 8000576:	4298      	cmp	r0, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x11c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000582:	d202      	bcs.n	800058a <__udivmoddi4+0x11a>
 8000584:	4298      	cmp	r0, r3
 8000586:	f200 80cd 	bhi.w	8000724 <__udivmoddi4+0x2b4>
 800058a:	4626      	mov	r6, r4
 800058c:	1a1c      	subs	r4, r3, r0
 800058e:	fa1f f38e 	uxth.w	r3, lr
 8000592:	fbb4 f0f8 	udiv	r0, r4, r8
 8000596:	fb08 4410 	mls	r4, r8, r0, r4
 800059a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800059e:	fb00 f707 	mul.w	r7, r0, r7
 80005a2:	429f      	cmp	r7, r3
 80005a4:	d908      	bls.n	80005b8 <__udivmoddi4+0x148>
 80005a6:	eb1c 0303 	adds.w	r3, ip, r3
 80005aa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005ae:	d202      	bcs.n	80005b6 <__udivmoddi4+0x146>
 80005b0:	429f      	cmp	r7, r3
 80005b2:	f200 80b0 	bhi.w	8000716 <__udivmoddi4+0x2a6>
 80005b6:	4620      	mov	r0, r4
 80005b8:	1bdb      	subs	r3, r3, r7
 80005ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005be:	e7a5      	b.n	800050c <__udivmoddi4+0x9c>
 80005c0:	f1c1 0620 	rsb	r6, r1, #32
 80005c4:	408b      	lsls	r3, r1
 80005c6:	fa22 f706 	lsr.w	r7, r2, r6
 80005ca:	431f      	orrs	r7, r3
 80005cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005d0:	fa04 f301 	lsl.w	r3, r4, r1
 80005d4:	ea43 030c 	orr.w	r3, r3, ip
 80005d8:	40f4      	lsrs	r4, r6
 80005da:	fa00 f801 	lsl.w	r8, r0, r1
 80005de:	0c38      	lsrs	r0, r7, #16
 80005e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005e4:	fbb4 fef0 	udiv	lr, r4, r0
 80005e8:	fa1f fc87 	uxth.w	ip, r7
 80005ec:	fb00 441e 	mls	r4, r0, lr, r4
 80005f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005f4:	fb0e f90c 	mul.w	r9, lr, ip
 80005f8:	45a1      	cmp	r9, r4
 80005fa:	fa02 f201 	lsl.w	r2, r2, r1
 80005fe:	d90a      	bls.n	8000616 <__udivmoddi4+0x1a6>
 8000600:	193c      	adds	r4, r7, r4
 8000602:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000606:	f080 8084 	bcs.w	8000712 <__udivmoddi4+0x2a2>
 800060a:	45a1      	cmp	r9, r4
 800060c:	f240 8081 	bls.w	8000712 <__udivmoddi4+0x2a2>
 8000610:	f1ae 0e02 	sub.w	lr, lr, #2
 8000614:	443c      	add	r4, r7
 8000616:	eba4 0409 	sub.w	r4, r4, r9
 800061a:	fa1f f983 	uxth.w	r9, r3
 800061e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000622:	fb00 4413 	mls	r4, r0, r3, r4
 8000626:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800062a:	fb03 fc0c 	mul.w	ip, r3, ip
 800062e:	45a4      	cmp	ip, r4
 8000630:	d907      	bls.n	8000642 <__udivmoddi4+0x1d2>
 8000632:	193c      	adds	r4, r7, r4
 8000634:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000638:	d267      	bcs.n	800070a <__udivmoddi4+0x29a>
 800063a:	45a4      	cmp	ip, r4
 800063c:	d965      	bls.n	800070a <__udivmoddi4+0x29a>
 800063e:	3b02      	subs	r3, #2
 8000640:	443c      	add	r4, r7
 8000642:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000646:	fba0 9302 	umull	r9, r3, r0, r2
 800064a:	eba4 040c 	sub.w	r4, r4, ip
 800064e:	429c      	cmp	r4, r3
 8000650:	46ce      	mov	lr, r9
 8000652:	469c      	mov	ip, r3
 8000654:	d351      	bcc.n	80006fa <__udivmoddi4+0x28a>
 8000656:	d04e      	beq.n	80006f6 <__udivmoddi4+0x286>
 8000658:	b155      	cbz	r5, 8000670 <__udivmoddi4+0x200>
 800065a:	ebb8 030e 	subs.w	r3, r8, lr
 800065e:	eb64 040c 	sbc.w	r4, r4, ip
 8000662:	fa04 f606 	lsl.w	r6, r4, r6
 8000666:	40cb      	lsrs	r3, r1
 8000668:	431e      	orrs	r6, r3
 800066a:	40cc      	lsrs	r4, r1
 800066c:	e9c5 6400 	strd	r6, r4, [r5]
 8000670:	2100      	movs	r1, #0
 8000672:	e750      	b.n	8000516 <__udivmoddi4+0xa6>
 8000674:	f1c2 0320 	rsb	r3, r2, #32
 8000678:	fa20 f103 	lsr.w	r1, r0, r3
 800067c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000680:	fa24 f303 	lsr.w	r3, r4, r3
 8000684:	4094      	lsls	r4, r2
 8000686:	430c      	orrs	r4, r1
 8000688:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800068c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000690:	fa1f f78c 	uxth.w	r7, ip
 8000694:	fbb3 f0f8 	udiv	r0, r3, r8
 8000698:	fb08 3110 	mls	r1, r8, r0, r3
 800069c:	0c23      	lsrs	r3, r4, #16
 800069e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006a2:	fb00 f107 	mul.w	r1, r0, r7
 80006a6:	4299      	cmp	r1, r3
 80006a8:	d908      	bls.n	80006bc <__udivmoddi4+0x24c>
 80006aa:	eb1c 0303 	adds.w	r3, ip, r3
 80006ae:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006b2:	d22c      	bcs.n	800070e <__udivmoddi4+0x29e>
 80006b4:	4299      	cmp	r1, r3
 80006b6:	d92a      	bls.n	800070e <__udivmoddi4+0x29e>
 80006b8:	3802      	subs	r0, #2
 80006ba:	4463      	add	r3, ip
 80006bc:	1a5b      	subs	r3, r3, r1
 80006be:	b2a4      	uxth	r4, r4
 80006c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006c4:	fb08 3311 	mls	r3, r8, r1, r3
 80006c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006cc:	fb01 f307 	mul.w	r3, r1, r7
 80006d0:	42a3      	cmp	r3, r4
 80006d2:	d908      	bls.n	80006e6 <__udivmoddi4+0x276>
 80006d4:	eb1c 0404 	adds.w	r4, ip, r4
 80006d8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006dc:	d213      	bcs.n	8000706 <__udivmoddi4+0x296>
 80006de:	42a3      	cmp	r3, r4
 80006e0:	d911      	bls.n	8000706 <__udivmoddi4+0x296>
 80006e2:	3902      	subs	r1, #2
 80006e4:	4464      	add	r4, ip
 80006e6:	1ae4      	subs	r4, r4, r3
 80006e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006ec:	e739      	b.n	8000562 <__udivmoddi4+0xf2>
 80006ee:	4604      	mov	r4, r0
 80006f0:	e6f0      	b.n	80004d4 <__udivmoddi4+0x64>
 80006f2:	4608      	mov	r0, r1
 80006f4:	e706      	b.n	8000504 <__udivmoddi4+0x94>
 80006f6:	45c8      	cmp	r8, r9
 80006f8:	d2ae      	bcs.n	8000658 <__udivmoddi4+0x1e8>
 80006fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80006fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000702:	3801      	subs	r0, #1
 8000704:	e7a8      	b.n	8000658 <__udivmoddi4+0x1e8>
 8000706:	4631      	mov	r1, r6
 8000708:	e7ed      	b.n	80006e6 <__udivmoddi4+0x276>
 800070a:	4603      	mov	r3, r0
 800070c:	e799      	b.n	8000642 <__udivmoddi4+0x1d2>
 800070e:	4630      	mov	r0, r6
 8000710:	e7d4      	b.n	80006bc <__udivmoddi4+0x24c>
 8000712:	46d6      	mov	lr, sl
 8000714:	e77f      	b.n	8000616 <__udivmoddi4+0x1a6>
 8000716:	4463      	add	r3, ip
 8000718:	3802      	subs	r0, #2
 800071a:	e74d      	b.n	80005b8 <__udivmoddi4+0x148>
 800071c:	4606      	mov	r6, r0
 800071e:	4623      	mov	r3, r4
 8000720:	4608      	mov	r0, r1
 8000722:	e70f      	b.n	8000544 <__udivmoddi4+0xd4>
 8000724:	3e02      	subs	r6, #2
 8000726:	4463      	add	r3, ip
 8000728:	e730      	b.n	800058c <__udivmoddi4+0x11c>
 800072a:	bf00      	nop

0800072c <__aeabi_idiv0>:
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop

08000730 <HAL_ADC_ConvCpltCallback>:
//
//		}
//	}
//}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < (ADC_BUFFER_LENGTH / 2) - 1; ++i) {
 8000738:	2300      	movs	r3, #0
 800073a:	81fb      	strh	r3, [r7, #14]
 800073c:	e027      	b.n	800078e <HAL_ADC_ConvCpltCallback+0x5e>

			fftInBuf[fftIndex++] = adc_data[i];
 800073e:	89fb      	ldrh	r3, [r7, #14]
 8000740:	4a17      	ldr	r2, [pc, #92]	@ (80007a0 <HAL_ADC_ConvCpltCallback+0x70>)
 8000742:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000746:	b298      	uxth	r0, r3
 8000748:	4b16      	ldr	r3, [pc, #88]	@ (80007a4 <HAL_ADC_ConvCpltCallback+0x74>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	1c5a      	adds	r2, r3, #1
 800074e:	b291      	uxth	r1, r2
 8000750:	4a14      	ldr	r2, [pc, #80]	@ (80007a4 <HAL_ADC_ConvCpltCallback+0x74>)
 8000752:	8011      	strh	r1, [r2, #0]
 8000754:	ee07 0a90 	vmov	s15, r0
 8000758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800075c:	4a12      	ldr	r2, [pc, #72]	@ (80007a8 <HAL_ADC_ConvCpltCallback+0x78>)
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	4413      	add	r3, r2
 8000762:	edc3 7a00 	vstr	s15, [r3]

			if(fftIndex == FFT_BUFFER_SIZE) {
 8000766:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <HAL_ADC_ConvCpltCallback+0x74>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800076e:	d10b      	bne.n	8000788 <HAL_ADC_ConvCpltCallback+0x58>

				arm_rfft_fast_f32(&fftHandler, fftInBuf, fftOutBuf, 0);
 8000770:	2300      	movs	r3, #0
 8000772:	4a0e      	ldr	r2, [pc, #56]	@ (80007ac <HAL_ADC_ConvCpltCallback+0x7c>)
 8000774:	490c      	ldr	r1, [pc, #48]	@ (80007a8 <HAL_ADC_ConvCpltCallback+0x78>)
 8000776:	480e      	ldr	r0, [pc, #56]	@ (80007b0 <HAL_ADC_ConvCpltCallback+0x80>)
 8000778:	f00a fcde 	bl	800b138 <arm_rfft_fast_f32>

				// Set FFT flag
				fftFlag = 1;
 800077c:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <HAL_ADC_ConvCpltCallback+0x84>)
 800077e:	2201      	movs	r2, #1
 8000780:	701a      	strb	r2, [r3, #0]

				fftIndex = 0;
 8000782:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <HAL_ADC_ConvCpltCallback+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i < (ADC_BUFFER_LENGTH / 2) - 1; ++i) {
 8000788:	89fb      	ldrh	r3, [r7, #14]
 800078a:	3301      	adds	r3, #1
 800078c:	81fb      	strh	r3, [r7, #14]
 800078e:	89fb      	ldrh	r3, [r7, #14]
 8000790:	2b80      	cmp	r3, #128	@ 0x80
 8000792:	d9d4      	bls.n	800073e <HAL_ADC_ConvCpltCallback+0xe>
			}
	}
}
 8000794:	bf00      	nop
 8000796:	bf00      	nop
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	240001dc 	.word	0x240001dc
 80007a4:	240043fe 	.word	0x240043fe
 80007a8:	240003fc 	.word	0x240003fc
 80007ac:	240023fc 	.word	0x240023fc
 80007b0:	240003e4 	.word	0x240003e4
 80007b4:	240043fc 	.word	0x240043fc

080007b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007be:	f000 fa87 	bl	8000cd0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c2:	f000 ff59 	bl	8001678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c6:	f000 f8cf 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ca:	f000 fa49 	bl	8000c60 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ce:	f000 fa27 	bl	8000c20 <MX_DMA_Init>
  MX_ADC1_Init();
 80007d2:	f000 f945 	bl	8000a60 <MX_ADC1_Init>
  MX_TIM8_Init();
 80007d6:	f000 f9d1 	bl	8000b7c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  // Initialize FFT
  arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 80007da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007de:	485a      	ldr	r0, [pc, #360]	@ (8000948 <main+0x190>)
 80007e0:	f00a fbf8 	bl	800afd4 <arm_rfft_fast_init_f32>

  HAL_ADCEx_Calibration_Start(&hadc1,ADC_CALIB_OFFSET,ADC_SINGLE_ENDED);
 80007e4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80007e8:	2100      	movs	r1, #0
 80007ea:	4858      	ldr	r0, [pc, #352]	@ (800094c <main+0x194>)
 80007ec:	f002 fcd6 	bl	800319c <HAL_ADCEx_Calibration_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&adc_data, ADC_BUFFER_LENGTH);
 80007f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007f4:	4956      	ldr	r1, [pc, #344]	@ (8000950 <main+0x198>)
 80007f6:	4855      	ldr	r0, [pc, #340]	@ (800094c <main+0x194>)
 80007f8:	f001 fbe0 	bl	8001fbc <HAL_ADC_Start_DMA>
  // it will fill data at 2.5 million

  HAL_TIM_Base_Start(&htim8);
 80007fc:	4855      	ldr	r0, [pc, #340]	@ (8000954 <main+0x19c>)
 80007fe:	f009 f845 	bl	800988c <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000802:	2000      	movs	r0, #0
 8000804:	f000 fd54 	bl	80012b0 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000808:	2001      	movs	r0, #1
 800080a:	f000 fd51 	bl	80012b0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800080e:	2002      	movs	r0, #2
 8000810:	f000 fd4e 	bl	80012b0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000814:	2101      	movs	r1, #1
 8000816:	2000      	movs	r0, #0
 8000818:	f000 fdc0 	bl	800139c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800081c:	4b4e      	ldr	r3, [pc, #312]	@ (8000958 <main+0x1a0>)
 800081e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000822:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000824:	4b4c      	ldr	r3, [pc, #304]	@ (8000958 <main+0x1a0>)
 8000826:	2200      	movs	r2, #0
 8000828:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800082a:	4b4b      	ldr	r3, [pc, #300]	@ (8000958 <main+0x1a0>)
 800082c:	2200      	movs	r2, #0
 800082e:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000830:	4b49      	ldr	r3, [pc, #292]	@ (8000958 <main+0x1a0>)
 8000832:	2200      	movs	r2, #0
 8000834:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000836:	4b48      	ldr	r3, [pc, #288]	@ (8000958 <main+0x1a0>)
 8000838:	2200      	movs	r2, #0
 800083a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800083c:	4946      	ldr	r1, [pc, #280]	@ (8000958 <main+0x1a0>)
 800083e:	2000      	movs	r0, #0
 8000840:	f000 fe3c 	bl	80014bc <BSP_COM_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <main+0x96>
  {
    Error_Handler();
 800084a:	f000 fa6d 	bl	8000d28 <Error_Handler>
  }

  uint32_t printTimer = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]

  float peakVal = 0.0f;
 8000852:	f04f 0300 	mov.w	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
  uint16_t peakHz = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	81fb      	strh	r3, [r7, #14]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 if(fftFlag) {
 800085c:	4b3f      	ldr	r3, [pc, #252]	@ (800095c <main+0x1a4>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d056      	beq.n	8000912 <main+0x15a>
		 peakVal = 0.0f;
 8000864:	f04f 0300 	mov.w	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
		 peakHz = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	81fb      	strh	r3, [r7, #14]

		 uint16_t freqIndex = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	81bb      	strh	r3, [r7, #12]
		 for(uint16_t i = 0; i < FFT_BUFFER_SIZE; i += 2) {
 8000872:	2300      	movs	r3, #0
 8000874:	817b      	strh	r3, [r7, #10]
 8000876:	e048      	b.n	800090a <main+0x152>

			 float currVal = sqrtf((fftOutBuf[i] * fftOutBuf[i]) + (fftOutBuf[i+1] * fftOutBuf[i+1]));
 8000878:	897b      	ldrh	r3, [r7, #10]
 800087a:	4a39      	ldr	r2, [pc, #228]	@ (8000960 <main+0x1a8>)
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	4413      	add	r3, r2
 8000880:	ed93 7a00 	vldr	s14, [r3]
 8000884:	897b      	ldrh	r3, [r7, #10]
 8000886:	4a36      	ldr	r2, [pc, #216]	@ (8000960 <main+0x1a8>)
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	4413      	add	r3, r2
 800088c:	edd3 7a00 	vldr	s15, [r3]
 8000890:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000894:	897b      	ldrh	r3, [r7, #10]
 8000896:	3301      	adds	r3, #1
 8000898:	4a31      	ldr	r2, [pc, #196]	@ (8000960 <main+0x1a8>)
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	4413      	add	r3, r2
 800089e:	edd3 6a00 	vldr	s13, [r3]
 80008a2:	897b      	ldrh	r3, [r7, #10]
 80008a4:	3301      	adds	r3, #1
 80008a6:	4a2e      	ldr	r2, [pc, #184]	@ (8000960 <main+0x1a8>)
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	4413      	add	r3, r2
 80008ac:	edd3 7a00 	vldr	s15, [r3]
 80008b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008b8:	eeb0 0a67 	vmov.f32	s0, s15
 80008bc:	f00c fab0 	bl	800ce20 <sqrtf>
 80008c0:	ed87 0a01 	vstr	s0, [r7, #4]

			 if(currVal > peakVal) {
 80008c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80008c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80008cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008d4:	dd13      	ble.n	80008fe <main+0x146>

				 peakVal = currVal;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	613b      	str	r3, [r7, #16]

				 peakHz = (uint16_t)((freqIndex * SAMPLE_RATE_HZ) / (float)FFT_BUFFER_SIZE);
 80008da:	89bb      	ldrh	r3, [r7, #12]
 80008dc:	ee07 3a90 	vmov	s15, r3
 80008e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008e4:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 8000938 <main+0x180>
 80008e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80008ec:	ed9f 5b14 	vldr	d5, [pc, #80]	@ 8000940 <main+0x188>
 80008f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80008f8:	ee17 3a90 	vmov	r3, s15
 80008fc:	81fb      	strh	r3, [r7, #14]

			 }

			 freqIndex++;
 80008fe:	89bb      	ldrh	r3, [r7, #12]
 8000900:	3301      	adds	r3, #1
 8000902:	81bb      	strh	r3, [r7, #12]
		 for(uint16_t i = 0; i < FFT_BUFFER_SIZE; i += 2) {
 8000904:	897b      	ldrh	r3, [r7, #10]
 8000906:	3302      	adds	r3, #2
 8000908:	817b      	strh	r3, [r7, #10]
 800090a:	897b      	ldrh	r3, [r7, #10]
 800090c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000910:	d3b2      	bcc.n	8000878 <main+0xc0>
		 }
	 }

	 if(HAL_GetTick() - printTimer > PRINT_TIME) {
 8000912:	f000 ff37 	bl	8001784 <HAL_GetTick>
 8000916:	4602      	mov	r2, r0
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	1ad3      	subs	r3, r2, r3
 800091c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000920:	d99c      	bls.n	800085c <main+0xa4>

		 printf("peak Hz: %u\n", peakHz);
 8000922:	89fb      	ldrh	r3, [r7, #14]
 8000924:	4619      	mov	r1, r3
 8000926:	480f      	ldr	r0, [pc, #60]	@ (8000964 <main+0x1ac>)
 8000928:	f00b fc0e 	bl	800c148 <iprintf>

		 printTimer = HAL_GetTick();
 800092c:	f000 ff2a 	bl	8001784 <HAL_GetTick>
 8000930:	6178      	str	r0, [r7, #20]
	 if(fftFlag) {
 8000932:	e793      	b.n	800085c <main+0xa4>
 8000934:	f3af 8000 	nop.w
 8000938:	00000000 	.word	0x00000000
 800093c:	414312d0 	.word	0x414312d0
 8000940:	00000000 	.word	0x00000000
 8000944:	40a00000 	.word	0x40a00000
 8000948:	240003e4 	.word	0x240003e4
 800094c:	240000b4 	.word	0x240000b4
 8000950:	240001dc 	.word	0x240001dc
 8000954:	24000190 	.word	0x24000190
 8000958:	240000a4 	.word	0x240000a4
 800095c:	240043fc 	.word	0x240043fc
 8000960:	240023fc 	.word	0x240023fc
 8000964:	0800ce7c 	.word	0x0800ce7c

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b09c      	sub	sp, #112	@ 0x70
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000972:	224c      	movs	r2, #76	@ 0x4c
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f00b fbf8 	bl	800c16c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2220      	movs	r2, #32
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f00b fbf2 	bl	800c16c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000988:	2002      	movs	r0, #2
 800098a:	f005 fa09 	bl	8005da0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4b31      	ldr	r3, [pc, #196]	@ (8000a58 <SystemClock_Config+0xf0>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	4a30      	ldr	r2, [pc, #192]	@ (8000a58 <SystemClock_Config+0xf0>)
 8000998:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800099c:	6193      	str	r3, [r2, #24]
 800099e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a58 <SystemClock_Config+0xf0>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	4b2c      	ldr	r3, [pc, #176]	@ (8000a5c <SystemClock_Config+0xf4>)
 80009aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ac:	4a2b      	ldr	r2, [pc, #172]	@ (8000a5c <SystemClock_Config+0xf4>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009b4:	4b29      	ldr	r3, [pc, #164]	@ (8000a5c <SystemClock_Config+0xf4>)
 80009b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009c0:	bf00      	nop
 80009c2:	4b25      	ldr	r3, [pc, #148]	@ (8000a58 <SystemClock_Config+0xf0>)
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009ce:	d1f8      	bne.n	80009c2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d0:	2302      	movs	r3, #2
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009d4:	2301      	movs	r3, #1
 80009d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d8:	2340      	movs	r3, #64	@ 0x40
 80009da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009dc:	2302      	movs	r3, #2
 80009de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009e0:	2300      	movs	r3, #0
 80009e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009e4:	2304      	movs	r3, #4
 80009e6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80009e8:	233c      	movs	r3, #60	@ 0x3c
 80009ea:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009f8:	230c      	movs	r3, #12
 80009fa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f005 fa03 	bl	8005e14 <HAL_RCC_OscConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000a14:	f000 f988 	bl	8000d28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a18:	233f      	movs	r3, #63	@ 0x3f
 8000a1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a24:	2308      	movs	r3, #8
 8000a26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a28:	2340      	movs	r3, #64	@ 0x40
 8000a2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a2c:	2340      	movs	r3, #64	@ 0x40
 8000a2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a34:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a36:	2340      	movs	r3, #64	@ 0x40
 8000a38:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f005 fe42 	bl	80066c8 <HAL_RCC_ClockConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000a4a:	f000 f96d 	bl	8000d28 <Error_Handler>
  }
}
 8000a4e:	bf00      	nop
 8000a50:	3770      	adds	r7, #112	@ 0x70
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	58024800 	.word	0x58024800
 8000a5c:	58000400 	.word	0x58000400

08000a60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	@ 0x28
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a72:	463b      	mov	r3, r7
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
 8000a80:	615a      	str	r2, [r3, #20]
 8000a82:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a84:	4b39      	ldr	r3, [pc, #228]	@ (8000b6c <MX_ADC1_Init+0x10c>)
 8000a86:	4a3a      	ldr	r2, [pc, #232]	@ (8000b70 <MX_ADC1_Init+0x110>)
 8000a88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000a8a:	4b38      	ldr	r3, [pc, #224]	@ (8000b6c <MX_ADC1_Init+0x10c>)
 8000a8c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a92:	4b36      	ldr	r3, [pc, #216]	@ (8000b6c <MX_ADC1_Init+0x10c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a98:	4b34      	ldr	r3, [pc, #208]	@ (8000b6c <MX_ADC1_Init+0x10c>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a9e:	4b33      	ldr	r3, [pc, #204]	@ (8000b6c <MX_ADC1_Init+0x10c>)
 8000aa0:	2208      	movs	r2, #8
 8000aa2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <MX_ADC1_Init+0x10c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aaa:	4b30      	ldr	r3, [pc, #192]	@ (8000b6c <MX_ADC1_Init+0x10c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <MX_ADC1_Init+0x10c>)
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <MX_ADC1_Init+0x10c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO2;
 8000abc:	4b2b      	ldr	r3, [pc, #172]	@ (8000b6c <MX_ADC1_Init+0x10c>)
 8000abe:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000ac2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ac4:	4b29      	ldr	r3, [pc, #164]	@ (8000b6c <MX_ADC1_Init+0x10c>)
 8000ac6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aca:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000acc:	4b27      	ldr	r3, [pc, #156]	@ (8000b6c <MX_ADC1_Init+0x10c>)
 8000ace:	2203      	movs	r2, #3
 8000ad0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ad2:	4b26      	ldr	r3, [pc, #152]	@ (8000b6c <MX_ADC1_Init+0x10c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ad8:	4b24      	ldr	r3, [pc, #144]	@ (8000b6c <MX_ADC1_Init+0x10c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <MX_ADC1_Init+0x10c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000ae6:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <MX_ADC1_Init+0x10c>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aec:	481f      	ldr	r0, [pc, #124]	@ (8000b6c <MX_ADC1_Init+0x10c>)
 8000aee:	f001 f8c3 	bl	8001c78 <HAL_ADC_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000af8:	f000 f916 	bl	8000d28 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	4819      	ldr	r0, [pc, #100]	@ (8000b6c <MX_ADC1_Init+0x10c>)
 8000b08:	f002 fbde 	bl	80032c8 <HAL_ADCEx_MultiModeConfigChannel>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000b12:	f000 f909 	bl	8000d28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000b16:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <MX_ADC1_Init+0x114>)
 8000b18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b1a:	2306      	movs	r3, #6
 8000b1c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b22:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b26:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b28:	2304      	movs	r3, #4
 8000b2a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b34:	463b      	mov	r3, r7
 8000b36:	4619      	mov	r1, r3
 8000b38:	480c      	ldr	r0, [pc, #48]	@ (8000b6c <MX_ADC1_Init+0x10c>)
 8000b3a:	f001 fd5b 	bl	80025f4 <HAL_ADC_ConfigChannel>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000b44:	f000 f8f0 	bl	8000d28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000b48:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <MX_ADC1_Init+0x118>)
 8000b4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b4c:	230c      	movs	r3, #12
 8000b4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b50:	463b      	mov	r3, r7
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <MX_ADC1_Init+0x10c>)
 8000b56:	f001 fd4d 	bl	80025f4 <HAL_ADC_ConfigChannel>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8000b60:	f000 f8e2 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	@ 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	240000b4 	.word	0x240000b4
 8000b70:	40022000 	.word	0x40022000
 8000b74:	43210000 	.word	0x43210000
 8000b78:	47520000 	.word	0x47520000

08000b7c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b82:	f107 0310 	add.w	r3, r7, #16
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <MX_TIM8_Init+0x9c>)
 8000b9c:	4a1f      	ldr	r2, [pc, #124]	@ (8000c1c <MX_TIM8_Init+0xa0>)
 8000b9e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 6 - 1;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c18 <MX_TIM8_Init+0x9c>)
 8000ba2:	2205      	movs	r2, #5
 8000ba4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <MX_TIM8_Init+0x9c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16 - 1;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <MX_TIM8_Init+0x9c>)
 8000bae:	220f      	movs	r2, #15
 8000bb0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <MX_TIM8_Init+0x9c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <MX_TIM8_Init+0x9c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <MX_TIM8_Init+0x9c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000bc4:	4814      	ldr	r0, [pc, #80]	@ (8000c18 <MX_TIM8_Init+0x9c>)
 8000bc6:	f008 fe09 	bl	80097dc <HAL_TIM_Base_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8000bd0:	f000 f8aa 	bl	8000d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bd8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000bda:	f107 0310 	add.w	r3, r7, #16
 8000bde:	4619      	mov	r1, r3
 8000be0:	480d      	ldr	r0, [pc, #52]	@ (8000c18 <MX_TIM8_Init+0x9c>)
 8000be2:	f008 fec3 	bl	800996c <HAL_TIM_ConfigClockSource>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8000bec:	f000 f89c 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bf0:	2320      	movs	r3, #32
 8000bf2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <MX_TIM8_Init+0x9c>)
 8000c02:	f009 f8e9 	bl	8009dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8000c0c:	f000 f88c 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	3720      	adds	r7, #32
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	24000190 	.word	0x24000190
 8000c1c:	40010400 	.word	0x40010400

08000c20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c26:	4b0d      	ldr	r3, [pc, #52]	@ (8000c5c <MX_DMA_Init+0x3c>)
 8000c28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c5c <MX_DMA_Init+0x3c>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c36:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <MX_DMA_Init+0x3c>)
 8000c38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	200b      	movs	r0, #11
 8000c4a:	f002 fcf6 	bl	800363a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c4e:	200b      	movs	r0, #11
 8000c50:	f002 fd0d 	bl	800366e <HAL_NVIC_EnableIRQ>

}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	58024400 	.word	0x58024400

08000c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	4b19      	ldr	r3, [pc, #100]	@ (8000ccc <MX_GPIO_Init+0x6c>)
 8000c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6c:	4a17      	ldr	r2, [pc, #92]	@ (8000ccc <MX_GPIO_Init+0x6c>)
 8000c6e:	f043 0304 	orr.w	r3, r3, #4
 8000c72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c76:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <MX_GPIO_Init+0x6c>)
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7c:	f003 0304 	and.w	r3, r3, #4
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c84:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <MX_GPIO_Init+0x6c>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8a:	4a10      	ldr	r2, [pc, #64]	@ (8000ccc <MX_GPIO_Init+0x6c>)
 8000c8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c94:	4b0d      	ldr	r3, [pc, #52]	@ (8000ccc <MX_GPIO_Init+0x6c>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ccc <MX_GPIO_Init+0x6c>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca8:	4a08      	ldr	r2, [pc, #32]	@ (8000ccc <MX_GPIO_Init+0x6c>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <MX_GPIO_Init+0x6c>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	58024400 	.word	0x58024400

08000cd0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ce2:	f002 fcdf 	bl	80036a4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000cf2:	231f      	movs	r3, #31
 8000cf4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000cf6:	2387      	movs	r3, #135	@ 0x87
 8000cf8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d02:	2301      	movs	r3, #1
 8000d04:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d06:	2301      	movs	r3, #1
 8000d08:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d12:	463b      	mov	r3, r7
 8000d14:	4618      	mov	r0, r3
 8000d16:	f002 fcfd 	bl	8003714 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d1a:	2004      	movs	r0, #4
 8000d1c:	f002 fcda 	bl	80036d4 <HAL_MPU_Enable>

}
 8000d20:	bf00      	nop
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2c:	b672      	cpsid	i
}
 8000d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <Error_Handler+0x8>

08000d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <HAL_MspInit+0x30>)
 8000d3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d40:	4a08      	ldr	r2, [pc, #32]	@ (8000d64 <HAL_MspInit+0x30>)
 8000d42:	f043 0302 	orr.w	r3, r3, #2
 8000d46:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <HAL_MspInit+0x30>)
 8000d4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d50:	f003 0302 	and.w	r3, r3, #2
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	58024400 	.word	0x58024400

08000d68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b0ba      	sub	sp, #232	@ 0xe8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	22c0      	movs	r2, #192	@ 0xc0
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f00b f9ef 	bl	800c16c <memset>
  if(hadc->Instance==ADC1)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a48      	ldr	r2, [pc, #288]	@ (8000eb4 <HAL_ADC_MspInit+0x14c>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	f040 8088 	bne.w	8000eaa <HAL_ADC_MspInit+0x142>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d9a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000d9e:	f04f 0300 	mov.w	r3, #0
 8000da2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000da6:	2304      	movs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000daa:	230a      	movs	r3, #10
 8000dac:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000dae:	2302      	movs	r3, #2
 8000db0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000db2:	2302      	movs	r3, #2
 8000db4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000db6:	2302      	movs	r3, #2
 8000db8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000dba:	23c0      	movs	r3, #192	@ 0xc0
 8000dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000dbe:	2320      	movs	r3, #32
 8000dc0:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f006 f805 	bl	8006de0 <HAL_RCCEx_PeriphCLKConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000ddc:	f7ff ffa4 	bl	8000d28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000de0:	4b35      	ldr	r3, [pc, #212]	@ (8000eb8 <HAL_ADC_MspInit+0x150>)
 8000de2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000de6:	4a34      	ldr	r2, [pc, #208]	@ (8000eb8 <HAL_ADC_MspInit+0x150>)
 8000de8:	f043 0320 	orr.w	r3, r3, #32
 8000dec:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000df0:	4b31      	ldr	r3, [pc, #196]	@ (8000eb8 <HAL_ADC_MspInit+0x150>)
 8000df2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000df6:	f003 0320 	and.w	r3, r3, #32
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	4b2e      	ldr	r3, [pc, #184]	@ (8000eb8 <HAL_ADC_MspInit+0x150>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e04:	4a2c      	ldr	r2, [pc, #176]	@ (8000eb8 <HAL_ADC_MspInit+0x150>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb8 <HAL_ADC_MspInit+0x150>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA1     ------> ADC1_INP17
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e22:	2303      	movs	r3, #3
 8000e24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e32:	4619      	mov	r1, r3
 8000e34:	4821      	ldr	r0, [pc, #132]	@ (8000ebc <HAL_ADC_MspInit+0x154>)
 8000e36:	f004 fde9 	bl	8005a0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000e3a:	4b21      	ldr	r3, [pc, #132]	@ (8000ec0 <HAL_ADC_MspInit+0x158>)
 8000e3c:	4a21      	ldr	r2, [pc, #132]	@ (8000ec4 <HAL_ADC_MspInit+0x15c>)
 8000e3e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e40:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec0 <HAL_ADC_MspInit+0x158>)
 8000e42:	2209      	movs	r2, #9
 8000e44:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e46:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec0 <HAL_ADC_MspInit+0x158>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec0 <HAL_ADC_MspInit+0x158>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e52:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec0 <HAL_ADC_MspInit+0x158>)
 8000e54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e58:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <HAL_ADC_MspInit+0x158>)
 8000e5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e60:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e62:	4b17      	ldr	r3, [pc, #92]	@ (8000ec0 <HAL_ADC_MspInit+0x158>)
 8000e64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e68:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <HAL_ADC_MspInit+0x158>)
 8000e6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e70:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e72:	4b13      	ldr	r3, [pc, #76]	@ (8000ec0 <HAL_ADC_MspInit+0x158>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e78:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <HAL_ADC_MspInit+0x158>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e7e:	4810      	ldr	r0, [pc, #64]	@ (8000ec0 <HAL_ADC_MspInit+0x158>)
 8000e80:	f002 fc88 	bl	8003794 <HAL_DMA_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_ADC_MspInit+0x126>
    {
      Error_Handler();
 8000e8a:	f7ff ff4d 	bl	8000d28 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec0 <HAL_ADC_MspInit+0x158>)
 8000e92:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000e94:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <HAL_ADC_MspInit+0x158>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2012      	movs	r0, #18
 8000ea0:	f002 fbcb 	bl	800363a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ea4:	2012      	movs	r0, #18
 8000ea6:	f002 fbe2 	bl	800366e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000eaa:	bf00      	nop
 8000eac:	37e8      	adds	r7, #232	@ 0xe8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40022000 	.word	0x40022000
 8000eb8:	58024400 	.word	0x58024400
 8000ebc:	58020000 	.word	0x58020000
 8000ec0:	24000118 	.word	0x24000118
 8000ec4:	40020010 	.word	0x40020010

08000ec8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8000f04 <HAL_TIM_Base_MspInit+0x3c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d10e      	bne.n	8000ef8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000eda:	4b0b      	ldr	r3, [pc, #44]	@ (8000f08 <HAL_TIM_Base_MspInit+0x40>)
 8000edc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ee0:	4a09      	ldr	r2, [pc, #36]	@ (8000f08 <HAL_TIM_Base_MspInit+0x40>)
 8000ee2:	f043 0302 	orr.w	r3, r3, #2
 8000ee6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000eea:	4b07      	ldr	r3, [pc, #28]	@ (8000f08 <HAL_TIM_Base_MspInit+0x40>)
 8000eec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	40010400 	.word	0x40010400
 8000f08:	58024400 	.word	0x58024400

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <NMI_Handler+0x4>

08000f14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <MemManage_Handler+0x4>

08000f24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <BusFault_Handler+0x4>

08000f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <UsageFault_Handler+0x4>

08000f34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f62:	f000 fbfb 	bl	800175c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f70:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <DMA1_Stream0_IRQHandler+0x10>)
 8000f72:	f003 f9d5 	bl	8004320 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	24000118 	.word	0x24000118

08000f80 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f84:	4802      	ldr	r0, [pc, #8]	@ (8000f90 <ADC_IRQHandler+0x10>)
 8000f86:	f001 f8dd 	bl	8002144 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	240000b4 	.word	0x240000b4

08000f94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f000 fa71 	bl	8001480 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	60f8      	str	r0, [r7, #12]
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	e00a      	b.n	8000fca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fb4:	f3af 8000 	nop.w
 8000fb8:	4601      	mov	r1, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1c5a      	adds	r2, r3, #1
 8000fbe:	60ba      	str	r2, [r7, #8]
 8000fc0:	b2ca      	uxtb	r2, r1
 8000fc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	dbf0      	blt.n	8000fb4 <_read+0x12>
  }

  return len;
 8000fd2:	687b      	ldr	r3, [r7, #4]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	e009      	b.n	8001002 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	60ba      	str	r2, [r7, #8]
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 fac2 	bl	8001580 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	3301      	adds	r3, #1
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	429a      	cmp	r2, r3
 8001008:	dbf1      	blt.n	8000fee <_write+0x12>
  }
  return len;
 800100a:	687b      	ldr	r3, [r7, #4]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <_close>:

int _close(int file)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800101c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800103c:	605a      	str	r2, [r3, #4]
  return 0;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_isatty>:

int _isatty(int file)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001054:	2301      	movs	r3, #1
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001062:	b480      	push	{r7}
 8001064:	b085      	sub	sp, #20
 8001066:	af00      	add	r7, sp, #0
 8001068:	60f8      	str	r0, [r7, #12]
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001084:	4a14      	ldr	r2, [pc, #80]	@ (80010d8 <_sbrk+0x5c>)
 8001086:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <_sbrk+0x60>)
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001090:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d102      	bne.n	800109e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001098:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <_sbrk+0x64>)
 800109a:	4a12      	ldr	r2, [pc, #72]	@ (80010e4 <_sbrk+0x68>)
 800109c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d207      	bcs.n	80010bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ac:	f00b f866 	bl	800c17c <__errno>
 80010b0:	4603      	mov	r3, r0
 80010b2:	220c      	movs	r2, #12
 80010b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010ba:	e009      	b.n	80010d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c2:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a05      	ldr	r2, [pc, #20]	@ (80010e0 <_sbrk+0x64>)
 80010cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	24080000 	.word	0x24080000
 80010dc:	00000400 	.word	0x00000400
 80010e0:	24004400 	.word	0x24004400
 80010e4:	240045f8 	.word	0x240045f8

080010e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010ec:	4b43      	ldr	r3, [pc, #268]	@ (80011fc <SystemInit+0x114>)
 80010ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010f2:	4a42      	ldr	r2, [pc, #264]	@ (80011fc <SystemInit+0x114>)
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010fc:	4b40      	ldr	r3, [pc, #256]	@ (8001200 <SystemInit+0x118>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 030f 	and.w	r3, r3, #15
 8001104:	2b06      	cmp	r3, #6
 8001106:	d807      	bhi.n	8001118 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001108:	4b3d      	ldr	r3, [pc, #244]	@ (8001200 <SystemInit+0x118>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f023 030f 	bic.w	r3, r3, #15
 8001110:	4a3b      	ldr	r2, [pc, #236]	@ (8001200 <SystemInit+0x118>)
 8001112:	f043 0307 	orr.w	r3, r3, #7
 8001116:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001118:	4b3a      	ldr	r3, [pc, #232]	@ (8001204 <SystemInit+0x11c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a39      	ldr	r2, [pc, #228]	@ (8001204 <SystemInit+0x11c>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001124:	4b37      	ldr	r3, [pc, #220]	@ (8001204 <SystemInit+0x11c>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800112a:	4b36      	ldr	r3, [pc, #216]	@ (8001204 <SystemInit+0x11c>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4935      	ldr	r1, [pc, #212]	@ (8001204 <SystemInit+0x11c>)
 8001130:	4b35      	ldr	r3, [pc, #212]	@ (8001208 <SystemInit+0x120>)
 8001132:	4013      	ands	r3, r2
 8001134:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001136:	4b32      	ldr	r3, [pc, #200]	@ (8001200 <SystemInit+0x118>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	2b00      	cmp	r3, #0
 8001140:	d007      	beq.n	8001152 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001142:	4b2f      	ldr	r3, [pc, #188]	@ (8001200 <SystemInit+0x118>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f023 030f 	bic.w	r3, r3, #15
 800114a:	4a2d      	ldr	r2, [pc, #180]	@ (8001200 <SystemInit+0x118>)
 800114c:	f043 0307 	orr.w	r3, r3, #7
 8001150:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001152:	4b2c      	ldr	r3, [pc, #176]	@ (8001204 <SystemInit+0x11c>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001158:	4b2a      	ldr	r3, [pc, #168]	@ (8001204 <SystemInit+0x11c>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800115e:	4b29      	ldr	r3, [pc, #164]	@ (8001204 <SystemInit+0x11c>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001164:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <SystemInit+0x11c>)
 8001166:	4a29      	ldr	r2, [pc, #164]	@ (800120c <SystemInit+0x124>)
 8001168:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800116a:	4b26      	ldr	r3, [pc, #152]	@ (8001204 <SystemInit+0x11c>)
 800116c:	4a28      	ldr	r2, [pc, #160]	@ (8001210 <SystemInit+0x128>)
 800116e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001170:	4b24      	ldr	r3, [pc, #144]	@ (8001204 <SystemInit+0x11c>)
 8001172:	4a28      	ldr	r2, [pc, #160]	@ (8001214 <SystemInit+0x12c>)
 8001174:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001176:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <SystemInit+0x11c>)
 8001178:	2200      	movs	r2, #0
 800117a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800117c:	4b21      	ldr	r3, [pc, #132]	@ (8001204 <SystemInit+0x11c>)
 800117e:	4a25      	ldr	r2, [pc, #148]	@ (8001214 <SystemInit+0x12c>)
 8001180:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001182:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <SystemInit+0x11c>)
 8001184:	2200      	movs	r2, #0
 8001186:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001188:	4b1e      	ldr	r3, [pc, #120]	@ (8001204 <SystemInit+0x11c>)
 800118a:	4a22      	ldr	r2, [pc, #136]	@ (8001214 <SystemInit+0x12c>)
 800118c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800118e:	4b1d      	ldr	r3, [pc, #116]	@ (8001204 <SystemInit+0x11c>)
 8001190:	2200      	movs	r2, #0
 8001192:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001194:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <SystemInit+0x11c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a1a      	ldr	r2, [pc, #104]	@ (8001204 <SystemInit+0x11c>)
 800119a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800119e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011a0:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <SystemInit+0x11c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001218 <SystemInit+0x130>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <SystemInit+0x134>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011b2:	d202      	bcs.n	80011ba <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001220 <SystemInit+0x138>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80011ba:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <SystemInit+0x11c>)
 80011bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d113      	bne.n	80011f0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80011c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <SystemInit+0x11c>)
 80011ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001204 <SystemInit+0x11c>)
 80011d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011d4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011d8:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <SystemInit+0x13c>)
 80011da:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80011de:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80011e0:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <SystemInit+0x11c>)
 80011e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011e6:	4a07      	ldr	r2, [pc, #28]	@ (8001204 <SystemInit+0x11c>)
 80011e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80011ec:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000ed00 	.word	0xe000ed00
 8001200:	52002000 	.word	0x52002000
 8001204:	58024400 	.word	0x58024400
 8001208:	eaf6ed7f 	.word	0xeaf6ed7f
 800120c:	02020200 	.word	0x02020200
 8001210:	01ff0000 	.word	0x01ff0000
 8001214:	01010280 	.word	0x01010280
 8001218:	5c001000 	.word	0x5c001000
 800121c:	ffff0000 	.word	0xffff0000
 8001220:	51008108 	.word	0x51008108
 8001224:	52004000 	.word	0x52004000

08001228 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800122c:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <ExitRun0Mode+0x2c>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	4a08      	ldr	r2, [pc, #32]	@ (8001254 <ExitRun0Mode+0x2c>)
 8001232:	f043 0302 	orr.w	r3, r3, #2
 8001236:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001238:	bf00      	nop
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <ExitRun0Mode+0x2c>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0f9      	beq.n	800123a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	58024800 	.word	0x58024800

08001258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001258:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001294 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800125c:	f7ff ffe4 	bl	8001228 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001260:	f7ff ff42 	bl	80010e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001264:	480c      	ldr	r0, [pc, #48]	@ (8001298 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001266:	490d      	ldr	r1, [pc, #52]	@ (800129c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001268:	4a0d      	ldr	r2, [pc, #52]	@ (80012a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800126c:	e002      	b.n	8001274 <LoopCopyDataInit>

0800126e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001272:	3304      	adds	r3, #4

08001274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001278:	d3f9      	bcc.n	800126e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127a:	4a0a      	ldr	r2, [pc, #40]	@ (80012a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800127c:	4c0a      	ldr	r4, [pc, #40]	@ (80012a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001280:	e001      	b.n	8001286 <LoopFillZerobss>

08001282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001284:	3204      	adds	r2, #4

08001286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001288:	d3fb      	bcc.n	8001282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128a:	f00a ff7d 	bl	800c188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128e:	f7ff fa93 	bl	80007b8 <main>
  bx  lr
 8001292:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001294:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001298:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800129c:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 80012a0:	08020364 	.word	0x08020364
  ldr r2, =_sbss
 80012a4:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 80012a8:	240045f4 	.word	0x240045f4

080012ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC3_IRQHandler>
	...

080012b0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08c      	sub	sp, #48	@ 0x30
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d009      	beq.n	80012d8 <BSP_LED_Init+0x28>
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d006      	beq.n	80012d8 <BSP_LED_Init+0x28>
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d003      	beq.n	80012d8 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80012d0:	f06f 0301 	mvn.w	r3, #1
 80012d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012d6:	e055      	b.n	8001384 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d10f      	bne.n	80012fe <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80012de:	4b2c      	ldr	r3, [pc, #176]	@ (8001390 <BSP_LED_Init+0xe0>)
 80012e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e4:	4a2a      	ldr	r2, [pc, #168]	@ (8001390 <BSP_LED_Init+0xe0>)
 80012e6:	f043 0302 	orr.w	r3, r3, #2
 80012ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ee:	4b28      	ldr	r3, [pc, #160]	@ (8001390 <BSP_LED_Init+0xe0>)
 80012f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	e021      	b.n	8001342 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d10f      	bne.n	8001324 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001304:	4b22      	ldr	r3, [pc, #136]	@ (8001390 <BSP_LED_Init+0xe0>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130a:	4a21      	ldr	r2, [pc, #132]	@ (8001390 <BSP_LED_Init+0xe0>)
 800130c:	f043 0310 	orr.w	r3, r3, #16
 8001310:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001314:	4b1e      	ldr	r3, [pc, #120]	@ (8001390 <BSP_LED_Init+0xe0>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131a:	f003 0310 	and.w	r3, r3, #16
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	e00e      	b.n	8001342 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001324:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <BSP_LED_Init+0xe0>)
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132a:	4a19      	ldr	r2, [pc, #100]	@ (8001390 <BSP_LED_Init+0xe0>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001334:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <BSP_LED_Init+0xe0>)
 8001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	4a13      	ldr	r2, [pc, #76]	@ (8001394 <BSP_LED_Init+0xe4>)
 8001346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800134a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800134c:	2301      	movs	r3, #1
 800134e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	4a0f      	ldr	r2, [pc, #60]	@ (8001398 <BSP_LED_Init+0xe8>)
 800135c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001360:	f107 0218 	add.w	r2, r7, #24
 8001364:	4611      	mov	r1, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f004 fb50 	bl	8005a0c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	4a0a      	ldr	r2, [pc, #40]	@ (8001398 <BSP_LED_Init+0xe8>)
 8001370:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	4a07      	ldr	r2, [pc, #28]	@ (8001394 <BSP_LED_Init+0xe4>)
 8001378:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800137c:	2200      	movs	r2, #0
 800137e:	4619      	mov	r1, r3
 8001380:	f004 fcf4 	bl	8005d6c <HAL_GPIO_WritePin>
  }

  return ret;
 8001384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001386:	4618      	mov	r0, r3
 8001388:	3730      	adds	r7, #48	@ 0x30
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	58024400 	.word	0x58024400
 8001394:	0800ce9c 	.word	0x0800ce9c
 8001398:	2400000c 	.word	0x2400000c

0800139c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	460a      	mov	r2, r1
 80013a6:	71fb      	strb	r3, [r7, #7]
 80013a8:	4613      	mov	r3, r2
 80013aa:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80013ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001468 <BSP_PB_Init+0xcc>)
 80013ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001468 <BSP_PB_Init+0xcc>)
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001468 <BSP_PB_Init+0xcc>)
 80013be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80013ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013ce:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80013d0:	2302      	movs	r3, #2
 80013d2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d4:	2302      	movs	r3, #2
 80013d6:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80013d8:	79bb      	ldrb	r3, [r7, #6]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10c      	bne.n	80013f8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	4a21      	ldr	r2, [pc, #132]	@ (800146c <BSP_PB_Init+0xd0>)
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	f107 020c 	add.w	r2, r7, #12
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f004 fb0b 	bl	8005a0c <HAL_GPIO_Init>
 80013f6:	e031      	b.n	800145c <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80013f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013fc:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	4a1a      	ldr	r2, [pc, #104]	@ (800146c <BSP_PB_Init+0xd0>)
 8001402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001406:	f107 020c 	add.w	r2, r7, #12
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f004 fafd 	bl	8005a0c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	4a16      	ldr	r2, [pc, #88]	@ (8001470 <BSP_PB_Init+0xd4>)
 8001418:	441a      	add	r2, r3
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	4915      	ldr	r1, [pc, #84]	@ (8001474 <BSP_PB_Init+0xd8>)
 800141e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001422:	4619      	mov	r1, r3
 8001424:	4610      	mov	r0, r2
 8001426:	f004 faac 	bl	8005982 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	4a10      	ldr	r2, [pc, #64]	@ (8001470 <BSP_PB_Init+0xd4>)
 8001430:	1898      	adds	r0, r3, r2
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4a10      	ldr	r2, [pc, #64]	@ (8001478 <BSP_PB_Init+0xdc>)
 8001436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143a:	461a      	mov	r2, r3
 800143c:	2100      	movs	r1, #0
 800143e:	f004 fa81 	bl	8005944 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001442:	2028      	movs	r0, #40	@ 0x28
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	4a0d      	ldr	r2, [pc, #52]	@ (800147c <BSP_PB_Init+0xe0>)
 8001448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144c:	2200      	movs	r2, #0
 800144e:	4619      	mov	r1, r3
 8001450:	f002 f8f3 	bl	800363a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001454:	2328      	movs	r3, #40	@ 0x28
 8001456:	4618      	mov	r0, r3
 8001458:	f002 f909 	bl	800366e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3720      	adds	r7, #32
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	58024400 	.word	0x58024400
 800146c:	24000018 	.word	0x24000018
 8001470:	24004404 	.word	0x24004404
 8001474:	0800cea4 	.word	0x0800cea4
 8001478:	2400001c 	.word	0x2400001c
 800147c:	24000020 	.word	0x24000020

08001480 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	4a04      	ldr	r2, [pc, #16]	@ (80014a0 <BSP_PB_IRQHandler+0x20>)
 8001490:	4413      	add	r3, r2
 8001492:	4618      	mov	r0, r3
 8001494:	f004 fa8a 	bl	80059ac <HAL_EXTI_IRQHandler>
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	24004404 	.word	0x24004404

080014a4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80014d2:	f06f 0301 	mvn.w	r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	e018      	b.n	800150c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	2294      	movs	r2, #148	@ 0x94
 80014de:	fb02 f303 	mul.w	r3, r2, r3
 80014e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001518 <BSP_COM_Init+0x5c>)
 80014e4:	4413      	add	r3, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f86e 	bl	80015c8 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	2294      	movs	r2, #148	@ 0x94
 80014f0:	fb02 f303 	mul.w	r3, r2, r3
 80014f4:	4a08      	ldr	r2, [pc, #32]	@ (8001518 <BSP_COM_Init+0x5c>)
 80014f6:	4413      	add	r3, r2
 80014f8:	6839      	ldr	r1, [r7, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f80e 	bl	800151c <MX_USART3_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d002      	beq.n	800150c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001506:	f06f 0303 	mvn.w	r3, #3
 800150a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800150c:	68fb      	ldr	r3, [r7, #12]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2400440c 	.word	0x2400440c

0800151c <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001526:	4b15      	ldr	r3, [pc, #84]	@ (800157c <MX_USART3_Init+0x60>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	220c      	movs	r2, #12
 800153a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	895b      	ldrh	r3, [r3, #10]
 8001540:	461a      	mov	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	891b      	ldrh	r3, [r3, #8]
 8001552:	461a      	mov	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	899b      	ldrh	r3, [r3, #12]
 800155c:	461a      	mov	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001568:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f008 fcc2 	bl	8009ef4 <HAL_UART_Init>
 8001570:	4603      	mov	r3, r0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	24000008 	.word	0x24000008

08001580 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001588:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <__io_putchar+0x30>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	2394      	movs	r3, #148	@ 0x94
 8001590:	fb02 f303 	mul.w	r3, r2, r3
 8001594:	4a07      	ldr	r2, [pc, #28]	@ (80015b4 <__io_putchar+0x34>)
 8001596:	1898      	adds	r0, r3, r2
 8001598:	1d39      	adds	r1, r7, #4
 800159a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800159e:	2201      	movs	r2, #1
 80015a0:	f008 fd02 	bl	8009fa8 <HAL_UART_Transmit>
  return ch;
 80015a4:	687b      	ldr	r3, [r7, #4]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	240044a0 	.word	0x240044a0
 80015b4:	2400440c 	.word	0x2400440c

080015b8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80015bc:	2000      	movs	r0, #0
 80015be:	f7ff ff71 	bl	80014a4 <BSP_PB_Callback>
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	@ 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80015d0:	4b27      	ldr	r3, [pc, #156]	@ (8001670 <COM1_MspInit+0xa8>)
 80015d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015d6:	4a26      	ldr	r2, [pc, #152]	@ (8001670 <COM1_MspInit+0xa8>)
 80015d8:	f043 0308 	orr.w	r3, r3, #8
 80015dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015e0:	4b23      	ldr	r3, [pc, #140]	@ (8001670 <COM1_MspInit+0xa8>)
 80015e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80015ee:	4b20      	ldr	r3, [pc, #128]	@ (8001670 <COM1_MspInit+0xa8>)
 80015f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015f4:	4a1e      	ldr	r2, [pc, #120]	@ (8001670 <COM1_MspInit+0xa8>)
 80015f6:	f043 0308 	orr.w	r3, r3, #8
 80015fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001670 <COM1_MspInit+0xa8>)
 8001600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800160c:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <COM1_MspInit+0xa8>)
 800160e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001612:	4a17      	ldr	r2, [pc, #92]	@ (8001670 <COM1_MspInit+0xa8>)
 8001614:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001618:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800161c:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <COM1_MspInit+0xa8>)
 800161e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001622:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800162a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800162e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001634:	2302      	movs	r3, #2
 8001636:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001638:	2301      	movs	r3, #1
 800163a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800163c:	2307      	movs	r3, #7
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	480b      	ldr	r0, [pc, #44]	@ (8001674 <COM1_MspInit+0xac>)
 8001648:	f004 f9e0 	bl	8005a0c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800164c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001650:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001656:	2307      	movs	r3, #7
 8001658:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	4804      	ldr	r0, [pc, #16]	@ (8001674 <COM1_MspInit+0xac>)
 8001662:	f004 f9d3 	bl	8005a0c <HAL_GPIO_Init>
}
 8001666:	bf00      	nop
 8001668:	3728      	adds	r7, #40	@ 0x28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	58024400 	.word	0x58024400
 8001674:	58020c00 	.word	0x58020c00

08001678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167e:	2003      	movs	r0, #3
 8001680:	f001 ffd0 	bl	8003624 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001684:	f005 f9d6 	bl	8006a34 <HAL_RCC_GetSysClockFreq>
 8001688:	4602      	mov	r2, r0
 800168a:	4b15      	ldr	r3, [pc, #84]	@ (80016e0 <HAL_Init+0x68>)
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	0a1b      	lsrs	r3, r3, #8
 8001690:	f003 030f 	and.w	r3, r3, #15
 8001694:	4913      	ldr	r1, [pc, #76]	@ (80016e4 <HAL_Init+0x6c>)
 8001696:	5ccb      	ldrb	r3, [r1, r3]
 8001698:	f003 031f 	and.w	r3, r3, #31
 800169c:	fa22 f303 	lsr.w	r3, r2, r3
 80016a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016a2:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <HAL_Init+0x68>)
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	4a0e      	ldr	r2, [pc, #56]	@ (80016e4 <HAL_Init+0x6c>)
 80016ac:	5cd3      	ldrb	r3, [r2, r3]
 80016ae:	f003 031f 	and.w	r3, r3, #31
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	fa22 f303 	lsr.w	r3, r2, r3
 80016b8:	4a0b      	ldr	r2, [pc, #44]	@ (80016e8 <HAL_Init+0x70>)
 80016ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016bc:	4a0b      	ldr	r2, [pc, #44]	@ (80016ec <HAL_Init+0x74>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016c2:	2000      	movs	r0, #0
 80016c4:	f000 f814 	bl	80016f0 <HAL_InitTick>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e002      	b.n	80016d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016d2:	f7ff fb2f 	bl	8000d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	58024400 	.word	0x58024400
 80016e4:	0800ce8c 	.word	0x0800ce8c
 80016e8:	24000004 	.word	0x24000004
 80016ec:	24000000 	.word	0x24000000

080016f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016f8:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <HAL_InitTick+0x60>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e021      	b.n	8001748 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001704:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <HAL_InitTick+0x64>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <HAL_InitTick+0x60>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	4619      	mov	r1, r3
 800170e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001712:	fbb3 f3f1 	udiv	r3, r3, r1
 8001716:	fbb2 f3f3 	udiv	r3, r2, r3
 800171a:	4618      	mov	r0, r3
 800171c:	f001 ffb5 	bl	800368a <HAL_SYSTICK_Config>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e00e      	b.n	8001748 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b0f      	cmp	r3, #15
 800172e:	d80a      	bhi.n	8001746 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001730:	2200      	movs	r2, #0
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001738:	f001 ff7f 	bl	800363a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800173c:	4a06      	ldr	r2, [pc, #24]	@ (8001758 <HAL_InitTick+0x68>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001742:	2300      	movs	r3, #0
 8001744:	e000      	b.n	8001748 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	24000028 	.word	0x24000028
 8001754:	24000000 	.word	0x24000000
 8001758:	24000024 	.word	0x24000024

0800175c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001760:	4b06      	ldr	r3, [pc, #24]	@ (800177c <HAL_IncTick+0x20>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <HAL_IncTick+0x24>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4413      	add	r3, r2
 800176c:	4a04      	ldr	r2, [pc, #16]	@ (8001780 <HAL_IncTick+0x24>)
 800176e:	6013      	str	r3, [r2, #0]
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	24000028 	.word	0x24000028
 8001780:	240044a4 	.word	0x240044a4

08001784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return uwTick;
 8001788:	4b03      	ldr	r3, [pc, #12]	@ (8001798 <HAL_GetTick+0x14>)
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	240044a4 	.word	0x240044a4

0800179c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017a0:	4b03      	ldr	r3, [pc, #12]	@ (80017b0 <HAL_GetREVID+0x14>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	0c1b      	lsrs	r3, r3, #16
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	5c001000 	.word	0x5c001000

080017b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	609a      	str	r2, [r3, #8]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	609a      	str	r2, [r3, #8]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800182c:	2b00      	cmp	r3, #0
 800182e:	d107      	bne.n	8001840 <LL_ADC_SetChannelPreselection+0x24>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	0e9b      	lsrs	r3, r3, #26
 8001834:	f003 031f 	and.w	r3, r3, #31
 8001838:	2201      	movs	r2, #1
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	e015      	b.n	800186c <LL_ADC_SetChannelPreselection+0x50>
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	fa93 f3a3 	rbit	r3, r3
 800184a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8001856:	2320      	movs	r3, #32
 8001858:	e003      	b.n	8001862 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	fab3 f383 	clz	r3, r3
 8001860:	b2db      	uxtb	r3, r3
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	2201      	movs	r2, #1
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	69d2      	ldr	r2, [r2, #28]
 8001870:	431a      	orrs	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8001876:	bf00      	nop
 8001878:	371c      	adds	r7, #28
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001882:	b480      	push	{r7}
 8001884:	b087      	sub	sp, #28
 8001886:	af00      	add	r7, sp, #0
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
 800188e:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	3360      	adds	r3, #96	@ 0x60
 8001894:	461a      	mov	r2, r3
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	430b      	orrs	r3, r1
 80018b0:	431a      	orrs	r2, r3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80018b6:	bf00      	nop
 80018b8:	371c      	adds	r7, #28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b085      	sub	sp, #20
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	f003 031f 	and.w	r3, r3, #31
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	fa01 f303 	lsl.w	r3, r1, r3
 80018e2:	431a      	orrs	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	611a      	str	r2, [r3, #16]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b087      	sub	sp, #28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	3360      	adds	r3, #96	@ 0x60
 8001904:	461a      	mov	r2, r3
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	431a      	orrs	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	601a      	str	r2, [r3, #0]
  }
}
 800191e:	bf00      	nop
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001950:	b480      	push	{r7}
 8001952:	b087      	sub	sp, #28
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	3330      	adds	r3, #48	@ 0x30
 8001960:	461a      	mov	r2, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	4413      	add	r3, r2
 800196e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	f003 031f 	and.w	r3, r3, #31
 800197a:	211f      	movs	r1, #31
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	401a      	ands	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	0e9b      	lsrs	r3, r3, #26
 8001988:	f003 011f 	and.w	r1, r3, #31
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	f003 031f 	and.w	r3, r3, #31
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	431a      	orrs	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800199c:	bf00      	nop
 800199e:	371c      	adds	r7, #28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	f023 0203 	bic.w	r2, r3, #3
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	60da      	str	r2, [r3, #12]
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019da:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	3314      	adds	r3, #20
 8001a04:	461a      	mov	r2, r3
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	0e5b      	lsrs	r3, r3, #25
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	4413      	add	r3, r2
 8001a12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	0d1b      	lsrs	r3, r3, #20
 8001a1c:	f003 031f 	and.w	r3, r3, #31
 8001a20:	2107      	movs	r1, #7
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	401a      	ands	r2, r3
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	0d1b      	lsrs	r3, r3, #20
 8001a2e:	f003 031f 	and.w	r3, r3, #31
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a3e:	bf00      	nop
 8001a40:	371c      	adds	r7, #28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
	...

08001a4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a64:	43db      	mvns	r3, r3
 8001a66:	401a      	ands	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f003 0318 	and.w	r3, r3, #24
 8001a6e:	4908      	ldr	r1, [pc, #32]	@ (8001a90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a70:	40d9      	lsrs	r1, r3
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	400b      	ands	r3, r1
 8001a76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	000fffff 	.word	0x000fffff

08001a94 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 031f 	and.w	r3, r3, #31
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	4b04      	ldr	r3, [pc, #16]	@ (8001aec <LL_ADC_DisableDeepPowerDown+0x20>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6093      	str	r3, [r2, #8]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	5fffffc0 	.word	0x5fffffc0

08001af0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b04:	d101      	bne.n	8001b0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	4b05      	ldr	r3, [pc, #20]	@ (8001b3c <LL_ADC_EnableInternalRegulator+0x24>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	6fffffc0 	.word	0x6fffffc0

08001b40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b54:	d101      	bne.n	8001b5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <LL_ADC_Enable+0x24>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	f043 0201 	orr.w	r2, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	7fffffc0 	.word	0x7fffffc0

08001b90 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	4b05      	ldr	r3, [pc, #20]	@ (8001bb4 <LL_ADC_Disable+0x24>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	f043 0202 	orr.w	r2, r3, #2
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	7fffffc0 	.word	0x7fffffc0

08001bb8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <LL_ADC_IsEnabled+0x18>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e000      	b.n	8001bd2 <LL_ADC_IsEnabled+0x1a>
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d101      	bne.n	8001bf6 <LL_ADC_IsDisableOngoing+0x18>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <LL_ADC_IsDisableOngoing+0x1a>
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	4b05      	ldr	r3, [pc, #20]	@ (8001c28 <LL_ADC_REG_StartConversion+0x24>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	f043 0204 	orr.w	r2, r3, #4
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	7fffffc0 	.word	0x7fffffc0

08001c2c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d101      	bne.n	8001c44 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d101      	bne.n	8001c6a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b089      	sub	sp, #36	@ 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e18f      	b.n	8001fb2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d109      	bne.n	8001cb4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff f861 	bl	8000d68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff19 	bl	8001af0 <LL_ADC_IsDeepPowerDownEnabled>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d004      	beq.n	8001cce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff feff 	bl	8001acc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff ff34 	bl	8001b40 <LL_ADC_IsInternalRegulatorEnabled>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d114      	bne.n	8001d08 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff ff18 	bl	8001b18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ce8:	4b87      	ldr	r3, [pc, #540]	@ (8001f08 <HAL_ADC_Init+0x290>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	099b      	lsrs	r3, r3, #6
 8001cee:	4a87      	ldr	r2, [pc, #540]	@ (8001f0c <HAL_ADC_Init+0x294>)
 8001cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf4:	099b      	lsrs	r3, r3, #6
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cfa:	e002      	b.n	8001d02 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1f9      	bne.n	8001cfc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff17 	bl	8001b40 <LL_ADC_IsInternalRegulatorEnabled>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10d      	bne.n	8001d34 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d1c:	f043 0210 	orr.w	r2, r3, #16
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d28:	f043 0201 	orr.w	r2, r3, #1
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff77 	bl	8001c2c <LL_ADC_REG_IsConversionOngoing>
 8001d3e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d44:	f003 0310 	and.w	r3, r3, #16
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f040 8129 	bne.w	8001fa0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f040 8125 	bne.w	8001fa0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d5a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d5e:	f043 0202 	orr.w	r2, r3, #2
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ff24 	bl	8001bb8 <LL_ADC_IsEnabled>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d136      	bne.n	8001de4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a65      	ldr	r2, [pc, #404]	@ (8001f10 <HAL_ADC_Init+0x298>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d004      	beq.n	8001d8a <HAL_ADC_Init+0x112>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a63      	ldr	r2, [pc, #396]	@ (8001f14 <HAL_ADC_Init+0x29c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d10e      	bne.n	8001da8 <HAL_ADC_Init+0x130>
 8001d8a:	4861      	ldr	r0, [pc, #388]	@ (8001f10 <HAL_ADC_Init+0x298>)
 8001d8c:	f7ff ff14 	bl	8001bb8 <LL_ADC_IsEnabled>
 8001d90:	4604      	mov	r4, r0
 8001d92:	4860      	ldr	r0, [pc, #384]	@ (8001f14 <HAL_ADC_Init+0x29c>)
 8001d94:	f7ff ff10 	bl	8001bb8 <LL_ADC_IsEnabled>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	4323      	orrs	r3, r4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	bf0c      	ite	eq
 8001da0:	2301      	moveq	r3, #1
 8001da2:	2300      	movne	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	e008      	b.n	8001dba <HAL_ADC_Init+0x142>
 8001da8:	485b      	ldr	r0, [pc, #364]	@ (8001f18 <HAL_ADC_Init+0x2a0>)
 8001daa:	f7ff ff05 	bl	8001bb8 <LL_ADC_IsEnabled>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	bf0c      	ite	eq
 8001db4:	2301      	moveq	r3, #1
 8001db6:	2300      	movne	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d012      	beq.n	8001de4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a53      	ldr	r2, [pc, #332]	@ (8001f10 <HAL_ADC_Init+0x298>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d004      	beq.n	8001dd2 <HAL_ADC_Init+0x15a>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a51      	ldr	r2, [pc, #324]	@ (8001f14 <HAL_ADC_Init+0x29c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_Init+0x15e>
 8001dd2:	4a52      	ldr	r2, [pc, #328]	@ (8001f1c <HAL_ADC_Init+0x2a4>)
 8001dd4:	e000      	b.n	8001dd8 <HAL_ADC_Init+0x160>
 8001dd6:	4a52      	ldr	r2, [pc, #328]	@ (8001f20 <HAL_ADC_Init+0x2a8>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4610      	mov	r0, r2
 8001de0:	f7ff fce8 	bl	80017b4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001de4:	f7ff fcda 	bl	800179c <HAL_GetREVID>
 8001de8:	4603      	mov	r3, r0
 8001dea:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d914      	bls.n	8001e1c <HAL_ADC_Init+0x1a4>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b10      	cmp	r3, #16
 8001df8:	d110      	bne.n	8001e1c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	7d5b      	ldrb	r3, [r3, #21]
 8001dfe:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e04:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e0a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7f1b      	ldrb	r3, [r3, #28]
 8001e10:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e12:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e14:	f043 030c 	orr.w	r3, r3, #12
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	e00d      	b.n	8001e38 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7d5b      	ldrb	r3, [r3, #21]
 8001e20:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e26:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e2c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	7f1b      	ldrb	r3, [r3, #28]
 8001e32:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	7f1b      	ldrb	r3, [r3, #28]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d106      	bne.n	8001e4e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	045b      	lsls	r3, r3, #17
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d009      	beq.n	8001e6a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e62:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	4b2c      	ldr	r3, [pc, #176]	@ (8001f24 <HAL_ADC_Init+0x2ac>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6812      	ldr	r2, [r2, #0]
 8001e78:	69b9      	ldr	r1, [r7, #24]
 8001e7a:	430b      	orrs	r3, r1
 8001e7c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fed2 	bl	8001c2c <LL_ADC_REG_IsConversionOngoing>
 8001e88:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fedf 	bl	8001c52 <LL_ADC_INJ_IsConversionOngoing>
 8001e94:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d15f      	bne.n	8001f5c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d15c      	bne.n	8001f5c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	7d1b      	ldrb	r3, [r3, #20]
 8001ea6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f28 <HAL_ADC_Init+0x2b0>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6812      	ldr	r2, [r2, #0]
 8001ebe:	69b9      	ldr	r1, [r7, #24]
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d130      	bne.n	8001f30 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691a      	ldr	r2, [r3, #16]
 8001eda:	4b14      	ldr	r3, [pc, #80]	@ (8001f2c <HAL_ADC_Init+0x2b4>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ee2:	3a01      	subs	r2, #1
 8001ee4:	0411      	lsls	r1, r2, #16
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001eea:	4311      	orrs	r1, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001ef0:	4311      	orrs	r1, r2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	611a      	str	r2, [r3, #16]
 8001f04:	e01c      	b.n	8001f40 <HAL_ADC_Init+0x2c8>
 8001f06:	bf00      	nop
 8001f08:	24000000 	.word	0x24000000
 8001f0c:	053e2d63 	.word	0x053e2d63
 8001f10:	40022000 	.word	0x40022000
 8001f14:	40022100 	.word	0x40022100
 8001f18:	58026000 	.word	0x58026000
 8001f1c:	40022300 	.word	0x40022300
 8001f20:	58026300 	.word	0x58026300
 8001f24:	fff0c003 	.word	0xfff0c003
 8001f28:	ffffbffc 	.word	0xffffbffc
 8001f2c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691a      	ldr	r2, [r3, #16]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0201 	bic.w	r2, r2, #1
 8001f3e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 ffba 	bl	8002ed0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d10c      	bne.n	8001f7e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	f023 010f 	bic.w	r1, r3, #15
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	1e5a      	subs	r2, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f7c:	e007      	b.n	8001f8e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 020f 	bic.w	r2, r2, #15
 8001f8c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f92:	f023 0303 	bic.w	r3, r3, #3
 8001f96:	f043 0201 	orr.w	r2, r3, #1
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f9e:	e007      	b.n	8001fb0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa4:	f043 0210 	orr.w	r2, r3, #16
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3724      	adds	r7, #36	@ 0x24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd90      	pop	{r4, r7, pc}
 8001fba:	bf00      	nop

08001fbc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a55      	ldr	r2, [pc, #340]	@ (8002124 <HAL_ADC_Start_DMA+0x168>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d004      	beq.n	8001fdc <HAL_ADC_Start_DMA+0x20>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a54      	ldr	r2, [pc, #336]	@ (8002128 <HAL_ADC_Start_DMA+0x16c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d101      	bne.n	8001fe0 <HAL_ADC_Start_DMA+0x24>
 8001fdc:	4b53      	ldr	r3, [pc, #332]	@ (800212c <HAL_ADC_Start_DMA+0x170>)
 8001fde:	e000      	b.n	8001fe2 <HAL_ADC_Start_DMA+0x26>
 8001fe0:	4b53      	ldr	r3, [pc, #332]	@ (8002130 <HAL_ADC_Start_DMA+0x174>)
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff fd56 	bl	8001a94 <LL_ADC_GetMultimode>
 8001fe8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fe1c 	bl	8001c2c <LL_ADC_REG_IsConversionOngoing>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f040 808c 	bne.w	8002114 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_ADC_Start_DMA+0x4e>
 8002006:	2302      	movs	r3, #2
 8002008:	e087      	b.n	800211a <HAL_ADC_Start_DMA+0x15e>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d005      	beq.n	8002024 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	2b05      	cmp	r3, #5
 800201c:	d002      	beq.n	8002024 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	2b09      	cmp	r3, #9
 8002022:	d170      	bne.n	8002106 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 fdd5 	bl	8002bd4 <ADC_Enable>
 800202a:	4603      	mov	r3, r0
 800202c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800202e:	7dfb      	ldrb	r3, [r7, #23]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d163      	bne.n	80020fc <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002038:	4b3e      	ldr	r3, [pc, #248]	@ (8002134 <HAL_ADC_Start_DMA+0x178>)
 800203a:	4013      	ands	r3, r2
 800203c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a37      	ldr	r2, [pc, #220]	@ (8002128 <HAL_ADC_Start_DMA+0x16c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d002      	beq.n	8002054 <HAL_ADC_Start_DMA+0x98>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	e000      	b.n	8002056 <HAL_ADC_Start_DMA+0x9a>
 8002054:	4b33      	ldr	r3, [pc, #204]	@ (8002124 <HAL_ADC_Start_DMA+0x168>)
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	4293      	cmp	r3, r2
 800205c:	d002      	beq.n	8002064 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d105      	bne.n	8002070 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002068:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002074:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002080:	f023 0206 	bic.w	r2, r3, #6
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	659a      	str	r2, [r3, #88]	@ 0x58
 8002088:	e002      	b.n	8002090 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002094:	4a28      	ldr	r2, [pc, #160]	@ (8002138 <HAL_ADC_Start_DMA+0x17c>)
 8002096:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209c:	4a27      	ldr	r2, [pc, #156]	@ (800213c <HAL_ADC_Start_DMA+0x180>)
 800209e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a4:	4a26      	ldr	r2, [pc, #152]	@ (8002140 <HAL_ADC_Start_DMA+0x184>)
 80020a6:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	221c      	movs	r2, #28
 80020ae:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0210 	orr.w	r2, r2, #16
 80020c6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d0:	4619      	mov	r1, r3
 80020d2:	4610      	mov	r0, r2
 80020d4:	f7ff fc68 	bl	80019a8 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	3340      	adds	r3, #64	@ 0x40
 80020e2:	4619      	mov	r1, r3
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f001 feb0 	bl	8003e4c <HAL_DMA_Start_IT>
 80020ec:	4603      	mov	r3, r0
 80020ee:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fd85 	bl	8001c04 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80020fa:	e00d      	b.n	8002118 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002104:	e008      	b.n	8002118 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002112:	e001      	b.n	8002118 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002114:	2302      	movs	r3, #2
 8002116:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002118:	7dfb      	ldrb	r3, [r7, #23]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40022000 	.word	0x40022000
 8002128:	40022100 	.word	0x40022100
 800212c:	40022300 	.word	0x40022300
 8002130:	58026300 	.word	0x58026300
 8002134:	fffff0fe 	.word	0xfffff0fe
 8002138:	08002da7 	.word	0x08002da7
 800213c:	08002e7f 	.word	0x08002e7f
 8002140:	08002e9b 	.word	0x08002e9b

08002144 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	@ 0x28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800214c:	2300      	movs	r3, #0
 800214e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a87      	ldr	r2, [pc, #540]	@ (8002384 <HAL_ADC_IRQHandler+0x240>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d004      	beq.n	8002174 <HAL_ADC_IRQHandler+0x30>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a86      	ldr	r2, [pc, #536]	@ (8002388 <HAL_ADC_IRQHandler+0x244>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d101      	bne.n	8002178 <HAL_ADC_IRQHandler+0x34>
 8002174:	4b85      	ldr	r3, [pc, #532]	@ (800238c <HAL_ADC_IRQHandler+0x248>)
 8002176:	e000      	b.n	800217a <HAL_ADC_IRQHandler+0x36>
 8002178:	4b85      	ldr	r3, [pc, #532]	@ (8002390 <HAL_ADC_IRQHandler+0x24c>)
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fc8a 	bl	8001a94 <LL_ADC_GetMultimode>
 8002180:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d017      	beq.n	80021bc <HAL_ADC_IRQHandler+0x78>
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d012      	beq.n	80021bc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d105      	bne.n	80021ae <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f001 f880 	bl	80032b4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2202      	movs	r2, #2
 80021ba:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f003 0304 	and.w	r3, r3, #4
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d004      	beq.n	80021d0 <HAL_ADC_IRQHandler+0x8c>
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10a      	bne.n	80021e6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 8083 	beq.w	80022e2 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d07d      	beq.n	80022e2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ea:	f003 0310 	and.w	r3, r3, #16
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d105      	bne.n	80021fe <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fb91 	bl	800192a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d062      	beq.n	80022d4 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a5d      	ldr	r2, [pc, #372]	@ (8002388 <HAL_ADC_IRQHandler+0x244>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d002      	beq.n	800221e <HAL_ADC_IRQHandler+0xda>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	e000      	b.n	8002220 <HAL_ADC_IRQHandler+0xdc>
 800221e:	4b59      	ldr	r3, [pc, #356]	@ (8002384 <HAL_ADC_IRQHandler+0x240>)
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	4293      	cmp	r3, r2
 8002226:	d008      	beq.n	800223a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b05      	cmp	r3, #5
 8002232:	d002      	beq.n	800223a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2b09      	cmp	r3, #9
 8002238:	d104      	bne.n	8002244 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	623b      	str	r3, [r7, #32]
 8002242:	e00c      	b.n	800225e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a4f      	ldr	r2, [pc, #316]	@ (8002388 <HAL_ADC_IRQHandler+0x244>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d002      	beq.n	8002254 <HAL_ADC_IRQHandler+0x110>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	e000      	b.n	8002256 <HAL_ADC_IRQHandler+0x112>
 8002254:	4b4b      	ldr	r3, [pc, #300]	@ (8002384 <HAL_ADC_IRQHandler+0x240>)
 8002256:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d135      	bne.n	80022d4 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b08      	cmp	r3, #8
 8002274:	d12e      	bne.n	80022d4 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fcd6 	bl	8001c2c <LL_ADC_REG_IsConversionOngoing>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d11a      	bne.n	80022bc <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 020c 	bic.w	r2, r2, #12
 8002294:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800229a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d112      	bne.n	80022d4 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b2:	f043 0201 	orr.w	r2, r3, #1
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	655a      	str	r2, [r3, #84]	@ 0x54
 80022ba:	e00b      	b.n	80022d4 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c0:	f043 0210 	orr.w	r2, r3, #16
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022cc:	f043 0201 	orr.w	r2, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7fe fa2b 	bl	8000730 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	220c      	movs	r2, #12
 80022e0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	f003 0320 	and.w	r3, r3, #32
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d004      	beq.n	80022f6 <HAL_ADC_IRQHandler+0x1b2>
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	f003 0320 	and.w	r3, r3, #32
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10b      	bne.n	800230e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 80a0 	beq.w	8002442 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 809a 	beq.w	8002442 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002312:	f003 0310 	and.w	r3, r3, #16
 8002316:	2b00      	cmp	r3, #0
 8002318:	d105      	bne.n	8002326 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800231e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fb4f 	bl	80019ce <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002330:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff faf7 	bl	800192a <LL_ADC_REG_IsTriggerSourceSWStart>
 800233c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a11      	ldr	r2, [pc, #68]	@ (8002388 <HAL_ADC_IRQHandler+0x244>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d002      	beq.n	800234e <HAL_ADC_IRQHandler+0x20a>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	e000      	b.n	8002350 <HAL_ADC_IRQHandler+0x20c>
 800234e:	4b0d      	ldr	r3, [pc, #52]	@ (8002384 <HAL_ADC_IRQHandler+0x240>)
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	4293      	cmp	r3, r2
 8002356:	d008      	beq.n	800236a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d005      	beq.n	800236a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2b06      	cmp	r3, #6
 8002362:	d002      	beq.n	800236a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2b07      	cmp	r3, #7
 8002368:	d104      	bne.n	8002374 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	623b      	str	r3, [r7, #32]
 8002372:	e014      	b.n	800239e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a03      	ldr	r2, [pc, #12]	@ (8002388 <HAL_ADC_IRQHandler+0x244>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00a      	beq.n	8002394 <HAL_ADC_IRQHandler+0x250>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	e008      	b.n	8002396 <HAL_ADC_IRQHandler+0x252>
 8002384:	40022000 	.word	0x40022000
 8002388:	40022100 	.word	0x40022100
 800238c:	40022300 	.word	0x40022300
 8002390:	58026300 	.word	0x58026300
 8002394:	4b84      	ldr	r3, [pc, #528]	@ (80025a8 <HAL_ADC_IRQHandler+0x464>)
 8002396:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d047      	beq.n	8002434 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d007      	beq.n	80023be <HAL_ADC_IRQHandler+0x27a>
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d03f      	beq.n	8002434 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d13a      	bne.n	8002434 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023c8:	2b40      	cmp	r3, #64	@ 0x40
 80023ca:	d133      	bne.n	8002434 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d12e      	bne.n	8002434 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fc39 	bl	8001c52 <LL_ADC_INJ_IsConversionOngoing>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d11a      	bne.n	800241c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80023f4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800240a:	2b00      	cmp	r3, #0
 800240c:	d112      	bne.n	8002434 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002412:	f043 0201 	orr.w	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	655a      	str	r2, [r3, #84]	@ 0x54
 800241a:	e00b      	b.n	8002434 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002420:	f043 0210 	orr.w	r2, r3, #16
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800242c:	f043 0201 	orr.w	r2, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 ff15 	bl	8003264 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2260      	movs	r2, #96	@ 0x60
 8002440:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002448:	2b00      	cmp	r3, #0
 800244a:	d011      	beq.n	8002470 <HAL_ADC_IRQHandler+0x32c>
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00c      	beq.n	8002470 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f8b2 	bl	80025cc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2280      	movs	r2, #128	@ 0x80
 800246e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002476:	2b00      	cmp	r3, #0
 8002478:	d012      	beq.n	80024a0 <HAL_ADC_IRQHandler+0x35c>
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00d      	beq.n	80024a0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002488:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 fefb 	bl	800328c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800249e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d012      	beq.n	80024d0 <HAL_ADC_IRQHandler+0x38c>
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00d      	beq.n	80024d0 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 feed 	bl	80032a0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d043      	beq.n	8002562 <HAL_ADC_IRQHandler+0x41e>
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	f003 0310 	and.w	r3, r3, #16
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d03e      	beq.n	8002562 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d102      	bne.n	80024f2 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80024ec:	2301      	movs	r3, #1
 80024ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80024f0:	e021      	b.n	8002536 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d015      	beq.n	8002524 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a2a      	ldr	r2, [pc, #168]	@ (80025a8 <HAL_ADC_IRQHandler+0x464>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d004      	beq.n	800250c <HAL_ADC_IRQHandler+0x3c8>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a29      	ldr	r2, [pc, #164]	@ (80025ac <HAL_ADC_IRQHandler+0x468>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d101      	bne.n	8002510 <HAL_ADC_IRQHandler+0x3cc>
 800250c:	4b28      	ldr	r3, [pc, #160]	@ (80025b0 <HAL_ADC_IRQHandler+0x46c>)
 800250e:	e000      	b.n	8002512 <HAL_ADC_IRQHandler+0x3ce>
 8002510:	4b28      	ldr	r3, [pc, #160]	@ (80025b4 <HAL_ADC_IRQHandler+0x470>)
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff facc 	bl	8001ab0 <LL_ADC_GetMultiDMATransfer>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00b      	beq.n	8002536 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800251e:	2301      	movs	r3, #1
 8002520:	627b      	str	r3, [r7, #36]	@ 0x24
 8002522:	e008      	b.n	8002536 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002532:	2301      	movs	r3, #1
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	2b01      	cmp	r3, #1
 800253a:	d10e      	bne.n	800255a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002540:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800254c:	f043 0202 	orr.w	r2, r3, #2
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f843 	bl	80025e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2210      	movs	r2, #16
 8002560:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002568:	2b00      	cmp	r3, #0
 800256a:	d018      	beq.n	800259e <HAL_ADC_IRQHandler+0x45a>
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002572:	2b00      	cmp	r3, #0
 8002574:	d013      	beq.n	800259e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800257a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002586:	f043 0208 	orr.w	r2, r3, #8
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002596:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 fe6d 	bl	8003278 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800259e:	bf00      	nop
 80025a0:	3728      	adds	r7, #40	@ 0x28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40022000 	.word	0x40022000
 80025ac:	40022100 	.word	0x40022100
 80025b0:	40022300 	.word	0x40022300
 80025b4:	58026300 	.word	0x58026300

080025b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b08d      	sub	sp, #52	@ 0x34
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4a65      	ldr	r2, [pc, #404]	@ (80027a4 <HAL_ADC_ConfigChannel+0x1b0>)
 800260e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_ADC_ConfigChannel+0x2a>
 800261a:	2302      	movs	r3, #2
 800261c:	e2c7      	b.n	8002bae <HAL_ADC_ConfigChannel+0x5ba>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fafe 	bl	8001c2c <LL_ADC_REG_IsConversionOngoing>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	f040 82ac 	bne.w	8002b90 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	db2c      	blt.n	800269a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002648:	2b00      	cmp	r3, #0
 800264a:	d108      	bne.n	800265e <HAL_ADC_ConfigChannel+0x6a>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	0e9b      	lsrs	r3, r3, #26
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	2201      	movs	r2, #1
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	e016      	b.n	800268c <HAL_ADC_ConfigChannel+0x98>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	613b      	str	r3, [r7, #16]
  return result;
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8002676:	2320      	movs	r3, #32
 8002678:	e003      	b.n	8002682 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	fab3 f383 	clz	r3, r3
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f003 031f 	and.w	r3, r3, #31
 8002686:	2201      	movs	r2, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	69d1      	ldr	r1, [r2, #28]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	430b      	orrs	r3, r1
 8002698:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6859      	ldr	r1, [r3, #4]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	f7ff f952 	bl	8001950 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fabb 	bl	8001c2c <LL_ADC_REG_IsConversionOngoing>
 80026b6:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff fac8 	bl	8001c52 <LL_ADC_INJ_IsConversionOngoing>
 80026c2:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f040 80b8 	bne.w	800283c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f040 80b4 	bne.w	800283c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	6819      	ldr	r1, [r3, #0]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	461a      	mov	r2, r3
 80026e2:	f7ff f987 	bl	80019f4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026e6:	4b30      	ldr	r3, [pc, #192]	@ (80027a8 <HAL_ADC_ConfigChannel+0x1b4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80026ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026f2:	d10b      	bne.n	800270c <HAL_ADC_ConfigChannel+0x118>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	695a      	ldr	r2, [r3, #20]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	089b      	lsrs	r3, r3, #2
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	e01d      	b.n	8002748 <HAL_ADC_ConfigChannel+0x154>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f003 0310 	and.w	r3, r3, #16
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10b      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x13e>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	089b      	lsrs	r3, r3, #2
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	e00a      	b.n	8002748 <HAL_ADC_ConfigChannel+0x154>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	695a      	ldr	r2, [r3, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	089b      	lsrs	r3, r3, #2
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	2b04      	cmp	r3, #4
 8002750:	d02c      	beq.n	80027ac <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6919      	ldr	r1, [r3, #16]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	f7ff f88f 	bl	8001882 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	6919      	ldr	r1, [r3, #16]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	7e5b      	ldrb	r3, [r3, #25]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d102      	bne.n	800277a <HAL_ADC_ConfigChannel+0x186>
 8002774:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002778:	e000      	b.n	800277c <HAL_ADC_ConfigChannel+0x188>
 800277a:	2300      	movs	r3, #0
 800277c:	461a      	mov	r2, r3
 800277e:	f7ff f8b9 	bl	80018f4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6919      	ldr	r1, [r3, #16]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	7e1b      	ldrb	r3, [r3, #24]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d102      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x1a4>
 8002792:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002796:	e000      	b.n	800279a <HAL_ADC_ConfigChannel+0x1a6>
 8002798:	2300      	movs	r3, #0
 800279a:	461a      	mov	r2, r3
 800279c:	f7ff f891 	bl	80018c2 <LL_ADC_SetDataRightShift>
 80027a0:	e04c      	b.n	800283c <HAL_ADC_ConfigChannel+0x248>
 80027a2:	bf00      	nop
 80027a4:	47ff0000 	.word	0x47ff0000
 80027a8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	069b      	lsls	r3, r3, #26
 80027bc:	429a      	cmp	r2, r3
 80027be:	d107      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027ce:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	069b      	lsls	r3, r3, #26
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d107      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027f2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	069b      	lsls	r3, r3, #26
 8002804:	429a      	cmp	r2, r3
 8002806:	d107      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002816:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800281e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	069b      	lsls	r3, r3, #26
 8002828:	429a      	cmp	r2, r3
 800282a:	d107      	bne.n	800283c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800283a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff f9b9 	bl	8001bb8 <LL_ADC_IsEnabled>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	f040 81aa 	bne.w	8002ba2 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	6819      	ldr	r1, [r3, #0]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	461a      	mov	r2, r3
 800285c:	f7ff f8f6 	bl	8001a4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4a87      	ldr	r2, [pc, #540]	@ (8002a84 <HAL_ADC_ConfigChannel+0x490>)
 8002866:	4293      	cmp	r3, r2
 8002868:	f040 809a 	bne.w	80029a0 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4984      	ldr	r1, [pc, #528]	@ (8002a88 <HAL_ADC_ConfigChannel+0x494>)
 8002876:	428b      	cmp	r3, r1
 8002878:	d147      	bne.n	800290a <HAL_ADC_ConfigChannel+0x316>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4983      	ldr	r1, [pc, #524]	@ (8002a8c <HAL_ADC_ConfigChannel+0x498>)
 8002880:	428b      	cmp	r3, r1
 8002882:	d040      	beq.n	8002906 <HAL_ADC_ConfigChannel+0x312>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4981      	ldr	r1, [pc, #516]	@ (8002a90 <HAL_ADC_ConfigChannel+0x49c>)
 800288a:	428b      	cmp	r3, r1
 800288c:	d039      	beq.n	8002902 <HAL_ADC_ConfigChannel+0x30e>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4980      	ldr	r1, [pc, #512]	@ (8002a94 <HAL_ADC_ConfigChannel+0x4a0>)
 8002894:	428b      	cmp	r3, r1
 8002896:	d032      	beq.n	80028fe <HAL_ADC_ConfigChannel+0x30a>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	497e      	ldr	r1, [pc, #504]	@ (8002a98 <HAL_ADC_ConfigChannel+0x4a4>)
 800289e:	428b      	cmp	r3, r1
 80028a0:	d02b      	beq.n	80028fa <HAL_ADC_ConfigChannel+0x306>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	497d      	ldr	r1, [pc, #500]	@ (8002a9c <HAL_ADC_ConfigChannel+0x4a8>)
 80028a8:	428b      	cmp	r3, r1
 80028aa:	d024      	beq.n	80028f6 <HAL_ADC_ConfigChannel+0x302>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	497b      	ldr	r1, [pc, #492]	@ (8002aa0 <HAL_ADC_ConfigChannel+0x4ac>)
 80028b2:	428b      	cmp	r3, r1
 80028b4:	d01d      	beq.n	80028f2 <HAL_ADC_ConfigChannel+0x2fe>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	497a      	ldr	r1, [pc, #488]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x4b0>)
 80028bc:	428b      	cmp	r3, r1
 80028be:	d016      	beq.n	80028ee <HAL_ADC_ConfigChannel+0x2fa>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4978      	ldr	r1, [pc, #480]	@ (8002aa8 <HAL_ADC_ConfigChannel+0x4b4>)
 80028c6:	428b      	cmp	r3, r1
 80028c8:	d00f      	beq.n	80028ea <HAL_ADC_ConfigChannel+0x2f6>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4977      	ldr	r1, [pc, #476]	@ (8002aac <HAL_ADC_ConfigChannel+0x4b8>)
 80028d0:	428b      	cmp	r3, r1
 80028d2:	d008      	beq.n	80028e6 <HAL_ADC_ConfigChannel+0x2f2>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4975      	ldr	r1, [pc, #468]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x4bc>)
 80028da:	428b      	cmp	r3, r1
 80028dc:	d101      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x2ee>
 80028de:	4b75      	ldr	r3, [pc, #468]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x4c0>)
 80028e0:	e05a      	b.n	8002998 <HAL_ADC_ConfigChannel+0x3a4>
 80028e2:	2300      	movs	r3, #0
 80028e4:	e058      	b.n	8002998 <HAL_ADC_ConfigChannel+0x3a4>
 80028e6:	4b74      	ldr	r3, [pc, #464]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x4c4>)
 80028e8:	e056      	b.n	8002998 <HAL_ADC_ConfigChannel+0x3a4>
 80028ea:	4b74      	ldr	r3, [pc, #464]	@ (8002abc <HAL_ADC_ConfigChannel+0x4c8>)
 80028ec:	e054      	b.n	8002998 <HAL_ADC_ConfigChannel+0x3a4>
 80028ee:	4b6e      	ldr	r3, [pc, #440]	@ (8002aa8 <HAL_ADC_ConfigChannel+0x4b4>)
 80028f0:	e052      	b.n	8002998 <HAL_ADC_ConfigChannel+0x3a4>
 80028f2:	4b6c      	ldr	r3, [pc, #432]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x4b0>)
 80028f4:	e050      	b.n	8002998 <HAL_ADC_ConfigChannel+0x3a4>
 80028f6:	4b72      	ldr	r3, [pc, #456]	@ (8002ac0 <HAL_ADC_ConfigChannel+0x4cc>)
 80028f8:	e04e      	b.n	8002998 <HAL_ADC_ConfigChannel+0x3a4>
 80028fa:	4b72      	ldr	r3, [pc, #456]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x4d0>)
 80028fc:	e04c      	b.n	8002998 <HAL_ADC_ConfigChannel+0x3a4>
 80028fe:	4b72      	ldr	r3, [pc, #456]	@ (8002ac8 <HAL_ADC_ConfigChannel+0x4d4>)
 8002900:	e04a      	b.n	8002998 <HAL_ADC_ConfigChannel+0x3a4>
 8002902:	4b72      	ldr	r3, [pc, #456]	@ (8002acc <HAL_ADC_ConfigChannel+0x4d8>)
 8002904:	e048      	b.n	8002998 <HAL_ADC_ConfigChannel+0x3a4>
 8002906:	2301      	movs	r3, #1
 8002908:	e046      	b.n	8002998 <HAL_ADC_ConfigChannel+0x3a4>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4970      	ldr	r1, [pc, #448]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x4dc>)
 8002910:	428b      	cmp	r3, r1
 8002912:	d140      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x3a2>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	495c      	ldr	r1, [pc, #368]	@ (8002a8c <HAL_ADC_ConfigChannel+0x498>)
 800291a:	428b      	cmp	r3, r1
 800291c:	d039      	beq.n	8002992 <HAL_ADC_ConfigChannel+0x39e>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	495b      	ldr	r1, [pc, #364]	@ (8002a90 <HAL_ADC_ConfigChannel+0x49c>)
 8002924:	428b      	cmp	r3, r1
 8002926:	d032      	beq.n	800298e <HAL_ADC_ConfigChannel+0x39a>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4959      	ldr	r1, [pc, #356]	@ (8002a94 <HAL_ADC_ConfigChannel+0x4a0>)
 800292e:	428b      	cmp	r3, r1
 8002930:	d02b      	beq.n	800298a <HAL_ADC_ConfigChannel+0x396>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4958      	ldr	r1, [pc, #352]	@ (8002a98 <HAL_ADC_ConfigChannel+0x4a4>)
 8002938:	428b      	cmp	r3, r1
 800293a:	d024      	beq.n	8002986 <HAL_ADC_ConfigChannel+0x392>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4956      	ldr	r1, [pc, #344]	@ (8002a9c <HAL_ADC_ConfigChannel+0x4a8>)
 8002942:	428b      	cmp	r3, r1
 8002944:	d01d      	beq.n	8002982 <HAL_ADC_ConfigChannel+0x38e>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4955      	ldr	r1, [pc, #340]	@ (8002aa0 <HAL_ADC_ConfigChannel+0x4ac>)
 800294c:	428b      	cmp	r3, r1
 800294e:	d016      	beq.n	800297e <HAL_ADC_ConfigChannel+0x38a>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4953      	ldr	r1, [pc, #332]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x4b0>)
 8002956:	428b      	cmp	r3, r1
 8002958:	d00f      	beq.n	800297a <HAL_ADC_ConfigChannel+0x386>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4952      	ldr	r1, [pc, #328]	@ (8002aa8 <HAL_ADC_ConfigChannel+0x4b4>)
 8002960:	428b      	cmp	r3, r1
 8002962:	d008      	beq.n	8002976 <HAL_ADC_ConfigChannel+0x382>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4951      	ldr	r1, [pc, #324]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x4bc>)
 800296a:	428b      	cmp	r3, r1
 800296c:	d101      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x37e>
 800296e:	4b51      	ldr	r3, [pc, #324]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x4c0>)
 8002970:	e012      	b.n	8002998 <HAL_ADC_ConfigChannel+0x3a4>
 8002972:	2300      	movs	r3, #0
 8002974:	e010      	b.n	8002998 <HAL_ADC_ConfigChannel+0x3a4>
 8002976:	4b51      	ldr	r3, [pc, #324]	@ (8002abc <HAL_ADC_ConfigChannel+0x4c8>)
 8002978:	e00e      	b.n	8002998 <HAL_ADC_ConfigChannel+0x3a4>
 800297a:	4b4b      	ldr	r3, [pc, #300]	@ (8002aa8 <HAL_ADC_ConfigChannel+0x4b4>)
 800297c:	e00c      	b.n	8002998 <HAL_ADC_ConfigChannel+0x3a4>
 800297e:	4b49      	ldr	r3, [pc, #292]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x4b0>)
 8002980:	e00a      	b.n	8002998 <HAL_ADC_ConfigChannel+0x3a4>
 8002982:	4b4f      	ldr	r3, [pc, #316]	@ (8002ac0 <HAL_ADC_ConfigChannel+0x4cc>)
 8002984:	e008      	b.n	8002998 <HAL_ADC_ConfigChannel+0x3a4>
 8002986:	4b4f      	ldr	r3, [pc, #316]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x4d0>)
 8002988:	e006      	b.n	8002998 <HAL_ADC_ConfigChannel+0x3a4>
 800298a:	4b4f      	ldr	r3, [pc, #316]	@ (8002ac8 <HAL_ADC_ConfigChannel+0x4d4>)
 800298c:	e004      	b.n	8002998 <HAL_ADC_ConfigChannel+0x3a4>
 800298e:	4b4f      	ldr	r3, [pc, #316]	@ (8002acc <HAL_ADC_ConfigChannel+0x4d8>)
 8002990:	e002      	b.n	8002998 <HAL_ADC_ConfigChannel+0x3a4>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <HAL_ADC_ConfigChannel+0x3a4>
 8002996:	2300      	movs	r3, #0
 8002998:	4619      	mov	r1, r3
 800299a:	4610      	mov	r0, r2
 800299c:	f7fe ff3e 	bl	800181c <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f280 80fc 	bge.w	8002ba2 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a36      	ldr	r2, [pc, #216]	@ (8002a88 <HAL_ADC_ConfigChannel+0x494>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d004      	beq.n	80029be <HAL_ADC_ConfigChannel+0x3ca>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a45      	ldr	r2, [pc, #276]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x4dc>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d101      	bne.n	80029c2 <HAL_ADC_ConfigChannel+0x3ce>
 80029be:	4b45      	ldr	r3, [pc, #276]	@ (8002ad4 <HAL_ADC_ConfigChannel+0x4e0>)
 80029c0:	e000      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x3d0>
 80029c2:	4b45      	ldr	r3, [pc, #276]	@ (8002ad8 <HAL_ADC_ConfigChannel+0x4e4>)
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fe ff1b 	bl	8001800 <LL_ADC_GetCommonPathInternalCh>
 80029ca:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002a88 <HAL_ADC_ConfigChannel+0x494>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d004      	beq.n	80029e0 <HAL_ADC_ConfigChannel+0x3ec>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a3d      	ldr	r2, [pc, #244]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x4dc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d10e      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x40a>
 80029e0:	4829      	ldr	r0, [pc, #164]	@ (8002a88 <HAL_ADC_ConfigChannel+0x494>)
 80029e2:	f7ff f8e9 	bl	8001bb8 <LL_ADC_IsEnabled>
 80029e6:	4604      	mov	r4, r0
 80029e8:	4839      	ldr	r0, [pc, #228]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x4dc>)
 80029ea:	f7ff f8e5 	bl	8001bb8 <LL_ADC_IsEnabled>
 80029ee:	4603      	mov	r3, r0
 80029f0:	4323      	orrs	r3, r4
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	bf0c      	ite	eq
 80029f6:	2301      	moveq	r3, #1
 80029f8:	2300      	movne	r3, #0
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	e008      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x41c>
 80029fe:	4837      	ldr	r0, [pc, #220]	@ (8002adc <HAL_ADC_ConfigChannel+0x4e8>)
 8002a00:	f7ff f8da 	bl	8001bb8 <LL_ADC_IsEnabled>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	bf0c      	ite	eq
 8002a0a:	2301      	moveq	r3, #1
 8002a0c:	2300      	movne	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 80b3 	beq.w	8002b7c <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a31      	ldr	r2, [pc, #196]	@ (8002ae0 <HAL_ADC_ConfigChannel+0x4ec>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d165      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x4f8>
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d160      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a2b      	ldr	r2, [pc, #172]	@ (8002adc <HAL_ADC_ConfigChannel+0x4e8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	f040 80b6 	bne.w	8002ba2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a13      	ldr	r2, [pc, #76]	@ (8002a88 <HAL_ADC_ConfigChannel+0x494>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d004      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0x456>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a22      	ldr	r2, [pc, #136]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x4dc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d101      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x45a>
 8002a4a:	4a22      	ldr	r2, [pc, #136]	@ (8002ad4 <HAL_ADC_ConfigChannel+0x4e0>)
 8002a4c:	e000      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x45c>
 8002a4e:	4a22      	ldr	r2, [pc, #136]	@ (8002ad8 <HAL_ADC_ConfigChannel+0x4e4>)
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a56:	4619      	mov	r1, r3
 8002a58:	4610      	mov	r0, r2
 8002a5a:	f7fe febe 	bl	80017da <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a5e:	4b21      	ldr	r3, [pc, #132]	@ (8002ae4 <HAL_ADC_ConfigChannel+0x4f0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	099b      	lsrs	r3, r3, #6
 8002a64:	4a20      	ldr	r2, [pc, #128]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x4f4>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	099b      	lsrs	r3, r3, #6
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002a72:	e002      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f9      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a80:	e08f      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x5ae>
 8002a82:	bf00      	nop
 8002a84:	47ff0000 	.word	0x47ff0000
 8002a88:	40022000 	.word	0x40022000
 8002a8c:	04300002 	.word	0x04300002
 8002a90:	08600004 	.word	0x08600004
 8002a94:	0c900008 	.word	0x0c900008
 8002a98:	10c00010 	.word	0x10c00010
 8002a9c:	14f00020 	.word	0x14f00020
 8002aa0:	2a000400 	.word	0x2a000400
 8002aa4:	2e300800 	.word	0x2e300800
 8002aa8:	32601000 	.word	0x32601000
 8002aac:	43210000 	.word	0x43210000
 8002ab0:	4b840000 	.word	0x4b840000
 8002ab4:	4fb80000 	.word	0x4fb80000
 8002ab8:	47520000 	.word	0x47520000
 8002abc:	36902000 	.word	0x36902000
 8002ac0:	25b00200 	.word	0x25b00200
 8002ac4:	21800100 	.word	0x21800100
 8002ac8:	1d500080 	.word	0x1d500080
 8002acc:	19200040 	.word	0x19200040
 8002ad0:	40022100 	.word	0x40022100
 8002ad4:	40022300 	.word	0x40022300
 8002ad8:	58026300 	.word	0x58026300
 8002adc:	58026000 	.word	0x58026000
 8002ae0:	cb840000 	.word	0xcb840000
 8002ae4:	24000000 	.word	0x24000000
 8002ae8:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a31      	ldr	r2, [pc, #196]	@ (8002bb8 <HAL_ADC_ConfigChannel+0x5c4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d11e      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x540>
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d119      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a2d      	ldr	r2, [pc, #180]	@ (8002bbc <HAL_ADC_ConfigChannel+0x5c8>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d14b      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a2c      	ldr	r2, [pc, #176]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x5cc>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d004      	beq.n	8002b1e <HAL_ADC_ConfigChannel+0x52a>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a2a      	ldr	r2, [pc, #168]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x5d0>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x52e>
 8002b1e:	4a2a      	ldr	r2, [pc, #168]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x5d4>)
 8002b20:	e000      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x530>
 8002b22:	4a2a      	ldr	r2, [pc, #168]	@ (8002bcc <HAL_ADC_ConfigChannel+0x5d8>)
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	f7fe fe54 	bl	80017da <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b32:	e036      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a25      	ldr	r2, [pc, #148]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x5dc>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d131      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x5ae>
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d12c      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8002bbc <HAL_ADC_ConfigChannel+0x5c8>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d127      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a1a      	ldr	r2, [pc, #104]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x5cc>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d004      	beq.n	8002b66 <HAL_ADC_ConfigChannel+0x572>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a18      	ldr	r2, [pc, #96]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x5d0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d101      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x576>
 8002b66:	4a18      	ldr	r2, [pc, #96]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x5d4>)
 8002b68:	e000      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x578>
 8002b6a:	4a18      	ldr	r2, [pc, #96]	@ (8002bcc <HAL_ADC_ConfigChannel+0x5d8>)
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b72:	4619      	mov	r1, r3
 8002b74:	4610      	mov	r0, r2
 8002b76:	f7fe fe30 	bl	80017da <LL_ADC_SetCommonPathInternalCh>
 8002b7a:	e012      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b80:	f043 0220 	orr.w	r2, r3, #32
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002b8e:	e008      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b94:	f043 0220 	orr.w	r2, r3, #32
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002baa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3734      	adds	r7, #52	@ 0x34
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd90      	pop	{r4, r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	c7520000 	.word	0xc7520000
 8002bbc:	58026000 	.word	0x58026000
 8002bc0:	40022000 	.word	0x40022000
 8002bc4:	40022100 	.word	0x40022100
 8002bc8:	40022300 	.word	0x40022300
 8002bcc:	58026300 	.word	0x58026300
 8002bd0:	cfb80000 	.word	0xcfb80000

08002bd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fe ffe9 	bl	8001bb8 <LL_ADC_IsEnabled>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d16e      	bne.n	8002cca <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	4b38      	ldr	r3, [pc, #224]	@ (8002cd4 <ADC_Enable+0x100>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00d      	beq.n	8002c16 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfe:	f043 0210 	orr.w	r2, r3, #16
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0a:	f043 0201 	orr.w	r2, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e05a      	b.n	8002ccc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe ffa4 	bl	8001b68 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c20:	f7fe fdb0 	bl	8001784 <HAL_GetTick>
 8002c24:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a2b      	ldr	r2, [pc, #172]	@ (8002cd8 <ADC_Enable+0x104>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d004      	beq.n	8002c3a <ADC_Enable+0x66>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a29      	ldr	r2, [pc, #164]	@ (8002cdc <ADC_Enable+0x108>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d101      	bne.n	8002c3e <ADC_Enable+0x6a>
 8002c3a:	4b29      	ldr	r3, [pc, #164]	@ (8002ce0 <ADC_Enable+0x10c>)
 8002c3c:	e000      	b.n	8002c40 <ADC_Enable+0x6c>
 8002c3e:	4b29      	ldr	r3, [pc, #164]	@ (8002ce4 <ADC_Enable+0x110>)
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fe ff27 	bl	8001a94 <LL_ADC_GetMultimode>
 8002c46:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a23      	ldr	r2, [pc, #140]	@ (8002cdc <ADC_Enable+0x108>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d002      	beq.n	8002c58 <ADC_Enable+0x84>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	e000      	b.n	8002c5a <ADC_Enable+0x86>
 8002c58:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd8 <ADC_Enable+0x104>)
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d02c      	beq.n	8002cbc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d130      	bne.n	8002cca <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c68:	e028      	b.n	8002cbc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fe ffa2 	bl	8001bb8 <LL_ADC_IsEnabled>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d104      	bne.n	8002c84 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe ff72 	bl	8001b68 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c84:	f7fe fd7e 	bl	8001784 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d914      	bls.n	8002cbc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d00d      	beq.n	8002cbc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca4:	f043 0210 	orr.w	r2, r3, #16
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb0:	f043 0201 	orr.w	r2, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e007      	b.n	8002ccc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d1cf      	bne.n	8002c6a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	8000003f 	.word	0x8000003f
 8002cd8:	40022000 	.word	0x40022000
 8002cdc:	40022100 	.word	0x40022100
 8002ce0:	40022300 	.word	0x40022300
 8002ce4:	58026300 	.word	0x58026300

08002ce8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fe ff72 	bl	8001bde <LL_ADC_IsDisableOngoing>
 8002cfa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fe ff59 	bl	8001bb8 <LL_ADC_IsEnabled>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d047      	beq.n	8002d9c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d144      	bne.n	8002d9c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 030d 	and.w	r3, r3, #13
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d10c      	bne.n	8002d3a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fe ff33 	bl	8001b90 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2203      	movs	r2, #3
 8002d30:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d32:	f7fe fd27 	bl	8001784 <HAL_GetTick>
 8002d36:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d38:	e029      	b.n	8002d8e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3e:	f043 0210 	orr.w	r2, r3, #16
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d4a:	f043 0201 	orr.w	r2, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e023      	b.n	8002d9e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d56:	f7fe fd15 	bl	8001784 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d914      	bls.n	8002d8e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00d      	beq.n	8002d8e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d76:	f043 0210 	orr.w	r2, r3, #16
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d82:	f043 0201 	orr.w	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e007      	b.n	8002d9e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1dc      	bne.n	8002d56 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d14b      	bne.n	8002e58 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d021      	beq.n	8002e1e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe fda3 	bl	800192a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d032      	beq.n	8002e50 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d12b      	bne.n	8002e50 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d11f      	bne.n	8002e50 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e14:	f043 0201 	orr.w	r2, r3, #1
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e1c:	e018      	b.n	8002e50 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d111      	bne.n	8002e50 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d105      	bne.n	8002e50 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e48:	f043 0201 	orr.w	r2, r3, #1
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f7fd fc6d 	bl	8000730 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e56:	e00e      	b.n	8002e76 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f7ff fbbb 	bl	80025e0 <HAL_ADC_ErrorCallback>
}
 8002e6a:	e004      	b.n	8002e76 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	4798      	blx	r3
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f7ff fb93 	bl	80025b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e92:	bf00      	nop
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b084      	sub	sp, #16
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb8:	f043 0204 	orr.w	r2, r3, #4
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f7ff fb8d 	bl	80025e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ec6:	bf00      	nop
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a7a      	ldr	r2, [pc, #488]	@ (80030c8 <ADC_ConfigureBoostMode+0x1f8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d004      	beq.n	8002eec <ADC_ConfigureBoostMode+0x1c>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a79      	ldr	r2, [pc, #484]	@ (80030cc <ADC_ConfigureBoostMode+0x1fc>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d109      	bne.n	8002f00 <ADC_ConfigureBoostMode+0x30>
 8002eec:	4b78      	ldr	r3, [pc, #480]	@ (80030d0 <ADC_ConfigureBoostMode+0x200>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	bf14      	ite	ne
 8002ef8:	2301      	movne	r3, #1
 8002efa:	2300      	moveq	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	e008      	b.n	8002f12 <ADC_ConfigureBoostMode+0x42>
 8002f00:	4b74      	ldr	r3, [pc, #464]	@ (80030d4 <ADC_ConfigureBoostMode+0x204>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bf14      	ite	ne
 8002f0c:	2301      	movne	r3, #1
 8002f0e:	2300      	moveq	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d01c      	beq.n	8002f50 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002f16:	f003 ff07 	bl	8006d28 <HAL_RCC_GetHCLKFreq>
 8002f1a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f24:	d010      	beq.n	8002f48 <ADC_ConfigureBoostMode+0x78>
 8002f26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f2a:	d873      	bhi.n	8003014 <ADC_ConfigureBoostMode+0x144>
 8002f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f30:	d002      	beq.n	8002f38 <ADC_ConfigureBoostMode+0x68>
 8002f32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f36:	d16d      	bne.n	8003014 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	0c1b      	lsrs	r3, r3, #16
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f44:	60fb      	str	r3, [r7, #12]
        break;
 8002f46:	e068      	b.n	800301a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	089b      	lsrs	r3, r3, #2
 8002f4c:	60fb      	str	r3, [r7, #12]
        break;
 8002f4e:	e064      	b.n	800301a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002f50:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002f54:	f04f 0100 	mov.w	r1, #0
 8002f58:	f005 f94c 	bl	80081f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f5c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002f66:	d051      	beq.n	800300c <ADC_ConfigureBoostMode+0x13c>
 8002f68:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002f6c:	d854      	bhi.n	8003018 <ADC_ConfigureBoostMode+0x148>
 8002f6e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002f72:	d047      	beq.n	8003004 <ADC_ConfigureBoostMode+0x134>
 8002f74:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002f78:	d84e      	bhi.n	8003018 <ADC_ConfigureBoostMode+0x148>
 8002f7a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002f7e:	d03d      	beq.n	8002ffc <ADC_ConfigureBoostMode+0x12c>
 8002f80:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002f84:	d848      	bhi.n	8003018 <ADC_ConfigureBoostMode+0x148>
 8002f86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f8a:	d033      	beq.n	8002ff4 <ADC_ConfigureBoostMode+0x124>
 8002f8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f90:	d842      	bhi.n	8003018 <ADC_ConfigureBoostMode+0x148>
 8002f92:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002f96:	d029      	beq.n	8002fec <ADC_ConfigureBoostMode+0x11c>
 8002f98:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002f9c:	d83c      	bhi.n	8003018 <ADC_ConfigureBoostMode+0x148>
 8002f9e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002fa2:	d01a      	beq.n	8002fda <ADC_ConfigureBoostMode+0x10a>
 8002fa4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002fa8:	d836      	bhi.n	8003018 <ADC_ConfigureBoostMode+0x148>
 8002faa:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002fae:	d014      	beq.n	8002fda <ADC_ConfigureBoostMode+0x10a>
 8002fb0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002fb4:	d830      	bhi.n	8003018 <ADC_ConfigureBoostMode+0x148>
 8002fb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fba:	d00e      	beq.n	8002fda <ADC_ConfigureBoostMode+0x10a>
 8002fbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fc0:	d82a      	bhi.n	8003018 <ADC_ConfigureBoostMode+0x148>
 8002fc2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002fc6:	d008      	beq.n	8002fda <ADC_ConfigureBoostMode+0x10a>
 8002fc8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002fcc:	d824      	bhi.n	8003018 <ADC_ConfigureBoostMode+0x148>
 8002fce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002fd2:	d002      	beq.n	8002fda <ADC_ConfigureBoostMode+0x10a>
 8002fd4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002fd8:	d11e      	bne.n	8003018 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	0c9b      	lsrs	r3, r3, #18
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe8:	60fb      	str	r3, [r7, #12]
        break;
 8002fea:	e016      	b.n	800301a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	091b      	lsrs	r3, r3, #4
 8002ff0:	60fb      	str	r3, [r7, #12]
        break;
 8002ff2:	e012      	b.n	800301a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	60fb      	str	r3, [r7, #12]
        break;
 8002ffa:	e00e      	b.n	800301a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	099b      	lsrs	r3, r3, #6
 8003000:	60fb      	str	r3, [r7, #12]
        break;
 8003002:	e00a      	b.n	800301a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	09db      	lsrs	r3, r3, #7
 8003008:	60fb      	str	r3, [r7, #12]
        break;
 800300a:	e006      	b.n	800301a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	0a1b      	lsrs	r3, r3, #8
 8003010:	60fb      	str	r3, [r7, #12]
        break;
 8003012:	e002      	b.n	800301a <ADC_ConfigureBoostMode+0x14a>
        break;
 8003014:	bf00      	nop
 8003016:	e000      	b.n	800301a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003018:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800301a:	f7fe fbbf 	bl	800179c <HAL_GetREVID>
 800301e:	4603      	mov	r3, r0
 8003020:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003024:	4293      	cmp	r3, r2
 8003026:	d815      	bhi.n	8003054 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4a2b      	ldr	r2, [pc, #172]	@ (80030d8 <ADC_ConfigureBoostMode+0x208>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d908      	bls.n	8003042 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800303e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003040:	e03e      	b.n	80030c0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003050:	609a      	str	r2, [r3, #8]
}
 8003052:	e035      	b.n	80030c0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	085b      	lsrs	r3, r3, #1
 8003058:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4a1f      	ldr	r2, [pc, #124]	@ (80030dc <ADC_ConfigureBoostMode+0x20c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d808      	bhi.n	8003074 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003070:	609a      	str	r2, [r3, #8]
}
 8003072:	e025      	b.n	80030c0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4a1a      	ldr	r2, [pc, #104]	@ (80030e0 <ADC_ConfigureBoostMode+0x210>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d80a      	bhi.n	8003092 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800308e:	609a      	str	r2, [r3, #8]
}
 8003090:	e016      	b.n	80030c0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4a13      	ldr	r2, [pc, #76]	@ (80030e4 <ADC_ConfigureBoostMode+0x214>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d80a      	bhi.n	80030b0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ac:	609a      	str	r2, [r3, #8]
}
 80030ae:	e007      	b.n	80030c0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80030be:	609a      	str	r2, [r3, #8]
}
 80030c0:	bf00      	nop
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40022000 	.word	0x40022000
 80030cc:	40022100 	.word	0x40022100
 80030d0:	40022300 	.word	0x40022300
 80030d4:	58026300 	.word	0x58026300
 80030d8:	01312d00 	.word	0x01312d00
 80030dc:	005f5e10 	.word	0x005f5e10
 80030e0:	00bebc20 	.word	0x00bebc20
 80030e4:	017d7840 	.word	0x017d7840

080030e8 <LL_ADC_IsEnabled>:
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <LL_ADC_IsEnabled+0x18>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <LL_ADC_IsEnabled+0x1a>
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
	...

08003110 <LL_ADC_StartCalibration>:
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	4b09      	ldr	r3, [pc, #36]	@ (8003148 <LL_ADC_StartCalibration+0x38>)
 8003122:	4013      	ands	r3, r2
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003130:	430a      	orrs	r2, r1
 8003132:	4313      	orrs	r3, r2
 8003134:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	609a      	str	r2, [r3, #8]
}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	3ffeffc0 	.word	0x3ffeffc0

0800314c <LL_ADC_IsCalibrationOnGoing>:
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800315c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003160:	d101      	bne.n	8003166 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <LL_ADC_REG_IsConversionOngoing>:
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b04      	cmp	r3, #4
 8003186:	d101      	bne.n	800318c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_ADCEx_Calibration_Start+0x1e>
 80031b6:	2302      	movs	r3, #2
 80031b8:	e04c      	b.n	8003254 <HAL_ADCEx_Calibration_Start+0xb8>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f7ff fd90 	bl	8002ce8 <ADC_Disable>
 80031c8:	4603      	mov	r3, r0
 80031ca:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80031cc:	7dfb      	ldrb	r3, [r7, #23]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d135      	bne.n	800323e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80031d6:	4b21      	ldr	r3, [pc, #132]	@ (800325c <HAL_ADCEx_Calibration_Start+0xc0>)
 80031d8:	4013      	ands	r3, r2
 80031da:	f043 0202 	orr.w	r2, r3, #2
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff ff90 	bl	8003110 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80031f0:	e014      	b.n	800321c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	3301      	adds	r3, #1
 80031f6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4a19      	ldr	r2, [pc, #100]	@ (8003260 <HAL_ADCEx_Calibration_Start+0xc4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d30d      	bcc.n	800321c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003204:	f023 0312 	bic.w	r3, r3, #18
 8003208:	f043 0210 	orr.w	r2, r3, #16
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e01b      	b.n	8003254 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff ff93 	bl	800314c <LL_ADC_IsCalibrationOnGoing>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1e2      	bne.n	80031f2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003230:	f023 0303 	bic.w	r3, r3, #3
 8003234:	f043 0201 	orr.w	r2, r3, #1
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	655a      	str	r2, [r3, #84]	@ 0x54
 800323c:	e005      	b.n	800324a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003242:	f043 0210 	orr.w	r2, r3, #16
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003252:	7dfb      	ldrb	r3, [r7, #23]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	ffffeefd 	.word	0xffffeefd
 8003260:	25c3f800 	.word	0x25c3f800

08003264 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032c8:	b590      	push	{r4, r7, lr}
 80032ca:	b09f      	sub	sp, #124	@ 0x7c
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e0be      	b.n	8003464 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80032ee:	2300      	movs	r3, #0
 80032f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a5c      	ldr	r2, [pc, #368]	@ (800346c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d102      	bne.n	8003306 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003300:	4b5b      	ldr	r3, [pc, #364]	@ (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003302:	60bb      	str	r3, [r7, #8]
 8003304:	e001      	b.n	800330a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003306:	2300      	movs	r3, #0
 8003308:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10b      	bne.n	8003328 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003314:	f043 0220 	orr.w	r2, r3, #32
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e09d      	b.n	8003464 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff ff22 	bl	8003174 <LL_ADC_REG_IsConversionOngoing>
 8003330:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff ff1c 	bl	8003174 <LL_ADC_REG_IsConversionOngoing>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d17f      	bne.n	8003442 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003342:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003344:	2b00      	cmp	r3, #0
 8003346:	d17c      	bne.n	8003442 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a47      	ldr	r2, [pc, #284]	@ (800346c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d004      	beq.n	800335c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a46      	ldr	r2, [pc, #280]	@ (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d101      	bne.n	8003360 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800335c:	4b45      	ldr	r3, [pc, #276]	@ (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800335e:	e000      	b.n	8003362 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003360:	4b45      	ldr	r3, [pc, #276]	@ (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003362:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d039      	beq.n	80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800336c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	431a      	orrs	r2, r3
 800337a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800337c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a3a      	ldr	r2, [pc, #232]	@ (800346c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d004      	beq.n	8003392 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a38      	ldr	r2, [pc, #224]	@ (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d10e      	bne.n	80033b0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003392:	4836      	ldr	r0, [pc, #216]	@ (800346c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003394:	f7ff fea8 	bl	80030e8 <LL_ADC_IsEnabled>
 8003398:	4604      	mov	r4, r0
 800339a:	4835      	ldr	r0, [pc, #212]	@ (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800339c:	f7ff fea4 	bl	80030e8 <LL_ADC_IsEnabled>
 80033a0:	4603      	mov	r3, r0
 80033a2:	4323      	orrs	r3, r4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	bf0c      	ite	eq
 80033a8:	2301      	moveq	r3, #1
 80033aa:	2300      	movne	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	e008      	b.n	80033c2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80033b0:	4832      	ldr	r0, [pc, #200]	@ (800347c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80033b2:	f7ff fe99 	bl	80030e8 <LL_ADC_IsEnabled>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	bf0c      	ite	eq
 80033bc:	2301      	moveq	r3, #1
 80033be:	2300      	movne	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d047      	beq.n	8003456 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	6811      	ldr	r1, [r2, #0]
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	6892      	ldr	r2, [r2, #8]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	431a      	orrs	r2, r3
 80033da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033dc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033de:	e03a      	b.n	8003456 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80033e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033ea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a1e      	ldr	r2, [pc, #120]	@ (800346c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d004      	beq.n	8003400 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d10e      	bne.n	800341e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003400:	481a      	ldr	r0, [pc, #104]	@ (800346c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003402:	f7ff fe71 	bl	80030e8 <LL_ADC_IsEnabled>
 8003406:	4604      	mov	r4, r0
 8003408:	4819      	ldr	r0, [pc, #100]	@ (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800340a:	f7ff fe6d 	bl	80030e8 <LL_ADC_IsEnabled>
 800340e:	4603      	mov	r3, r0
 8003410:	4323      	orrs	r3, r4
 8003412:	2b00      	cmp	r3, #0
 8003414:	bf0c      	ite	eq
 8003416:	2301      	moveq	r3, #1
 8003418:	2300      	movne	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	e008      	b.n	8003430 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800341e:	4817      	ldr	r0, [pc, #92]	@ (800347c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003420:	f7ff fe62 	bl	80030e8 <LL_ADC_IsEnabled>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	bf0c      	ite	eq
 800342a:	2301      	moveq	r3, #1
 800342c:	2300      	movne	r3, #0
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d010      	beq.n	8003456 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	4b11      	ldr	r3, [pc, #68]	@ (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800343a:	4013      	ands	r3, r2
 800343c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800343e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003440:	e009      	b.n	8003456 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003446:	f043 0220 	orr.w	r2, r3, #32
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003454:	e000      	b.n	8003458 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003456:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003460:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003464:	4618      	mov	r0, r3
 8003466:	377c      	adds	r7, #124	@ 0x7c
 8003468:	46bd      	mov	sp, r7
 800346a:	bd90      	pop	{r4, r7, pc}
 800346c:	40022000 	.word	0x40022000
 8003470:	40022100 	.word	0x40022100
 8003474:	40022300 	.word	0x40022300
 8003478:	58026300 	.word	0x58026300
 800347c:	58026000 	.word	0x58026000
 8003480:	fffff0e0 	.word	0xfffff0e0

08003484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003494:	4b0b      	ldr	r3, [pc, #44]	@ (80034c4 <__NVIC_SetPriorityGrouping+0x40>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034a0:	4013      	ands	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034ac:	4b06      	ldr	r3, [pc, #24]	@ (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034b2:	4a04      	ldr	r2, [pc, #16]	@ (80034c4 <__NVIC_SetPriorityGrouping+0x40>)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	60d3      	str	r3, [r2, #12]
}
 80034b8:	bf00      	nop
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	e000ed00 	.word	0xe000ed00
 80034c8:	05fa0000 	.word	0x05fa0000

080034cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d0:	4b04      	ldr	r3, [pc, #16]	@ (80034e4 <__NVIC_GetPriorityGrouping+0x18>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	0a1b      	lsrs	r3, r3, #8
 80034d6:	f003 0307 	and.w	r3, r3, #7
}
 80034da:	4618      	mov	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	db0b      	blt.n	8003512 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	f003 021f 	and.w	r2, r3, #31
 8003500:	4907      	ldr	r1, [pc, #28]	@ (8003520 <__NVIC_EnableIRQ+0x38>)
 8003502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	2001      	movs	r0, #1
 800350a:	fa00 f202 	lsl.w	r2, r0, r2
 800350e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	e000e100 	.word	0xe000e100

08003524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	6039      	str	r1, [r7, #0]
 800352e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003530:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003534:	2b00      	cmp	r3, #0
 8003536:	db0a      	blt.n	800354e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	b2da      	uxtb	r2, r3
 800353c:	490c      	ldr	r1, [pc, #48]	@ (8003570 <__NVIC_SetPriority+0x4c>)
 800353e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003542:	0112      	lsls	r2, r2, #4
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	440b      	add	r3, r1
 8003548:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800354c:	e00a      	b.n	8003564 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	b2da      	uxtb	r2, r3
 8003552:	4908      	ldr	r1, [pc, #32]	@ (8003574 <__NVIC_SetPriority+0x50>)
 8003554:	88fb      	ldrh	r3, [r7, #6]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	3b04      	subs	r3, #4
 800355c:	0112      	lsls	r2, r2, #4
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	440b      	add	r3, r1
 8003562:	761a      	strb	r2, [r3, #24]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	e000e100 	.word	0xe000e100
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003578:	b480      	push	{r7}
 800357a:	b089      	sub	sp, #36	@ 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f1c3 0307 	rsb	r3, r3, #7
 8003592:	2b04      	cmp	r3, #4
 8003594:	bf28      	it	cs
 8003596:	2304      	movcs	r3, #4
 8003598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3304      	adds	r3, #4
 800359e:	2b06      	cmp	r3, #6
 80035a0:	d902      	bls.n	80035a8 <NVIC_EncodePriority+0x30>
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3b03      	subs	r3, #3
 80035a6:	e000      	b.n	80035aa <NVIC_EncodePriority+0x32>
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43da      	mvns	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	401a      	ands	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	43d9      	mvns	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d0:	4313      	orrs	r3, r2
         );
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3724      	adds	r7, #36	@ 0x24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035f0:	d301      	bcc.n	80035f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035f2:	2301      	movs	r3, #1
 80035f4:	e00f      	b.n	8003616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003620 <SysTick_Config+0x40>)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035fe:	210f      	movs	r1, #15
 8003600:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003604:	f7ff ff8e 	bl	8003524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003608:	4b05      	ldr	r3, [pc, #20]	@ (8003620 <SysTick_Config+0x40>)
 800360a:	2200      	movs	r2, #0
 800360c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800360e:	4b04      	ldr	r3, [pc, #16]	@ (8003620 <SysTick_Config+0x40>)
 8003610:	2207      	movs	r2, #7
 8003612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	e000e010 	.word	0xe000e010

08003624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff ff29 	bl	8003484 <__NVIC_SetPriorityGrouping>
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b086      	sub	sp, #24
 800363e:	af00      	add	r7, sp, #0
 8003640:	4603      	mov	r3, r0
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	607a      	str	r2, [r7, #4]
 8003646:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003648:	f7ff ff40 	bl	80034cc <__NVIC_GetPriorityGrouping>
 800364c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	6978      	ldr	r0, [r7, #20]
 8003654:	f7ff ff90 	bl	8003578 <NVIC_EncodePriority>
 8003658:	4602      	mov	r2, r0
 800365a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800365e:	4611      	mov	r1, r2
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff ff5f 	bl	8003524 <__NVIC_SetPriority>
}
 8003666:	bf00      	nop
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	4603      	mov	r3, r0
 8003676:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003678:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff ff33 	bl	80034e8 <__NVIC_EnableIRQ>
}
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff ffa4 	bl	80035e0 <SysTick_Config>
 8003698:	4603      	mov	r3, r0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
	...

080036a4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80036a8:	f3bf 8f5f 	dmb	sy
}
 80036ac:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80036ae:	4b07      	ldr	r3, [pc, #28]	@ (80036cc <HAL_MPU_Disable+0x28>)
 80036b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b2:	4a06      	ldr	r2, [pc, #24]	@ (80036cc <HAL_MPU_Disable+0x28>)
 80036b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036b8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80036ba:	4b05      	ldr	r3, [pc, #20]	@ (80036d0 <HAL_MPU_Disable+0x2c>)
 80036bc:	2200      	movs	r2, #0
 80036be:	605a      	str	r2, [r3, #4]
}
 80036c0:	bf00      	nop
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	e000ed00 	.word	0xe000ed00
 80036d0:	e000ed90 	.word	0xe000ed90

080036d4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80036dc:	4a0b      	ldr	r2, [pc, #44]	@ (800370c <HAL_MPU_Enable+0x38>)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80036e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003710 <HAL_MPU_Enable+0x3c>)
 80036e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ea:	4a09      	ldr	r2, [pc, #36]	@ (8003710 <HAL_MPU_Enable+0x3c>)
 80036ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036f0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80036f2:	f3bf 8f4f 	dsb	sy
}
 80036f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80036f8:	f3bf 8f6f 	isb	sy
}
 80036fc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	e000ed90 	.word	0xe000ed90
 8003710:	e000ed00 	.word	0xe000ed00

08003714 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	785a      	ldrb	r2, [r3, #1]
 8003720:	4b1b      	ldr	r3, [pc, #108]	@ (8003790 <HAL_MPU_ConfigRegion+0x7c>)
 8003722:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003724:	4b1a      	ldr	r3, [pc, #104]	@ (8003790 <HAL_MPU_ConfigRegion+0x7c>)
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	4a19      	ldr	r2, [pc, #100]	@ (8003790 <HAL_MPU_ConfigRegion+0x7c>)
 800372a:	f023 0301 	bic.w	r3, r3, #1
 800372e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003730:	4a17      	ldr	r2, [pc, #92]	@ (8003790 <HAL_MPU_ConfigRegion+0x7c>)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	7b1b      	ldrb	r3, [r3, #12]
 800373c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	7adb      	ldrb	r3, [r3, #11]
 8003742:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003744:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	7a9b      	ldrb	r3, [r3, #10]
 800374a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800374c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	7b5b      	ldrb	r3, [r3, #13]
 8003752:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003754:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	7b9b      	ldrb	r3, [r3, #14]
 800375a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800375c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	7bdb      	ldrb	r3, [r3, #15]
 8003762:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003764:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	7a5b      	ldrb	r3, [r3, #9]
 800376a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800376c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	7a1b      	ldrb	r3, [r3, #8]
 8003772:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003774:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	7812      	ldrb	r2, [r2, #0]
 800377a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800377c:	4a04      	ldr	r2, [pc, #16]	@ (8003790 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800377e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003780:	6113      	str	r3, [r2, #16]
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	e000ed90 	.word	0xe000ed90

08003794 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800379c:	f7fd fff2 	bl	8001784 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e316      	b.n	8003dda <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a66      	ldr	r2, [pc, #408]	@ (800394c <HAL_DMA_Init+0x1b8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d04a      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a65      	ldr	r2, [pc, #404]	@ (8003950 <HAL_DMA_Init+0x1bc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d045      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a63      	ldr	r2, [pc, #396]	@ (8003954 <HAL_DMA_Init+0x1c0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d040      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a62      	ldr	r2, [pc, #392]	@ (8003958 <HAL_DMA_Init+0x1c4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d03b      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a60      	ldr	r2, [pc, #384]	@ (800395c <HAL_DMA_Init+0x1c8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d036      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a5f      	ldr	r2, [pc, #380]	@ (8003960 <HAL_DMA_Init+0x1cc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d031      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a5d      	ldr	r2, [pc, #372]	@ (8003964 <HAL_DMA_Init+0x1d0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d02c      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a5c      	ldr	r2, [pc, #368]	@ (8003968 <HAL_DMA_Init+0x1d4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d027      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a5a      	ldr	r2, [pc, #360]	@ (800396c <HAL_DMA_Init+0x1d8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d022      	beq.n	800384c <HAL_DMA_Init+0xb8>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a59      	ldr	r2, [pc, #356]	@ (8003970 <HAL_DMA_Init+0x1dc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d01d      	beq.n	800384c <HAL_DMA_Init+0xb8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a57      	ldr	r2, [pc, #348]	@ (8003974 <HAL_DMA_Init+0x1e0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d018      	beq.n	800384c <HAL_DMA_Init+0xb8>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a56      	ldr	r2, [pc, #344]	@ (8003978 <HAL_DMA_Init+0x1e4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d013      	beq.n	800384c <HAL_DMA_Init+0xb8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a54      	ldr	r2, [pc, #336]	@ (800397c <HAL_DMA_Init+0x1e8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00e      	beq.n	800384c <HAL_DMA_Init+0xb8>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a53      	ldr	r2, [pc, #332]	@ (8003980 <HAL_DMA_Init+0x1ec>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d009      	beq.n	800384c <HAL_DMA_Init+0xb8>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a51      	ldr	r2, [pc, #324]	@ (8003984 <HAL_DMA_Init+0x1f0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d004      	beq.n	800384c <HAL_DMA_Init+0xb8>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a50      	ldr	r2, [pc, #320]	@ (8003988 <HAL_DMA_Init+0x1f4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d101      	bne.n	8003850 <HAL_DMA_Init+0xbc>
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <HAL_DMA_Init+0xbe>
 8003850:	2300      	movs	r3, #0
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 813b 	beq.w	8003ace <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a37      	ldr	r2, [pc, #220]	@ (800394c <HAL_DMA_Init+0x1b8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d04a      	beq.n	8003908 <HAL_DMA_Init+0x174>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a36      	ldr	r2, [pc, #216]	@ (8003950 <HAL_DMA_Init+0x1bc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d045      	beq.n	8003908 <HAL_DMA_Init+0x174>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a34      	ldr	r2, [pc, #208]	@ (8003954 <HAL_DMA_Init+0x1c0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d040      	beq.n	8003908 <HAL_DMA_Init+0x174>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a33      	ldr	r2, [pc, #204]	@ (8003958 <HAL_DMA_Init+0x1c4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d03b      	beq.n	8003908 <HAL_DMA_Init+0x174>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a31      	ldr	r2, [pc, #196]	@ (800395c <HAL_DMA_Init+0x1c8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d036      	beq.n	8003908 <HAL_DMA_Init+0x174>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a30      	ldr	r2, [pc, #192]	@ (8003960 <HAL_DMA_Init+0x1cc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d031      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a2e      	ldr	r2, [pc, #184]	@ (8003964 <HAL_DMA_Init+0x1d0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d02c      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a2d      	ldr	r2, [pc, #180]	@ (8003968 <HAL_DMA_Init+0x1d4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d027      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a2b      	ldr	r2, [pc, #172]	@ (800396c <HAL_DMA_Init+0x1d8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d022      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a2a      	ldr	r2, [pc, #168]	@ (8003970 <HAL_DMA_Init+0x1dc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d01d      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a28      	ldr	r2, [pc, #160]	@ (8003974 <HAL_DMA_Init+0x1e0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d018      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a27      	ldr	r2, [pc, #156]	@ (8003978 <HAL_DMA_Init+0x1e4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d013      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a25      	ldr	r2, [pc, #148]	@ (800397c <HAL_DMA_Init+0x1e8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00e      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a24      	ldr	r2, [pc, #144]	@ (8003980 <HAL_DMA_Init+0x1ec>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d009      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a22      	ldr	r2, [pc, #136]	@ (8003984 <HAL_DMA_Init+0x1f0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d004      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a21      	ldr	r2, [pc, #132]	@ (8003988 <HAL_DMA_Init+0x1f4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d108      	bne.n	800391a <HAL_DMA_Init+0x186>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0201 	bic.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	e007      	b.n	800392a <HAL_DMA_Init+0x196>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0201 	bic.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800392a:	e02f      	b.n	800398c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800392c:	f7fd ff2a 	bl	8001784 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b05      	cmp	r3, #5
 8003938:	d928      	bls.n	800398c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2220      	movs	r2, #32
 800393e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2203      	movs	r2, #3
 8003944:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e246      	b.n	8003dda <HAL_DMA_Init+0x646>
 800394c:	40020010 	.word	0x40020010
 8003950:	40020028 	.word	0x40020028
 8003954:	40020040 	.word	0x40020040
 8003958:	40020058 	.word	0x40020058
 800395c:	40020070 	.word	0x40020070
 8003960:	40020088 	.word	0x40020088
 8003964:	400200a0 	.word	0x400200a0
 8003968:	400200b8 	.word	0x400200b8
 800396c:	40020410 	.word	0x40020410
 8003970:	40020428 	.word	0x40020428
 8003974:	40020440 	.word	0x40020440
 8003978:	40020458 	.word	0x40020458
 800397c:	40020470 	.word	0x40020470
 8003980:	40020488 	.word	0x40020488
 8003984:	400204a0 	.word	0x400204a0
 8003988:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1c8      	bne.n	800392c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4b83      	ldr	r3, [pc, #524]	@ (8003bb4 <HAL_DMA_Init+0x420>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80039b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039be:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d107      	bne.n	80039f0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e8:	4313      	orrs	r3, r2
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80039f0:	4b71      	ldr	r3, [pc, #452]	@ (8003bb8 <HAL_DMA_Init+0x424>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4b71      	ldr	r3, [pc, #452]	@ (8003bbc <HAL_DMA_Init+0x428>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039fc:	d328      	bcc.n	8003a50 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b28      	cmp	r3, #40	@ 0x28
 8003a04:	d903      	bls.n	8003a0e <HAL_DMA_Init+0x27a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a0c:	d917      	bls.n	8003a3e <HAL_DMA_Init+0x2aa>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a14:	d903      	bls.n	8003a1e <HAL_DMA_Init+0x28a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b42      	cmp	r3, #66	@ 0x42
 8003a1c:	d90f      	bls.n	8003a3e <HAL_DMA_Init+0x2aa>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b46      	cmp	r3, #70	@ 0x46
 8003a24:	d903      	bls.n	8003a2e <HAL_DMA_Init+0x29a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b48      	cmp	r3, #72	@ 0x48
 8003a2c:	d907      	bls.n	8003a3e <HAL_DMA_Init+0x2aa>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b4e      	cmp	r3, #78	@ 0x4e
 8003a34:	d905      	bls.n	8003a42 <HAL_DMA_Init+0x2ae>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b52      	cmp	r3, #82	@ 0x52
 8003a3c:	d801      	bhi.n	8003a42 <HAL_DMA_Init+0x2ae>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_DMA_Init+0x2b0>
 8003a42:	2300      	movs	r3, #0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a4e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f023 0307 	bic.w	r3, r3, #7
 8003a66:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d117      	bne.n	8003aaa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00e      	beq.n	8003aaa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f001 fdcf 	bl	8005630 <DMA_CheckFifoParam>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2240      	movs	r2, #64	@ 0x40
 8003a9c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e197      	b.n	8003dda <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f001 fd0a 	bl	80054cc <DMA_CalcBaseAndBitshift>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	223f      	movs	r2, #63	@ 0x3f
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	e0cd      	b.n	8003c6a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a3b      	ldr	r2, [pc, #236]	@ (8003bc0 <HAL_DMA_Init+0x42c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d022      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a39      	ldr	r2, [pc, #228]	@ (8003bc4 <HAL_DMA_Init+0x430>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01d      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a38      	ldr	r2, [pc, #224]	@ (8003bc8 <HAL_DMA_Init+0x434>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d018      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a36      	ldr	r2, [pc, #216]	@ (8003bcc <HAL_DMA_Init+0x438>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d013      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a35      	ldr	r2, [pc, #212]	@ (8003bd0 <HAL_DMA_Init+0x43c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00e      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a33      	ldr	r2, [pc, #204]	@ (8003bd4 <HAL_DMA_Init+0x440>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d009      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a32      	ldr	r2, [pc, #200]	@ (8003bd8 <HAL_DMA_Init+0x444>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d004      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a30      	ldr	r2, [pc, #192]	@ (8003bdc <HAL_DMA_Init+0x448>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d101      	bne.n	8003b22 <HAL_DMA_Init+0x38e>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <HAL_DMA_Init+0x390>
 8003b22:	2300      	movs	r3, #0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8097 	beq.w	8003c58 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a24      	ldr	r2, [pc, #144]	@ (8003bc0 <HAL_DMA_Init+0x42c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d021      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a22      	ldr	r2, [pc, #136]	@ (8003bc4 <HAL_DMA_Init+0x430>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d01c      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a21      	ldr	r2, [pc, #132]	@ (8003bc8 <HAL_DMA_Init+0x434>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d017      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8003bcc <HAL_DMA_Init+0x438>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d012      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a1e      	ldr	r2, [pc, #120]	@ (8003bd0 <HAL_DMA_Init+0x43c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00d      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd4 <HAL_DMA_Init+0x440>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d008      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8003bd8 <HAL_DMA_Init+0x444>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d003      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a19      	ldr	r2, [pc, #100]	@ (8003bdc <HAL_DMA_Init+0x448>)
 8003b76:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	4b13      	ldr	r3, [pc, #76]	@ (8003be0 <HAL_DMA_Init+0x44c>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b40      	cmp	r3, #64	@ 0x40
 8003b9e:	d021      	beq.n	8003be4 <HAL_DMA_Init+0x450>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b80      	cmp	r3, #128	@ 0x80
 8003ba6:	d102      	bne.n	8003bae <HAL_DMA_Init+0x41a>
 8003ba8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003bac:	e01b      	b.n	8003be6 <HAL_DMA_Init+0x452>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	e019      	b.n	8003be6 <HAL_DMA_Init+0x452>
 8003bb2:	bf00      	nop
 8003bb4:	fe10803f 	.word	0xfe10803f
 8003bb8:	5c001000 	.word	0x5c001000
 8003bbc:	ffff0000 	.word	0xffff0000
 8003bc0:	58025408 	.word	0x58025408
 8003bc4:	5802541c 	.word	0x5802541c
 8003bc8:	58025430 	.word	0x58025430
 8003bcc:	58025444 	.word	0x58025444
 8003bd0:	58025458 	.word	0x58025458
 8003bd4:	5802546c 	.word	0x5802546c
 8003bd8:	58025480 	.word	0x58025480
 8003bdc:	58025494 	.word	0x58025494
 8003be0:	fffe000f 	.word	0xfffe000f
 8003be4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68d2      	ldr	r2, [r2, #12]
 8003bea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003bec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003bf4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003bfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c14:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	4b6e      	ldr	r3, [pc, #440]	@ (8003de4 <HAL_DMA_Init+0x650>)
 8003c2c:	4413      	add	r3, r2
 8003c2e:	4a6e      	ldr	r2, [pc, #440]	@ (8003de8 <HAL_DMA_Init+0x654>)
 8003c30:	fba2 2303 	umull	r2, r3, r2, r3
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	009a      	lsls	r2, r3, #2
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f001 fc45 	bl	80054cc <DMA_CalcBaseAndBitshift>
 8003c42:	4603      	mov	r3, r0
 8003c44:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c4a:	f003 031f 	and.w	r3, r3, #31
 8003c4e:	2201      	movs	r2, #1
 8003c50:	409a      	lsls	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	605a      	str	r2, [r3, #4]
 8003c56:	e008      	b.n	8003c6a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2240      	movs	r2, #64	@ 0x40
 8003c5c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2203      	movs	r2, #3
 8003c62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e0b7      	b.n	8003dda <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a5f      	ldr	r2, [pc, #380]	@ (8003dec <HAL_DMA_Init+0x658>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d072      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a5d      	ldr	r2, [pc, #372]	@ (8003df0 <HAL_DMA_Init+0x65c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d06d      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a5c      	ldr	r2, [pc, #368]	@ (8003df4 <HAL_DMA_Init+0x660>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d068      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a5a      	ldr	r2, [pc, #360]	@ (8003df8 <HAL_DMA_Init+0x664>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d063      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a59      	ldr	r2, [pc, #356]	@ (8003dfc <HAL_DMA_Init+0x668>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d05e      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a57      	ldr	r2, [pc, #348]	@ (8003e00 <HAL_DMA_Init+0x66c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d059      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a56      	ldr	r2, [pc, #344]	@ (8003e04 <HAL_DMA_Init+0x670>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d054      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a54      	ldr	r2, [pc, #336]	@ (8003e08 <HAL_DMA_Init+0x674>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d04f      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a53      	ldr	r2, [pc, #332]	@ (8003e0c <HAL_DMA_Init+0x678>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d04a      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a51      	ldr	r2, [pc, #324]	@ (8003e10 <HAL_DMA_Init+0x67c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d045      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a50      	ldr	r2, [pc, #320]	@ (8003e14 <HAL_DMA_Init+0x680>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d040      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a4e      	ldr	r2, [pc, #312]	@ (8003e18 <HAL_DMA_Init+0x684>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d03b      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a4d      	ldr	r2, [pc, #308]	@ (8003e1c <HAL_DMA_Init+0x688>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d036      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a4b      	ldr	r2, [pc, #300]	@ (8003e20 <HAL_DMA_Init+0x68c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d031      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a4a      	ldr	r2, [pc, #296]	@ (8003e24 <HAL_DMA_Init+0x690>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d02c      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a48      	ldr	r2, [pc, #288]	@ (8003e28 <HAL_DMA_Init+0x694>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d027      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a47      	ldr	r2, [pc, #284]	@ (8003e2c <HAL_DMA_Init+0x698>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d022      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a45      	ldr	r2, [pc, #276]	@ (8003e30 <HAL_DMA_Init+0x69c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d01d      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a44      	ldr	r2, [pc, #272]	@ (8003e34 <HAL_DMA_Init+0x6a0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d018      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a42      	ldr	r2, [pc, #264]	@ (8003e38 <HAL_DMA_Init+0x6a4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d013      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a41      	ldr	r2, [pc, #260]	@ (8003e3c <HAL_DMA_Init+0x6a8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00e      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a3f      	ldr	r2, [pc, #252]	@ (8003e40 <HAL_DMA_Init+0x6ac>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d009      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a3e      	ldr	r2, [pc, #248]	@ (8003e44 <HAL_DMA_Init+0x6b0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d004      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a3c      	ldr	r2, [pc, #240]	@ (8003e48 <HAL_DMA_Init+0x6b4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d101      	bne.n	8003d5e <HAL_DMA_Init+0x5ca>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <HAL_DMA_Init+0x5cc>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d032      	beq.n	8003dca <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f001 fcdf 	bl	8005728 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b80      	cmp	r3, #128	@ 0x80
 8003d70:	d102      	bne.n	8003d78 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003d8c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d010      	beq.n	8003db8 <HAL_DMA_Init+0x624>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d80c      	bhi.n	8003db8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f001 fd5c 	bl	800585c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	e008      	b.n	8003dca <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	a7fdabf8 	.word	0xa7fdabf8
 8003de8:	cccccccd 	.word	0xcccccccd
 8003dec:	40020010 	.word	0x40020010
 8003df0:	40020028 	.word	0x40020028
 8003df4:	40020040 	.word	0x40020040
 8003df8:	40020058 	.word	0x40020058
 8003dfc:	40020070 	.word	0x40020070
 8003e00:	40020088 	.word	0x40020088
 8003e04:	400200a0 	.word	0x400200a0
 8003e08:	400200b8 	.word	0x400200b8
 8003e0c:	40020410 	.word	0x40020410
 8003e10:	40020428 	.word	0x40020428
 8003e14:	40020440 	.word	0x40020440
 8003e18:	40020458 	.word	0x40020458
 8003e1c:	40020470 	.word	0x40020470
 8003e20:	40020488 	.word	0x40020488
 8003e24:	400204a0 	.word	0x400204a0
 8003e28:	400204b8 	.word	0x400204b8
 8003e2c:	58025408 	.word	0x58025408
 8003e30:	5802541c 	.word	0x5802541c
 8003e34:	58025430 	.word	0x58025430
 8003e38:	58025444 	.word	0x58025444
 8003e3c:	58025458 	.word	0x58025458
 8003e40:	5802546c 	.word	0x5802546c
 8003e44:	58025480 	.word	0x58025480
 8003e48:	58025494 	.word	0x58025494

08003e4c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e226      	b.n	80042b6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_DMA_Start_IT+0x2a>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e21f      	b.n	80042b6 <HAL_DMA_Start_IT+0x46a>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	f040 820a 	bne.w	80042a0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a68      	ldr	r2, [pc, #416]	@ (8004040 <HAL_DMA_Start_IT+0x1f4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d04a      	beq.n	8003f3a <HAL_DMA_Start_IT+0xee>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a66      	ldr	r2, [pc, #408]	@ (8004044 <HAL_DMA_Start_IT+0x1f8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d045      	beq.n	8003f3a <HAL_DMA_Start_IT+0xee>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a65      	ldr	r2, [pc, #404]	@ (8004048 <HAL_DMA_Start_IT+0x1fc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d040      	beq.n	8003f3a <HAL_DMA_Start_IT+0xee>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a63      	ldr	r2, [pc, #396]	@ (800404c <HAL_DMA_Start_IT+0x200>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d03b      	beq.n	8003f3a <HAL_DMA_Start_IT+0xee>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a62      	ldr	r2, [pc, #392]	@ (8004050 <HAL_DMA_Start_IT+0x204>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d036      	beq.n	8003f3a <HAL_DMA_Start_IT+0xee>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a60      	ldr	r2, [pc, #384]	@ (8004054 <HAL_DMA_Start_IT+0x208>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d031      	beq.n	8003f3a <HAL_DMA_Start_IT+0xee>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a5f      	ldr	r2, [pc, #380]	@ (8004058 <HAL_DMA_Start_IT+0x20c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d02c      	beq.n	8003f3a <HAL_DMA_Start_IT+0xee>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a5d      	ldr	r2, [pc, #372]	@ (800405c <HAL_DMA_Start_IT+0x210>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d027      	beq.n	8003f3a <HAL_DMA_Start_IT+0xee>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a5c      	ldr	r2, [pc, #368]	@ (8004060 <HAL_DMA_Start_IT+0x214>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d022      	beq.n	8003f3a <HAL_DMA_Start_IT+0xee>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a5a      	ldr	r2, [pc, #360]	@ (8004064 <HAL_DMA_Start_IT+0x218>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d01d      	beq.n	8003f3a <HAL_DMA_Start_IT+0xee>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a59      	ldr	r2, [pc, #356]	@ (8004068 <HAL_DMA_Start_IT+0x21c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d018      	beq.n	8003f3a <HAL_DMA_Start_IT+0xee>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a57      	ldr	r2, [pc, #348]	@ (800406c <HAL_DMA_Start_IT+0x220>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d013      	beq.n	8003f3a <HAL_DMA_Start_IT+0xee>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a56      	ldr	r2, [pc, #344]	@ (8004070 <HAL_DMA_Start_IT+0x224>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00e      	beq.n	8003f3a <HAL_DMA_Start_IT+0xee>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a54      	ldr	r2, [pc, #336]	@ (8004074 <HAL_DMA_Start_IT+0x228>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d009      	beq.n	8003f3a <HAL_DMA_Start_IT+0xee>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a53      	ldr	r2, [pc, #332]	@ (8004078 <HAL_DMA_Start_IT+0x22c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d004      	beq.n	8003f3a <HAL_DMA_Start_IT+0xee>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a51      	ldr	r2, [pc, #324]	@ (800407c <HAL_DMA_Start_IT+0x230>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d108      	bne.n	8003f4c <HAL_DMA_Start_IT+0x100>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0201 	bic.w	r2, r2, #1
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	e007      	b.n	8003f5c <HAL_DMA_Start_IT+0x110>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0201 	bic.w	r2, r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	68b9      	ldr	r1, [r7, #8]
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f001 f906 	bl	8005174 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a34      	ldr	r2, [pc, #208]	@ (8004040 <HAL_DMA_Start_IT+0x1f4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d04a      	beq.n	8004008 <HAL_DMA_Start_IT+0x1bc>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a33      	ldr	r2, [pc, #204]	@ (8004044 <HAL_DMA_Start_IT+0x1f8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d045      	beq.n	8004008 <HAL_DMA_Start_IT+0x1bc>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a31      	ldr	r2, [pc, #196]	@ (8004048 <HAL_DMA_Start_IT+0x1fc>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d040      	beq.n	8004008 <HAL_DMA_Start_IT+0x1bc>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a30      	ldr	r2, [pc, #192]	@ (800404c <HAL_DMA_Start_IT+0x200>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d03b      	beq.n	8004008 <HAL_DMA_Start_IT+0x1bc>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a2e      	ldr	r2, [pc, #184]	@ (8004050 <HAL_DMA_Start_IT+0x204>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d036      	beq.n	8004008 <HAL_DMA_Start_IT+0x1bc>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a2d      	ldr	r2, [pc, #180]	@ (8004054 <HAL_DMA_Start_IT+0x208>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d031      	beq.n	8004008 <HAL_DMA_Start_IT+0x1bc>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a2b      	ldr	r2, [pc, #172]	@ (8004058 <HAL_DMA_Start_IT+0x20c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d02c      	beq.n	8004008 <HAL_DMA_Start_IT+0x1bc>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a2a      	ldr	r2, [pc, #168]	@ (800405c <HAL_DMA_Start_IT+0x210>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d027      	beq.n	8004008 <HAL_DMA_Start_IT+0x1bc>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a28      	ldr	r2, [pc, #160]	@ (8004060 <HAL_DMA_Start_IT+0x214>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d022      	beq.n	8004008 <HAL_DMA_Start_IT+0x1bc>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a27      	ldr	r2, [pc, #156]	@ (8004064 <HAL_DMA_Start_IT+0x218>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d01d      	beq.n	8004008 <HAL_DMA_Start_IT+0x1bc>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a25      	ldr	r2, [pc, #148]	@ (8004068 <HAL_DMA_Start_IT+0x21c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d018      	beq.n	8004008 <HAL_DMA_Start_IT+0x1bc>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a24      	ldr	r2, [pc, #144]	@ (800406c <HAL_DMA_Start_IT+0x220>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d013      	beq.n	8004008 <HAL_DMA_Start_IT+0x1bc>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a22      	ldr	r2, [pc, #136]	@ (8004070 <HAL_DMA_Start_IT+0x224>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00e      	beq.n	8004008 <HAL_DMA_Start_IT+0x1bc>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a21      	ldr	r2, [pc, #132]	@ (8004074 <HAL_DMA_Start_IT+0x228>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d009      	beq.n	8004008 <HAL_DMA_Start_IT+0x1bc>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1f      	ldr	r2, [pc, #124]	@ (8004078 <HAL_DMA_Start_IT+0x22c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d004      	beq.n	8004008 <HAL_DMA_Start_IT+0x1bc>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a1e      	ldr	r2, [pc, #120]	@ (800407c <HAL_DMA_Start_IT+0x230>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d101      	bne.n	800400c <HAL_DMA_Start_IT+0x1c0>
 8004008:	2301      	movs	r3, #1
 800400a:	e000      	b.n	800400e <HAL_DMA_Start_IT+0x1c2>
 800400c:	2300      	movs	r3, #0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d036      	beq.n	8004080 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f023 021e 	bic.w	r2, r3, #30
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f042 0216 	orr.w	r2, r2, #22
 8004024:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402a:	2b00      	cmp	r3, #0
 800402c:	d03e      	beq.n	80040ac <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0208 	orr.w	r2, r2, #8
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	e035      	b.n	80040ac <HAL_DMA_Start_IT+0x260>
 8004040:	40020010 	.word	0x40020010
 8004044:	40020028 	.word	0x40020028
 8004048:	40020040 	.word	0x40020040
 800404c:	40020058 	.word	0x40020058
 8004050:	40020070 	.word	0x40020070
 8004054:	40020088 	.word	0x40020088
 8004058:	400200a0 	.word	0x400200a0
 800405c:	400200b8 	.word	0x400200b8
 8004060:	40020410 	.word	0x40020410
 8004064:	40020428 	.word	0x40020428
 8004068:	40020440 	.word	0x40020440
 800406c:	40020458 	.word	0x40020458
 8004070:	40020470 	.word	0x40020470
 8004074:	40020488 	.word	0x40020488
 8004078:	400204a0 	.word	0x400204a0
 800407c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f023 020e 	bic.w	r2, r3, #14
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 020a 	orr.w	r2, r2, #10
 8004092:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004098:	2b00      	cmp	r3, #0
 800409a:	d007      	beq.n	80040ac <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0204 	orr.w	r2, r2, #4
 80040aa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a83      	ldr	r2, [pc, #524]	@ (80042c0 <HAL_DMA_Start_IT+0x474>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d072      	beq.n	800419c <HAL_DMA_Start_IT+0x350>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a82      	ldr	r2, [pc, #520]	@ (80042c4 <HAL_DMA_Start_IT+0x478>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d06d      	beq.n	800419c <HAL_DMA_Start_IT+0x350>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a80      	ldr	r2, [pc, #512]	@ (80042c8 <HAL_DMA_Start_IT+0x47c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d068      	beq.n	800419c <HAL_DMA_Start_IT+0x350>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a7f      	ldr	r2, [pc, #508]	@ (80042cc <HAL_DMA_Start_IT+0x480>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d063      	beq.n	800419c <HAL_DMA_Start_IT+0x350>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a7d      	ldr	r2, [pc, #500]	@ (80042d0 <HAL_DMA_Start_IT+0x484>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d05e      	beq.n	800419c <HAL_DMA_Start_IT+0x350>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a7c      	ldr	r2, [pc, #496]	@ (80042d4 <HAL_DMA_Start_IT+0x488>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d059      	beq.n	800419c <HAL_DMA_Start_IT+0x350>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a7a      	ldr	r2, [pc, #488]	@ (80042d8 <HAL_DMA_Start_IT+0x48c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d054      	beq.n	800419c <HAL_DMA_Start_IT+0x350>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a79      	ldr	r2, [pc, #484]	@ (80042dc <HAL_DMA_Start_IT+0x490>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d04f      	beq.n	800419c <HAL_DMA_Start_IT+0x350>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a77      	ldr	r2, [pc, #476]	@ (80042e0 <HAL_DMA_Start_IT+0x494>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d04a      	beq.n	800419c <HAL_DMA_Start_IT+0x350>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a76      	ldr	r2, [pc, #472]	@ (80042e4 <HAL_DMA_Start_IT+0x498>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d045      	beq.n	800419c <HAL_DMA_Start_IT+0x350>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a74      	ldr	r2, [pc, #464]	@ (80042e8 <HAL_DMA_Start_IT+0x49c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d040      	beq.n	800419c <HAL_DMA_Start_IT+0x350>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a73      	ldr	r2, [pc, #460]	@ (80042ec <HAL_DMA_Start_IT+0x4a0>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d03b      	beq.n	800419c <HAL_DMA_Start_IT+0x350>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a71      	ldr	r2, [pc, #452]	@ (80042f0 <HAL_DMA_Start_IT+0x4a4>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d036      	beq.n	800419c <HAL_DMA_Start_IT+0x350>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a70      	ldr	r2, [pc, #448]	@ (80042f4 <HAL_DMA_Start_IT+0x4a8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d031      	beq.n	800419c <HAL_DMA_Start_IT+0x350>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a6e      	ldr	r2, [pc, #440]	@ (80042f8 <HAL_DMA_Start_IT+0x4ac>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d02c      	beq.n	800419c <HAL_DMA_Start_IT+0x350>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a6d      	ldr	r2, [pc, #436]	@ (80042fc <HAL_DMA_Start_IT+0x4b0>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d027      	beq.n	800419c <HAL_DMA_Start_IT+0x350>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a6b      	ldr	r2, [pc, #428]	@ (8004300 <HAL_DMA_Start_IT+0x4b4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d022      	beq.n	800419c <HAL_DMA_Start_IT+0x350>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a6a      	ldr	r2, [pc, #424]	@ (8004304 <HAL_DMA_Start_IT+0x4b8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d01d      	beq.n	800419c <HAL_DMA_Start_IT+0x350>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a68      	ldr	r2, [pc, #416]	@ (8004308 <HAL_DMA_Start_IT+0x4bc>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d018      	beq.n	800419c <HAL_DMA_Start_IT+0x350>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a67      	ldr	r2, [pc, #412]	@ (800430c <HAL_DMA_Start_IT+0x4c0>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d013      	beq.n	800419c <HAL_DMA_Start_IT+0x350>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a65      	ldr	r2, [pc, #404]	@ (8004310 <HAL_DMA_Start_IT+0x4c4>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00e      	beq.n	800419c <HAL_DMA_Start_IT+0x350>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a64      	ldr	r2, [pc, #400]	@ (8004314 <HAL_DMA_Start_IT+0x4c8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d009      	beq.n	800419c <HAL_DMA_Start_IT+0x350>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a62      	ldr	r2, [pc, #392]	@ (8004318 <HAL_DMA_Start_IT+0x4cc>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d004      	beq.n	800419c <HAL_DMA_Start_IT+0x350>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a61      	ldr	r2, [pc, #388]	@ (800431c <HAL_DMA_Start_IT+0x4d0>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d101      	bne.n	80041a0 <HAL_DMA_Start_IT+0x354>
 800419c:	2301      	movs	r3, #1
 800419e:	e000      	b.n	80041a2 <HAL_DMA_Start_IT+0x356>
 80041a0:	2300      	movs	r3, #0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d01a      	beq.n	80041dc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d007      	beq.n	80041c4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041c2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d007      	beq.n	80041dc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041da:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a37      	ldr	r2, [pc, #220]	@ (80042c0 <HAL_DMA_Start_IT+0x474>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d04a      	beq.n	800427c <HAL_DMA_Start_IT+0x430>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a36      	ldr	r2, [pc, #216]	@ (80042c4 <HAL_DMA_Start_IT+0x478>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d045      	beq.n	800427c <HAL_DMA_Start_IT+0x430>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a34      	ldr	r2, [pc, #208]	@ (80042c8 <HAL_DMA_Start_IT+0x47c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d040      	beq.n	800427c <HAL_DMA_Start_IT+0x430>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a33      	ldr	r2, [pc, #204]	@ (80042cc <HAL_DMA_Start_IT+0x480>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d03b      	beq.n	800427c <HAL_DMA_Start_IT+0x430>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a31      	ldr	r2, [pc, #196]	@ (80042d0 <HAL_DMA_Start_IT+0x484>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d036      	beq.n	800427c <HAL_DMA_Start_IT+0x430>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a30      	ldr	r2, [pc, #192]	@ (80042d4 <HAL_DMA_Start_IT+0x488>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d031      	beq.n	800427c <HAL_DMA_Start_IT+0x430>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a2e      	ldr	r2, [pc, #184]	@ (80042d8 <HAL_DMA_Start_IT+0x48c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d02c      	beq.n	800427c <HAL_DMA_Start_IT+0x430>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a2d      	ldr	r2, [pc, #180]	@ (80042dc <HAL_DMA_Start_IT+0x490>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d027      	beq.n	800427c <HAL_DMA_Start_IT+0x430>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a2b      	ldr	r2, [pc, #172]	@ (80042e0 <HAL_DMA_Start_IT+0x494>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d022      	beq.n	800427c <HAL_DMA_Start_IT+0x430>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a2a      	ldr	r2, [pc, #168]	@ (80042e4 <HAL_DMA_Start_IT+0x498>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d01d      	beq.n	800427c <HAL_DMA_Start_IT+0x430>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a28      	ldr	r2, [pc, #160]	@ (80042e8 <HAL_DMA_Start_IT+0x49c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d018      	beq.n	800427c <HAL_DMA_Start_IT+0x430>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a27      	ldr	r2, [pc, #156]	@ (80042ec <HAL_DMA_Start_IT+0x4a0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d013      	beq.n	800427c <HAL_DMA_Start_IT+0x430>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a25      	ldr	r2, [pc, #148]	@ (80042f0 <HAL_DMA_Start_IT+0x4a4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d00e      	beq.n	800427c <HAL_DMA_Start_IT+0x430>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a24      	ldr	r2, [pc, #144]	@ (80042f4 <HAL_DMA_Start_IT+0x4a8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d009      	beq.n	800427c <HAL_DMA_Start_IT+0x430>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a22      	ldr	r2, [pc, #136]	@ (80042f8 <HAL_DMA_Start_IT+0x4ac>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d004      	beq.n	800427c <HAL_DMA_Start_IT+0x430>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a21      	ldr	r2, [pc, #132]	@ (80042fc <HAL_DMA_Start_IT+0x4b0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d108      	bne.n	800428e <HAL_DMA_Start_IT+0x442>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	e012      	b.n	80042b4 <HAL_DMA_Start_IT+0x468>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0201 	orr.w	r2, r2, #1
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	e009      	b.n	80042b4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042a6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80042b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40020010 	.word	0x40020010
 80042c4:	40020028 	.word	0x40020028
 80042c8:	40020040 	.word	0x40020040
 80042cc:	40020058 	.word	0x40020058
 80042d0:	40020070 	.word	0x40020070
 80042d4:	40020088 	.word	0x40020088
 80042d8:	400200a0 	.word	0x400200a0
 80042dc:	400200b8 	.word	0x400200b8
 80042e0:	40020410 	.word	0x40020410
 80042e4:	40020428 	.word	0x40020428
 80042e8:	40020440 	.word	0x40020440
 80042ec:	40020458 	.word	0x40020458
 80042f0:	40020470 	.word	0x40020470
 80042f4:	40020488 	.word	0x40020488
 80042f8:	400204a0 	.word	0x400204a0
 80042fc:	400204b8 	.word	0x400204b8
 8004300:	58025408 	.word	0x58025408
 8004304:	5802541c 	.word	0x5802541c
 8004308:	58025430 	.word	0x58025430
 800430c:	58025444 	.word	0x58025444
 8004310:	58025458 	.word	0x58025458
 8004314:	5802546c 	.word	0x5802546c
 8004318:	58025480 	.word	0x58025480
 800431c:	58025494 	.word	0x58025494

08004320 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08a      	sub	sp, #40	@ 0x28
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800432c:	4b67      	ldr	r3, [pc, #412]	@ (80044cc <HAL_DMA_IRQHandler+0x1ac>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a67      	ldr	r2, [pc, #412]	@ (80044d0 <HAL_DMA_IRQHandler+0x1b0>)
 8004332:	fba2 2303 	umull	r2, r3, r2, r3
 8004336:	0a9b      	lsrs	r3, r3, #10
 8004338:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800433e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004344:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004346:	6a3b      	ldr	r3, [r7, #32]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a5f      	ldr	r2, [pc, #380]	@ (80044d4 <HAL_DMA_IRQHandler+0x1b4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d04a      	beq.n	80043f2 <HAL_DMA_IRQHandler+0xd2>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a5d      	ldr	r2, [pc, #372]	@ (80044d8 <HAL_DMA_IRQHandler+0x1b8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d045      	beq.n	80043f2 <HAL_DMA_IRQHandler+0xd2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a5c      	ldr	r2, [pc, #368]	@ (80044dc <HAL_DMA_IRQHandler+0x1bc>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d040      	beq.n	80043f2 <HAL_DMA_IRQHandler+0xd2>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a5a      	ldr	r2, [pc, #360]	@ (80044e0 <HAL_DMA_IRQHandler+0x1c0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d03b      	beq.n	80043f2 <HAL_DMA_IRQHandler+0xd2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a59      	ldr	r2, [pc, #356]	@ (80044e4 <HAL_DMA_IRQHandler+0x1c4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d036      	beq.n	80043f2 <HAL_DMA_IRQHandler+0xd2>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a57      	ldr	r2, [pc, #348]	@ (80044e8 <HAL_DMA_IRQHandler+0x1c8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d031      	beq.n	80043f2 <HAL_DMA_IRQHandler+0xd2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a56      	ldr	r2, [pc, #344]	@ (80044ec <HAL_DMA_IRQHandler+0x1cc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d02c      	beq.n	80043f2 <HAL_DMA_IRQHandler+0xd2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a54      	ldr	r2, [pc, #336]	@ (80044f0 <HAL_DMA_IRQHandler+0x1d0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d027      	beq.n	80043f2 <HAL_DMA_IRQHandler+0xd2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a53      	ldr	r2, [pc, #332]	@ (80044f4 <HAL_DMA_IRQHandler+0x1d4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d022      	beq.n	80043f2 <HAL_DMA_IRQHandler+0xd2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a51      	ldr	r2, [pc, #324]	@ (80044f8 <HAL_DMA_IRQHandler+0x1d8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d01d      	beq.n	80043f2 <HAL_DMA_IRQHandler+0xd2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a50      	ldr	r2, [pc, #320]	@ (80044fc <HAL_DMA_IRQHandler+0x1dc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d018      	beq.n	80043f2 <HAL_DMA_IRQHandler+0xd2>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a4e      	ldr	r2, [pc, #312]	@ (8004500 <HAL_DMA_IRQHandler+0x1e0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d013      	beq.n	80043f2 <HAL_DMA_IRQHandler+0xd2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a4d      	ldr	r2, [pc, #308]	@ (8004504 <HAL_DMA_IRQHandler+0x1e4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00e      	beq.n	80043f2 <HAL_DMA_IRQHandler+0xd2>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a4b      	ldr	r2, [pc, #300]	@ (8004508 <HAL_DMA_IRQHandler+0x1e8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d009      	beq.n	80043f2 <HAL_DMA_IRQHandler+0xd2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a4a      	ldr	r2, [pc, #296]	@ (800450c <HAL_DMA_IRQHandler+0x1ec>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d004      	beq.n	80043f2 <HAL_DMA_IRQHandler+0xd2>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a48      	ldr	r2, [pc, #288]	@ (8004510 <HAL_DMA_IRQHandler+0x1f0>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d101      	bne.n	80043f6 <HAL_DMA_IRQHandler+0xd6>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <HAL_DMA_IRQHandler+0xd8>
 80043f6:	2300      	movs	r3, #0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 842b 	beq.w	8004c54 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004402:	f003 031f 	and.w	r3, r3, #31
 8004406:	2208      	movs	r2, #8
 8004408:	409a      	lsls	r2, r3
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	4013      	ands	r3, r2
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 80a2 	beq.w	8004558 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a2e      	ldr	r2, [pc, #184]	@ (80044d4 <HAL_DMA_IRQHandler+0x1b4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d04a      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x194>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a2d      	ldr	r2, [pc, #180]	@ (80044d8 <HAL_DMA_IRQHandler+0x1b8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d045      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x194>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a2b      	ldr	r2, [pc, #172]	@ (80044dc <HAL_DMA_IRQHandler+0x1bc>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d040      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x194>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a2a      	ldr	r2, [pc, #168]	@ (80044e0 <HAL_DMA_IRQHandler+0x1c0>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d03b      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x194>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a28      	ldr	r2, [pc, #160]	@ (80044e4 <HAL_DMA_IRQHandler+0x1c4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d036      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x194>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a27      	ldr	r2, [pc, #156]	@ (80044e8 <HAL_DMA_IRQHandler+0x1c8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d031      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x194>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a25      	ldr	r2, [pc, #148]	@ (80044ec <HAL_DMA_IRQHandler+0x1cc>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d02c      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x194>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a24      	ldr	r2, [pc, #144]	@ (80044f0 <HAL_DMA_IRQHandler+0x1d0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d027      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x194>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a22      	ldr	r2, [pc, #136]	@ (80044f4 <HAL_DMA_IRQHandler+0x1d4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d022      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x194>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a21      	ldr	r2, [pc, #132]	@ (80044f8 <HAL_DMA_IRQHandler+0x1d8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d01d      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x194>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a1f      	ldr	r2, [pc, #124]	@ (80044fc <HAL_DMA_IRQHandler+0x1dc>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d018      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x194>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a1e      	ldr	r2, [pc, #120]	@ (8004500 <HAL_DMA_IRQHandler+0x1e0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d013      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x194>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a1c      	ldr	r2, [pc, #112]	@ (8004504 <HAL_DMA_IRQHandler+0x1e4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d00e      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x194>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a1b      	ldr	r2, [pc, #108]	@ (8004508 <HAL_DMA_IRQHandler+0x1e8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d009      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x194>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a19      	ldr	r2, [pc, #100]	@ (800450c <HAL_DMA_IRQHandler+0x1ec>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d004      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x194>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a18      	ldr	r2, [pc, #96]	@ (8004510 <HAL_DMA_IRQHandler+0x1f0>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d12f      	bne.n	8004514 <HAL_DMA_IRQHandler+0x1f4>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0304 	and.w	r3, r3, #4
 80044be:	2b00      	cmp	r3, #0
 80044c0:	bf14      	ite	ne
 80044c2:	2301      	movne	r3, #1
 80044c4:	2300      	moveq	r3, #0
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	e02e      	b.n	8004528 <HAL_DMA_IRQHandler+0x208>
 80044ca:	bf00      	nop
 80044cc:	24000000 	.word	0x24000000
 80044d0:	1b4e81b5 	.word	0x1b4e81b5
 80044d4:	40020010 	.word	0x40020010
 80044d8:	40020028 	.word	0x40020028
 80044dc:	40020040 	.word	0x40020040
 80044e0:	40020058 	.word	0x40020058
 80044e4:	40020070 	.word	0x40020070
 80044e8:	40020088 	.word	0x40020088
 80044ec:	400200a0 	.word	0x400200a0
 80044f0:	400200b8 	.word	0x400200b8
 80044f4:	40020410 	.word	0x40020410
 80044f8:	40020428 	.word	0x40020428
 80044fc:	40020440 	.word	0x40020440
 8004500:	40020458 	.word	0x40020458
 8004504:	40020470 	.word	0x40020470
 8004508:	40020488 	.word	0x40020488
 800450c:	400204a0 	.word	0x400204a0
 8004510:	400204b8 	.word	0x400204b8
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b00      	cmp	r3, #0
 8004520:	bf14      	ite	ne
 8004522:	2301      	movne	r3, #1
 8004524:	2300      	moveq	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d015      	beq.n	8004558 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0204 	bic.w	r2, r2, #4
 800453a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004540:	f003 031f 	and.w	r3, r3, #31
 8004544:	2208      	movs	r2, #8
 8004546:	409a      	lsls	r2, r3
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004550:	f043 0201 	orr.w	r2, r3, #1
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800455c:	f003 031f 	and.w	r3, r3, #31
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	fa22 f303 	lsr.w	r3, r2, r3
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d06e      	beq.n	800464c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a69      	ldr	r2, [pc, #420]	@ (8004718 <HAL_DMA_IRQHandler+0x3f8>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d04a      	beq.n	800460e <HAL_DMA_IRQHandler+0x2ee>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a67      	ldr	r2, [pc, #412]	@ (800471c <HAL_DMA_IRQHandler+0x3fc>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d045      	beq.n	800460e <HAL_DMA_IRQHandler+0x2ee>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a66      	ldr	r2, [pc, #408]	@ (8004720 <HAL_DMA_IRQHandler+0x400>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d040      	beq.n	800460e <HAL_DMA_IRQHandler+0x2ee>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a64      	ldr	r2, [pc, #400]	@ (8004724 <HAL_DMA_IRQHandler+0x404>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d03b      	beq.n	800460e <HAL_DMA_IRQHandler+0x2ee>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a63      	ldr	r2, [pc, #396]	@ (8004728 <HAL_DMA_IRQHandler+0x408>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d036      	beq.n	800460e <HAL_DMA_IRQHandler+0x2ee>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a61      	ldr	r2, [pc, #388]	@ (800472c <HAL_DMA_IRQHandler+0x40c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d031      	beq.n	800460e <HAL_DMA_IRQHandler+0x2ee>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a60      	ldr	r2, [pc, #384]	@ (8004730 <HAL_DMA_IRQHandler+0x410>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d02c      	beq.n	800460e <HAL_DMA_IRQHandler+0x2ee>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a5e      	ldr	r2, [pc, #376]	@ (8004734 <HAL_DMA_IRQHandler+0x414>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d027      	beq.n	800460e <HAL_DMA_IRQHandler+0x2ee>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a5d      	ldr	r2, [pc, #372]	@ (8004738 <HAL_DMA_IRQHandler+0x418>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d022      	beq.n	800460e <HAL_DMA_IRQHandler+0x2ee>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a5b      	ldr	r2, [pc, #364]	@ (800473c <HAL_DMA_IRQHandler+0x41c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d01d      	beq.n	800460e <HAL_DMA_IRQHandler+0x2ee>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a5a      	ldr	r2, [pc, #360]	@ (8004740 <HAL_DMA_IRQHandler+0x420>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d018      	beq.n	800460e <HAL_DMA_IRQHandler+0x2ee>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a58      	ldr	r2, [pc, #352]	@ (8004744 <HAL_DMA_IRQHandler+0x424>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d013      	beq.n	800460e <HAL_DMA_IRQHandler+0x2ee>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a57      	ldr	r2, [pc, #348]	@ (8004748 <HAL_DMA_IRQHandler+0x428>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00e      	beq.n	800460e <HAL_DMA_IRQHandler+0x2ee>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a55      	ldr	r2, [pc, #340]	@ (800474c <HAL_DMA_IRQHandler+0x42c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d009      	beq.n	800460e <HAL_DMA_IRQHandler+0x2ee>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a54      	ldr	r2, [pc, #336]	@ (8004750 <HAL_DMA_IRQHandler+0x430>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d004      	beq.n	800460e <HAL_DMA_IRQHandler+0x2ee>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a52      	ldr	r2, [pc, #328]	@ (8004754 <HAL_DMA_IRQHandler+0x434>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d10a      	bne.n	8004624 <HAL_DMA_IRQHandler+0x304>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004618:	2b00      	cmp	r3, #0
 800461a:	bf14      	ite	ne
 800461c:	2301      	movne	r3, #1
 800461e:	2300      	moveq	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	e003      	b.n	800462c <HAL_DMA_IRQHandler+0x30c>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2300      	movs	r3, #0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00d      	beq.n	800464c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004634:	f003 031f 	and.w	r3, r3, #31
 8004638:	2201      	movs	r2, #1
 800463a:	409a      	lsls	r2, r3
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004644:	f043 0202 	orr.w	r2, r3, #2
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004650:	f003 031f 	and.w	r3, r3, #31
 8004654:	2204      	movs	r2, #4
 8004656:	409a      	lsls	r2, r3
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	4013      	ands	r3, r2
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 808f 	beq.w	8004780 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a2c      	ldr	r2, [pc, #176]	@ (8004718 <HAL_DMA_IRQHandler+0x3f8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d04a      	beq.n	8004702 <HAL_DMA_IRQHandler+0x3e2>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a2a      	ldr	r2, [pc, #168]	@ (800471c <HAL_DMA_IRQHandler+0x3fc>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d045      	beq.n	8004702 <HAL_DMA_IRQHandler+0x3e2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a29      	ldr	r2, [pc, #164]	@ (8004720 <HAL_DMA_IRQHandler+0x400>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d040      	beq.n	8004702 <HAL_DMA_IRQHandler+0x3e2>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a27      	ldr	r2, [pc, #156]	@ (8004724 <HAL_DMA_IRQHandler+0x404>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d03b      	beq.n	8004702 <HAL_DMA_IRQHandler+0x3e2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a26      	ldr	r2, [pc, #152]	@ (8004728 <HAL_DMA_IRQHandler+0x408>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d036      	beq.n	8004702 <HAL_DMA_IRQHandler+0x3e2>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a24      	ldr	r2, [pc, #144]	@ (800472c <HAL_DMA_IRQHandler+0x40c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d031      	beq.n	8004702 <HAL_DMA_IRQHandler+0x3e2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a23      	ldr	r2, [pc, #140]	@ (8004730 <HAL_DMA_IRQHandler+0x410>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d02c      	beq.n	8004702 <HAL_DMA_IRQHandler+0x3e2>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a21      	ldr	r2, [pc, #132]	@ (8004734 <HAL_DMA_IRQHandler+0x414>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d027      	beq.n	8004702 <HAL_DMA_IRQHandler+0x3e2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a20      	ldr	r2, [pc, #128]	@ (8004738 <HAL_DMA_IRQHandler+0x418>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d022      	beq.n	8004702 <HAL_DMA_IRQHandler+0x3e2>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1e      	ldr	r2, [pc, #120]	@ (800473c <HAL_DMA_IRQHandler+0x41c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d01d      	beq.n	8004702 <HAL_DMA_IRQHandler+0x3e2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1d      	ldr	r2, [pc, #116]	@ (8004740 <HAL_DMA_IRQHandler+0x420>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d018      	beq.n	8004702 <HAL_DMA_IRQHandler+0x3e2>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004744 <HAL_DMA_IRQHandler+0x424>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d013      	beq.n	8004702 <HAL_DMA_IRQHandler+0x3e2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1a      	ldr	r2, [pc, #104]	@ (8004748 <HAL_DMA_IRQHandler+0x428>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d00e      	beq.n	8004702 <HAL_DMA_IRQHandler+0x3e2>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a18      	ldr	r2, [pc, #96]	@ (800474c <HAL_DMA_IRQHandler+0x42c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d009      	beq.n	8004702 <HAL_DMA_IRQHandler+0x3e2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a17      	ldr	r2, [pc, #92]	@ (8004750 <HAL_DMA_IRQHandler+0x430>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d004      	beq.n	8004702 <HAL_DMA_IRQHandler+0x3e2>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a15      	ldr	r2, [pc, #84]	@ (8004754 <HAL_DMA_IRQHandler+0x434>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d12a      	bne.n	8004758 <HAL_DMA_IRQHandler+0x438>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	bf14      	ite	ne
 8004710:	2301      	movne	r3, #1
 8004712:	2300      	moveq	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	e023      	b.n	8004760 <HAL_DMA_IRQHandler+0x440>
 8004718:	40020010 	.word	0x40020010
 800471c:	40020028 	.word	0x40020028
 8004720:	40020040 	.word	0x40020040
 8004724:	40020058 	.word	0x40020058
 8004728:	40020070 	.word	0x40020070
 800472c:	40020088 	.word	0x40020088
 8004730:	400200a0 	.word	0x400200a0
 8004734:	400200b8 	.word	0x400200b8
 8004738:	40020410 	.word	0x40020410
 800473c:	40020428 	.word	0x40020428
 8004740:	40020440 	.word	0x40020440
 8004744:	40020458 	.word	0x40020458
 8004748:	40020470 	.word	0x40020470
 800474c:	40020488 	.word	0x40020488
 8004750:	400204a0 	.word	0x400204a0
 8004754:	400204b8 	.word	0x400204b8
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2300      	movs	r3, #0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00d      	beq.n	8004780 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004768:	f003 031f 	and.w	r3, r3, #31
 800476c:	2204      	movs	r2, #4
 800476e:	409a      	lsls	r2, r3
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004778:	f043 0204 	orr.w	r2, r3, #4
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004784:	f003 031f 	and.w	r3, r3, #31
 8004788:	2210      	movs	r2, #16
 800478a:	409a      	lsls	r2, r3
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	4013      	ands	r3, r2
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 80a6 	beq.w	80048e2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a85      	ldr	r2, [pc, #532]	@ (80049b0 <HAL_DMA_IRQHandler+0x690>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d04a      	beq.n	8004836 <HAL_DMA_IRQHandler+0x516>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a83      	ldr	r2, [pc, #524]	@ (80049b4 <HAL_DMA_IRQHandler+0x694>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d045      	beq.n	8004836 <HAL_DMA_IRQHandler+0x516>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a82      	ldr	r2, [pc, #520]	@ (80049b8 <HAL_DMA_IRQHandler+0x698>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d040      	beq.n	8004836 <HAL_DMA_IRQHandler+0x516>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a80      	ldr	r2, [pc, #512]	@ (80049bc <HAL_DMA_IRQHandler+0x69c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d03b      	beq.n	8004836 <HAL_DMA_IRQHandler+0x516>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a7f      	ldr	r2, [pc, #508]	@ (80049c0 <HAL_DMA_IRQHandler+0x6a0>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d036      	beq.n	8004836 <HAL_DMA_IRQHandler+0x516>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a7d      	ldr	r2, [pc, #500]	@ (80049c4 <HAL_DMA_IRQHandler+0x6a4>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d031      	beq.n	8004836 <HAL_DMA_IRQHandler+0x516>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a7c      	ldr	r2, [pc, #496]	@ (80049c8 <HAL_DMA_IRQHandler+0x6a8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d02c      	beq.n	8004836 <HAL_DMA_IRQHandler+0x516>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a7a      	ldr	r2, [pc, #488]	@ (80049cc <HAL_DMA_IRQHandler+0x6ac>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d027      	beq.n	8004836 <HAL_DMA_IRQHandler+0x516>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a79      	ldr	r2, [pc, #484]	@ (80049d0 <HAL_DMA_IRQHandler+0x6b0>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d022      	beq.n	8004836 <HAL_DMA_IRQHandler+0x516>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a77      	ldr	r2, [pc, #476]	@ (80049d4 <HAL_DMA_IRQHandler+0x6b4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d01d      	beq.n	8004836 <HAL_DMA_IRQHandler+0x516>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a76      	ldr	r2, [pc, #472]	@ (80049d8 <HAL_DMA_IRQHandler+0x6b8>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d018      	beq.n	8004836 <HAL_DMA_IRQHandler+0x516>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a74      	ldr	r2, [pc, #464]	@ (80049dc <HAL_DMA_IRQHandler+0x6bc>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d013      	beq.n	8004836 <HAL_DMA_IRQHandler+0x516>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a73      	ldr	r2, [pc, #460]	@ (80049e0 <HAL_DMA_IRQHandler+0x6c0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d00e      	beq.n	8004836 <HAL_DMA_IRQHandler+0x516>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a71      	ldr	r2, [pc, #452]	@ (80049e4 <HAL_DMA_IRQHandler+0x6c4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d009      	beq.n	8004836 <HAL_DMA_IRQHandler+0x516>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a70      	ldr	r2, [pc, #448]	@ (80049e8 <HAL_DMA_IRQHandler+0x6c8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d004      	beq.n	8004836 <HAL_DMA_IRQHandler+0x516>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a6e      	ldr	r2, [pc, #440]	@ (80049ec <HAL_DMA_IRQHandler+0x6cc>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d10a      	bne.n	800484c <HAL_DMA_IRQHandler+0x52c>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b00      	cmp	r3, #0
 8004842:	bf14      	ite	ne
 8004844:	2301      	movne	r3, #1
 8004846:	2300      	moveq	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	e009      	b.n	8004860 <HAL_DMA_IRQHandler+0x540>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b00      	cmp	r3, #0
 8004858:	bf14      	ite	ne
 800485a:	2301      	movne	r3, #1
 800485c:	2300      	moveq	r3, #0
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d03e      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004868:	f003 031f 	and.w	r3, r3, #31
 800486c:	2210      	movs	r2, #16
 800486e:	409a      	lsls	r2, r3
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d018      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d108      	bne.n	80048a2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004894:	2b00      	cmp	r3, #0
 8004896:	d024      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	4798      	blx	r3
 80048a0:	e01f      	b.n	80048e2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d01b      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	4798      	blx	r3
 80048b2:	e016      	b.n	80048e2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d107      	bne.n	80048d2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0208 	bic.w	r2, r2, #8
 80048d0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e6:	f003 031f 	and.w	r3, r3, #31
 80048ea:	2220      	movs	r2, #32
 80048ec:	409a      	lsls	r2, r3
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	4013      	ands	r3, r2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 8110 	beq.w	8004b18 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a2c      	ldr	r2, [pc, #176]	@ (80049b0 <HAL_DMA_IRQHandler+0x690>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d04a      	beq.n	8004998 <HAL_DMA_IRQHandler+0x678>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a2b      	ldr	r2, [pc, #172]	@ (80049b4 <HAL_DMA_IRQHandler+0x694>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d045      	beq.n	8004998 <HAL_DMA_IRQHandler+0x678>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a29      	ldr	r2, [pc, #164]	@ (80049b8 <HAL_DMA_IRQHandler+0x698>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d040      	beq.n	8004998 <HAL_DMA_IRQHandler+0x678>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a28      	ldr	r2, [pc, #160]	@ (80049bc <HAL_DMA_IRQHandler+0x69c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d03b      	beq.n	8004998 <HAL_DMA_IRQHandler+0x678>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a26      	ldr	r2, [pc, #152]	@ (80049c0 <HAL_DMA_IRQHandler+0x6a0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d036      	beq.n	8004998 <HAL_DMA_IRQHandler+0x678>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a25      	ldr	r2, [pc, #148]	@ (80049c4 <HAL_DMA_IRQHandler+0x6a4>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d031      	beq.n	8004998 <HAL_DMA_IRQHandler+0x678>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a23      	ldr	r2, [pc, #140]	@ (80049c8 <HAL_DMA_IRQHandler+0x6a8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d02c      	beq.n	8004998 <HAL_DMA_IRQHandler+0x678>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a22      	ldr	r2, [pc, #136]	@ (80049cc <HAL_DMA_IRQHandler+0x6ac>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d027      	beq.n	8004998 <HAL_DMA_IRQHandler+0x678>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a20      	ldr	r2, [pc, #128]	@ (80049d0 <HAL_DMA_IRQHandler+0x6b0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d022      	beq.n	8004998 <HAL_DMA_IRQHandler+0x678>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a1f      	ldr	r2, [pc, #124]	@ (80049d4 <HAL_DMA_IRQHandler+0x6b4>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d01d      	beq.n	8004998 <HAL_DMA_IRQHandler+0x678>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a1d      	ldr	r2, [pc, #116]	@ (80049d8 <HAL_DMA_IRQHandler+0x6b8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d018      	beq.n	8004998 <HAL_DMA_IRQHandler+0x678>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a1c      	ldr	r2, [pc, #112]	@ (80049dc <HAL_DMA_IRQHandler+0x6bc>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d013      	beq.n	8004998 <HAL_DMA_IRQHandler+0x678>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a1a      	ldr	r2, [pc, #104]	@ (80049e0 <HAL_DMA_IRQHandler+0x6c0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00e      	beq.n	8004998 <HAL_DMA_IRQHandler+0x678>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a19      	ldr	r2, [pc, #100]	@ (80049e4 <HAL_DMA_IRQHandler+0x6c4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d009      	beq.n	8004998 <HAL_DMA_IRQHandler+0x678>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a17      	ldr	r2, [pc, #92]	@ (80049e8 <HAL_DMA_IRQHandler+0x6c8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d004      	beq.n	8004998 <HAL_DMA_IRQHandler+0x678>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a16      	ldr	r2, [pc, #88]	@ (80049ec <HAL_DMA_IRQHandler+0x6cc>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d12b      	bne.n	80049f0 <HAL_DMA_IRQHandler+0x6d0>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	bf14      	ite	ne
 80049a6:	2301      	movne	r3, #1
 80049a8:	2300      	moveq	r3, #0
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	e02a      	b.n	8004a04 <HAL_DMA_IRQHandler+0x6e4>
 80049ae:	bf00      	nop
 80049b0:	40020010 	.word	0x40020010
 80049b4:	40020028 	.word	0x40020028
 80049b8:	40020040 	.word	0x40020040
 80049bc:	40020058 	.word	0x40020058
 80049c0:	40020070 	.word	0x40020070
 80049c4:	40020088 	.word	0x40020088
 80049c8:	400200a0 	.word	0x400200a0
 80049cc:	400200b8 	.word	0x400200b8
 80049d0:	40020410 	.word	0x40020410
 80049d4:	40020428 	.word	0x40020428
 80049d8:	40020440 	.word	0x40020440
 80049dc:	40020458 	.word	0x40020458
 80049e0:	40020470 	.word	0x40020470
 80049e4:	40020488 	.word	0x40020488
 80049e8:	400204a0 	.word	0x400204a0
 80049ec:	400204b8 	.word	0x400204b8
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	bf14      	ite	ne
 80049fe:	2301      	movne	r3, #1
 8004a00:	2300      	moveq	r3, #0
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 8087 	beq.w	8004b18 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a0e:	f003 031f 	and.w	r3, r3, #31
 8004a12:	2220      	movs	r2, #32
 8004a14:	409a      	lsls	r2, r3
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d139      	bne.n	8004a9a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0216 	bic.w	r2, r2, #22
 8004a34:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695a      	ldr	r2, [r3, #20]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a44:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d103      	bne.n	8004a56 <HAL_DMA_IRQHandler+0x736>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d007      	beq.n	8004a66 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0208 	bic.w	r2, r2, #8
 8004a64:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a6a:	f003 031f 	and.w	r3, r3, #31
 8004a6e:	223f      	movs	r2, #63	@ 0x3f
 8004a70:	409a      	lsls	r2, r3
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 834a 	beq.w	8005124 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	4798      	blx	r3
          }
          return;
 8004a98:	e344      	b.n	8005124 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d018      	beq.n	8004ada <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d108      	bne.n	8004ac8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d02c      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	4798      	blx	r3
 8004ac6:	e027      	b.n	8004b18 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d023      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	4798      	blx	r3
 8004ad8:	e01e      	b.n	8004b18 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10f      	bne.n	8004b08 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0210 	bic.w	r2, r2, #16
 8004af6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 8306 	beq.w	800512e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 8088 	beq.w	8004c40 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2204      	movs	r2, #4
 8004b34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a7a      	ldr	r2, [pc, #488]	@ (8004d28 <HAL_DMA_IRQHandler+0xa08>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d04a      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x8b8>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a79      	ldr	r2, [pc, #484]	@ (8004d2c <HAL_DMA_IRQHandler+0xa0c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d045      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x8b8>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a77      	ldr	r2, [pc, #476]	@ (8004d30 <HAL_DMA_IRQHandler+0xa10>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d040      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x8b8>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a76      	ldr	r2, [pc, #472]	@ (8004d34 <HAL_DMA_IRQHandler+0xa14>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d03b      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x8b8>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a74      	ldr	r2, [pc, #464]	@ (8004d38 <HAL_DMA_IRQHandler+0xa18>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d036      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x8b8>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a73      	ldr	r2, [pc, #460]	@ (8004d3c <HAL_DMA_IRQHandler+0xa1c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d031      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x8b8>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a71      	ldr	r2, [pc, #452]	@ (8004d40 <HAL_DMA_IRQHandler+0xa20>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d02c      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x8b8>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a70      	ldr	r2, [pc, #448]	@ (8004d44 <HAL_DMA_IRQHandler+0xa24>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d027      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x8b8>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a6e      	ldr	r2, [pc, #440]	@ (8004d48 <HAL_DMA_IRQHandler+0xa28>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d022      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x8b8>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a6d      	ldr	r2, [pc, #436]	@ (8004d4c <HAL_DMA_IRQHandler+0xa2c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d01d      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x8b8>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a6b      	ldr	r2, [pc, #428]	@ (8004d50 <HAL_DMA_IRQHandler+0xa30>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d018      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x8b8>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a6a      	ldr	r2, [pc, #424]	@ (8004d54 <HAL_DMA_IRQHandler+0xa34>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d013      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x8b8>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a68      	ldr	r2, [pc, #416]	@ (8004d58 <HAL_DMA_IRQHandler+0xa38>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00e      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x8b8>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a67      	ldr	r2, [pc, #412]	@ (8004d5c <HAL_DMA_IRQHandler+0xa3c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d009      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x8b8>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a65      	ldr	r2, [pc, #404]	@ (8004d60 <HAL_DMA_IRQHandler+0xa40>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x8b8>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a64      	ldr	r2, [pc, #400]	@ (8004d64 <HAL_DMA_IRQHandler+0xa44>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d108      	bne.n	8004bea <HAL_DMA_IRQHandler+0x8ca>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0201 	bic.w	r2, r2, #1
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	e007      	b.n	8004bfa <HAL_DMA_IRQHandler+0x8da>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0201 	bic.w	r2, r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d307      	bcc.n	8004c16 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1f2      	bne.n	8004bfa <HAL_DMA_IRQHandler+0x8da>
 8004c14:	e000      	b.n	8004c18 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004c16:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d004      	beq.n	8004c30 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2203      	movs	r2, #3
 8004c2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004c2e:	e003      	b.n	8004c38 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 8272 	beq.w	800512e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	4798      	blx	r3
 8004c52:	e26c      	b.n	800512e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a43      	ldr	r2, [pc, #268]	@ (8004d68 <HAL_DMA_IRQHandler+0xa48>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d022      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x984>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a42      	ldr	r2, [pc, #264]	@ (8004d6c <HAL_DMA_IRQHandler+0xa4c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d01d      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x984>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a40      	ldr	r2, [pc, #256]	@ (8004d70 <HAL_DMA_IRQHandler+0xa50>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d018      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x984>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a3f      	ldr	r2, [pc, #252]	@ (8004d74 <HAL_DMA_IRQHandler+0xa54>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d013      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x984>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a3d      	ldr	r2, [pc, #244]	@ (8004d78 <HAL_DMA_IRQHandler+0xa58>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d00e      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x984>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a3c      	ldr	r2, [pc, #240]	@ (8004d7c <HAL_DMA_IRQHandler+0xa5c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d009      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x984>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a3a      	ldr	r2, [pc, #232]	@ (8004d80 <HAL_DMA_IRQHandler+0xa60>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d004      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x984>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a39      	ldr	r2, [pc, #228]	@ (8004d84 <HAL_DMA_IRQHandler+0xa64>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d101      	bne.n	8004ca8 <HAL_DMA_IRQHandler+0x988>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e000      	b.n	8004caa <HAL_DMA_IRQHandler+0x98a>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 823f 	beq.w	800512e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cbc:	f003 031f 	and.w	r3, r3, #31
 8004cc0:	2204      	movs	r2, #4
 8004cc2:	409a      	lsls	r2, r3
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 80cd 	beq.w	8004e68 <HAL_DMA_IRQHandler+0xb48>
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 80c7 	beq.w	8004e68 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cde:	f003 031f 	and.w	r3, r3, #31
 8004ce2:	2204      	movs	r2, #4
 8004ce4:	409a      	lsls	r2, r3
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d049      	beq.n	8004d88 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d109      	bne.n	8004d12 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 8210 	beq.w	8005128 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d10:	e20a      	b.n	8005128 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 8206 	beq.w	8005128 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d24:	e200      	b.n	8005128 <HAL_DMA_IRQHandler+0xe08>
 8004d26:	bf00      	nop
 8004d28:	40020010 	.word	0x40020010
 8004d2c:	40020028 	.word	0x40020028
 8004d30:	40020040 	.word	0x40020040
 8004d34:	40020058 	.word	0x40020058
 8004d38:	40020070 	.word	0x40020070
 8004d3c:	40020088 	.word	0x40020088
 8004d40:	400200a0 	.word	0x400200a0
 8004d44:	400200b8 	.word	0x400200b8
 8004d48:	40020410 	.word	0x40020410
 8004d4c:	40020428 	.word	0x40020428
 8004d50:	40020440 	.word	0x40020440
 8004d54:	40020458 	.word	0x40020458
 8004d58:	40020470 	.word	0x40020470
 8004d5c:	40020488 	.word	0x40020488
 8004d60:	400204a0 	.word	0x400204a0
 8004d64:	400204b8 	.word	0x400204b8
 8004d68:	58025408 	.word	0x58025408
 8004d6c:	5802541c 	.word	0x5802541c
 8004d70:	58025430 	.word	0x58025430
 8004d74:	58025444 	.word	0x58025444
 8004d78:	58025458 	.word	0x58025458
 8004d7c:	5802546c 	.word	0x5802546c
 8004d80:	58025480 	.word	0x58025480
 8004d84:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f003 0320 	and.w	r3, r3, #32
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d160      	bne.n	8004e54 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a7f      	ldr	r2, [pc, #508]	@ (8004f94 <HAL_DMA_IRQHandler+0xc74>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d04a      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xb12>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a7d      	ldr	r2, [pc, #500]	@ (8004f98 <HAL_DMA_IRQHandler+0xc78>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d045      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xb12>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a7c      	ldr	r2, [pc, #496]	@ (8004f9c <HAL_DMA_IRQHandler+0xc7c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d040      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xb12>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a7a      	ldr	r2, [pc, #488]	@ (8004fa0 <HAL_DMA_IRQHandler+0xc80>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d03b      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xb12>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a79      	ldr	r2, [pc, #484]	@ (8004fa4 <HAL_DMA_IRQHandler+0xc84>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d036      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xb12>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a77      	ldr	r2, [pc, #476]	@ (8004fa8 <HAL_DMA_IRQHandler+0xc88>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d031      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xb12>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a76      	ldr	r2, [pc, #472]	@ (8004fac <HAL_DMA_IRQHandler+0xc8c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d02c      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xb12>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a74      	ldr	r2, [pc, #464]	@ (8004fb0 <HAL_DMA_IRQHandler+0xc90>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d027      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xb12>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a73      	ldr	r2, [pc, #460]	@ (8004fb4 <HAL_DMA_IRQHandler+0xc94>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d022      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xb12>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a71      	ldr	r2, [pc, #452]	@ (8004fb8 <HAL_DMA_IRQHandler+0xc98>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d01d      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xb12>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a70      	ldr	r2, [pc, #448]	@ (8004fbc <HAL_DMA_IRQHandler+0xc9c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d018      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xb12>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a6e      	ldr	r2, [pc, #440]	@ (8004fc0 <HAL_DMA_IRQHandler+0xca0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d013      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xb12>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a6d      	ldr	r2, [pc, #436]	@ (8004fc4 <HAL_DMA_IRQHandler+0xca4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d00e      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xb12>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a6b      	ldr	r2, [pc, #428]	@ (8004fc8 <HAL_DMA_IRQHandler+0xca8>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d009      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xb12>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a6a      	ldr	r2, [pc, #424]	@ (8004fcc <HAL_DMA_IRQHandler+0xcac>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d004      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xb12>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a68      	ldr	r2, [pc, #416]	@ (8004fd0 <HAL_DMA_IRQHandler+0xcb0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d108      	bne.n	8004e44 <HAL_DMA_IRQHandler+0xb24>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0208 	bic.w	r2, r2, #8
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	e007      	b.n	8004e54 <HAL_DMA_IRQHandler+0xb34>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0204 	bic.w	r2, r2, #4
 8004e52:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 8165 	beq.w	8005128 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e66:	e15f      	b.n	8005128 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e6c:	f003 031f 	and.w	r3, r3, #31
 8004e70:	2202      	movs	r2, #2
 8004e72:	409a      	lsls	r2, r3
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	4013      	ands	r3, r2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 80c5 	beq.w	8005008 <HAL_DMA_IRQHandler+0xce8>
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 80bf 	beq.w	8005008 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e8e:	f003 031f 	and.w	r3, r3, #31
 8004e92:	2202      	movs	r2, #2
 8004e94:	409a      	lsls	r2, r3
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d018      	beq.n	8004ed6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d109      	bne.n	8004ec2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 813a 	beq.w	800512c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ec0:	e134      	b.n	800512c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f000 8130 	beq.w	800512c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ed4:	e12a      	b.n	800512c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f003 0320 	and.w	r3, r3, #32
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f040 8089 	bne.w	8004ff4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a2b      	ldr	r2, [pc, #172]	@ (8004f94 <HAL_DMA_IRQHandler+0xc74>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d04a      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xc62>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a29      	ldr	r2, [pc, #164]	@ (8004f98 <HAL_DMA_IRQHandler+0xc78>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d045      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xc62>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a28      	ldr	r2, [pc, #160]	@ (8004f9c <HAL_DMA_IRQHandler+0xc7c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d040      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xc62>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a26      	ldr	r2, [pc, #152]	@ (8004fa0 <HAL_DMA_IRQHandler+0xc80>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d03b      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xc62>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a25      	ldr	r2, [pc, #148]	@ (8004fa4 <HAL_DMA_IRQHandler+0xc84>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d036      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xc62>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a23      	ldr	r2, [pc, #140]	@ (8004fa8 <HAL_DMA_IRQHandler+0xc88>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d031      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xc62>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a22      	ldr	r2, [pc, #136]	@ (8004fac <HAL_DMA_IRQHandler+0xc8c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d02c      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xc62>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a20      	ldr	r2, [pc, #128]	@ (8004fb0 <HAL_DMA_IRQHandler+0xc90>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d027      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xc62>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a1f      	ldr	r2, [pc, #124]	@ (8004fb4 <HAL_DMA_IRQHandler+0xc94>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d022      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xc62>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a1d      	ldr	r2, [pc, #116]	@ (8004fb8 <HAL_DMA_IRQHandler+0xc98>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d01d      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xc62>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8004fbc <HAL_DMA_IRQHandler+0xc9c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d018      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xc62>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a1a      	ldr	r2, [pc, #104]	@ (8004fc0 <HAL_DMA_IRQHandler+0xca0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d013      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xc62>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a19      	ldr	r2, [pc, #100]	@ (8004fc4 <HAL_DMA_IRQHandler+0xca4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00e      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xc62>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a17      	ldr	r2, [pc, #92]	@ (8004fc8 <HAL_DMA_IRQHandler+0xca8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d009      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xc62>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a16      	ldr	r2, [pc, #88]	@ (8004fcc <HAL_DMA_IRQHandler+0xcac>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d004      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xc62>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a14      	ldr	r2, [pc, #80]	@ (8004fd0 <HAL_DMA_IRQHandler+0xcb0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d128      	bne.n	8004fd4 <HAL_DMA_IRQHandler+0xcb4>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 0214 	bic.w	r2, r2, #20
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	e027      	b.n	8004fe4 <HAL_DMA_IRQHandler+0xcc4>
 8004f94:	40020010 	.word	0x40020010
 8004f98:	40020028 	.word	0x40020028
 8004f9c:	40020040 	.word	0x40020040
 8004fa0:	40020058 	.word	0x40020058
 8004fa4:	40020070 	.word	0x40020070
 8004fa8:	40020088 	.word	0x40020088
 8004fac:	400200a0 	.word	0x400200a0
 8004fb0:	400200b8 	.word	0x400200b8
 8004fb4:	40020410 	.word	0x40020410
 8004fb8:	40020428 	.word	0x40020428
 8004fbc:	40020440 	.word	0x40020440
 8004fc0:	40020458 	.word	0x40020458
 8004fc4:	40020470 	.word	0x40020470
 8004fc8:	40020488 	.word	0x40020488
 8004fcc:	400204a0 	.word	0x400204a0
 8004fd0:	400204b8 	.word	0x400204b8
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 020a 	bic.w	r2, r2, #10
 8004fe2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 8097 	beq.w	800512c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005006:	e091      	b.n	800512c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800500c:	f003 031f 	and.w	r3, r3, #31
 8005010:	2208      	movs	r2, #8
 8005012:	409a      	lsls	r2, r3
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	4013      	ands	r3, r2
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 8088 	beq.w	800512e <HAL_DMA_IRQHandler+0xe0e>
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f003 0308 	and.w	r3, r3, #8
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 8082 	beq.w	800512e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a41      	ldr	r2, [pc, #260]	@ (8005134 <HAL_DMA_IRQHandler+0xe14>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d04a      	beq.n	80050ca <HAL_DMA_IRQHandler+0xdaa>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a3f      	ldr	r2, [pc, #252]	@ (8005138 <HAL_DMA_IRQHandler+0xe18>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d045      	beq.n	80050ca <HAL_DMA_IRQHandler+0xdaa>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a3e      	ldr	r2, [pc, #248]	@ (800513c <HAL_DMA_IRQHandler+0xe1c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d040      	beq.n	80050ca <HAL_DMA_IRQHandler+0xdaa>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a3c      	ldr	r2, [pc, #240]	@ (8005140 <HAL_DMA_IRQHandler+0xe20>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d03b      	beq.n	80050ca <HAL_DMA_IRQHandler+0xdaa>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a3b      	ldr	r2, [pc, #236]	@ (8005144 <HAL_DMA_IRQHandler+0xe24>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d036      	beq.n	80050ca <HAL_DMA_IRQHandler+0xdaa>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a39      	ldr	r2, [pc, #228]	@ (8005148 <HAL_DMA_IRQHandler+0xe28>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d031      	beq.n	80050ca <HAL_DMA_IRQHandler+0xdaa>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a38      	ldr	r2, [pc, #224]	@ (800514c <HAL_DMA_IRQHandler+0xe2c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d02c      	beq.n	80050ca <HAL_DMA_IRQHandler+0xdaa>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a36      	ldr	r2, [pc, #216]	@ (8005150 <HAL_DMA_IRQHandler+0xe30>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d027      	beq.n	80050ca <HAL_DMA_IRQHandler+0xdaa>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a35      	ldr	r2, [pc, #212]	@ (8005154 <HAL_DMA_IRQHandler+0xe34>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d022      	beq.n	80050ca <HAL_DMA_IRQHandler+0xdaa>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a33      	ldr	r2, [pc, #204]	@ (8005158 <HAL_DMA_IRQHandler+0xe38>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d01d      	beq.n	80050ca <HAL_DMA_IRQHandler+0xdaa>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a32      	ldr	r2, [pc, #200]	@ (800515c <HAL_DMA_IRQHandler+0xe3c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d018      	beq.n	80050ca <HAL_DMA_IRQHandler+0xdaa>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a30      	ldr	r2, [pc, #192]	@ (8005160 <HAL_DMA_IRQHandler+0xe40>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d013      	beq.n	80050ca <HAL_DMA_IRQHandler+0xdaa>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a2f      	ldr	r2, [pc, #188]	@ (8005164 <HAL_DMA_IRQHandler+0xe44>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d00e      	beq.n	80050ca <HAL_DMA_IRQHandler+0xdaa>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a2d      	ldr	r2, [pc, #180]	@ (8005168 <HAL_DMA_IRQHandler+0xe48>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d009      	beq.n	80050ca <HAL_DMA_IRQHandler+0xdaa>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a2c      	ldr	r2, [pc, #176]	@ (800516c <HAL_DMA_IRQHandler+0xe4c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d004      	beq.n	80050ca <HAL_DMA_IRQHandler+0xdaa>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005170 <HAL_DMA_IRQHandler+0xe50>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d108      	bne.n	80050dc <HAL_DMA_IRQHandler+0xdbc>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 021c 	bic.w	r2, r2, #28
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	e007      	b.n	80050ec <HAL_DMA_IRQHandler+0xdcc>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 020e 	bic.w	r2, r2, #14
 80050ea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f0:	f003 031f 	and.w	r3, r3, #31
 80050f4:	2201      	movs	r2, #1
 80050f6:	409a      	lsls	r2, r3
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005116:	2b00      	cmp	r3, #0
 8005118:	d009      	beq.n	800512e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	4798      	blx	r3
 8005122:	e004      	b.n	800512e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005124:	bf00      	nop
 8005126:	e002      	b.n	800512e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005128:	bf00      	nop
 800512a:	e000      	b.n	800512e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800512c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800512e:	3728      	adds	r7, #40	@ 0x28
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	40020010 	.word	0x40020010
 8005138:	40020028 	.word	0x40020028
 800513c:	40020040 	.word	0x40020040
 8005140:	40020058 	.word	0x40020058
 8005144:	40020070 	.word	0x40020070
 8005148:	40020088 	.word	0x40020088
 800514c:	400200a0 	.word	0x400200a0
 8005150:	400200b8 	.word	0x400200b8
 8005154:	40020410 	.word	0x40020410
 8005158:	40020428 	.word	0x40020428
 800515c:	40020440 	.word	0x40020440
 8005160:	40020458 	.word	0x40020458
 8005164:	40020470 	.word	0x40020470
 8005168:	40020488 	.word	0x40020488
 800516c:	400204a0 	.word	0x400204a0
 8005170:	400204b8 	.word	0x400204b8

08005174 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005186:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800518c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a7f      	ldr	r2, [pc, #508]	@ (8005390 <DMA_SetConfig+0x21c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d072      	beq.n	800527e <DMA_SetConfig+0x10a>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a7d      	ldr	r2, [pc, #500]	@ (8005394 <DMA_SetConfig+0x220>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d06d      	beq.n	800527e <DMA_SetConfig+0x10a>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a7c      	ldr	r2, [pc, #496]	@ (8005398 <DMA_SetConfig+0x224>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d068      	beq.n	800527e <DMA_SetConfig+0x10a>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a7a      	ldr	r2, [pc, #488]	@ (800539c <DMA_SetConfig+0x228>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d063      	beq.n	800527e <DMA_SetConfig+0x10a>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a79      	ldr	r2, [pc, #484]	@ (80053a0 <DMA_SetConfig+0x22c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d05e      	beq.n	800527e <DMA_SetConfig+0x10a>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a77      	ldr	r2, [pc, #476]	@ (80053a4 <DMA_SetConfig+0x230>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d059      	beq.n	800527e <DMA_SetConfig+0x10a>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a76      	ldr	r2, [pc, #472]	@ (80053a8 <DMA_SetConfig+0x234>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d054      	beq.n	800527e <DMA_SetConfig+0x10a>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a74      	ldr	r2, [pc, #464]	@ (80053ac <DMA_SetConfig+0x238>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d04f      	beq.n	800527e <DMA_SetConfig+0x10a>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a73      	ldr	r2, [pc, #460]	@ (80053b0 <DMA_SetConfig+0x23c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d04a      	beq.n	800527e <DMA_SetConfig+0x10a>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a71      	ldr	r2, [pc, #452]	@ (80053b4 <DMA_SetConfig+0x240>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d045      	beq.n	800527e <DMA_SetConfig+0x10a>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a70      	ldr	r2, [pc, #448]	@ (80053b8 <DMA_SetConfig+0x244>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d040      	beq.n	800527e <DMA_SetConfig+0x10a>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a6e      	ldr	r2, [pc, #440]	@ (80053bc <DMA_SetConfig+0x248>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d03b      	beq.n	800527e <DMA_SetConfig+0x10a>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a6d      	ldr	r2, [pc, #436]	@ (80053c0 <DMA_SetConfig+0x24c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d036      	beq.n	800527e <DMA_SetConfig+0x10a>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a6b      	ldr	r2, [pc, #428]	@ (80053c4 <DMA_SetConfig+0x250>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d031      	beq.n	800527e <DMA_SetConfig+0x10a>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a6a      	ldr	r2, [pc, #424]	@ (80053c8 <DMA_SetConfig+0x254>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d02c      	beq.n	800527e <DMA_SetConfig+0x10a>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a68      	ldr	r2, [pc, #416]	@ (80053cc <DMA_SetConfig+0x258>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d027      	beq.n	800527e <DMA_SetConfig+0x10a>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a67      	ldr	r2, [pc, #412]	@ (80053d0 <DMA_SetConfig+0x25c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d022      	beq.n	800527e <DMA_SetConfig+0x10a>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a65      	ldr	r2, [pc, #404]	@ (80053d4 <DMA_SetConfig+0x260>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d01d      	beq.n	800527e <DMA_SetConfig+0x10a>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a64      	ldr	r2, [pc, #400]	@ (80053d8 <DMA_SetConfig+0x264>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d018      	beq.n	800527e <DMA_SetConfig+0x10a>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a62      	ldr	r2, [pc, #392]	@ (80053dc <DMA_SetConfig+0x268>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d013      	beq.n	800527e <DMA_SetConfig+0x10a>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a61      	ldr	r2, [pc, #388]	@ (80053e0 <DMA_SetConfig+0x26c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d00e      	beq.n	800527e <DMA_SetConfig+0x10a>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a5f      	ldr	r2, [pc, #380]	@ (80053e4 <DMA_SetConfig+0x270>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d009      	beq.n	800527e <DMA_SetConfig+0x10a>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a5e      	ldr	r2, [pc, #376]	@ (80053e8 <DMA_SetConfig+0x274>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d004      	beq.n	800527e <DMA_SetConfig+0x10a>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a5c      	ldr	r2, [pc, #368]	@ (80053ec <DMA_SetConfig+0x278>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d101      	bne.n	8005282 <DMA_SetConfig+0x10e>
 800527e:	2301      	movs	r3, #1
 8005280:	e000      	b.n	8005284 <DMA_SetConfig+0x110>
 8005282:	2300      	movs	r3, #0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00d      	beq.n	80052a4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005290:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005296:	2b00      	cmp	r3, #0
 8005298:	d004      	beq.n	80052a4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80052a2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a39      	ldr	r2, [pc, #228]	@ (8005390 <DMA_SetConfig+0x21c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d04a      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a38      	ldr	r2, [pc, #224]	@ (8005394 <DMA_SetConfig+0x220>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d045      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a36      	ldr	r2, [pc, #216]	@ (8005398 <DMA_SetConfig+0x224>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d040      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a35      	ldr	r2, [pc, #212]	@ (800539c <DMA_SetConfig+0x228>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d03b      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a33      	ldr	r2, [pc, #204]	@ (80053a0 <DMA_SetConfig+0x22c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d036      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a32      	ldr	r2, [pc, #200]	@ (80053a4 <DMA_SetConfig+0x230>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d031      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a30      	ldr	r2, [pc, #192]	@ (80053a8 <DMA_SetConfig+0x234>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d02c      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a2f      	ldr	r2, [pc, #188]	@ (80053ac <DMA_SetConfig+0x238>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d027      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a2d      	ldr	r2, [pc, #180]	@ (80053b0 <DMA_SetConfig+0x23c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d022      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a2c      	ldr	r2, [pc, #176]	@ (80053b4 <DMA_SetConfig+0x240>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d01d      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a2a      	ldr	r2, [pc, #168]	@ (80053b8 <DMA_SetConfig+0x244>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d018      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a29      	ldr	r2, [pc, #164]	@ (80053bc <DMA_SetConfig+0x248>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d013      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a27      	ldr	r2, [pc, #156]	@ (80053c0 <DMA_SetConfig+0x24c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00e      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a26      	ldr	r2, [pc, #152]	@ (80053c4 <DMA_SetConfig+0x250>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d009      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a24      	ldr	r2, [pc, #144]	@ (80053c8 <DMA_SetConfig+0x254>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d004      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a23      	ldr	r2, [pc, #140]	@ (80053cc <DMA_SetConfig+0x258>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d101      	bne.n	8005348 <DMA_SetConfig+0x1d4>
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <DMA_SetConfig+0x1d6>
 8005348:	2300      	movs	r3, #0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d059      	beq.n	8005402 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005352:	f003 031f 	and.w	r3, r3, #31
 8005356:	223f      	movs	r2, #63	@ 0x3f
 8005358:	409a      	lsls	r2, r3
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800536c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	2b40      	cmp	r3, #64	@ 0x40
 800537c:	d138      	bne.n	80053f0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800538e:	e086      	b.n	800549e <DMA_SetConfig+0x32a>
 8005390:	40020010 	.word	0x40020010
 8005394:	40020028 	.word	0x40020028
 8005398:	40020040 	.word	0x40020040
 800539c:	40020058 	.word	0x40020058
 80053a0:	40020070 	.word	0x40020070
 80053a4:	40020088 	.word	0x40020088
 80053a8:	400200a0 	.word	0x400200a0
 80053ac:	400200b8 	.word	0x400200b8
 80053b0:	40020410 	.word	0x40020410
 80053b4:	40020428 	.word	0x40020428
 80053b8:	40020440 	.word	0x40020440
 80053bc:	40020458 	.word	0x40020458
 80053c0:	40020470 	.word	0x40020470
 80053c4:	40020488 	.word	0x40020488
 80053c8:	400204a0 	.word	0x400204a0
 80053cc:	400204b8 	.word	0x400204b8
 80053d0:	58025408 	.word	0x58025408
 80053d4:	5802541c 	.word	0x5802541c
 80053d8:	58025430 	.word	0x58025430
 80053dc:	58025444 	.word	0x58025444
 80053e0:	58025458 	.word	0x58025458
 80053e4:	5802546c 	.word	0x5802546c
 80053e8:	58025480 	.word	0x58025480
 80053ec:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	60da      	str	r2, [r3, #12]
}
 8005400:	e04d      	b.n	800549e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a29      	ldr	r2, [pc, #164]	@ (80054ac <DMA_SetConfig+0x338>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d022      	beq.n	8005452 <DMA_SetConfig+0x2de>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a27      	ldr	r2, [pc, #156]	@ (80054b0 <DMA_SetConfig+0x33c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d01d      	beq.n	8005452 <DMA_SetConfig+0x2de>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a26      	ldr	r2, [pc, #152]	@ (80054b4 <DMA_SetConfig+0x340>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d018      	beq.n	8005452 <DMA_SetConfig+0x2de>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a24      	ldr	r2, [pc, #144]	@ (80054b8 <DMA_SetConfig+0x344>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d013      	beq.n	8005452 <DMA_SetConfig+0x2de>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a23      	ldr	r2, [pc, #140]	@ (80054bc <DMA_SetConfig+0x348>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00e      	beq.n	8005452 <DMA_SetConfig+0x2de>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a21      	ldr	r2, [pc, #132]	@ (80054c0 <DMA_SetConfig+0x34c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d009      	beq.n	8005452 <DMA_SetConfig+0x2de>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a20      	ldr	r2, [pc, #128]	@ (80054c4 <DMA_SetConfig+0x350>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d004      	beq.n	8005452 <DMA_SetConfig+0x2de>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a1e      	ldr	r2, [pc, #120]	@ (80054c8 <DMA_SetConfig+0x354>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d101      	bne.n	8005456 <DMA_SetConfig+0x2e2>
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <DMA_SetConfig+0x2e4>
 8005456:	2300      	movs	r3, #0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d020      	beq.n	800549e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005460:	f003 031f 	and.w	r3, r3, #31
 8005464:	2201      	movs	r2, #1
 8005466:	409a      	lsls	r2, r3
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b40      	cmp	r3, #64	@ 0x40
 800547a:	d108      	bne.n	800548e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	60da      	str	r2, [r3, #12]
}
 800548c:	e007      	b.n	800549e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	60da      	str	r2, [r3, #12]
}
 800549e:	bf00      	nop
 80054a0:	371c      	adds	r7, #28
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	58025408 	.word	0x58025408
 80054b0:	5802541c 	.word	0x5802541c
 80054b4:	58025430 	.word	0x58025430
 80054b8:	58025444 	.word	0x58025444
 80054bc:	58025458 	.word	0x58025458
 80054c0:	5802546c 	.word	0x5802546c
 80054c4:	58025480 	.word	0x58025480
 80054c8:	58025494 	.word	0x58025494

080054cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a42      	ldr	r2, [pc, #264]	@ (80055e4 <DMA_CalcBaseAndBitshift+0x118>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d04a      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a41      	ldr	r2, [pc, #260]	@ (80055e8 <DMA_CalcBaseAndBitshift+0x11c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d045      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a3f      	ldr	r2, [pc, #252]	@ (80055ec <DMA_CalcBaseAndBitshift+0x120>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d040      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a3e      	ldr	r2, [pc, #248]	@ (80055f0 <DMA_CalcBaseAndBitshift+0x124>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d03b      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a3c      	ldr	r2, [pc, #240]	@ (80055f4 <DMA_CalcBaseAndBitshift+0x128>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d036      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a3b      	ldr	r2, [pc, #236]	@ (80055f8 <DMA_CalcBaseAndBitshift+0x12c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d031      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a39      	ldr	r2, [pc, #228]	@ (80055fc <DMA_CalcBaseAndBitshift+0x130>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d02c      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a38      	ldr	r2, [pc, #224]	@ (8005600 <DMA_CalcBaseAndBitshift+0x134>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d027      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a36      	ldr	r2, [pc, #216]	@ (8005604 <DMA_CalcBaseAndBitshift+0x138>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d022      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a35      	ldr	r2, [pc, #212]	@ (8005608 <DMA_CalcBaseAndBitshift+0x13c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d01d      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a33      	ldr	r2, [pc, #204]	@ (800560c <DMA_CalcBaseAndBitshift+0x140>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d018      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a32      	ldr	r2, [pc, #200]	@ (8005610 <DMA_CalcBaseAndBitshift+0x144>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d013      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a30      	ldr	r2, [pc, #192]	@ (8005614 <DMA_CalcBaseAndBitshift+0x148>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d00e      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a2f      	ldr	r2, [pc, #188]	@ (8005618 <DMA_CalcBaseAndBitshift+0x14c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d009      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a2d      	ldr	r2, [pc, #180]	@ (800561c <DMA_CalcBaseAndBitshift+0x150>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d004      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a2c      	ldr	r2, [pc, #176]	@ (8005620 <DMA_CalcBaseAndBitshift+0x154>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d101      	bne.n	8005578 <DMA_CalcBaseAndBitshift+0xac>
 8005574:	2301      	movs	r3, #1
 8005576:	e000      	b.n	800557a <DMA_CalcBaseAndBitshift+0xae>
 8005578:	2300      	movs	r3, #0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d024      	beq.n	80055c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	b2db      	uxtb	r3, r3
 8005584:	3b10      	subs	r3, #16
 8005586:	4a27      	ldr	r2, [pc, #156]	@ (8005624 <DMA_CalcBaseAndBitshift+0x158>)
 8005588:	fba2 2303 	umull	r2, r3, r2, r3
 800558c:	091b      	lsrs	r3, r3, #4
 800558e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f003 0307 	and.w	r3, r3, #7
 8005596:	4a24      	ldr	r2, [pc, #144]	@ (8005628 <DMA_CalcBaseAndBitshift+0x15c>)
 8005598:	5cd3      	ldrb	r3, [r2, r3]
 800559a:	461a      	mov	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2b03      	cmp	r3, #3
 80055a4:	d908      	bls.n	80055b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	461a      	mov	r2, r3
 80055ac:	4b1f      	ldr	r3, [pc, #124]	@ (800562c <DMA_CalcBaseAndBitshift+0x160>)
 80055ae:	4013      	ands	r3, r2
 80055b0:	1d1a      	adds	r2, r3, #4
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80055b6:	e00d      	b.n	80055d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	461a      	mov	r2, r3
 80055be:	4b1b      	ldr	r3, [pc, #108]	@ (800562c <DMA_CalcBaseAndBitshift+0x160>)
 80055c0:	4013      	ands	r3, r2
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80055c6:	e005      	b.n	80055d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	40020010 	.word	0x40020010
 80055e8:	40020028 	.word	0x40020028
 80055ec:	40020040 	.word	0x40020040
 80055f0:	40020058 	.word	0x40020058
 80055f4:	40020070 	.word	0x40020070
 80055f8:	40020088 	.word	0x40020088
 80055fc:	400200a0 	.word	0x400200a0
 8005600:	400200b8 	.word	0x400200b8
 8005604:	40020410 	.word	0x40020410
 8005608:	40020428 	.word	0x40020428
 800560c:	40020440 	.word	0x40020440
 8005610:	40020458 	.word	0x40020458
 8005614:	40020470 	.word	0x40020470
 8005618:	40020488 	.word	0x40020488
 800561c:	400204a0 	.word	0x400204a0
 8005620:	400204b8 	.word	0x400204b8
 8005624:	aaaaaaab 	.word	0xaaaaaaab
 8005628:	0800cea8 	.word	0x0800cea8
 800562c:	fffffc00 	.word	0xfffffc00

08005630 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d120      	bne.n	8005686 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005648:	2b03      	cmp	r3, #3
 800564a:	d858      	bhi.n	80056fe <DMA_CheckFifoParam+0xce>
 800564c:	a201      	add	r2, pc, #4	@ (adr r2, 8005654 <DMA_CheckFifoParam+0x24>)
 800564e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005652:	bf00      	nop
 8005654:	08005665 	.word	0x08005665
 8005658:	08005677 	.word	0x08005677
 800565c:	08005665 	.word	0x08005665
 8005660:	080056ff 	.word	0x080056ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005668:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d048      	beq.n	8005702 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005674:	e045      	b.n	8005702 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800567e:	d142      	bne.n	8005706 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005684:	e03f      	b.n	8005706 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800568e:	d123      	bne.n	80056d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005694:	2b03      	cmp	r3, #3
 8005696:	d838      	bhi.n	800570a <DMA_CheckFifoParam+0xda>
 8005698:	a201      	add	r2, pc, #4	@ (adr r2, 80056a0 <DMA_CheckFifoParam+0x70>)
 800569a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569e:	bf00      	nop
 80056a0:	080056b1 	.word	0x080056b1
 80056a4:	080056b7 	.word	0x080056b7
 80056a8:	080056b1 	.word	0x080056b1
 80056ac:	080056c9 	.word	0x080056c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	73fb      	strb	r3, [r7, #15]
        break;
 80056b4:	e030      	b.n	8005718 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d025      	beq.n	800570e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056c6:	e022      	b.n	800570e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80056d0:	d11f      	bne.n	8005712 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056d6:	e01c      	b.n	8005712 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d902      	bls.n	80056e6 <DMA_CheckFifoParam+0xb6>
 80056e0:	2b03      	cmp	r3, #3
 80056e2:	d003      	beq.n	80056ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80056e4:	e018      	b.n	8005718 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	73fb      	strb	r3, [r7, #15]
        break;
 80056ea:	e015      	b.n	8005718 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00e      	beq.n	8005716 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
    break;
 80056fc:	e00b      	b.n	8005716 <DMA_CheckFifoParam+0xe6>
        break;
 80056fe:	bf00      	nop
 8005700:	e00a      	b.n	8005718 <DMA_CheckFifoParam+0xe8>
        break;
 8005702:	bf00      	nop
 8005704:	e008      	b.n	8005718 <DMA_CheckFifoParam+0xe8>
        break;
 8005706:	bf00      	nop
 8005708:	e006      	b.n	8005718 <DMA_CheckFifoParam+0xe8>
        break;
 800570a:	bf00      	nop
 800570c:	e004      	b.n	8005718 <DMA_CheckFifoParam+0xe8>
        break;
 800570e:	bf00      	nop
 8005710:	e002      	b.n	8005718 <DMA_CheckFifoParam+0xe8>
        break;
 8005712:	bf00      	nop
 8005714:	e000      	b.n	8005718 <DMA_CheckFifoParam+0xe8>
    break;
 8005716:	bf00      	nop
    }
  }

  return status;
 8005718:	7bfb      	ldrb	r3, [r7, #15]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop

08005728 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a38      	ldr	r2, [pc, #224]	@ (800581c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d022      	beq.n	8005786 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a36      	ldr	r2, [pc, #216]	@ (8005820 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d01d      	beq.n	8005786 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a35      	ldr	r2, [pc, #212]	@ (8005824 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d018      	beq.n	8005786 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a33      	ldr	r2, [pc, #204]	@ (8005828 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d013      	beq.n	8005786 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a32      	ldr	r2, [pc, #200]	@ (800582c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00e      	beq.n	8005786 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a30      	ldr	r2, [pc, #192]	@ (8005830 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d009      	beq.n	8005786 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a2f      	ldr	r2, [pc, #188]	@ (8005834 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d004      	beq.n	8005786 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a2d      	ldr	r2, [pc, #180]	@ (8005838 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d101      	bne.n	800578a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005786:	2301      	movs	r3, #1
 8005788:	e000      	b.n	800578c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800578a:	2300      	movs	r3, #0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01a      	beq.n	80057c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	b2db      	uxtb	r3, r3
 8005796:	3b08      	subs	r3, #8
 8005798:	4a28      	ldr	r2, [pc, #160]	@ (800583c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800579a:	fba2 2303 	umull	r2, r3, r2, r3
 800579e:	091b      	lsrs	r3, r3, #4
 80057a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4b26      	ldr	r3, [pc, #152]	@ (8005840 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80057a6:	4413      	add	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	461a      	mov	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a24      	ldr	r2, [pc, #144]	@ (8005844 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80057b4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f003 031f 	and.w	r3, r3, #31
 80057bc:	2201      	movs	r2, #1
 80057be:	409a      	lsls	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80057c4:	e024      	b.n	8005810 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	3b10      	subs	r3, #16
 80057ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005848 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80057d0:	fba2 2303 	umull	r2, r3, r2, r3
 80057d4:	091b      	lsrs	r3, r3, #4
 80057d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4a1c      	ldr	r2, [pc, #112]	@ (800584c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d806      	bhi.n	80057ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005850 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d902      	bls.n	80057ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3308      	adds	r3, #8
 80057ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4b18      	ldr	r3, [pc, #96]	@ (8005854 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80057f2:	4413      	add	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	461a      	mov	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a16      	ldr	r2, [pc, #88]	@ (8005858 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005800:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f003 031f 	and.w	r3, r3, #31
 8005808:	2201      	movs	r2, #1
 800580a:	409a      	lsls	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005810:	bf00      	nop
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	58025408 	.word	0x58025408
 8005820:	5802541c 	.word	0x5802541c
 8005824:	58025430 	.word	0x58025430
 8005828:	58025444 	.word	0x58025444
 800582c:	58025458 	.word	0x58025458
 8005830:	5802546c 	.word	0x5802546c
 8005834:	58025480 	.word	0x58025480
 8005838:	58025494 	.word	0x58025494
 800583c:	cccccccd 	.word	0xcccccccd
 8005840:	16009600 	.word	0x16009600
 8005844:	58025880 	.word	0x58025880
 8005848:	aaaaaaab 	.word	0xaaaaaaab
 800584c:	400204b8 	.word	0x400204b8
 8005850:	4002040f 	.word	0x4002040f
 8005854:	10008200 	.word	0x10008200
 8005858:	40020880 	.word	0x40020880

0800585c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	b2db      	uxtb	r3, r3
 800586a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d04a      	beq.n	8005908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b08      	cmp	r3, #8
 8005876:	d847      	bhi.n	8005908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a25      	ldr	r2, [pc, #148]	@ (8005914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d022      	beq.n	80058c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a24      	ldr	r2, [pc, #144]	@ (8005918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d01d      	beq.n	80058c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a22      	ldr	r2, [pc, #136]	@ (800591c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d018      	beq.n	80058c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a21      	ldr	r2, [pc, #132]	@ (8005920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d013      	beq.n	80058c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00e      	beq.n	80058c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d009      	beq.n	80058c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a1c      	ldr	r2, [pc, #112]	@ (800592c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d004      	beq.n	80058c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d101      	bne.n	80058cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80058c8:	2301      	movs	r3, #1
 80058ca:	e000      	b.n	80058ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80058cc:	2300      	movs	r3, #0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4b17      	ldr	r3, [pc, #92]	@ (8005934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80058d6:	4413      	add	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	461a      	mov	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a15      	ldr	r2, [pc, #84]	@ (8005938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80058e4:	671a      	str	r2, [r3, #112]	@ 0x70
 80058e6:	e009      	b.n	80058fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4b14      	ldr	r3, [pc, #80]	@ (800593c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80058ec:	4413      	add	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	461a      	mov	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a11      	ldr	r2, [pc, #68]	@ (8005940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80058fa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	3b01      	subs	r3, #1
 8005900:	2201      	movs	r2, #1
 8005902:	409a      	lsls	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005908:	bf00      	nop
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	58025408 	.word	0x58025408
 8005918:	5802541c 	.word	0x5802541c
 800591c:	58025430 	.word	0x58025430
 8005920:	58025444 	.word	0x58025444
 8005924:	58025458 	.word	0x58025458
 8005928:	5802546c 	.word	0x5802546c
 800592c:	58025480 	.word	0x58025480
 8005930:	58025494 	.word	0x58025494
 8005934:	1600963f 	.word	0x1600963f
 8005938:	58025940 	.word	0x58025940
 800593c:	1000823f 	.word	0x1000823f
 8005940:	40020940 	.word	0x40020940

08005944 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8005944:	b480      	push	{r7}
 8005946:	b087      	sub	sp, #28
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	460b      	mov	r3, r1
 800594e:	607a      	str	r2, [r7, #4]
 8005950:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005952:	2300      	movs	r3, #0
 8005954:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e00a      	b.n	8005976 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8005960:	7afb      	ldrb	r3, [r7, #11]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d103      	bne.n	800596e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	605a      	str	r2, [r3, #4]
      break;
 800596c:	e002      	b.n	8005974 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	75fb      	strb	r3, [r7, #23]
      break;
 8005972:	bf00      	nop
  }

  return status;
 8005974:	7dfb      	ldrb	r3, [r7, #23]
}
 8005976:	4618      	mov	r0, r3
 8005978:	371c      	adds	r7, #28
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
 800598a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e003      	b.n	800599e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800599c:	2300      	movs	r3, #0
  }
}
 800599e:	4618      	mov	r0, r3
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
	...

080059ac <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	0c1b      	lsrs	r3, r3, #16
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 031f 	and.w	r3, r3, #31
 80059c8:	2201      	movs	r2, #1
 80059ca:	fa02 f303 	lsl.w	r3, r2, r3
 80059ce:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	011a      	lsls	r2, r3, #4
 80059d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005a08 <HAL_EXTI_IRQHandler+0x5c>)
 80059d6:	4413      	add	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4013      	ands	r3, r2
 80059e2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d009      	beq.n	80059fe <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	4798      	blx	r3
    }
  }
}
 80059fe:	bf00      	nop
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	58000088 	.word	0x58000088

08005a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b089      	sub	sp, #36	@ 0x24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005a1a:	4b89      	ldr	r3, [pc, #548]	@ (8005c40 <HAL_GPIO_Init+0x234>)
 8005a1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a1e:	e194      	b.n	8005d4a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	2101      	movs	r1, #1
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 8186 	beq.w	8005d44 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f003 0303 	and.w	r3, r3, #3
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d005      	beq.n	8005a50 <HAL_GPIO_Init+0x44>
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f003 0303 	and.w	r3, r3, #3
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d130      	bne.n	8005ab2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	2203      	movs	r2, #3
 8005a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a60:	43db      	mvns	r3, r3
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	4013      	ands	r3, r2
 8005a66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	68da      	ldr	r2, [r3, #12]
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	fa02 f303 	lsl.w	r3, r2, r3
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a86:	2201      	movs	r2, #1
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8e:	43db      	mvns	r3, r3
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	4013      	ands	r3, r2
 8005a94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	091b      	lsrs	r3, r3, #4
 8005a9c:	f003 0201 	and.w	r2, r3, #1
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f003 0303 	and.w	r3, r3, #3
 8005aba:	2b03      	cmp	r3, #3
 8005abc:	d017      	beq.n	8005aee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	2203      	movs	r2, #3
 8005aca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ace:	43db      	mvns	r3, r3
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	689a      	ldr	r2, [r3, #8]
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f003 0303 	and.w	r3, r3, #3
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d123      	bne.n	8005b42 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	08da      	lsrs	r2, r3, #3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	3208      	adds	r2, #8
 8005b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	220f      	movs	r2, #15
 8005b12:	fa02 f303 	lsl.w	r3, r2, r3
 8005b16:	43db      	mvns	r3, r3
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	691a      	ldr	r2, [r3, #16]
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	08da      	lsrs	r2, r3, #3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	3208      	adds	r2, #8
 8005b3c:	69b9      	ldr	r1, [r7, #24]
 8005b3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	2203      	movs	r2, #3
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	43db      	mvns	r3, r3
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	4013      	ands	r3, r2
 8005b58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f003 0203 	and.w	r2, r3, #3
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 80e0 	beq.w	8005d44 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b84:	4b2f      	ldr	r3, [pc, #188]	@ (8005c44 <HAL_GPIO_Init+0x238>)
 8005b86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b8a:	4a2e      	ldr	r2, [pc, #184]	@ (8005c44 <HAL_GPIO_Init+0x238>)
 8005b8c:	f043 0302 	orr.w	r3, r3, #2
 8005b90:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005b94:	4b2b      	ldr	r3, [pc, #172]	@ (8005c44 <HAL_GPIO_Init+0x238>)
 8005b96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ba2:	4a29      	ldr	r2, [pc, #164]	@ (8005c48 <HAL_GPIO_Init+0x23c>)
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	089b      	lsrs	r3, r3, #2
 8005ba8:	3302      	adds	r3, #2
 8005baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	f003 0303 	and.w	r3, r3, #3
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	220f      	movs	r2, #15
 8005bba:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbe:	43db      	mvns	r3, r3
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a20      	ldr	r2, [pc, #128]	@ (8005c4c <HAL_GPIO_Init+0x240>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d052      	beq.n	8005c74 <HAL_GPIO_Init+0x268>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a1f      	ldr	r2, [pc, #124]	@ (8005c50 <HAL_GPIO_Init+0x244>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d031      	beq.n	8005c3a <HAL_GPIO_Init+0x22e>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a1e      	ldr	r2, [pc, #120]	@ (8005c54 <HAL_GPIO_Init+0x248>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d02b      	beq.n	8005c36 <HAL_GPIO_Init+0x22a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c58 <HAL_GPIO_Init+0x24c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d025      	beq.n	8005c32 <HAL_GPIO_Init+0x226>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a1c      	ldr	r2, [pc, #112]	@ (8005c5c <HAL_GPIO_Init+0x250>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d01f      	beq.n	8005c2e <HAL_GPIO_Init+0x222>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8005c60 <HAL_GPIO_Init+0x254>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d019      	beq.n	8005c2a <HAL_GPIO_Init+0x21e>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a1a      	ldr	r2, [pc, #104]	@ (8005c64 <HAL_GPIO_Init+0x258>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d013      	beq.n	8005c26 <HAL_GPIO_Init+0x21a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a19      	ldr	r2, [pc, #100]	@ (8005c68 <HAL_GPIO_Init+0x25c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00d      	beq.n	8005c22 <HAL_GPIO_Init+0x216>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a18      	ldr	r2, [pc, #96]	@ (8005c6c <HAL_GPIO_Init+0x260>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d007      	beq.n	8005c1e <HAL_GPIO_Init+0x212>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a17      	ldr	r2, [pc, #92]	@ (8005c70 <HAL_GPIO_Init+0x264>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d101      	bne.n	8005c1a <HAL_GPIO_Init+0x20e>
 8005c16:	2309      	movs	r3, #9
 8005c18:	e02d      	b.n	8005c76 <HAL_GPIO_Init+0x26a>
 8005c1a:	230a      	movs	r3, #10
 8005c1c:	e02b      	b.n	8005c76 <HAL_GPIO_Init+0x26a>
 8005c1e:	2308      	movs	r3, #8
 8005c20:	e029      	b.n	8005c76 <HAL_GPIO_Init+0x26a>
 8005c22:	2307      	movs	r3, #7
 8005c24:	e027      	b.n	8005c76 <HAL_GPIO_Init+0x26a>
 8005c26:	2306      	movs	r3, #6
 8005c28:	e025      	b.n	8005c76 <HAL_GPIO_Init+0x26a>
 8005c2a:	2305      	movs	r3, #5
 8005c2c:	e023      	b.n	8005c76 <HAL_GPIO_Init+0x26a>
 8005c2e:	2304      	movs	r3, #4
 8005c30:	e021      	b.n	8005c76 <HAL_GPIO_Init+0x26a>
 8005c32:	2303      	movs	r3, #3
 8005c34:	e01f      	b.n	8005c76 <HAL_GPIO_Init+0x26a>
 8005c36:	2302      	movs	r3, #2
 8005c38:	e01d      	b.n	8005c76 <HAL_GPIO_Init+0x26a>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e01b      	b.n	8005c76 <HAL_GPIO_Init+0x26a>
 8005c3e:	bf00      	nop
 8005c40:	58000080 	.word	0x58000080
 8005c44:	58024400 	.word	0x58024400
 8005c48:	58000400 	.word	0x58000400
 8005c4c:	58020000 	.word	0x58020000
 8005c50:	58020400 	.word	0x58020400
 8005c54:	58020800 	.word	0x58020800
 8005c58:	58020c00 	.word	0x58020c00
 8005c5c:	58021000 	.word	0x58021000
 8005c60:	58021400 	.word	0x58021400
 8005c64:	58021800 	.word	0x58021800
 8005c68:	58021c00 	.word	0x58021c00
 8005c6c:	58022000 	.word	0x58022000
 8005c70:	58022400 	.word	0x58022400
 8005c74:	2300      	movs	r3, #0
 8005c76:	69fa      	ldr	r2, [r7, #28]
 8005c78:	f002 0203 	and.w	r2, r2, #3
 8005c7c:	0092      	lsls	r2, r2, #2
 8005c7e:	4093      	lsls	r3, r2
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c86:	4938      	ldr	r1, [pc, #224]	@ (8005d68 <HAL_GPIO_Init+0x35c>)
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	089b      	lsrs	r3, r3, #2
 8005c8c:	3302      	adds	r3, #2
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005cba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005cc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	43db      	mvns	r3, r3
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005ce8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	43db      	mvns	r3, r3
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	43db      	mvns	r3, r3
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	4013      	ands	r3, r2
 8005d28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	3301      	adds	r3, #1
 8005d48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	fa22 f303 	lsr.w	r3, r2, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f47f ae63 	bne.w	8005a20 <HAL_GPIO_Init+0x14>
  }
}
 8005d5a:	bf00      	nop
 8005d5c:	bf00      	nop
 8005d5e:	3724      	adds	r7, #36	@ 0x24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	58000400 	.word	0x58000400

08005d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	460b      	mov	r3, r1
 8005d76:	807b      	strh	r3, [r7, #2]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d7c:	787b      	ldrb	r3, [r7, #1]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d82:	887a      	ldrh	r2, [r7, #2]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005d88:	e003      	b.n	8005d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d8a:	887b      	ldrh	r3, [r7, #2]
 8005d8c:	041a      	lsls	r2, r3, #16
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	619a      	str	r2, [r3, #24]
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
	...

08005da0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005da8:	4b19      	ldr	r3, [pc, #100]	@ (8005e10 <HAL_PWREx_ConfigSupply+0x70>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	2b04      	cmp	r3, #4
 8005db2:	d00a      	beq.n	8005dca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005db4:	4b16      	ldr	r3, [pc, #88]	@ (8005e10 <HAL_PWREx_ConfigSupply+0x70>)
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d001      	beq.n	8005dc6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e01f      	b.n	8005e06 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	e01d      	b.n	8005e06 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005dca:	4b11      	ldr	r3, [pc, #68]	@ (8005e10 <HAL_PWREx_ConfigSupply+0x70>)
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f023 0207 	bic.w	r2, r3, #7
 8005dd2:	490f      	ldr	r1, [pc, #60]	@ (8005e10 <HAL_PWREx_ConfigSupply+0x70>)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005dda:	f7fb fcd3 	bl	8001784 <HAL_GetTick>
 8005dde:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005de0:	e009      	b.n	8005df6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005de2:	f7fb fccf 	bl	8001784 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005df0:	d901      	bls.n	8005df6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e007      	b.n	8005e06 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005df6:	4b06      	ldr	r3, [pc, #24]	@ (8005e10 <HAL_PWREx_ConfigSupply+0x70>)
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005dfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e02:	d1ee      	bne.n	8005de2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	58024800 	.word	0x58024800

08005e14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b08c      	sub	sp, #48	@ 0x30
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d102      	bne.n	8005e28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	f000 bc48 	b.w	80066b8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 8088 	beq.w	8005f46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e36:	4b99      	ldr	r3, [pc, #612]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e40:	4b96      	ldr	r3, [pc, #600]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e44:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e48:	2b10      	cmp	r3, #16
 8005e4a:	d007      	beq.n	8005e5c <HAL_RCC_OscConfig+0x48>
 8005e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e4e:	2b18      	cmp	r3, #24
 8005e50:	d111      	bne.n	8005e76 <HAL_RCC_OscConfig+0x62>
 8005e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e54:	f003 0303 	and.w	r3, r3, #3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d10c      	bne.n	8005e76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e5c:	4b8f      	ldr	r3, [pc, #572]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d06d      	beq.n	8005f44 <HAL_RCC_OscConfig+0x130>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d169      	bne.n	8005f44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	f000 bc21 	b.w	80066b8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e7e:	d106      	bne.n	8005e8e <HAL_RCC_OscConfig+0x7a>
 8005e80:	4b86      	ldr	r3, [pc, #536]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a85      	ldr	r2, [pc, #532]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005e86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	e02e      	b.n	8005eec <HAL_RCC_OscConfig+0xd8>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10c      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x9c>
 8005e96:	4b81      	ldr	r3, [pc, #516]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a80      	ldr	r2, [pc, #512]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005e9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	4b7e      	ldr	r3, [pc, #504]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a7d      	ldr	r2, [pc, #500]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005ea8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	e01d      	b.n	8005eec <HAL_RCC_OscConfig+0xd8>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005eb8:	d10c      	bne.n	8005ed4 <HAL_RCC_OscConfig+0xc0>
 8005eba:	4b78      	ldr	r3, [pc, #480]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a77      	ldr	r2, [pc, #476]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005ec0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	4b75      	ldr	r3, [pc, #468]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a74      	ldr	r2, [pc, #464]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ed0:	6013      	str	r3, [r2, #0]
 8005ed2:	e00b      	b.n	8005eec <HAL_RCC_OscConfig+0xd8>
 8005ed4:	4b71      	ldr	r3, [pc, #452]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a70      	ldr	r2, [pc, #448]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005eda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	4b6e      	ldr	r3, [pc, #440]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a6d      	ldr	r2, [pc, #436]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005ee6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d013      	beq.n	8005f1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef4:	f7fb fc46 	bl	8001784 <HAL_GetTick>
 8005ef8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005efa:	e008      	b.n	8005f0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005efc:	f7fb fc42 	bl	8001784 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b64      	cmp	r3, #100	@ 0x64
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e3d4      	b.n	80066b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f0e:	4b63      	ldr	r3, [pc, #396]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d0f0      	beq.n	8005efc <HAL_RCC_OscConfig+0xe8>
 8005f1a:	e014      	b.n	8005f46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f1c:	f7fb fc32 	bl	8001784 <HAL_GetTick>
 8005f20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f22:	e008      	b.n	8005f36 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f24:	f7fb fc2e 	bl	8001784 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b64      	cmp	r3, #100	@ 0x64
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e3c0      	b.n	80066b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f36:	4b59      	ldr	r3, [pc, #356]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1f0      	bne.n	8005f24 <HAL_RCC_OscConfig+0x110>
 8005f42:	e000      	b.n	8005f46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 80ca 	beq.w	80060e8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f54:	4b51      	ldr	r3, [pc, #324]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f5c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f5e:	4b4f      	ldr	r3, [pc, #316]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f62:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d007      	beq.n	8005f7a <HAL_RCC_OscConfig+0x166>
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	2b18      	cmp	r3, #24
 8005f6e:	d156      	bne.n	800601e <HAL_RCC_OscConfig+0x20a>
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	f003 0303 	and.w	r3, r3, #3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d151      	bne.n	800601e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f7a:	4b48      	ldr	r3, [pc, #288]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d005      	beq.n	8005f92 <HAL_RCC_OscConfig+0x17e>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e392      	b.n	80066b8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f92:	4b42      	ldr	r3, [pc, #264]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f023 0219 	bic.w	r2, r3, #25
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	493f      	ldr	r1, [pc, #252]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa4:	f7fb fbee 	bl	8001784 <HAL_GetTick>
 8005fa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005faa:	e008      	b.n	8005fbe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fac:	f7fb fbea 	bl	8001784 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e37c      	b.n	80066b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fbe:	4b37      	ldr	r3, [pc, #220]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0304 	and.w	r3, r3, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d0f0      	beq.n	8005fac <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fca:	f7fb fbe7 	bl	800179c <HAL_GetREVID>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d817      	bhi.n	8006008 <HAL_RCC_OscConfig+0x1f4>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	2b40      	cmp	r3, #64	@ 0x40
 8005fde:	d108      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x1de>
 8005fe0:	4b2e      	ldr	r3, [pc, #184]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005fe8:	4a2c      	ldr	r2, [pc, #176]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005fea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fee:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ff0:	e07a      	b.n	80060e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ff2:	4b2a      	ldr	r3, [pc, #168]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	031b      	lsls	r3, r3, #12
 8006000:	4926      	ldr	r1, [pc, #152]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8006002:	4313      	orrs	r3, r2
 8006004:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006006:	e06f      	b.n	80060e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006008:	4b24      	ldr	r3, [pc, #144]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	061b      	lsls	r3, r3, #24
 8006016:	4921      	ldr	r1, [pc, #132]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8006018:	4313      	orrs	r3, r2
 800601a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800601c:	e064      	b.n	80060e8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d047      	beq.n	80060b6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006026:	4b1d      	ldr	r3, [pc, #116]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f023 0219 	bic.w	r2, r3, #25
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	491a      	ldr	r1, [pc, #104]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8006034:	4313      	orrs	r3, r2
 8006036:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006038:	f7fb fba4 	bl	8001784 <HAL_GetTick>
 800603c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800603e:	e008      	b.n	8006052 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006040:	f7fb fba0 	bl	8001784 <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	2b02      	cmp	r3, #2
 800604c:	d901      	bls.n	8006052 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e332      	b.n	80066b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006052:	4b12      	ldr	r3, [pc, #72]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0304 	and.w	r3, r3, #4
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0f0      	beq.n	8006040 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800605e:	f7fb fb9d 	bl	800179c <HAL_GetREVID>
 8006062:	4603      	mov	r3, r0
 8006064:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006068:	4293      	cmp	r3, r2
 800606a:	d819      	bhi.n	80060a0 <HAL_RCC_OscConfig+0x28c>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	2b40      	cmp	r3, #64	@ 0x40
 8006072:	d108      	bne.n	8006086 <HAL_RCC_OscConfig+0x272>
 8006074:	4b09      	ldr	r3, [pc, #36]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800607c:	4a07      	ldr	r2, [pc, #28]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 800607e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006082:	6053      	str	r3, [r2, #4]
 8006084:	e030      	b.n	80060e8 <HAL_RCC_OscConfig+0x2d4>
 8006086:	4b05      	ldr	r3, [pc, #20]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	031b      	lsls	r3, r3, #12
 8006094:	4901      	ldr	r1, [pc, #4]	@ (800609c <HAL_RCC_OscConfig+0x288>)
 8006096:	4313      	orrs	r3, r2
 8006098:	604b      	str	r3, [r1, #4]
 800609a:	e025      	b.n	80060e8 <HAL_RCC_OscConfig+0x2d4>
 800609c:	58024400 	.word	0x58024400
 80060a0:	4b9a      	ldr	r3, [pc, #616]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	061b      	lsls	r3, r3, #24
 80060ae:	4997      	ldr	r1, [pc, #604]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	604b      	str	r3, [r1, #4]
 80060b4:	e018      	b.n	80060e8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060b6:	4b95      	ldr	r3, [pc, #596]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a94      	ldr	r2, [pc, #592]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 80060bc:	f023 0301 	bic.w	r3, r3, #1
 80060c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c2:	f7fb fb5f 	bl	8001784 <HAL_GetTick>
 80060c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060c8:	e008      	b.n	80060dc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060ca:	f7fb fb5b 	bl	8001784 <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d901      	bls.n	80060dc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e2ed      	b.n	80066b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060dc:	4b8b      	ldr	r3, [pc, #556]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1f0      	bne.n	80060ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0310 	and.w	r3, r3, #16
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 80a9 	beq.w	8006248 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060f6:	4b85      	ldr	r3, [pc, #532]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006100:	4b82      	ldr	r3, [pc, #520]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 8006102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006104:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	2b08      	cmp	r3, #8
 800610a:	d007      	beq.n	800611c <HAL_RCC_OscConfig+0x308>
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	2b18      	cmp	r3, #24
 8006110:	d13a      	bne.n	8006188 <HAL_RCC_OscConfig+0x374>
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f003 0303 	and.w	r3, r3, #3
 8006118:	2b01      	cmp	r3, #1
 800611a:	d135      	bne.n	8006188 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800611c:	4b7b      	ldr	r3, [pc, #492]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <HAL_RCC_OscConfig+0x320>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	2b80      	cmp	r3, #128	@ 0x80
 800612e:	d001      	beq.n	8006134 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e2c1      	b.n	80066b8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006134:	f7fb fb32 	bl	800179c <HAL_GetREVID>
 8006138:	4603      	mov	r3, r0
 800613a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800613e:	4293      	cmp	r3, r2
 8006140:	d817      	bhi.n	8006172 <HAL_RCC_OscConfig+0x35e>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	2b20      	cmp	r3, #32
 8006148:	d108      	bne.n	800615c <HAL_RCC_OscConfig+0x348>
 800614a:	4b70      	ldr	r3, [pc, #448]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006152:	4a6e      	ldr	r2, [pc, #440]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 8006154:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006158:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800615a:	e075      	b.n	8006248 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800615c:	4b6b      	ldr	r3, [pc, #428]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	069b      	lsls	r3, r3, #26
 800616a:	4968      	ldr	r1, [pc, #416]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 800616c:	4313      	orrs	r3, r2
 800616e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006170:	e06a      	b.n	8006248 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006172:	4b66      	ldr	r3, [pc, #408]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	061b      	lsls	r3, r3, #24
 8006180:	4962      	ldr	r1, [pc, #392]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 8006182:	4313      	orrs	r3, r2
 8006184:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006186:	e05f      	b.n	8006248 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	69db      	ldr	r3, [r3, #28]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d042      	beq.n	8006216 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006190:	4b5e      	ldr	r3, [pc, #376]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a5d      	ldr	r2, [pc, #372]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 8006196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800619a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800619c:	f7fb faf2 	bl	8001784 <HAL_GetTick>
 80061a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061a2:	e008      	b.n	80061b6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80061a4:	f7fb faee 	bl	8001784 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e280      	b.n	80066b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061b6:	4b55      	ldr	r3, [pc, #340]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d0f0      	beq.n	80061a4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061c2:	f7fb faeb 	bl	800179c <HAL_GetREVID>
 80061c6:	4603      	mov	r3, r0
 80061c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d817      	bhi.n	8006200 <HAL_RCC_OscConfig+0x3ec>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	2b20      	cmp	r3, #32
 80061d6:	d108      	bne.n	80061ea <HAL_RCC_OscConfig+0x3d6>
 80061d8:	4b4c      	ldr	r3, [pc, #304]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80061e0:	4a4a      	ldr	r2, [pc, #296]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 80061e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061e6:	6053      	str	r3, [r2, #4]
 80061e8:	e02e      	b.n	8006248 <HAL_RCC_OscConfig+0x434>
 80061ea:	4b48      	ldr	r3, [pc, #288]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	069b      	lsls	r3, r3, #26
 80061f8:	4944      	ldr	r1, [pc, #272]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	604b      	str	r3, [r1, #4]
 80061fe:	e023      	b.n	8006248 <HAL_RCC_OscConfig+0x434>
 8006200:	4b42      	ldr	r3, [pc, #264]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	061b      	lsls	r3, r3, #24
 800620e:	493f      	ldr	r1, [pc, #252]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 8006210:	4313      	orrs	r3, r2
 8006212:	60cb      	str	r3, [r1, #12]
 8006214:	e018      	b.n	8006248 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006216:	4b3d      	ldr	r3, [pc, #244]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a3c      	ldr	r2, [pc, #240]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 800621c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006222:	f7fb faaf 	bl	8001784 <HAL_GetTick>
 8006226:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006228:	e008      	b.n	800623c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800622a:	f7fb faab 	bl	8001784 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	2b02      	cmp	r3, #2
 8006236:	d901      	bls.n	800623c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e23d      	b.n	80066b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800623c:	4b33      	ldr	r3, [pc, #204]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1f0      	bne.n	800622a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0308 	and.w	r3, r3, #8
 8006250:	2b00      	cmp	r3, #0
 8006252:	d036      	beq.n	80062c2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d019      	beq.n	8006290 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800625c:	4b2b      	ldr	r3, [pc, #172]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 800625e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006260:	4a2a      	ldr	r2, [pc, #168]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 8006262:	f043 0301 	orr.w	r3, r3, #1
 8006266:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006268:	f7fb fa8c 	bl	8001784 <HAL_GetTick>
 800626c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800626e:	e008      	b.n	8006282 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006270:	f7fb fa88 	bl	8001784 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b02      	cmp	r3, #2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e21a      	b.n	80066b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006282:	4b22      	ldr	r3, [pc, #136]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 8006284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0f0      	beq.n	8006270 <HAL_RCC_OscConfig+0x45c>
 800628e:	e018      	b.n	80062c2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006290:	4b1e      	ldr	r3, [pc, #120]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 8006292:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006294:	4a1d      	ldr	r2, [pc, #116]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 8006296:	f023 0301 	bic.w	r3, r3, #1
 800629a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800629c:	f7fb fa72 	bl	8001784 <HAL_GetTick>
 80062a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062a2:	e008      	b.n	80062b6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062a4:	f7fb fa6e 	bl	8001784 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e200      	b.n	80066b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062b6:	4b15      	ldr	r3, [pc, #84]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 80062b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1f0      	bne.n	80062a4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0320 	and.w	r3, r3, #32
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d039      	beq.n	8006342 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d01c      	beq.n	8006310 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062d6:	4b0d      	ldr	r3, [pc, #52]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a0c      	ldr	r2, [pc, #48]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 80062dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80062e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80062e2:	f7fb fa4f 	bl	8001784 <HAL_GetTick>
 80062e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062e8:	e008      	b.n	80062fc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062ea:	f7fb fa4b 	bl	8001784 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d901      	bls.n	80062fc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e1dd      	b.n	80066b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062fc:	4b03      	ldr	r3, [pc, #12]	@ (800630c <HAL_RCC_OscConfig+0x4f8>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d0f0      	beq.n	80062ea <HAL_RCC_OscConfig+0x4d6>
 8006308:	e01b      	b.n	8006342 <HAL_RCC_OscConfig+0x52e>
 800630a:	bf00      	nop
 800630c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006310:	4b9b      	ldr	r3, [pc, #620]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a9a      	ldr	r2, [pc, #616]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 8006316:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800631a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800631c:	f7fb fa32 	bl	8001784 <HAL_GetTick>
 8006320:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006322:	e008      	b.n	8006336 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006324:	f7fb fa2e 	bl	8001784 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b02      	cmp	r3, #2
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e1c0      	b.n	80066b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006336:	4b92      	ldr	r3, [pc, #584]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1f0      	bne.n	8006324 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0304 	and.w	r3, r3, #4
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 8081 	beq.w	8006452 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006350:	4b8c      	ldr	r3, [pc, #560]	@ (8006584 <HAL_RCC_OscConfig+0x770>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a8b      	ldr	r2, [pc, #556]	@ (8006584 <HAL_RCC_OscConfig+0x770>)
 8006356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800635a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800635c:	f7fb fa12 	bl	8001784 <HAL_GetTick>
 8006360:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006362:	e008      	b.n	8006376 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006364:	f7fb fa0e 	bl	8001784 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b64      	cmp	r3, #100	@ 0x64
 8006370:	d901      	bls.n	8006376 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e1a0      	b.n	80066b8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006376:	4b83      	ldr	r3, [pc, #524]	@ (8006584 <HAL_RCC_OscConfig+0x770>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800637e:	2b00      	cmp	r3, #0
 8006380:	d0f0      	beq.n	8006364 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d106      	bne.n	8006398 <HAL_RCC_OscConfig+0x584>
 800638a:	4b7d      	ldr	r3, [pc, #500]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 800638c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800638e:	4a7c      	ldr	r2, [pc, #496]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 8006390:	f043 0301 	orr.w	r3, r3, #1
 8006394:	6713      	str	r3, [r2, #112]	@ 0x70
 8006396:	e02d      	b.n	80063f4 <HAL_RCC_OscConfig+0x5e0>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10c      	bne.n	80063ba <HAL_RCC_OscConfig+0x5a6>
 80063a0:	4b77      	ldr	r3, [pc, #476]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 80063a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063a4:	4a76      	ldr	r2, [pc, #472]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 80063a6:	f023 0301 	bic.w	r3, r3, #1
 80063aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80063ac:	4b74      	ldr	r3, [pc, #464]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 80063ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063b0:	4a73      	ldr	r2, [pc, #460]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 80063b2:	f023 0304 	bic.w	r3, r3, #4
 80063b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80063b8:	e01c      	b.n	80063f4 <HAL_RCC_OscConfig+0x5e0>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	2b05      	cmp	r3, #5
 80063c0:	d10c      	bne.n	80063dc <HAL_RCC_OscConfig+0x5c8>
 80063c2:	4b6f      	ldr	r3, [pc, #444]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 80063c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063c6:	4a6e      	ldr	r2, [pc, #440]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 80063c8:	f043 0304 	orr.w	r3, r3, #4
 80063cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80063ce:	4b6c      	ldr	r3, [pc, #432]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 80063d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063d2:	4a6b      	ldr	r2, [pc, #428]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 80063d4:	f043 0301 	orr.w	r3, r3, #1
 80063d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80063da:	e00b      	b.n	80063f4 <HAL_RCC_OscConfig+0x5e0>
 80063dc:	4b68      	ldr	r3, [pc, #416]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 80063de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063e0:	4a67      	ldr	r2, [pc, #412]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 80063e2:	f023 0301 	bic.w	r3, r3, #1
 80063e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80063e8:	4b65      	ldr	r3, [pc, #404]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 80063ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ec:	4a64      	ldr	r2, [pc, #400]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 80063ee:	f023 0304 	bic.w	r3, r3, #4
 80063f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d015      	beq.n	8006428 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063fc:	f7fb f9c2 	bl	8001784 <HAL_GetTick>
 8006400:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006402:	e00a      	b.n	800641a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006404:	f7fb f9be 	bl	8001784 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006412:	4293      	cmp	r3, r2
 8006414:	d901      	bls.n	800641a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e14e      	b.n	80066b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800641a:	4b59      	ldr	r3, [pc, #356]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 800641c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0ee      	beq.n	8006404 <HAL_RCC_OscConfig+0x5f0>
 8006426:	e014      	b.n	8006452 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006428:	f7fb f9ac 	bl	8001784 <HAL_GetTick>
 800642c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800642e:	e00a      	b.n	8006446 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006430:	f7fb f9a8 	bl	8001784 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800643e:	4293      	cmp	r3, r2
 8006440:	d901      	bls.n	8006446 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e138      	b.n	80066b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006446:	4b4e      	ldr	r3, [pc, #312]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 8006448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1ee      	bne.n	8006430 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 812d 	beq.w	80066b6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800645c:	4b48      	ldr	r3, [pc, #288]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006464:	2b18      	cmp	r3, #24
 8006466:	f000 80bd 	beq.w	80065e4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646e:	2b02      	cmp	r3, #2
 8006470:	f040 809e 	bne.w	80065b0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006474:	4b42      	ldr	r3, [pc, #264]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a41      	ldr	r2, [pc, #260]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 800647a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800647e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006480:	f7fb f980 	bl	8001784 <HAL_GetTick>
 8006484:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006486:	e008      	b.n	800649a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006488:	f7fb f97c 	bl	8001784 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b02      	cmp	r3, #2
 8006494:	d901      	bls.n	800649a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e10e      	b.n	80066b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800649a:	4b39      	ldr	r3, [pc, #228]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1f0      	bne.n	8006488 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064a6:	4b36      	ldr	r3, [pc, #216]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 80064a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064aa:	4b37      	ldr	r3, [pc, #220]	@ (8006588 <HAL_RCC_OscConfig+0x774>)
 80064ac:	4013      	ands	r3, r2
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80064b6:	0112      	lsls	r2, r2, #4
 80064b8:	430a      	orrs	r2, r1
 80064ba:	4931      	ldr	r1, [pc, #196]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	628b      	str	r3, [r1, #40]	@ 0x28
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c4:	3b01      	subs	r3, #1
 80064c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064ce:	3b01      	subs	r3, #1
 80064d0:	025b      	lsls	r3, r3, #9
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	431a      	orrs	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064da:	3b01      	subs	r3, #1
 80064dc:	041b      	lsls	r3, r3, #16
 80064de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064e8:	3b01      	subs	r3, #1
 80064ea:	061b      	lsls	r3, r3, #24
 80064ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80064f0:	4923      	ldr	r1, [pc, #140]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80064f6:	4b22      	ldr	r3, [pc, #136]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 80064f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064fa:	4a21      	ldr	r2, [pc, #132]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 80064fc:	f023 0301 	bic.w	r3, r3, #1
 8006500:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006502:	4b1f      	ldr	r3, [pc, #124]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 8006504:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006506:	4b21      	ldr	r3, [pc, #132]	@ (800658c <HAL_RCC_OscConfig+0x778>)
 8006508:	4013      	ands	r3, r2
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800650e:	00d2      	lsls	r2, r2, #3
 8006510:	491b      	ldr	r1, [pc, #108]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 8006512:	4313      	orrs	r3, r2
 8006514:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006516:	4b1a      	ldr	r3, [pc, #104]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 8006518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651a:	f023 020c 	bic.w	r2, r3, #12
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006522:	4917      	ldr	r1, [pc, #92]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 8006524:	4313      	orrs	r3, r2
 8006526:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006528:	4b15      	ldr	r3, [pc, #84]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 800652a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652c:	f023 0202 	bic.w	r2, r3, #2
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006534:	4912      	ldr	r1, [pc, #72]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 8006536:	4313      	orrs	r3, r2
 8006538:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800653a:	4b11      	ldr	r3, [pc, #68]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 800653c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653e:	4a10      	ldr	r2, [pc, #64]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 8006540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006544:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006546:	4b0e      	ldr	r3, [pc, #56]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 8006548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800654a:	4a0d      	ldr	r2, [pc, #52]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 800654c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006550:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006552:	4b0b      	ldr	r3, [pc, #44]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 8006554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006556:	4a0a      	ldr	r2, [pc, #40]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 8006558:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800655c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800655e:	4b08      	ldr	r3, [pc, #32]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 8006560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006562:	4a07      	ldr	r2, [pc, #28]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 8006564:	f043 0301 	orr.w	r3, r3, #1
 8006568:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800656a:	4b05      	ldr	r3, [pc, #20]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a04      	ldr	r2, [pc, #16]	@ (8006580 <HAL_RCC_OscConfig+0x76c>)
 8006570:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006576:	f7fb f905 	bl	8001784 <HAL_GetTick>
 800657a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800657c:	e011      	b.n	80065a2 <HAL_RCC_OscConfig+0x78e>
 800657e:	bf00      	nop
 8006580:	58024400 	.word	0x58024400
 8006584:	58024800 	.word	0x58024800
 8006588:	fffffc0c 	.word	0xfffffc0c
 800658c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006590:	f7fb f8f8 	bl	8001784 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b02      	cmp	r3, #2
 800659c:	d901      	bls.n	80065a2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e08a      	b.n	80066b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065a2:	4b47      	ldr	r3, [pc, #284]	@ (80066c0 <HAL_RCC_OscConfig+0x8ac>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d0f0      	beq.n	8006590 <HAL_RCC_OscConfig+0x77c>
 80065ae:	e082      	b.n	80066b6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065b0:	4b43      	ldr	r3, [pc, #268]	@ (80066c0 <HAL_RCC_OscConfig+0x8ac>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a42      	ldr	r2, [pc, #264]	@ (80066c0 <HAL_RCC_OscConfig+0x8ac>)
 80065b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065bc:	f7fb f8e2 	bl	8001784 <HAL_GetTick>
 80065c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065c4:	f7fb f8de 	bl	8001784 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e070      	b.n	80066b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065d6:	4b3a      	ldr	r3, [pc, #232]	@ (80066c0 <HAL_RCC_OscConfig+0x8ac>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1f0      	bne.n	80065c4 <HAL_RCC_OscConfig+0x7b0>
 80065e2:	e068      	b.n	80066b6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80065e4:	4b36      	ldr	r3, [pc, #216]	@ (80066c0 <HAL_RCC_OscConfig+0x8ac>)
 80065e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80065ea:	4b35      	ldr	r3, [pc, #212]	@ (80066c0 <HAL_RCC_OscConfig+0x8ac>)
 80065ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d031      	beq.n	800665c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	f003 0203 	and.w	r2, r3, #3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006602:	429a      	cmp	r2, r3
 8006604:	d12a      	bne.n	800665c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	091b      	lsrs	r3, r3, #4
 800660a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006612:	429a      	cmp	r2, r3
 8006614:	d122      	bne.n	800665c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006620:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006622:	429a      	cmp	r2, r3
 8006624:	d11a      	bne.n	800665c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	0a5b      	lsrs	r3, r3, #9
 800662a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006632:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006634:	429a      	cmp	r2, r3
 8006636:	d111      	bne.n	800665c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	0c1b      	lsrs	r3, r3, #16
 800663c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006644:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006646:	429a      	cmp	r2, r3
 8006648:	d108      	bne.n	800665c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	0e1b      	lsrs	r3, r3, #24
 800664e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006656:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006658:	429a      	cmp	r2, r3
 800665a:	d001      	beq.n	8006660 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e02b      	b.n	80066b8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006660:	4b17      	ldr	r3, [pc, #92]	@ (80066c0 <HAL_RCC_OscConfig+0x8ac>)
 8006662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006664:	08db      	lsrs	r3, r3, #3
 8006666:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800666a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	429a      	cmp	r2, r3
 8006674:	d01f      	beq.n	80066b6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006676:	4b12      	ldr	r3, [pc, #72]	@ (80066c0 <HAL_RCC_OscConfig+0x8ac>)
 8006678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667a:	4a11      	ldr	r2, [pc, #68]	@ (80066c0 <HAL_RCC_OscConfig+0x8ac>)
 800667c:	f023 0301 	bic.w	r3, r3, #1
 8006680:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006682:	f7fb f87f 	bl	8001784 <HAL_GetTick>
 8006686:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006688:	bf00      	nop
 800668a:	f7fb f87b 	bl	8001784 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006692:	4293      	cmp	r3, r2
 8006694:	d0f9      	beq.n	800668a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006696:	4b0a      	ldr	r3, [pc, #40]	@ (80066c0 <HAL_RCC_OscConfig+0x8ac>)
 8006698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800669a:	4b0a      	ldr	r3, [pc, #40]	@ (80066c4 <HAL_RCC_OscConfig+0x8b0>)
 800669c:	4013      	ands	r3, r2
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80066a2:	00d2      	lsls	r2, r2, #3
 80066a4:	4906      	ldr	r1, [pc, #24]	@ (80066c0 <HAL_RCC_OscConfig+0x8ac>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80066aa:	4b05      	ldr	r3, [pc, #20]	@ (80066c0 <HAL_RCC_OscConfig+0x8ac>)
 80066ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ae:	4a04      	ldr	r2, [pc, #16]	@ (80066c0 <HAL_RCC_OscConfig+0x8ac>)
 80066b0:	f043 0301 	orr.w	r3, r3, #1
 80066b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3730      	adds	r7, #48	@ 0x30
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	58024400 	.word	0x58024400
 80066c4:	ffff0007 	.word	0xffff0007

080066c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e19c      	b.n	8006a16 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066dc:	4b8a      	ldr	r3, [pc, #552]	@ (8006908 <HAL_RCC_ClockConfig+0x240>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 030f 	and.w	r3, r3, #15
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d910      	bls.n	800670c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ea:	4b87      	ldr	r3, [pc, #540]	@ (8006908 <HAL_RCC_ClockConfig+0x240>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f023 020f 	bic.w	r2, r3, #15
 80066f2:	4985      	ldr	r1, [pc, #532]	@ (8006908 <HAL_RCC_ClockConfig+0x240>)
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066fa:	4b83      	ldr	r3, [pc, #524]	@ (8006908 <HAL_RCC_ClockConfig+0x240>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 030f 	and.w	r3, r3, #15
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	429a      	cmp	r2, r3
 8006706:	d001      	beq.n	800670c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e184      	b.n	8006a16 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b00      	cmp	r3, #0
 8006716:	d010      	beq.n	800673a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691a      	ldr	r2, [r3, #16]
 800671c:	4b7b      	ldr	r3, [pc, #492]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006724:	429a      	cmp	r2, r3
 8006726:	d908      	bls.n	800673a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006728:	4b78      	ldr	r3, [pc, #480]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	4975      	ldr	r1, [pc, #468]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 8006736:	4313      	orrs	r3, r2
 8006738:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0308 	and.w	r3, r3, #8
 8006742:	2b00      	cmp	r3, #0
 8006744:	d010      	beq.n	8006768 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	695a      	ldr	r2, [r3, #20]
 800674a:	4b70      	ldr	r3, [pc, #448]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006752:	429a      	cmp	r2, r3
 8006754:	d908      	bls.n	8006768 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006756:	4b6d      	ldr	r3, [pc, #436]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 8006758:	69db      	ldr	r3, [r3, #28]
 800675a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	496a      	ldr	r1, [pc, #424]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 8006764:	4313      	orrs	r3, r2
 8006766:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0310 	and.w	r3, r3, #16
 8006770:	2b00      	cmp	r3, #0
 8006772:	d010      	beq.n	8006796 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	699a      	ldr	r2, [r3, #24]
 8006778:	4b64      	ldr	r3, [pc, #400]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006780:	429a      	cmp	r2, r3
 8006782:	d908      	bls.n	8006796 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006784:	4b61      	ldr	r3, [pc, #388]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	495e      	ldr	r1, [pc, #376]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 8006792:	4313      	orrs	r3, r2
 8006794:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0320 	and.w	r3, r3, #32
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d010      	beq.n	80067c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	69da      	ldr	r2, [r3, #28]
 80067a6:	4b59      	ldr	r3, [pc, #356]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d908      	bls.n	80067c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80067b2:	4b56      	ldr	r3, [pc, #344]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	4953      	ldr	r1, [pc, #332]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d010      	beq.n	80067f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	4b4d      	ldr	r3, [pc, #308]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	f003 030f 	and.w	r3, r3, #15
 80067dc:	429a      	cmp	r2, r3
 80067de:	d908      	bls.n	80067f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067e0:	4b4a      	ldr	r3, [pc, #296]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	f023 020f 	bic.w	r2, r3, #15
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	4947      	ldr	r1, [pc, #284]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d055      	beq.n	80068aa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80067fe:	4b43      	ldr	r3, [pc, #268]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	4940      	ldr	r1, [pc, #256]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 800680c:	4313      	orrs	r3, r2
 800680e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	2b02      	cmp	r3, #2
 8006816:	d107      	bne.n	8006828 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006818:	4b3c      	ldr	r3, [pc, #240]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d121      	bne.n	8006868 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e0f6      	b.n	8006a16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	2b03      	cmp	r3, #3
 800682e:	d107      	bne.n	8006840 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006830:	4b36      	ldr	r3, [pc, #216]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d115      	bne.n	8006868 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e0ea      	b.n	8006a16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d107      	bne.n	8006858 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006848:	4b30      	ldr	r3, [pc, #192]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006850:	2b00      	cmp	r3, #0
 8006852:	d109      	bne.n	8006868 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e0de      	b.n	8006a16 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006858:	4b2c      	ldr	r3, [pc, #176]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e0d6      	b.n	8006a16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006868:	4b28      	ldr	r3, [pc, #160]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	f023 0207 	bic.w	r2, r3, #7
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	4925      	ldr	r1, [pc, #148]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 8006876:	4313      	orrs	r3, r2
 8006878:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800687a:	f7fa ff83 	bl	8001784 <HAL_GetTick>
 800687e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006880:	e00a      	b.n	8006898 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006882:	f7fa ff7f 	bl	8001784 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006890:	4293      	cmp	r3, r2
 8006892:	d901      	bls.n	8006898 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e0be      	b.n	8006a16 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006898:	4b1c      	ldr	r3, [pc, #112]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	00db      	lsls	r3, r3, #3
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d1eb      	bne.n	8006882 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d010      	beq.n	80068d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68da      	ldr	r2, [r3, #12]
 80068ba:	4b14      	ldr	r3, [pc, #80]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	f003 030f 	and.w	r3, r3, #15
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d208      	bcs.n	80068d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068c6:	4b11      	ldr	r3, [pc, #68]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	f023 020f 	bic.w	r2, r3, #15
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	490e      	ldr	r1, [pc, #56]	@ (800690c <HAL_RCC_ClockConfig+0x244>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006908 <HAL_RCC_ClockConfig+0x240>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 030f 	and.w	r3, r3, #15
 80068e0:	683a      	ldr	r2, [r7, #0]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d214      	bcs.n	8006910 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068e6:	4b08      	ldr	r3, [pc, #32]	@ (8006908 <HAL_RCC_ClockConfig+0x240>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f023 020f 	bic.w	r2, r3, #15
 80068ee:	4906      	ldr	r1, [pc, #24]	@ (8006908 <HAL_RCC_ClockConfig+0x240>)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068f6:	4b04      	ldr	r3, [pc, #16]	@ (8006908 <HAL_RCC_ClockConfig+0x240>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 030f 	and.w	r3, r3, #15
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	429a      	cmp	r2, r3
 8006902:	d005      	beq.n	8006910 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e086      	b.n	8006a16 <HAL_RCC_ClockConfig+0x34e>
 8006908:	52002000 	.word	0x52002000
 800690c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0304 	and.w	r3, r3, #4
 8006918:	2b00      	cmp	r3, #0
 800691a:	d010      	beq.n	800693e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	691a      	ldr	r2, [r3, #16]
 8006920:	4b3f      	ldr	r3, [pc, #252]	@ (8006a20 <HAL_RCC_ClockConfig+0x358>)
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006928:	429a      	cmp	r2, r3
 800692a:	d208      	bcs.n	800693e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800692c:	4b3c      	ldr	r3, [pc, #240]	@ (8006a20 <HAL_RCC_ClockConfig+0x358>)
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	4939      	ldr	r1, [pc, #228]	@ (8006a20 <HAL_RCC_ClockConfig+0x358>)
 800693a:	4313      	orrs	r3, r2
 800693c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0308 	and.w	r3, r3, #8
 8006946:	2b00      	cmp	r3, #0
 8006948:	d010      	beq.n	800696c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	695a      	ldr	r2, [r3, #20]
 800694e:	4b34      	ldr	r3, [pc, #208]	@ (8006a20 <HAL_RCC_ClockConfig+0x358>)
 8006950:	69db      	ldr	r3, [r3, #28]
 8006952:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006956:	429a      	cmp	r2, r3
 8006958:	d208      	bcs.n	800696c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800695a:	4b31      	ldr	r3, [pc, #196]	@ (8006a20 <HAL_RCC_ClockConfig+0x358>)
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	492e      	ldr	r1, [pc, #184]	@ (8006a20 <HAL_RCC_ClockConfig+0x358>)
 8006968:	4313      	orrs	r3, r2
 800696a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0310 	and.w	r3, r3, #16
 8006974:	2b00      	cmp	r3, #0
 8006976:	d010      	beq.n	800699a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	699a      	ldr	r2, [r3, #24]
 800697c:	4b28      	ldr	r3, [pc, #160]	@ (8006a20 <HAL_RCC_ClockConfig+0x358>)
 800697e:	69db      	ldr	r3, [r3, #28]
 8006980:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006984:	429a      	cmp	r2, r3
 8006986:	d208      	bcs.n	800699a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006988:	4b25      	ldr	r3, [pc, #148]	@ (8006a20 <HAL_RCC_ClockConfig+0x358>)
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	4922      	ldr	r1, [pc, #136]	@ (8006a20 <HAL_RCC_ClockConfig+0x358>)
 8006996:	4313      	orrs	r3, r2
 8006998:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0320 	and.w	r3, r3, #32
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d010      	beq.n	80069c8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	69da      	ldr	r2, [r3, #28]
 80069aa:	4b1d      	ldr	r3, [pc, #116]	@ (8006a20 <HAL_RCC_ClockConfig+0x358>)
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d208      	bcs.n	80069c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80069b6:	4b1a      	ldr	r3, [pc, #104]	@ (8006a20 <HAL_RCC_ClockConfig+0x358>)
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	4917      	ldr	r1, [pc, #92]	@ (8006a20 <HAL_RCC_ClockConfig+0x358>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80069c8:	f000 f834 	bl	8006a34 <HAL_RCC_GetSysClockFreq>
 80069cc:	4602      	mov	r2, r0
 80069ce:	4b14      	ldr	r3, [pc, #80]	@ (8006a20 <HAL_RCC_ClockConfig+0x358>)
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	0a1b      	lsrs	r3, r3, #8
 80069d4:	f003 030f 	and.w	r3, r3, #15
 80069d8:	4912      	ldr	r1, [pc, #72]	@ (8006a24 <HAL_RCC_ClockConfig+0x35c>)
 80069da:	5ccb      	ldrb	r3, [r1, r3]
 80069dc:	f003 031f 	and.w	r3, r3, #31
 80069e0:	fa22 f303 	lsr.w	r3, r2, r3
 80069e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069e6:	4b0e      	ldr	r3, [pc, #56]	@ (8006a20 <HAL_RCC_ClockConfig+0x358>)
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	f003 030f 	and.w	r3, r3, #15
 80069ee:	4a0d      	ldr	r2, [pc, #52]	@ (8006a24 <HAL_RCC_ClockConfig+0x35c>)
 80069f0:	5cd3      	ldrb	r3, [r2, r3]
 80069f2:	f003 031f 	and.w	r3, r3, #31
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	fa22 f303 	lsr.w	r3, r2, r3
 80069fc:	4a0a      	ldr	r2, [pc, #40]	@ (8006a28 <HAL_RCC_ClockConfig+0x360>)
 80069fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a00:	4a0a      	ldr	r2, [pc, #40]	@ (8006a2c <HAL_RCC_ClockConfig+0x364>)
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006a06:	4b0a      	ldr	r3, [pc, #40]	@ (8006a30 <HAL_RCC_ClockConfig+0x368>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fa fe70 	bl	80016f0 <HAL_InitTick>
 8006a10:	4603      	mov	r3, r0
 8006a12:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3718      	adds	r7, #24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	58024400 	.word	0x58024400
 8006a24:	0800ce8c 	.word	0x0800ce8c
 8006a28:	24000004 	.word	0x24000004
 8006a2c:	24000000 	.word	0x24000000
 8006a30:	24000024 	.word	0x24000024

08006a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b089      	sub	sp, #36	@ 0x24
 8006a38:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a3a:	4bb3      	ldr	r3, [pc, #716]	@ (8006d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a42:	2b18      	cmp	r3, #24
 8006a44:	f200 8155 	bhi.w	8006cf2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006a48:	a201      	add	r2, pc, #4	@ (adr r2, 8006a50 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4e:	bf00      	nop
 8006a50:	08006ab5 	.word	0x08006ab5
 8006a54:	08006cf3 	.word	0x08006cf3
 8006a58:	08006cf3 	.word	0x08006cf3
 8006a5c:	08006cf3 	.word	0x08006cf3
 8006a60:	08006cf3 	.word	0x08006cf3
 8006a64:	08006cf3 	.word	0x08006cf3
 8006a68:	08006cf3 	.word	0x08006cf3
 8006a6c:	08006cf3 	.word	0x08006cf3
 8006a70:	08006adb 	.word	0x08006adb
 8006a74:	08006cf3 	.word	0x08006cf3
 8006a78:	08006cf3 	.word	0x08006cf3
 8006a7c:	08006cf3 	.word	0x08006cf3
 8006a80:	08006cf3 	.word	0x08006cf3
 8006a84:	08006cf3 	.word	0x08006cf3
 8006a88:	08006cf3 	.word	0x08006cf3
 8006a8c:	08006cf3 	.word	0x08006cf3
 8006a90:	08006ae1 	.word	0x08006ae1
 8006a94:	08006cf3 	.word	0x08006cf3
 8006a98:	08006cf3 	.word	0x08006cf3
 8006a9c:	08006cf3 	.word	0x08006cf3
 8006aa0:	08006cf3 	.word	0x08006cf3
 8006aa4:	08006cf3 	.word	0x08006cf3
 8006aa8:	08006cf3 	.word	0x08006cf3
 8006aac:	08006cf3 	.word	0x08006cf3
 8006ab0:	08006ae7 	.word	0x08006ae7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ab4:	4b94      	ldr	r3, [pc, #592]	@ (8006d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0320 	and.w	r3, r3, #32
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d009      	beq.n	8006ad4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ac0:	4b91      	ldr	r3, [pc, #580]	@ (8006d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	08db      	lsrs	r3, r3, #3
 8006ac6:	f003 0303 	and.w	r3, r3, #3
 8006aca:	4a90      	ldr	r2, [pc, #576]	@ (8006d0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006acc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006ad2:	e111      	b.n	8006cf8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006ad4:	4b8d      	ldr	r3, [pc, #564]	@ (8006d0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ad6:	61bb      	str	r3, [r7, #24]
      break;
 8006ad8:	e10e      	b.n	8006cf8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006ada:	4b8d      	ldr	r3, [pc, #564]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006adc:	61bb      	str	r3, [r7, #24]
      break;
 8006ade:	e10b      	b.n	8006cf8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006ae0:	4b8c      	ldr	r3, [pc, #560]	@ (8006d14 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006ae2:	61bb      	str	r3, [r7, #24]
      break;
 8006ae4:	e108      	b.n	8006cf8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ae6:	4b88      	ldr	r3, [pc, #544]	@ (8006d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aea:	f003 0303 	and.w	r3, r3, #3
 8006aee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006af0:	4b85      	ldr	r3, [pc, #532]	@ (8006d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af4:	091b      	lsrs	r3, r3, #4
 8006af6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006afa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006afc:	4b82      	ldr	r3, [pc, #520]	@ (8006d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006b06:	4b80      	ldr	r3, [pc, #512]	@ (8006d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b0a:	08db      	lsrs	r3, r3, #3
 8006b0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	fb02 f303 	mul.w	r3, r2, r3
 8006b16:	ee07 3a90 	vmov	s15, r3
 8006b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b1e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 80e1 	beq.w	8006cec <HAL_RCC_GetSysClockFreq+0x2b8>
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	f000 8083 	beq.w	8006c38 <HAL_RCC_GetSysClockFreq+0x204>
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	f200 80a1 	bhi.w	8006c7c <HAL_RCC_GetSysClockFreq+0x248>
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d003      	beq.n	8006b48 <HAL_RCC_GetSysClockFreq+0x114>
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d056      	beq.n	8006bf4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006b46:	e099      	b.n	8006c7c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b48:	4b6f      	ldr	r3, [pc, #444]	@ (8006d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0320 	and.w	r3, r3, #32
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d02d      	beq.n	8006bb0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b54:	4b6c      	ldr	r3, [pc, #432]	@ (8006d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	08db      	lsrs	r3, r3, #3
 8006b5a:	f003 0303 	and.w	r3, r3, #3
 8006b5e:	4a6b      	ldr	r2, [pc, #428]	@ (8006d0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b60:	fa22 f303 	lsr.w	r3, r2, r3
 8006b64:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	ee07 3a90 	vmov	s15, r3
 8006b6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	ee07 3a90 	vmov	s15, r3
 8006b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b7e:	4b62      	ldr	r3, [pc, #392]	@ (8006d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b86:	ee07 3a90 	vmov	s15, r3
 8006b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b92:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006d18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006baa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006bae:	e087      	b.n	8006cc0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	ee07 3a90 	vmov	s15, r3
 8006bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006d1c <HAL_RCC_GetSysClockFreq+0x2e8>
 8006bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bc2:	4b51      	ldr	r3, [pc, #324]	@ (8006d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bca:	ee07 3a90 	vmov	s15, r3
 8006bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bd6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006d18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006be2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006bf2:	e065      	b.n	8006cc0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	ee07 3a90 	vmov	s15, r3
 8006bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006d20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c06:	4b40      	ldr	r3, [pc, #256]	@ (8006d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c0e:	ee07 3a90 	vmov	s15, r3
 8006c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c1a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006d18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c36:	e043      	b.n	8006cc0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	ee07 3a90 	vmov	s15, r3
 8006c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c42:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006d24 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8006d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c52:	ee07 3a90 	vmov	s15, r3
 8006c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c5e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006d18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c7a:	e021      	b.n	8006cc0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	ee07 3a90 	vmov	s15, r3
 8006c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c86:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006d20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8006d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c96:	ee07 3a90 	vmov	s15, r3
 8006c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ca2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006d18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cbe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006cc0:	4b11      	ldr	r3, [pc, #68]	@ (8006d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc4:	0a5b      	lsrs	r3, r3, #9
 8006cc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cca:	3301      	adds	r3, #1
 8006ccc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	ee07 3a90 	vmov	s15, r3
 8006cd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006cd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ce4:	ee17 3a90 	vmov	r3, s15
 8006ce8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006cea:	e005      	b.n	8006cf8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	61bb      	str	r3, [r7, #24]
      break;
 8006cf0:	e002      	b.n	8006cf8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006cf2:	4b07      	ldr	r3, [pc, #28]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006cf4:	61bb      	str	r3, [r7, #24]
      break;
 8006cf6:	bf00      	nop
  }

  return sysclockfreq;
 8006cf8:	69bb      	ldr	r3, [r7, #24]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3724      	adds	r7, #36	@ 0x24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	58024400 	.word	0x58024400
 8006d0c:	03d09000 	.word	0x03d09000
 8006d10:	003d0900 	.word	0x003d0900
 8006d14:	017d7840 	.word	0x017d7840
 8006d18:	46000000 	.word	0x46000000
 8006d1c:	4c742400 	.word	0x4c742400
 8006d20:	4a742400 	.word	0x4a742400
 8006d24:	4bbebc20 	.word	0x4bbebc20

08006d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d2e:	f7ff fe81 	bl	8006a34 <HAL_RCC_GetSysClockFreq>
 8006d32:	4602      	mov	r2, r0
 8006d34:	4b10      	ldr	r3, [pc, #64]	@ (8006d78 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	0a1b      	lsrs	r3, r3, #8
 8006d3a:	f003 030f 	and.w	r3, r3, #15
 8006d3e:	490f      	ldr	r1, [pc, #60]	@ (8006d7c <HAL_RCC_GetHCLKFreq+0x54>)
 8006d40:	5ccb      	ldrb	r3, [r1, r3]
 8006d42:	f003 031f 	and.w	r3, r3, #31
 8006d46:	fa22 f303 	lsr.w	r3, r2, r3
 8006d4a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d78 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	f003 030f 	and.w	r3, r3, #15
 8006d54:	4a09      	ldr	r2, [pc, #36]	@ (8006d7c <HAL_RCC_GetHCLKFreq+0x54>)
 8006d56:	5cd3      	ldrb	r3, [r2, r3]
 8006d58:	f003 031f 	and.w	r3, r3, #31
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d62:	4a07      	ldr	r2, [pc, #28]	@ (8006d80 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d64:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d66:	4a07      	ldr	r2, [pc, #28]	@ (8006d84 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006d6c:	4b04      	ldr	r3, [pc, #16]	@ (8006d80 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	58024400 	.word	0x58024400
 8006d7c:	0800ce8c 	.word	0x0800ce8c
 8006d80:	24000004 	.word	0x24000004
 8006d84:	24000000 	.word	0x24000000

08006d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006d8c:	f7ff ffcc 	bl	8006d28 <HAL_RCC_GetHCLKFreq>
 8006d90:	4602      	mov	r2, r0
 8006d92:	4b06      	ldr	r3, [pc, #24]	@ (8006dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	091b      	lsrs	r3, r3, #4
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	4904      	ldr	r1, [pc, #16]	@ (8006db0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d9e:	5ccb      	ldrb	r3, [r1, r3]
 8006da0:	f003 031f 	and.w	r3, r3, #31
 8006da4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	58024400 	.word	0x58024400
 8006db0:	0800ce8c 	.word	0x0800ce8c

08006db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006db8:	f7ff ffb6 	bl	8006d28 <HAL_RCC_GetHCLKFreq>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	4b06      	ldr	r3, [pc, #24]	@ (8006dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	0a1b      	lsrs	r3, r3, #8
 8006dc4:	f003 0307 	and.w	r3, r3, #7
 8006dc8:	4904      	ldr	r1, [pc, #16]	@ (8006ddc <HAL_RCC_GetPCLK2Freq+0x28>)
 8006dca:	5ccb      	ldrb	r3, [r1, r3]
 8006dcc:	f003 031f 	and.w	r3, r3, #31
 8006dd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	58024400 	.word	0x58024400
 8006ddc:	0800ce8c 	.word	0x0800ce8c

08006de0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006de4:	b0ca      	sub	sp, #296	@ 0x128
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006dec:	2300      	movs	r3, #0
 8006dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006df2:	2300      	movs	r3, #0
 8006df4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006e04:	2500      	movs	r5, #0
 8006e06:	ea54 0305 	orrs.w	r3, r4, r5
 8006e0a:	d049      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e12:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e16:	d02f      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006e18:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e1c:	d828      	bhi.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e22:	d01a      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006e24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e28:	d822      	bhi.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d003      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006e2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e32:	d007      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e34:	e01c      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e36:	4bb8      	ldr	r3, [pc, #736]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3a:	4ab7      	ldr	r2, [pc, #732]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e42:	e01a      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e48:	3308      	adds	r3, #8
 8006e4a:	2102      	movs	r1, #2
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f002 fb61 	bl	8009514 <RCCEx_PLL2_Config>
 8006e52:	4603      	mov	r3, r0
 8006e54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e58:	e00f      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e5e:	3328      	adds	r3, #40	@ 0x28
 8006e60:	2102      	movs	r1, #2
 8006e62:	4618      	mov	r0, r3
 8006e64:	f002 fc08 	bl	8009678 <RCCEx_PLL3_Config>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e6e:	e004      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e76:	e000      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10a      	bne.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006e82:	4ba5      	ldr	r3, [pc, #660]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e86:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e90:	4aa1      	ldr	r2, [pc, #644]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e92:	430b      	orrs	r3, r1
 8006e94:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e96:	e003      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006eac:	f04f 0900 	mov.w	r9, #0
 8006eb0:	ea58 0309 	orrs.w	r3, r8, r9
 8006eb4:	d047      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ebc:	2b04      	cmp	r3, #4
 8006ebe:	d82a      	bhi.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec6:	bf00      	nop
 8006ec8:	08006edd 	.word	0x08006edd
 8006ecc:	08006eeb 	.word	0x08006eeb
 8006ed0:	08006f01 	.word	0x08006f01
 8006ed4:	08006f1f 	.word	0x08006f1f
 8006ed8:	08006f1f 	.word	0x08006f1f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006edc:	4b8e      	ldr	r3, [pc, #568]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee0:	4a8d      	ldr	r2, [pc, #564]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ee6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ee8:	e01a      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eee:	3308      	adds	r3, #8
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f002 fb0e 	bl	8009514 <RCCEx_PLL2_Config>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006efe:	e00f      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f04:	3328      	adds	r3, #40	@ 0x28
 8006f06:	2100      	movs	r1, #0
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f002 fbb5 	bl	8009678 <RCCEx_PLL3_Config>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f14:	e004      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f1c:	e000      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006f1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10a      	bne.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f28:	4b7b      	ldr	r3, [pc, #492]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f2c:	f023 0107 	bic.w	r1, r3, #7
 8006f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f36:	4a78      	ldr	r2, [pc, #480]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f38:	430b      	orrs	r3, r1
 8006f3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f3c:	e003      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006f52:	f04f 0b00 	mov.w	fp, #0
 8006f56:	ea5a 030b 	orrs.w	r3, sl, fp
 8006f5a:	d04c      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f66:	d030      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006f68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f6c:	d829      	bhi.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f70:	d02d      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006f72:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f74:	d825      	bhi.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f76:	2b80      	cmp	r3, #128	@ 0x80
 8006f78:	d018      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006f7a:	2b80      	cmp	r3, #128	@ 0x80
 8006f7c:	d821      	bhi.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d002      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006f82:	2b40      	cmp	r3, #64	@ 0x40
 8006f84:	d007      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006f86:	e01c      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f88:	4b63      	ldr	r3, [pc, #396]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8c:	4a62      	ldr	r2, [pc, #392]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006f94:	e01c      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f9a:	3308      	adds	r3, #8
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f002 fab8 	bl	8009514 <RCCEx_PLL2_Config>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006faa:	e011      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb0:	3328      	adds	r3, #40	@ 0x28
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f002 fb5f 	bl	8009678 <RCCEx_PLL3_Config>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006fc0:	e006      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fc8:	e002      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006fca:	bf00      	nop
 8006fcc:	e000      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006fce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10a      	bne.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006fd8:	4b4f      	ldr	r3, [pc, #316]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fdc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fe6:	4a4c      	ldr	r2, [pc, #304]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fe8:	430b      	orrs	r3, r1
 8006fea:	6513      	str	r3, [r2, #80]	@ 0x50
 8006fec:	e003      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ff2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffe:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007002:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007006:	2300      	movs	r3, #0
 8007008:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800700c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007010:	460b      	mov	r3, r1
 8007012:	4313      	orrs	r3, r2
 8007014:	d053      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800701a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800701e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007022:	d035      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007024:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007028:	d82e      	bhi.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800702a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800702e:	d031      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007030:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007034:	d828      	bhi.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007036:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800703a:	d01a      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800703c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007040:	d822      	bhi.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007046:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800704a:	d007      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800704c:	e01c      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800704e:	4b32      	ldr	r3, [pc, #200]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007052:	4a31      	ldr	r2, [pc, #196]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007054:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007058:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800705a:	e01c      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800705c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007060:	3308      	adds	r3, #8
 8007062:	2100      	movs	r1, #0
 8007064:	4618      	mov	r0, r3
 8007066:	f002 fa55 	bl	8009514 <RCCEx_PLL2_Config>
 800706a:	4603      	mov	r3, r0
 800706c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007070:	e011      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007076:	3328      	adds	r3, #40	@ 0x28
 8007078:	2100      	movs	r1, #0
 800707a:	4618      	mov	r0, r3
 800707c:	f002 fafc 	bl	8009678 <RCCEx_PLL3_Config>
 8007080:	4603      	mov	r3, r0
 8007082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007086:	e006      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800708e:	e002      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007090:	bf00      	nop
 8007092:	e000      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10b      	bne.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800709e:	4b1e      	ldr	r3, [pc, #120]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070a2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80070a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80070ae:	4a1a      	ldr	r2, [pc, #104]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070b0:	430b      	orrs	r3, r1
 80070b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80070b4:	e003      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80070be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80070ca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80070ce:	2300      	movs	r3, #0
 80070d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80070d4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80070d8:	460b      	mov	r3, r1
 80070da:	4313      	orrs	r3, r2
 80070dc:	d056      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80070de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80070e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80070ea:	d038      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80070ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80070f0:	d831      	bhi.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80070f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80070f6:	d034      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80070f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80070fc:	d82b      	bhi.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80070fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007102:	d01d      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007104:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007108:	d825      	bhi.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800710a:	2b00      	cmp	r3, #0
 800710c:	d006      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800710e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007112:	d00a      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007114:	e01f      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007116:	bf00      	nop
 8007118:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800711c:	4ba2      	ldr	r3, [pc, #648]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800711e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007120:	4aa1      	ldr	r2, [pc, #644]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007122:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007126:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007128:	e01c      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800712a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800712e:	3308      	adds	r3, #8
 8007130:	2100      	movs	r1, #0
 8007132:	4618      	mov	r0, r3
 8007134:	f002 f9ee 	bl	8009514 <RCCEx_PLL2_Config>
 8007138:	4603      	mov	r3, r0
 800713a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800713e:	e011      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007144:	3328      	adds	r3, #40	@ 0x28
 8007146:	2100      	movs	r1, #0
 8007148:	4618      	mov	r0, r3
 800714a:	f002 fa95 	bl	8009678 <RCCEx_PLL3_Config>
 800714e:	4603      	mov	r3, r0
 8007150:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007154:	e006      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800715c:	e002      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800715e:	bf00      	nop
 8007160:	e000      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007164:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10b      	bne.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800716c:	4b8e      	ldr	r3, [pc, #568]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800716e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007170:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007178:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800717c:	4a8a      	ldr	r2, [pc, #552]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800717e:	430b      	orrs	r3, r1
 8007180:	6593      	str	r3, [r2, #88]	@ 0x58
 8007182:	e003      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007184:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007188:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800718c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007194:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007198:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800719c:	2300      	movs	r3, #0
 800719e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80071a2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80071a6:	460b      	mov	r3, r1
 80071a8:	4313      	orrs	r3, r2
 80071aa:	d03a      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80071ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071b2:	2b30      	cmp	r3, #48	@ 0x30
 80071b4:	d01f      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80071b6:	2b30      	cmp	r3, #48	@ 0x30
 80071b8:	d819      	bhi.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80071ba:	2b20      	cmp	r3, #32
 80071bc:	d00c      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80071be:	2b20      	cmp	r3, #32
 80071c0:	d815      	bhi.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d019      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80071c6:	2b10      	cmp	r3, #16
 80071c8:	d111      	bne.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071ca:	4b77      	ldr	r3, [pc, #476]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ce:	4a76      	ldr	r2, [pc, #472]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80071d6:	e011      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071dc:	3308      	adds	r3, #8
 80071de:	2102      	movs	r1, #2
 80071e0:	4618      	mov	r0, r3
 80071e2:	f002 f997 	bl	8009514 <RCCEx_PLL2_Config>
 80071e6:	4603      	mov	r3, r0
 80071e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80071ec:	e006      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071f4:	e002      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80071f6:	bf00      	nop
 80071f8:	e000      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80071fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10a      	bne.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007204:	4b68      	ldr	r3, [pc, #416]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007208:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800720c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007212:	4a65      	ldr	r2, [pc, #404]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007214:	430b      	orrs	r3, r1
 8007216:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007218:	e003      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800721a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800721e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800722e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007232:	2300      	movs	r3, #0
 8007234:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007238:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800723c:	460b      	mov	r3, r1
 800723e:	4313      	orrs	r3, r2
 8007240:	d051      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007248:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800724c:	d035      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800724e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007252:	d82e      	bhi.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007254:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007258:	d031      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800725a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800725e:	d828      	bhi.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007260:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007264:	d01a      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007266:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800726a:	d822      	bhi.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800726c:	2b00      	cmp	r3, #0
 800726e:	d003      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007270:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007274:	d007      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007276:	e01c      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007278:	4b4b      	ldr	r3, [pc, #300]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800727a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800727c:	4a4a      	ldr	r2, [pc, #296]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800727e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007282:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007284:	e01c      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800728a:	3308      	adds	r3, #8
 800728c:	2100      	movs	r1, #0
 800728e:	4618      	mov	r0, r3
 8007290:	f002 f940 	bl	8009514 <RCCEx_PLL2_Config>
 8007294:	4603      	mov	r3, r0
 8007296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800729a:	e011      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800729c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a0:	3328      	adds	r3, #40	@ 0x28
 80072a2:	2100      	movs	r1, #0
 80072a4:	4618      	mov	r0, r3
 80072a6:	f002 f9e7 	bl	8009678 <RCCEx_PLL3_Config>
 80072aa:	4603      	mov	r3, r0
 80072ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80072b0:	e006      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072b8:	e002      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80072ba:	bf00      	nop
 80072bc:	e000      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80072be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10a      	bne.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80072c8:	4b37      	ldr	r3, [pc, #220]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072cc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80072d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072d6:	4a34      	ldr	r2, [pc, #208]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072d8:	430b      	orrs	r3, r1
 80072da:	6513      	str	r3, [r2, #80]	@ 0x50
 80072dc:	e003      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80072e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80072f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80072f6:	2300      	movs	r3, #0
 80072f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80072fc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007300:	460b      	mov	r3, r1
 8007302:	4313      	orrs	r3, r2
 8007304:	d056      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800730a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800730c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007310:	d033      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007312:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007316:	d82c      	bhi.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007318:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800731c:	d02f      	beq.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800731e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007322:	d826      	bhi.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007324:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007328:	d02b      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800732a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800732e:	d820      	bhi.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007330:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007334:	d012      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007336:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800733a:	d81a      	bhi.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800733c:	2b00      	cmp	r3, #0
 800733e:	d022      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007344:	d115      	bne.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734a:	3308      	adds	r3, #8
 800734c:	2101      	movs	r1, #1
 800734e:	4618      	mov	r0, r3
 8007350:	f002 f8e0 	bl	8009514 <RCCEx_PLL2_Config>
 8007354:	4603      	mov	r3, r0
 8007356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800735a:	e015      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800735c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007360:	3328      	adds	r3, #40	@ 0x28
 8007362:	2101      	movs	r1, #1
 8007364:	4618      	mov	r0, r3
 8007366:	f002 f987 	bl	8009678 <RCCEx_PLL3_Config>
 800736a:	4603      	mov	r3, r0
 800736c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007370:	e00a      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007378:	e006      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800737a:	bf00      	nop
 800737c:	e004      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800737e:	bf00      	nop
 8007380:	e002      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007382:	bf00      	nop
 8007384:	e000      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007386:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10d      	bne.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007390:	4b05      	ldr	r3, [pc, #20]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007394:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800739c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800739e:	4a02      	ldr	r2, [pc, #8]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073a0:	430b      	orrs	r3, r1
 80073a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80073a4:	e006      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80073a6:	bf00      	nop
 80073a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80073b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073bc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80073c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80073c4:	2300      	movs	r3, #0
 80073c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80073ca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80073ce:	460b      	mov	r3, r1
 80073d0:	4313      	orrs	r3, r2
 80073d2:	d055      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80073d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80073dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073e0:	d033      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80073e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073e6:	d82c      	bhi.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80073e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073ec:	d02f      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80073ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073f2:	d826      	bhi.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80073f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073f8:	d02b      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80073fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073fe:	d820      	bhi.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007400:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007404:	d012      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007406:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800740a:	d81a      	bhi.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800740c:	2b00      	cmp	r3, #0
 800740e:	d022      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007410:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007414:	d115      	bne.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800741a:	3308      	adds	r3, #8
 800741c:	2101      	movs	r1, #1
 800741e:	4618      	mov	r0, r3
 8007420:	f002 f878 	bl	8009514 <RCCEx_PLL2_Config>
 8007424:	4603      	mov	r3, r0
 8007426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800742a:	e015      	b.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800742c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007430:	3328      	adds	r3, #40	@ 0x28
 8007432:	2101      	movs	r1, #1
 8007434:	4618      	mov	r0, r3
 8007436:	f002 f91f 	bl	8009678 <RCCEx_PLL3_Config>
 800743a:	4603      	mov	r3, r0
 800743c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007440:	e00a      	b.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007448:	e006      	b.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800744a:	bf00      	nop
 800744c:	e004      	b.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800744e:	bf00      	nop
 8007450:	e002      	b.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007452:	bf00      	nop
 8007454:	e000      	b.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007456:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007458:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10b      	bne.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007460:	4ba3      	ldr	r3, [pc, #652]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007464:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800746c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007470:	4a9f      	ldr	r2, [pc, #636]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007472:	430b      	orrs	r3, r1
 8007474:	6593      	str	r3, [r2, #88]	@ 0x58
 8007476:	e003      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007478:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800747c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007488:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800748c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007490:	2300      	movs	r3, #0
 8007492:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007496:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800749a:	460b      	mov	r3, r1
 800749c:	4313      	orrs	r3, r2
 800749e:	d037      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80074a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074aa:	d00e      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80074ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074b0:	d816      	bhi.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d018      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80074b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074ba:	d111      	bne.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074bc:	4b8c      	ldr	r3, [pc, #560]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c0:	4a8b      	ldr	r2, [pc, #556]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074c8:	e00f      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ce:	3308      	adds	r3, #8
 80074d0:	2101      	movs	r1, #1
 80074d2:	4618      	mov	r0, r3
 80074d4:	f002 f81e 	bl	8009514 <RCCEx_PLL2_Config>
 80074d8:	4603      	mov	r3, r0
 80074da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074de:	e004      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074e6:	e000      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80074e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10a      	bne.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80074f2:	4b7f      	ldr	r3, [pc, #508]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074f6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80074fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007500:	4a7b      	ldr	r2, [pc, #492]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007502:	430b      	orrs	r3, r1
 8007504:	6513      	str	r3, [r2, #80]	@ 0x50
 8007506:	e003      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007508:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800750c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007518:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800751c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007520:	2300      	movs	r3, #0
 8007522:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007526:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800752a:	460b      	mov	r3, r1
 800752c:	4313      	orrs	r3, r2
 800752e:	d039      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007536:	2b03      	cmp	r3, #3
 8007538:	d81c      	bhi.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800753a:	a201      	add	r2, pc, #4	@ (adr r2, 8007540 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800753c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007540:	0800757d 	.word	0x0800757d
 8007544:	08007551 	.word	0x08007551
 8007548:	0800755f 	.word	0x0800755f
 800754c:	0800757d 	.word	0x0800757d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007550:	4b67      	ldr	r3, [pc, #412]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007554:	4a66      	ldr	r2, [pc, #408]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007556:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800755a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800755c:	e00f      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800755e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007562:	3308      	adds	r3, #8
 8007564:	2102      	movs	r1, #2
 8007566:	4618      	mov	r0, r3
 8007568:	f001 ffd4 	bl	8009514 <RCCEx_PLL2_Config>
 800756c:	4603      	mov	r3, r0
 800756e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007572:	e004      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800757a:	e000      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800757c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800757e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10a      	bne.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007586:	4b5a      	ldr	r3, [pc, #360]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800758a:	f023 0103 	bic.w	r1, r3, #3
 800758e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007592:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007594:	4a56      	ldr	r2, [pc, #344]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007596:	430b      	orrs	r3, r1
 8007598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800759a:	e003      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800759c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80075b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80075b4:	2300      	movs	r3, #0
 80075b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80075ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80075be:	460b      	mov	r3, r1
 80075c0:	4313      	orrs	r3, r2
 80075c2:	f000 809f 	beq.w	8007704 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075c6:	4b4b      	ldr	r3, [pc, #300]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a4a      	ldr	r2, [pc, #296]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80075cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075d2:	f7fa f8d7 	bl	8001784 <HAL_GetTick>
 80075d6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075da:	e00b      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075dc:	f7fa f8d2 	bl	8001784 <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	2b64      	cmp	r3, #100	@ 0x64
 80075ea:	d903      	bls.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075f2:	e005      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075f4:	4b3f      	ldr	r3, [pc, #252]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d0ed      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007600:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007604:	2b00      	cmp	r3, #0
 8007606:	d179      	bne.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007608:	4b39      	ldr	r3, [pc, #228]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800760a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800760c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007610:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007614:	4053      	eors	r3, r2
 8007616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800761a:	2b00      	cmp	r3, #0
 800761c:	d015      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800761e:	4b34      	ldr	r3, [pc, #208]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007622:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007626:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800762a:	4b31      	ldr	r3, [pc, #196]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800762c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800762e:	4a30      	ldr	r2, [pc, #192]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007634:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007636:	4b2e      	ldr	r3, [pc, #184]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800763a:	4a2d      	ldr	r2, [pc, #180]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800763c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007640:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007642:	4a2b      	ldr	r2, [pc, #172]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007644:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007648:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800764a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800764e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007652:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007656:	d118      	bne.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007658:	f7fa f894 	bl	8001784 <HAL_GetTick>
 800765c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007660:	e00d      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007662:	f7fa f88f 	bl	8001784 <HAL_GetTick>
 8007666:	4602      	mov	r2, r0
 8007668:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800766c:	1ad2      	subs	r2, r2, r3
 800766e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007672:	429a      	cmp	r2, r3
 8007674:	d903      	bls.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800767c:	e005      	b.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800767e:	4b1c      	ldr	r3, [pc, #112]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	2b00      	cmp	r3, #0
 8007688:	d0eb      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800768a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800768e:	2b00      	cmp	r3, #0
 8007690:	d129      	bne.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007696:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800769a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800769e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076a2:	d10e      	bne.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80076a4:	4b12      	ldr	r3, [pc, #72]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80076ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80076b4:	091a      	lsrs	r2, r3, #4
 80076b6:	4b10      	ldr	r3, [pc, #64]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80076b8:	4013      	ands	r3, r2
 80076ba:	4a0d      	ldr	r2, [pc, #52]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076bc:	430b      	orrs	r3, r1
 80076be:	6113      	str	r3, [r2, #16]
 80076c0:	e005      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80076c2:	4b0b      	ldr	r3, [pc, #44]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	4a0a      	ldr	r2, [pc, #40]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80076cc:	6113      	str	r3, [r2, #16]
 80076ce:	4b08      	ldr	r3, [pc, #32]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076d0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80076d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80076da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076de:	4a04      	ldr	r2, [pc, #16]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076e0:	430b      	orrs	r3, r1
 80076e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80076e4:	e00e      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80076ee:	e009      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80076f0:	58024400 	.word	0x58024400
 80076f4:	58024800 	.word	0x58024800
 80076f8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007700:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770c:	f002 0301 	and.w	r3, r2, #1
 8007710:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007714:	2300      	movs	r3, #0
 8007716:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800771a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800771e:	460b      	mov	r3, r1
 8007720:	4313      	orrs	r3, r2
 8007722:	f000 8089 	beq.w	8007838 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800772a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800772c:	2b28      	cmp	r3, #40	@ 0x28
 800772e:	d86b      	bhi.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007730:	a201      	add	r2, pc, #4	@ (adr r2, 8007738 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007736:	bf00      	nop
 8007738:	08007811 	.word	0x08007811
 800773c:	08007809 	.word	0x08007809
 8007740:	08007809 	.word	0x08007809
 8007744:	08007809 	.word	0x08007809
 8007748:	08007809 	.word	0x08007809
 800774c:	08007809 	.word	0x08007809
 8007750:	08007809 	.word	0x08007809
 8007754:	08007809 	.word	0x08007809
 8007758:	080077dd 	.word	0x080077dd
 800775c:	08007809 	.word	0x08007809
 8007760:	08007809 	.word	0x08007809
 8007764:	08007809 	.word	0x08007809
 8007768:	08007809 	.word	0x08007809
 800776c:	08007809 	.word	0x08007809
 8007770:	08007809 	.word	0x08007809
 8007774:	08007809 	.word	0x08007809
 8007778:	080077f3 	.word	0x080077f3
 800777c:	08007809 	.word	0x08007809
 8007780:	08007809 	.word	0x08007809
 8007784:	08007809 	.word	0x08007809
 8007788:	08007809 	.word	0x08007809
 800778c:	08007809 	.word	0x08007809
 8007790:	08007809 	.word	0x08007809
 8007794:	08007809 	.word	0x08007809
 8007798:	08007811 	.word	0x08007811
 800779c:	08007809 	.word	0x08007809
 80077a0:	08007809 	.word	0x08007809
 80077a4:	08007809 	.word	0x08007809
 80077a8:	08007809 	.word	0x08007809
 80077ac:	08007809 	.word	0x08007809
 80077b0:	08007809 	.word	0x08007809
 80077b4:	08007809 	.word	0x08007809
 80077b8:	08007811 	.word	0x08007811
 80077bc:	08007809 	.word	0x08007809
 80077c0:	08007809 	.word	0x08007809
 80077c4:	08007809 	.word	0x08007809
 80077c8:	08007809 	.word	0x08007809
 80077cc:	08007809 	.word	0x08007809
 80077d0:	08007809 	.word	0x08007809
 80077d4:	08007809 	.word	0x08007809
 80077d8:	08007811 	.word	0x08007811
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e0:	3308      	adds	r3, #8
 80077e2:	2101      	movs	r1, #1
 80077e4:	4618      	mov	r0, r3
 80077e6:	f001 fe95 	bl	8009514 <RCCEx_PLL2_Config>
 80077ea:	4603      	mov	r3, r0
 80077ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80077f0:	e00f      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f6:	3328      	adds	r3, #40	@ 0x28
 80077f8:	2101      	movs	r1, #1
 80077fa:	4618      	mov	r0, r3
 80077fc:	f001 ff3c 	bl	8009678 <RCCEx_PLL3_Config>
 8007800:	4603      	mov	r3, r0
 8007802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007806:	e004      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800780e:	e000      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10a      	bne.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800781a:	4bbf      	ldr	r3, [pc, #764]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800781c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800781e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007826:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007828:	4abb      	ldr	r2, [pc, #748]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800782a:	430b      	orrs	r3, r1
 800782c:	6553      	str	r3, [r2, #84]	@ 0x54
 800782e:	e003      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007830:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007834:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	f002 0302 	and.w	r3, r2, #2
 8007844:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007848:	2300      	movs	r3, #0
 800784a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800784e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007852:	460b      	mov	r3, r1
 8007854:	4313      	orrs	r3, r2
 8007856:	d041      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800785c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800785e:	2b05      	cmp	r3, #5
 8007860:	d824      	bhi.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007862:	a201      	add	r2, pc, #4	@ (adr r2, 8007868 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007868:	080078b5 	.word	0x080078b5
 800786c:	08007881 	.word	0x08007881
 8007870:	08007897 	.word	0x08007897
 8007874:	080078b5 	.word	0x080078b5
 8007878:	080078b5 	.word	0x080078b5
 800787c:	080078b5 	.word	0x080078b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007884:	3308      	adds	r3, #8
 8007886:	2101      	movs	r1, #1
 8007888:	4618      	mov	r0, r3
 800788a:	f001 fe43 	bl	8009514 <RCCEx_PLL2_Config>
 800788e:	4603      	mov	r3, r0
 8007890:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007894:	e00f      	b.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800789a:	3328      	adds	r3, #40	@ 0x28
 800789c:	2101      	movs	r1, #1
 800789e:	4618      	mov	r0, r3
 80078a0:	f001 feea 	bl	8009678 <RCCEx_PLL3_Config>
 80078a4:	4603      	mov	r3, r0
 80078a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80078aa:	e004      	b.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078b2:	e000      	b.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80078b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10a      	bne.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80078be:	4b96      	ldr	r3, [pc, #600]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078c2:	f023 0107 	bic.w	r1, r3, #7
 80078c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078cc:	4a92      	ldr	r2, [pc, #584]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078ce:	430b      	orrs	r3, r1
 80078d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80078d2:	e003      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e4:	f002 0304 	and.w	r3, r2, #4
 80078e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80078ec:	2300      	movs	r3, #0
 80078ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80078f2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80078f6:	460b      	mov	r3, r1
 80078f8:	4313      	orrs	r3, r2
 80078fa:	d044      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80078fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007900:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007904:	2b05      	cmp	r3, #5
 8007906:	d825      	bhi.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007908:	a201      	add	r2, pc, #4	@ (adr r2, 8007910 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800790a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790e:	bf00      	nop
 8007910:	0800795d 	.word	0x0800795d
 8007914:	08007929 	.word	0x08007929
 8007918:	0800793f 	.word	0x0800793f
 800791c:	0800795d 	.word	0x0800795d
 8007920:	0800795d 	.word	0x0800795d
 8007924:	0800795d 	.word	0x0800795d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800792c:	3308      	adds	r3, #8
 800792e:	2101      	movs	r1, #1
 8007930:	4618      	mov	r0, r3
 8007932:	f001 fdef 	bl	8009514 <RCCEx_PLL2_Config>
 8007936:	4603      	mov	r3, r0
 8007938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800793c:	e00f      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800793e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007942:	3328      	adds	r3, #40	@ 0x28
 8007944:	2101      	movs	r1, #1
 8007946:	4618      	mov	r0, r3
 8007948:	f001 fe96 	bl	8009678 <RCCEx_PLL3_Config>
 800794c:	4603      	mov	r3, r0
 800794e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007952:	e004      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800795a:	e000      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800795c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800795e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10b      	bne.n	800797e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007966:	4b6c      	ldr	r3, [pc, #432]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800796a:	f023 0107 	bic.w	r1, r3, #7
 800796e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007972:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007976:	4a68      	ldr	r2, [pc, #416]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007978:	430b      	orrs	r3, r1
 800797a:	6593      	str	r3, [r2, #88]	@ 0x58
 800797c:	e003      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800797e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007982:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800798a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798e:	f002 0320 	and.w	r3, r2, #32
 8007992:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007996:	2300      	movs	r3, #0
 8007998:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800799c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80079a0:	460b      	mov	r3, r1
 80079a2:	4313      	orrs	r3, r2
 80079a4:	d055      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80079a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079b2:	d033      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80079b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079b8:	d82c      	bhi.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079be:	d02f      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80079c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079c4:	d826      	bhi.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079ca:	d02b      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80079cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079d0:	d820      	bhi.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079d6:	d012      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80079d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079dc:	d81a      	bhi.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d022      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80079e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079e6:	d115      	bne.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ec:	3308      	adds	r3, #8
 80079ee:	2100      	movs	r1, #0
 80079f0:	4618      	mov	r0, r3
 80079f2:	f001 fd8f 	bl	8009514 <RCCEx_PLL2_Config>
 80079f6:	4603      	mov	r3, r0
 80079f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80079fc:	e015      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a02:	3328      	adds	r3, #40	@ 0x28
 8007a04:	2102      	movs	r1, #2
 8007a06:	4618      	mov	r0, r3
 8007a08:	f001 fe36 	bl	8009678 <RCCEx_PLL3_Config>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a12:	e00a      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a1a:	e006      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a1c:	bf00      	nop
 8007a1e:	e004      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a20:	bf00      	nop
 8007a22:	e002      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a24:	bf00      	nop
 8007a26:	e000      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10b      	bne.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a32:	4b39      	ldr	r3, [pc, #228]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a36:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a42:	4a35      	ldr	r2, [pc, #212]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a44:	430b      	orrs	r3, r1
 8007a46:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a48:	e003      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a62:	2300      	movs	r3, #0
 8007a64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007a68:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	d058      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a7a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007a7e:	d033      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007a80:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007a84:	d82c      	bhi.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a8a:	d02f      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a90:	d826      	bhi.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a96:	d02b      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007a98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a9c:	d820      	bhi.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007aa2:	d012      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007aa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007aa8:	d81a      	bhi.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d022      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ab2:	d115      	bne.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ab8:	3308      	adds	r3, #8
 8007aba:	2100      	movs	r1, #0
 8007abc:	4618      	mov	r0, r3
 8007abe:	f001 fd29 	bl	8009514 <RCCEx_PLL2_Config>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ac8:	e015      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ace:	3328      	adds	r3, #40	@ 0x28
 8007ad0:	2102      	movs	r1, #2
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f001 fdd0 	bl	8009678 <RCCEx_PLL3_Config>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ade:	e00a      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ae6:	e006      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ae8:	bf00      	nop
 8007aea:	e004      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007aec:	bf00      	nop
 8007aee:	e002      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007af0:	bf00      	nop
 8007af2:	e000      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007af6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10e      	bne.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007afe:	4b06      	ldr	r3, [pc, #24]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b02:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b0e:	4a02      	ldr	r2, [pc, #8]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b10:	430b      	orrs	r3, r1
 8007b12:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b14:	e006      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007b16:	bf00      	nop
 8007b18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007b30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b34:	2300      	movs	r3, #0
 8007b36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b3a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007b3e:	460b      	mov	r3, r1
 8007b40:	4313      	orrs	r3, r2
 8007b42:	d055      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b4c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007b50:	d033      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007b52:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007b56:	d82c      	bhi.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b5c:	d02f      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007b5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b62:	d826      	bhi.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b64:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007b68:	d02b      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007b6a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007b6e:	d820      	bhi.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b74:	d012      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007b76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b7a:	d81a      	bhi.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d022      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007b80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b84:	d115      	bne.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b8a:	3308      	adds	r3, #8
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f001 fcc0 	bl	8009514 <RCCEx_PLL2_Config>
 8007b94:	4603      	mov	r3, r0
 8007b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007b9a:	e015      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba0:	3328      	adds	r3, #40	@ 0x28
 8007ba2:	2102      	movs	r1, #2
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f001 fd67 	bl	8009678 <RCCEx_PLL3_Config>
 8007baa:	4603      	mov	r3, r0
 8007bac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007bb0:	e00a      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bb8:	e006      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bba:	bf00      	nop
 8007bbc:	e004      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bbe:	bf00      	nop
 8007bc0:	e002      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bc2:	bf00      	nop
 8007bc4:	e000      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10b      	bne.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007bd0:	4ba1      	ldr	r3, [pc, #644]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bd4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bdc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007be0:	4a9d      	ldr	r2, [pc, #628]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007be2:	430b      	orrs	r3, r1
 8007be4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007be6:	e003      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf8:	f002 0308 	and.w	r3, r2, #8
 8007bfc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c00:	2300      	movs	r3, #0
 8007c02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007c06:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	d01e      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c1c:	d10c      	bne.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c22:	3328      	adds	r3, #40	@ 0x28
 8007c24:	2102      	movs	r1, #2
 8007c26:	4618      	mov	r0, r3
 8007c28:	f001 fd26 	bl	8009678 <RCCEx_PLL3_Config>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d002      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007c38:	4b87      	ldr	r3, [pc, #540]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c3c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c48:	4a83      	ldr	r2, [pc, #524]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c4a:	430b      	orrs	r3, r1
 8007c4c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c56:	f002 0310 	and.w	r3, r2, #16
 8007c5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c5e:	2300      	movs	r3, #0
 8007c60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007c64:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007c68:	460b      	mov	r3, r1
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	d01e      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c7a:	d10c      	bne.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c80:	3328      	adds	r3, #40	@ 0x28
 8007c82:	2102      	movs	r1, #2
 8007c84:	4618      	mov	r0, r3
 8007c86:	f001 fcf7 	bl	8009678 <RCCEx_PLL3_Config>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d002      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c96:	4b70      	ldr	r3, [pc, #448]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c9a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ca6:	4a6c      	ldr	r2, [pc, #432]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ca8:	430b      	orrs	r3, r1
 8007caa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007cb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007cc2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	d03e      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007cd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cd8:	d022      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007cda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cde:	d81b      	bhi.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d003      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ce8:	d00b      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007cea:	e015      	b.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f001 fc0d 	bl	8009514 <RCCEx_PLL2_Config>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d00:	e00f      	b.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d06:	3328      	adds	r3, #40	@ 0x28
 8007d08:	2102      	movs	r1, #2
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f001 fcb4 	bl	8009678 <RCCEx_PLL3_Config>
 8007d10:	4603      	mov	r3, r0
 8007d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d16:	e004      	b.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d1e:	e000      	b.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10b      	bne.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d2a:	4b4b      	ldr	r3, [pc, #300]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d2e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d3a:	4a47      	ldr	r2, [pc, #284]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d3c:	430b      	orrs	r3, r1
 8007d3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d40:	e003      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d52:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007d56:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007d58:	2300      	movs	r3, #0
 8007d5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d5c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007d60:	460b      	mov	r3, r1
 8007d62:	4313      	orrs	r3, r2
 8007d64:	d03b      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d6e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d72:	d01f      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007d74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d78:	d818      	bhi.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007d7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d7e:	d003      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007d80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d84:	d007      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007d86:	e011      	b.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d88:	4b33      	ldr	r3, [pc, #204]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d8c:	4a32      	ldr	r2, [pc, #200]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007d94:	e00f      	b.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d9a:	3328      	adds	r3, #40	@ 0x28
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f001 fc6a 	bl	8009678 <RCCEx_PLL3_Config>
 8007da4:	4603      	mov	r3, r0
 8007da6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007daa:	e004      	b.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007db2:	e000      	b.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007db6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10b      	bne.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007dbe:	4b26      	ldr	r3, [pc, #152]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dc2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dce:	4a22      	ldr	r2, [pc, #136]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dd0:	430b      	orrs	r3, r1
 8007dd2:	6553      	str	r3, [r2, #84]	@ 0x54
 8007dd4:	e003      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007dea:	673b      	str	r3, [r7, #112]	@ 0x70
 8007dec:	2300      	movs	r3, #0
 8007dee:	677b      	str	r3, [r7, #116]	@ 0x74
 8007df0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007df4:	460b      	mov	r3, r1
 8007df6:	4313      	orrs	r3, r2
 8007df8:	d034      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d003      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e08:	d007      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007e0a:	e011      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e0c:	4b12      	ldr	r3, [pc, #72]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e10:	4a11      	ldr	r2, [pc, #68]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e18:	e00e      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e1e:	3308      	adds	r3, #8
 8007e20:	2102      	movs	r1, #2
 8007e22:	4618      	mov	r0, r3
 8007e24:	f001 fb76 	bl	8009514 <RCCEx_PLL2_Config>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e2e:	e003      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10d      	bne.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e40:	4b05      	ldr	r3, [pc, #20]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e44:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e4e:	4a02      	ldr	r2, [pc, #8]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e50:	430b      	orrs	r3, r1
 8007e52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007e54:	e006      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007e56:	bf00      	nop
 8007e58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007e70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e72:	2300      	movs	r3, #0
 8007e74:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e76:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	d00c      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e84:	3328      	adds	r3, #40	@ 0x28
 8007e86:	2102      	movs	r1, #2
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f001 fbf5 	bl	8009678 <RCCEx_PLL3_Config>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d002      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007ea6:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	667b      	str	r3, [r7, #100]	@ 0x64
 8007eac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	d038      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ebe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ec2:	d018      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007ec4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ec8:	d811      	bhi.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007eca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ece:	d014      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007ed0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ed4:	d80b      	bhi.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d011      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007eda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ede:	d106      	bne.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ee0:	4bc3      	ldr	r3, [pc, #780]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee4:	4ac2      	ldr	r2, [pc, #776]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ee6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007eea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007eec:	e008      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ef4:	e004      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007ef6:	bf00      	nop
 8007ef8:	e002      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007efa:	bf00      	nop
 8007efc:	e000      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007efe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10b      	bne.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f08:	4bb9      	ldr	r3, [pc, #740]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f0c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f18:	4ab5      	ldr	r2, [pc, #724]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f1a:	430b      	orrs	r3, r1
 8007f1c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f1e:	e003      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f30:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007f34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f36:	2300      	movs	r3, #0
 8007f38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f3a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007f3e:	460b      	mov	r3, r1
 8007f40:	4313      	orrs	r3, r2
 8007f42:	d009      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f44:	4baa      	ldr	r3, [pc, #680]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f48:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f52:	4aa7      	ldr	r2, [pc, #668]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f54:	430b      	orrs	r3, r1
 8007f56:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f60:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007f64:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f66:	2300      	movs	r3, #0
 8007f68:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f6a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4313      	orrs	r3, r2
 8007f72:	d00a      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007f74:	4b9e      	ldr	r3, [pc, #632]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f80:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007f84:	4a9a      	ldr	r2, [pc, #616]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f86:	430b      	orrs	r3, r1
 8007f88:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f92:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007f96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f98:	2300      	movs	r3, #0
 8007f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f9c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	d009      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007fa6:	4b92      	ldr	r3, [pc, #584]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007faa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fb4:	4a8e      	ldr	r2, [pc, #568]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fb6:	430b      	orrs	r3, r1
 8007fb8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007fc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fc8:	2300      	movs	r3, #0
 8007fca:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fcc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	d00e      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007fd6:	4b86      	ldr	r3, [pc, #536]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	4a85      	ldr	r2, [pc, #532]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fdc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007fe0:	6113      	str	r3, [r2, #16]
 8007fe2:	4b83      	ldr	r3, [pc, #524]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fe4:	6919      	ldr	r1, [r3, #16]
 8007fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007fee:	4a80      	ldr	r2, [pc, #512]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ff0:	430b      	orrs	r3, r1
 8007ff2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008000:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008002:	2300      	movs	r3, #0
 8008004:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008006:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800800a:	460b      	mov	r3, r1
 800800c:	4313      	orrs	r3, r2
 800800e:	d009      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008010:	4b77      	ldr	r3, [pc, #476]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008014:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800801c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800801e:	4a74      	ldr	r2, [pc, #464]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008020:	430b      	orrs	r3, r1
 8008022:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008030:	633b      	str	r3, [r7, #48]	@ 0x30
 8008032:	2300      	movs	r3, #0
 8008034:	637b      	str	r3, [r7, #52]	@ 0x34
 8008036:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800803a:	460b      	mov	r3, r1
 800803c:	4313      	orrs	r3, r2
 800803e:	d00a      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008040:	4b6b      	ldr	r3, [pc, #428]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008044:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800804c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008050:	4a67      	ldr	r2, [pc, #412]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008052:	430b      	orrs	r3, r1
 8008054:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800805a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805e:	2100      	movs	r1, #0
 8008060:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008068:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800806c:	460b      	mov	r3, r1
 800806e:	4313      	orrs	r3, r2
 8008070:	d011      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008076:	3308      	adds	r3, #8
 8008078:	2100      	movs	r1, #0
 800807a:	4618      	mov	r0, r3
 800807c:	f001 fa4a 	bl	8009514 <RCCEx_PLL2_Config>
 8008080:	4603      	mov	r3, r0
 8008082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008086:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800808a:	2b00      	cmp	r3, #0
 800808c:	d003      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800808e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008092:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800809a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809e:	2100      	movs	r1, #0
 80080a0:	6239      	str	r1, [r7, #32]
 80080a2:	f003 0302 	and.w	r3, r3, #2
 80080a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80080a8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80080ac:	460b      	mov	r3, r1
 80080ae:	4313      	orrs	r3, r2
 80080b0:	d011      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b6:	3308      	adds	r3, #8
 80080b8:	2101      	movs	r1, #1
 80080ba:	4618      	mov	r0, r3
 80080bc:	f001 fa2a 	bl	8009514 <RCCEx_PLL2_Config>
 80080c0:	4603      	mov	r3, r0
 80080c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80080c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80080d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080de:	2100      	movs	r1, #0
 80080e0:	61b9      	str	r1, [r7, #24]
 80080e2:	f003 0304 	and.w	r3, r3, #4
 80080e6:	61fb      	str	r3, [r7, #28]
 80080e8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80080ec:	460b      	mov	r3, r1
 80080ee:	4313      	orrs	r3, r2
 80080f0:	d011      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080f6:	3308      	adds	r3, #8
 80080f8:	2102      	movs	r1, #2
 80080fa:	4618      	mov	r0, r3
 80080fc:	f001 fa0a 	bl	8009514 <RCCEx_PLL2_Config>
 8008100:	4603      	mov	r3, r0
 8008102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008106:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800810a:	2b00      	cmp	r3, #0
 800810c:	d003      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800810e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008112:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811e:	2100      	movs	r1, #0
 8008120:	6139      	str	r1, [r7, #16]
 8008122:	f003 0308 	and.w	r3, r3, #8
 8008126:	617b      	str	r3, [r7, #20]
 8008128:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800812c:	460b      	mov	r3, r1
 800812e:	4313      	orrs	r3, r2
 8008130:	d011      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008136:	3328      	adds	r3, #40	@ 0x28
 8008138:	2100      	movs	r1, #0
 800813a:	4618      	mov	r0, r3
 800813c:	f001 fa9c 	bl	8009678 <RCCEx_PLL3_Config>
 8008140:	4603      	mov	r3, r0
 8008142:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008146:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800814e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008152:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800815a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815e:	2100      	movs	r1, #0
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	f003 0310 	and.w	r3, r3, #16
 8008166:	60fb      	str	r3, [r7, #12]
 8008168:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800816c:	460b      	mov	r3, r1
 800816e:	4313      	orrs	r3, r2
 8008170:	d011      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008176:	3328      	adds	r3, #40	@ 0x28
 8008178:	2101      	movs	r1, #1
 800817a:	4618      	mov	r0, r3
 800817c:	f001 fa7c 	bl	8009678 <RCCEx_PLL3_Config>
 8008180:	4603      	mov	r3, r0
 8008182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800818a:	2b00      	cmp	r3, #0
 800818c:	d003      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800818e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008192:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800819a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819e:	2100      	movs	r1, #0
 80081a0:	6039      	str	r1, [r7, #0]
 80081a2:	f003 0320 	and.w	r3, r3, #32
 80081a6:	607b      	str	r3, [r7, #4]
 80081a8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80081ac:	460b      	mov	r3, r1
 80081ae:	4313      	orrs	r3, r2
 80081b0:	d011      	beq.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b6:	3328      	adds	r3, #40	@ 0x28
 80081b8:	2102      	movs	r1, #2
 80081ba:	4618      	mov	r0, r3
 80081bc:	f001 fa5c 	bl	8009678 <RCCEx_PLL3_Config>
 80081c0:	4603      	mov	r3, r0
 80081c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80081c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d003      	beq.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80081d6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d101      	bne.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	e000      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80081ea:	46bd      	mov	sp, r7
 80081ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081f0:	58024400 	.word	0x58024400

080081f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b090      	sub	sp, #64	@ 0x40
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80081fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008202:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008206:	430b      	orrs	r3, r1
 8008208:	f040 8094 	bne.w	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800820c:	4b9e      	ldr	r3, [pc, #632]	@ (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800820e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008210:	f003 0307 	and.w	r3, r3, #7
 8008214:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008218:	2b04      	cmp	r3, #4
 800821a:	f200 8087 	bhi.w	800832c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800821e:	a201      	add	r2, pc, #4	@ (adr r2, 8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008224:	08008239 	.word	0x08008239
 8008228:	08008261 	.word	0x08008261
 800822c:	08008289 	.word	0x08008289
 8008230:	08008325 	.word	0x08008325
 8008234:	080082b1 	.word	0x080082b1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008238:	4b93      	ldr	r3, [pc, #588]	@ (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008240:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008244:	d108      	bne.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008246:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800824a:	4618      	mov	r0, r3
 800824c:	f001 f810 	bl	8009270 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008254:	f000 bd45 	b.w	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008258:	2300      	movs	r3, #0
 800825a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800825c:	f000 bd41 	b.w	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008260:	4b89      	ldr	r3, [pc, #548]	@ (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008268:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800826c:	d108      	bne.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800826e:	f107 0318 	add.w	r3, r7, #24
 8008272:	4618      	mov	r0, r3
 8008274:	f000 fd54 	bl	8008d20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800827c:	f000 bd31 	b.w	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008280:	2300      	movs	r3, #0
 8008282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008284:	f000 bd2d 	b.w	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008288:	4b7f      	ldr	r3, [pc, #508]	@ (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008290:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008294:	d108      	bne.n	80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008296:	f107 030c 	add.w	r3, r7, #12
 800829a:	4618      	mov	r0, r3
 800829c:	f000 fe94 	bl	8008fc8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082a4:	f000 bd1d 	b.w	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082a8:	2300      	movs	r3, #0
 80082aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082ac:	f000 bd19 	b.w	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082b0:	4b75      	ldr	r3, [pc, #468]	@ (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80082b8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082ba:	4b73      	ldr	r3, [pc, #460]	@ (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 0304 	and.w	r3, r3, #4
 80082c2:	2b04      	cmp	r3, #4
 80082c4:	d10c      	bne.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80082c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d109      	bne.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082cc:	4b6e      	ldr	r3, [pc, #440]	@ (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	08db      	lsrs	r3, r3, #3
 80082d2:	f003 0303 	and.w	r3, r3, #3
 80082d6:	4a6d      	ldr	r2, [pc, #436]	@ (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80082d8:	fa22 f303 	lsr.w	r3, r2, r3
 80082dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082de:	e01f      	b.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082e0:	4b69      	ldr	r3, [pc, #420]	@ (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082ec:	d106      	bne.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80082ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082f4:	d102      	bne.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80082f6:	4b66      	ldr	r3, [pc, #408]	@ (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80082f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082fa:	e011      	b.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082fc:	4b62      	ldr	r3, [pc, #392]	@ (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008304:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008308:	d106      	bne.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800830a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800830c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008310:	d102      	bne.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008312:	4b60      	ldr	r3, [pc, #384]	@ (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008314:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008316:	e003      	b.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008318:	2300      	movs	r3, #0
 800831a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800831c:	f000 bce1 	b.w	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008320:	f000 bcdf 	b.w	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008324:	4b5c      	ldr	r3, [pc, #368]	@ (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008328:	f000 bcdb 	b.w	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800832c:	2300      	movs	r3, #0
 800832e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008330:	f000 bcd7 	b.w	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008334:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008338:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800833c:	430b      	orrs	r3, r1
 800833e:	f040 80ad 	bne.w	800849c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008342:	4b51      	ldr	r3, [pc, #324]	@ (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008346:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800834a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800834c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008352:	d056      	beq.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008356:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800835a:	f200 8090 	bhi.w	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800835e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008360:	2bc0      	cmp	r3, #192	@ 0xc0
 8008362:	f000 8088 	beq.w	8008476 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008368:	2bc0      	cmp	r3, #192	@ 0xc0
 800836a:	f200 8088 	bhi.w	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800836e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008370:	2b80      	cmp	r3, #128	@ 0x80
 8008372:	d032      	beq.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008376:	2b80      	cmp	r3, #128	@ 0x80
 8008378:	f200 8081 	bhi.w	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800837c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800837e:	2b00      	cmp	r3, #0
 8008380:	d003      	beq.n	800838a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008384:	2b40      	cmp	r3, #64	@ 0x40
 8008386:	d014      	beq.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008388:	e079      	b.n	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800838a:	4b3f      	ldr	r3, [pc, #252]	@ (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008392:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008396:	d108      	bne.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008398:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800839c:	4618      	mov	r0, r3
 800839e:	f000 ff67 	bl	8009270 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083a6:	f000 bc9c 	b.w	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083aa:	2300      	movs	r3, #0
 80083ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ae:	f000 bc98 	b.w	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083b2:	4b35      	ldr	r3, [pc, #212]	@ (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083be:	d108      	bne.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083c0:	f107 0318 	add.w	r3, r7, #24
 80083c4:	4618      	mov	r0, r3
 80083c6:	f000 fcab 	bl	8008d20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083ce:	f000 bc88 	b.w	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083d2:	2300      	movs	r3, #0
 80083d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083d6:	f000 bc84 	b.w	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083da:	4b2b      	ldr	r3, [pc, #172]	@ (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083e6:	d108      	bne.n	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083e8:	f107 030c 	add.w	r3, r7, #12
 80083ec:	4618      	mov	r0, r3
 80083ee:	f000 fdeb 	bl	8008fc8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083f6:	f000 bc74 	b.w	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083fa:	2300      	movs	r3, #0
 80083fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083fe:	f000 bc70 	b.w	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008402:	4b21      	ldr	r3, [pc, #132]	@ (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008406:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800840a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800840c:	4b1e      	ldr	r3, [pc, #120]	@ (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 0304 	and.w	r3, r3, #4
 8008414:	2b04      	cmp	r3, #4
 8008416:	d10c      	bne.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800841a:	2b00      	cmp	r3, #0
 800841c:	d109      	bne.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800841e:	4b1a      	ldr	r3, [pc, #104]	@ (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	08db      	lsrs	r3, r3, #3
 8008424:	f003 0303 	and.w	r3, r3, #3
 8008428:	4a18      	ldr	r2, [pc, #96]	@ (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800842a:	fa22 f303 	lsr.w	r3, r2, r3
 800842e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008430:	e01f      	b.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008432:	4b15      	ldr	r3, [pc, #84]	@ (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800843a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800843e:	d106      	bne.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008442:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008446:	d102      	bne.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008448:	4b11      	ldr	r3, [pc, #68]	@ (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800844a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800844c:	e011      	b.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800844e:	4b0e      	ldr	r3, [pc, #56]	@ (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008456:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800845a:	d106      	bne.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800845c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800845e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008462:	d102      	bne.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008464:	4b0b      	ldr	r3, [pc, #44]	@ (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008466:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008468:	e003      	b.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800846a:	2300      	movs	r3, #0
 800846c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800846e:	f000 bc38 	b.w	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008472:	f000 bc36 	b.w	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008476:	4b08      	ldr	r3, [pc, #32]	@ (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800847a:	f000 bc32 	b.w	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800847e:	2300      	movs	r3, #0
 8008480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008482:	f000 bc2e 	b.w	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008486:	bf00      	nop
 8008488:	58024400 	.word	0x58024400
 800848c:	03d09000 	.word	0x03d09000
 8008490:	003d0900 	.word	0x003d0900
 8008494:	017d7840 	.word	0x017d7840
 8008498:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800849c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084a0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80084a4:	430b      	orrs	r3, r1
 80084a6:	f040 809c 	bne.w	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80084aa:	4b9e      	ldr	r3, [pc, #632]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084ae:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80084b2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80084b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80084ba:	d054      	beq.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80084bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80084c2:	f200 808b 	bhi.w	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80084c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80084cc:	f000 8083 	beq.w	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80084d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80084d6:	f200 8081 	bhi.w	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80084da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084e0:	d02f      	beq.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80084e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084e8:	d878      	bhi.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80084ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d004      	beq.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80084f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084f6:	d012      	beq.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80084f8:	e070      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084fa:	4b8a      	ldr	r3, [pc, #552]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008502:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008506:	d107      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008508:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800850c:	4618      	mov	r0, r3
 800850e:	f000 feaf 	bl	8009270 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008516:	e3e4      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008518:	2300      	movs	r3, #0
 800851a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800851c:	e3e1      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800851e:	4b81      	ldr	r3, [pc, #516]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008526:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800852a:	d107      	bne.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800852c:	f107 0318 	add.w	r3, r7, #24
 8008530:	4618      	mov	r0, r3
 8008532:	f000 fbf5 	bl	8008d20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800853a:	e3d2      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800853c:	2300      	movs	r3, #0
 800853e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008540:	e3cf      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008542:	4b78      	ldr	r3, [pc, #480]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800854a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800854e:	d107      	bne.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008550:	f107 030c 	add.w	r3, r7, #12
 8008554:	4618      	mov	r0, r3
 8008556:	f000 fd37 	bl	8008fc8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800855e:	e3c0      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008560:	2300      	movs	r3, #0
 8008562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008564:	e3bd      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008566:	4b6f      	ldr	r3, [pc, #444]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800856a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800856e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008570:	4b6c      	ldr	r3, [pc, #432]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 0304 	and.w	r3, r3, #4
 8008578:	2b04      	cmp	r3, #4
 800857a:	d10c      	bne.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800857c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800857e:	2b00      	cmp	r3, #0
 8008580:	d109      	bne.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008582:	4b68      	ldr	r3, [pc, #416]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	08db      	lsrs	r3, r3, #3
 8008588:	f003 0303 	and.w	r3, r3, #3
 800858c:	4a66      	ldr	r2, [pc, #408]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800858e:	fa22 f303 	lsr.w	r3, r2, r3
 8008592:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008594:	e01e      	b.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008596:	4b63      	ldr	r3, [pc, #396]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800859e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085a2:	d106      	bne.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80085a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085aa:	d102      	bne.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085ac:	4b5f      	ldr	r3, [pc, #380]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80085ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085b0:	e010      	b.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085b2:	4b5c      	ldr	r3, [pc, #368]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085be:	d106      	bne.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80085c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085c6:	d102      	bne.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085c8:	4b59      	ldr	r3, [pc, #356]	@ (8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80085ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085cc:	e002      	b.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085ce:	2300      	movs	r3, #0
 80085d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80085d2:	e386      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085d4:	e385      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80085d6:	4b57      	ldr	r3, [pc, #348]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80085d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085da:	e382      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80085dc:	2300      	movs	r3, #0
 80085de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085e0:	e37f      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80085e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085e6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80085ea:	430b      	orrs	r3, r1
 80085ec:	f040 80a7 	bne.w	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80085f0:	4b4c      	ldr	r3, [pc, #304]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085f4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80085f8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80085fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008600:	d055      	beq.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008604:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008608:	f200 8096 	bhi.w	8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800860c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008612:	f000 8084 	beq.w	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008618:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800861c:	f200 808c 	bhi.w	8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008622:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008626:	d030      	beq.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800862e:	f200 8083 	bhi.w	8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008634:	2b00      	cmp	r3, #0
 8008636:	d004      	beq.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800863e:	d012      	beq.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008640:	e07a      	b.n	8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008642:	4b38      	ldr	r3, [pc, #224]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800864a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800864e:	d107      	bne.n	8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008650:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008654:	4618      	mov	r0, r3
 8008656:	f000 fe0b 	bl	8009270 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800865a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800865c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800865e:	e340      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008660:	2300      	movs	r3, #0
 8008662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008664:	e33d      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008666:	4b2f      	ldr	r3, [pc, #188]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800866e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008672:	d107      	bne.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008674:	f107 0318 	add.w	r3, r7, #24
 8008678:	4618      	mov	r0, r3
 800867a:	f000 fb51 	bl	8008d20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008682:	e32e      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008684:	2300      	movs	r3, #0
 8008686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008688:	e32b      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800868a:	4b26      	ldr	r3, [pc, #152]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008692:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008696:	d107      	bne.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008698:	f107 030c 	add.w	r3, r7, #12
 800869c:	4618      	mov	r0, r3
 800869e:	f000 fc93 	bl	8008fc8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086a6:	e31c      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086a8:	2300      	movs	r3, #0
 80086aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086ac:	e319      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086ae:	4b1d      	ldr	r3, [pc, #116]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80086b6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 0304 	and.w	r3, r3, #4
 80086c0:	2b04      	cmp	r3, #4
 80086c2:	d10c      	bne.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80086c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d109      	bne.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086ca:	4b16      	ldr	r3, [pc, #88]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	08db      	lsrs	r3, r3, #3
 80086d0:	f003 0303 	and.w	r3, r3, #3
 80086d4:	4a14      	ldr	r2, [pc, #80]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80086d6:	fa22 f303 	lsr.w	r3, r2, r3
 80086da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086dc:	e01e      	b.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086de:	4b11      	ldr	r3, [pc, #68]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086ea:	d106      	bne.n	80086fa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80086ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086f2:	d102      	bne.n	80086fa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80086f4:	4b0d      	ldr	r3, [pc, #52]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80086f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086f8:	e010      	b.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086fa:	4b0a      	ldr	r3, [pc, #40]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008702:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008706:	d106      	bne.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800870a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800870e:	d102      	bne.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008710:	4b07      	ldr	r3, [pc, #28]	@ (8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008714:	e002      	b.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008716:	2300      	movs	r3, #0
 8008718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800871a:	e2e2      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800871c:	e2e1      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800871e:	4b05      	ldr	r3, [pc, #20]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008722:	e2de      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008724:	58024400 	.word	0x58024400
 8008728:	03d09000 	.word	0x03d09000
 800872c:	003d0900 	.word	0x003d0900
 8008730:	017d7840 	.word	0x017d7840
 8008734:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008738:	2300      	movs	r3, #0
 800873a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800873c:	e2d1      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800873e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008742:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008746:	430b      	orrs	r3, r1
 8008748:	f040 809c 	bne.w	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800874c:	4b93      	ldr	r3, [pc, #588]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800874e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008750:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008754:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008758:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800875c:	d054      	beq.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800875e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008760:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008764:	f200 808b 	bhi.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800876a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800876e:	f000 8083 	beq.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008774:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008778:	f200 8081 	bhi.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800877c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008782:	d02f      	beq.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800878a:	d878      	bhi.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800878c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800878e:	2b00      	cmp	r3, #0
 8008790:	d004      	beq.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008794:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008798:	d012      	beq.n	80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800879a:	e070      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800879c:	4b7f      	ldr	r3, [pc, #508]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087a8:	d107      	bne.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 fd5e 	bl	8009270 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087b8:	e293      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087ba:	2300      	movs	r3, #0
 80087bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087be:	e290      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087c0:	4b76      	ldr	r3, [pc, #472]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087cc:	d107      	bne.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087ce:	f107 0318 	add.w	r3, r7, #24
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 faa4 	bl	8008d20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087dc:	e281      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087de:	2300      	movs	r3, #0
 80087e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087e2:	e27e      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087e4:	4b6d      	ldr	r3, [pc, #436]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087f0:	d107      	bne.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087f2:	f107 030c 	add.w	r3, r7, #12
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 fbe6 	bl	8008fc8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008800:	e26f      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008802:	2300      	movs	r3, #0
 8008804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008806:	e26c      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008808:	4b64      	ldr	r3, [pc, #400]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800880a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800880c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008810:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008812:	4b62      	ldr	r3, [pc, #392]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0304 	and.w	r3, r3, #4
 800881a:	2b04      	cmp	r3, #4
 800881c:	d10c      	bne.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800881e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008820:	2b00      	cmp	r3, #0
 8008822:	d109      	bne.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008824:	4b5d      	ldr	r3, [pc, #372]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	08db      	lsrs	r3, r3, #3
 800882a:	f003 0303 	and.w	r3, r3, #3
 800882e:	4a5c      	ldr	r2, [pc, #368]	@ (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008830:	fa22 f303 	lsr.w	r3, r2, r3
 8008834:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008836:	e01e      	b.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008838:	4b58      	ldr	r3, [pc, #352]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008840:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008844:	d106      	bne.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008848:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800884c:	d102      	bne.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800884e:	4b55      	ldr	r3, [pc, #340]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008850:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008852:	e010      	b.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008854:	4b51      	ldr	r3, [pc, #324]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800885c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008860:	d106      	bne.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008864:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008868:	d102      	bne.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800886a:	4b4f      	ldr	r3, [pc, #316]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800886c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800886e:	e002      	b.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008870:	2300      	movs	r3, #0
 8008872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008874:	e235      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008876:	e234      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008878:	4b4c      	ldr	r3, [pc, #304]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800887a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800887c:	e231      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800887e:	2300      	movs	r3, #0
 8008880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008882:	e22e      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008888:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800888c:	430b      	orrs	r3, r1
 800888e:	f040 808f 	bne.w	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008892:	4b42      	ldr	r3, [pc, #264]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008894:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008896:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800889a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800889c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800889e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80088a2:	d06b      	beq.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80088a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80088aa:	d874      	bhi.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80088b2:	d056      	beq.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80088b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80088ba:	d86c      	bhi.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80088c2:	d03b      	beq.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80088c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80088ca:	d864      	bhi.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088d2:	d021      	beq.n	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80088d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088da:	d85c      	bhi.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d004      	beq.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80088e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088e8:	d004      	beq.n	80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80088ea:	e054      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80088ec:	f7fe fa4c 	bl	8006d88 <HAL_RCC_GetPCLK1Freq>
 80088f0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80088f2:	e1f6      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088f4:	4b29      	ldr	r3, [pc, #164]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008900:	d107      	bne.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008902:	f107 0318 	add.w	r3, r7, #24
 8008906:	4618      	mov	r0, r3
 8008908:	f000 fa0a 	bl	8008d20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008910:	e1e7      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008912:	2300      	movs	r3, #0
 8008914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008916:	e1e4      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008918:	4b20      	ldr	r3, [pc, #128]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008920:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008924:	d107      	bne.n	8008936 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008926:	f107 030c 	add.w	r3, r7, #12
 800892a:	4618      	mov	r0, r3
 800892c:	f000 fb4c 	bl	8008fc8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008934:	e1d5      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008936:	2300      	movs	r3, #0
 8008938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800893a:	e1d2      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800893c:	4b17      	ldr	r3, [pc, #92]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0304 	and.w	r3, r3, #4
 8008944:	2b04      	cmp	r3, #4
 8008946:	d109      	bne.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008948:	4b14      	ldr	r3, [pc, #80]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	08db      	lsrs	r3, r3, #3
 800894e:	f003 0303 	and.w	r3, r3, #3
 8008952:	4a13      	ldr	r2, [pc, #76]	@ (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008954:	fa22 f303 	lsr.w	r3, r2, r3
 8008958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800895a:	e1c2      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800895c:	2300      	movs	r3, #0
 800895e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008960:	e1bf      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008962:	4b0e      	ldr	r3, [pc, #56]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800896a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800896e:	d102      	bne.n	8008976 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008970:	4b0c      	ldr	r3, [pc, #48]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008974:	e1b5      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008976:	2300      	movs	r3, #0
 8008978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800897a:	e1b2      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800897c:	4b07      	ldr	r3, [pc, #28]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008984:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008988:	d102      	bne.n	8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800898a:	4b07      	ldr	r3, [pc, #28]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800898c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800898e:	e1a8      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008990:	2300      	movs	r3, #0
 8008992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008994:	e1a5      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800899a:	e1a2      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800899c:	58024400 	.word	0x58024400
 80089a0:	03d09000 	.word	0x03d09000
 80089a4:	003d0900 	.word	0x003d0900
 80089a8:	017d7840 	.word	0x017d7840
 80089ac:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80089b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089b4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80089b8:	430b      	orrs	r3, r1
 80089ba:	d173      	bne.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80089bc:	4b9c      	ldr	r3, [pc, #624]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80089c4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80089c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089cc:	d02f      	beq.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80089ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089d4:	d863      	bhi.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80089d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d004      	beq.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80089dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089e2:	d012      	beq.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80089e4:	e05b      	b.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089e6:	4b92      	ldr	r3, [pc, #584]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089f2:	d107      	bne.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089f4:	f107 0318 	add.w	r3, r7, #24
 80089f8:	4618      	mov	r0, r3
 80089fa:	f000 f991 	bl	8008d20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a02:	e16e      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a04:	2300      	movs	r3, #0
 8008a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a08:	e16b      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a0a:	4b89      	ldr	r3, [pc, #548]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a16:	d107      	bne.n	8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a18:	f107 030c 	add.w	r3, r7, #12
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f000 fad3 	bl	8008fc8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a26:	e15c      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a2c:	e159      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a2e:	4b80      	ldr	r3, [pc, #512]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a32:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008a36:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a38:	4b7d      	ldr	r3, [pc, #500]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 0304 	and.w	r3, r3, #4
 8008a40:	2b04      	cmp	r3, #4
 8008a42:	d10c      	bne.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d109      	bne.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a4a:	4b79      	ldr	r3, [pc, #484]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	08db      	lsrs	r3, r3, #3
 8008a50:	f003 0303 	and.w	r3, r3, #3
 8008a54:	4a77      	ldr	r2, [pc, #476]	@ (8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008a56:	fa22 f303 	lsr.w	r3, r2, r3
 8008a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a5c:	e01e      	b.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a5e:	4b74      	ldr	r3, [pc, #464]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a6a:	d106      	bne.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a72:	d102      	bne.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008a74:	4b70      	ldr	r3, [pc, #448]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a78:	e010      	b.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a7a:	4b6d      	ldr	r3, [pc, #436]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a86:	d106      	bne.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a8e:	d102      	bne.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008a90:	4b6a      	ldr	r3, [pc, #424]	@ (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a94:	e002      	b.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008a96:	2300      	movs	r3, #0
 8008a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008a9a:	e122      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008a9c:	e121      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aa2:	e11e      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008aa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aa8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008aac:	430b      	orrs	r3, r1
 8008aae:	d133      	bne.n	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008ab0:	4b5f      	ldr	r3, [pc, #380]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ab4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ab8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d004      	beq.n	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ac6:	d012      	beq.n	8008aee <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008ac8:	e023      	b.n	8008b12 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008aca:	4b59      	ldr	r3, [pc, #356]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ad2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ad6:	d107      	bne.n	8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ad8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008adc:	4618      	mov	r0, r3
 8008ade:	f000 fbc7 	bl	8009270 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ae6:	e0fc      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aec:	e0f9      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008aee:	4b50      	ldr	r3, [pc, #320]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008af6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008afa:	d107      	bne.n	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008afc:	f107 0318 	add.w	r3, r7, #24
 8008b00:	4618      	mov	r0, r3
 8008b02:	f000 f90d 	bl	8008d20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008b06:	6a3b      	ldr	r3, [r7, #32]
 8008b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b0a:	e0ea      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b10:	e0e7      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008b12:	2300      	movs	r3, #0
 8008b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b16:	e0e4      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008b18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b1c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008b20:	430b      	orrs	r3, r1
 8008b22:	f040 808d 	bne.w	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008b26:	4b42      	ldr	r3, [pc, #264]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b2a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008b2e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b36:	d06b      	beq.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b3e:	d874      	bhi.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b46:	d056      	beq.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b4e:	d86c      	bhi.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b56:	d03b      	beq.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b5e:	d864      	bhi.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b66:	d021      	beq.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b6e:	d85c      	bhi.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d004      	beq.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b7c:	d004      	beq.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008b7e:	e054      	b.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008b80:	f000 f8b8 	bl	8008cf4 <HAL_RCCEx_GetD3PCLK1Freq>
 8008b84:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008b86:	e0ac      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b88:	4b29      	ldr	r3, [pc, #164]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b94:	d107      	bne.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b96:	f107 0318 	add.w	r3, r7, #24
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 f8c0 	bl	8008d20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ba4:	e09d      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008baa:	e09a      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bac:	4b20      	ldr	r3, [pc, #128]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bb8:	d107      	bne.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bba:	f107 030c 	add.w	r3, r7, #12
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f000 fa02 	bl	8008fc8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bc8:	e08b      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bce:	e088      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008bd0:	4b17      	ldr	r3, [pc, #92]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 0304 	and.w	r3, r3, #4
 8008bd8:	2b04      	cmp	r3, #4
 8008bda:	d109      	bne.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bdc:	4b14      	ldr	r3, [pc, #80]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	08db      	lsrs	r3, r3, #3
 8008be2:	f003 0303 	and.w	r3, r3, #3
 8008be6:	4a13      	ldr	r2, [pc, #76]	@ (8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008be8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bee:	e078      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bf4:	e075      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c02:	d102      	bne.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008c04:	4b0c      	ldr	r3, [pc, #48]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c08:	e06b      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c0e:	e068      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c10:	4b07      	ldr	r3, [pc, #28]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c1c:	d102      	bne.n	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008c1e:	4b07      	ldr	r3, [pc, #28]	@ (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c22:	e05e      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c24:	2300      	movs	r3, #0
 8008c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c28:	e05b      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c2e:	e058      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c30:	58024400 	.word	0x58024400
 8008c34:	03d09000 	.word	0x03d09000
 8008c38:	003d0900 	.word	0x003d0900
 8008c3c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c44:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008c48:	430b      	orrs	r3, r1
 8008c4a:	d148      	bne.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008c4c:	4b27      	ldr	r3, [pc, #156]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008c54:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c5c:	d02a      	beq.n	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c64:	d838      	bhi.n	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d004      	beq.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c72:	d00d      	beq.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008c74:	e030      	b.n	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c76:	4b1d      	ldr	r3, [pc, #116]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c82:	d102      	bne.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008c84:	4b1a      	ldr	r3, [pc, #104]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c88:	e02b      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c8e:	e028      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c90:	4b16      	ldr	r3, [pc, #88]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c9c:	d107      	bne.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f000 fae4 	bl	8009270 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cac:	e019      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cb2:	e016      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cc0:	d107      	bne.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cc2:	f107 0318 	add.w	r3, r7, #24
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f000 f82a 	bl	8008d20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cd0:	e007      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cd6:	e004      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cdc:	e001      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3740      	adds	r7, #64	@ 0x40
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	58024400 	.word	0x58024400
 8008cf0:	017d7840 	.word	0x017d7840

08008cf4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008cf8:	f7fe f816 	bl	8006d28 <HAL_RCC_GetHCLKFreq>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	4b06      	ldr	r3, [pc, #24]	@ (8008d18 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	091b      	lsrs	r3, r3, #4
 8008d04:	f003 0307 	and.w	r3, r3, #7
 8008d08:	4904      	ldr	r1, [pc, #16]	@ (8008d1c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008d0a:	5ccb      	ldrb	r3, [r1, r3]
 8008d0c:	f003 031f 	and.w	r3, r3, #31
 8008d10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	58024400 	.word	0x58024400
 8008d1c:	0800ce8c 	.word	0x0800ce8c

08008d20 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b089      	sub	sp, #36	@ 0x24
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d28:	4ba1      	ldr	r3, [pc, #644]	@ (8008fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d2c:	f003 0303 	and.w	r3, r3, #3
 8008d30:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008d32:	4b9f      	ldr	r3, [pc, #636]	@ (8008fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d36:	0b1b      	lsrs	r3, r3, #12
 8008d38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d3c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008d3e:	4b9c      	ldr	r3, [pc, #624]	@ (8008fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d42:	091b      	lsrs	r3, r3, #4
 8008d44:	f003 0301 	and.w	r3, r3, #1
 8008d48:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008d4a:	4b99      	ldr	r3, [pc, #612]	@ (8008fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d4e:	08db      	lsrs	r3, r3, #3
 8008d50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	fb02 f303 	mul.w	r3, r2, r3
 8008d5a:	ee07 3a90 	vmov	s15, r3
 8008d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f000 8111 	beq.w	8008f90 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	f000 8083 	beq.w	8008e7c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	f200 80a1 	bhi.w	8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d003      	beq.n	8008d8c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d056      	beq.n	8008e38 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008d8a:	e099      	b.n	8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d8c:	4b88      	ldr	r3, [pc, #544]	@ (8008fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0320 	and.w	r3, r3, #32
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d02d      	beq.n	8008df4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d98:	4b85      	ldr	r3, [pc, #532]	@ (8008fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	08db      	lsrs	r3, r3, #3
 8008d9e:	f003 0303 	and.w	r3, r3, #3
 8008da2:	4a84      	ldr	r2, [pc, #528]	@ (8008fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008da4:	fa22 f303 	lsr.w	r3, r2, r3
 8008da8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	ee07 3a90 	vmov	s15, r3
 8008db0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	ee07 3a90 	vmov	s15, r3
 8008dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dc2:	4b7b      	ldr	r3, [pc, #492]	@ (8008fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dca:	ee07 3a90 	vmov	s15, r3
 8008dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dd6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008de2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008df2:	e087      	b.n	8008f04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	ee07 3a90 	vmov	s15, r3
 8008dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dfe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008fbc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e06:	4b6a      	ldr	r3, [pc, #424]	@ (8008fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e0e:	ee07 3a90 	vmov	s15, r3
 8008e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e1a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e36:	e065      	b.n	8008f04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	ee07 3a90 	vmov	s15, r3
 8008e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e42:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e4a:	4b59      	ldr	r3, [pc, #356]	@ (8008fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e52:	ee07 3a90 	vmov	s15, r3
 8008e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e5e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e7a:	e043      	b.n	8008f04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	ee07 3a90 	vmov	s15, r3
 8008e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e86:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e8e:	4b48      	ldr	r3, [pc, #288]	@ (8008fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e96:	ee07 3a90 	vmov	s15, r3
 8008e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ea2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ebe:	e021      	b.n	8008f04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	ee07 3a90 	vmov	s15, r3
 8008ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ed2:	4b37      	ldr	r3, [pc, #220]	@ (8008fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eda:	ee07 3a90 	vmov	s15, r3
 8008ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ee6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008efe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f02:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008f04:	4b2a      	ldr	r3, [pc, #168]	@ (8008fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f08:	0a5b      	lsrs	r3, r3, #9
 8008f0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f0e:	ee07 3a90 	vmov	s15, r3
 8008f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f2a:	ee17 2a90 	vmov	r2, s15
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008f32:	4b1f      	ldr	r3, [pc, #124]	@ (8008fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f36:	0c1b      	lsrs	r3, r3, #16
 8008f38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f3c:	ee07 3a90 	vmov	s15, r3
 8008f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f58:	ee17 2a90 	vmov	r2, s15
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008f60:	4b13      	ldr	r3, [pc, #76]	@ (8008fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f64:	0e1b      	lsrs	r3, r3, #24
 8008f66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f6a:	ee07 3a90 	vmov	s15, r3
 8008f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f86:	ee17 2a90 	vmov	r2, s15
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008f8e:	e008      	b.n	8008fa2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	609a      	str	r2, [r3, #8]
}
 8008fa2:	bf00      	nop
 8008fa4:	3724      	adds	r7, #36	@ 0x24
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	58024400 	.word	0x58024400
 8008fb4:	03d09000 	.word	0x03d09000
 8008fb8:	46000000 	.word	0x46000000
 8008fbc:	4c742400 	.word	0x4c742400
 8008fc0:	4a742400 	.word	0x4a742400
 8008fc4:	4bbebc20 	.word	0x4bbebc20

08008fc8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b089      	sub	sp, #36	@ 0x24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fd0:	4ba1      	ldr	r3, [pc, #644]	@ (8009258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd4:	f003 0303 	and.w	r3, r3, #3
 8008fd8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008fda:	4b9f      	ldr	r3, [pc, #636]	@ (8009258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fde:	0d1b      	lsrs	r3, r3, #20
 8008fe0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008fe4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008fe6:	4b9c      	ldr	r3, [pc, #624]	@ (8009258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fea:	0a1b      	lsrs	r3, r3, #8
 8008fec:	f003 0301 	and.w	r3, r3, #1
 8008ff0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008ff2:	4b99      	ldr	r3, [pc, #612]	@ (8009258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ff6:	08db      	lsrs	r3, r3, #3
 8008ff8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ffc:	693a      	ldr	r2, [r7, #16]
 8008ffe:	fb02 f303 	mul.w	r3, r2, r3
 8009002:	ee07 3a90 	vmov	s15, r3
 8009006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800900a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	2b00      	cmp	r3, #0
 8009012:	f000 8111 	beq.w	8009238 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	2b02      	cmp	r3, #2
 800901a:	f000 8083 	beq.w	8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	2b02      	cmp	r3, #2
 8009022:	f200 80a1 	bhi.w	8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d003      	beq.n	8009034 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d056      	beq.n	80090e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009032:	e099      	b.n	8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009034:	4b88      	ldr	r3, [pc, #544]	@ (8009258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0320 	and.w	r3, r3, #32
 800903c:	2b00      	cmp	r3, #0
 800903e:	d02d      	beq.n	800909c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009040:	4b85      	ldr	r3, [pc, #532]	@ (8009258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	08db      	lsrs	r3, r3, #3
 8009046:	f003 0303 	and.w	r3, r3, #3
 800904a:	4a84      	ldr	r2, [pc, #528]	@ (800925c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800904c:	fa22 f303 	lsr.w	r3, r2, r3
 8009050:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	ee07 3a90 	vmov	s15, r3
 8009058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	ee07 3a90 	vmov	s15, r3
 8009062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800906a:	4b7b      	ldr	r3, [pc, #492]	@ (8009258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800906c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800906e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009072:	ee07 3a90 	vmov	s15, r3
 8009076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800907a:	ed97 6a03 	vldr	s12, [r7, #12]
 800907e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009260 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800908a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800908e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009096:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800909a:	e087      	b.n	80091ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	ee07 3a90 	vmov	s15, r3
 80090a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090a6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009264 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80090aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ae:	4b6a      	ldr	r3, [pc, #424]	@ (8009258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090b6:	ee07 3a90 	vmov	s15, r3
 80090ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090be:	ed97 6a03 	vldr	s12, [r7, #12]
 80090c2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009260 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090de:	e065      	b.n	80091ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	ee07 3a90 	vmov	s15, r3
 80090e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80090ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090f2:	4b59      	ldr	r3, [pc, #356]	@ (8009258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090fa:	ee07 3a90 	vmov	s15, r3
 80090fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009102:	ed97 6a03 	vldr	s12, [r7, #12]
 8009106:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009260 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800910a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800910e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009112:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800911a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800911e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009122:	e043      	b.n	80091ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	ee07 3a90 	vmov	s15, r3
 800912a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800912e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800926c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009136:	4b48      	ldr	r3, [pc, #288]	@ (8009258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800913a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800913e:	ee07 3a90 	vmov	s15, r3
 8009142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009146:	ed97 6a03 	vldr	s12, [r7, #12]
 800914a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009260 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800914e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009156:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800915a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800915e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009162:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009166:	e021      	b.n	80091ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	ee07 3a90 	vmov	s15, r3
 800916e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009172:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800917a:	4b37      	ldr	r3, [pc, #220]	@ (8009258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800917c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800917e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009182:	ee07 3a90 	vmov	s15, r3
 8009186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800918a:	ed97 6a03 	vldr	s12, [r7, #12]
 800918e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009260 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800919a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800919e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80091ac:	4b2a      	ldr	r3, [pc, #168]	@ (8009258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091b0:	0a5b      	lsrs	r3, r3, #9
 80091b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091b6:	ee07 3a90 	vmov	s15, r3
 80091ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80091ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091d2:	ee17 2a90 	vmov	r2, s15
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80091da:	4b1f      	ldr	r3, [pc, #124]	@ (8009258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091de:	0c1b      	lsrs	r3, r3, #16
 80091e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091e4:	ee07 3a90 	vmov	s15, r3
 80091e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80091f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009200:	ee17 2a90 	vmov	r2, s15
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009208:	4b13      	ldr	r3, [pc, #76]	@ (8009258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800920a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800920c:	0e1b      	lsrs	r3, r3, #24
 800920e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009212:	ee07 3a90 	vmov	s15, r3
 8009216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800921a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800921e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009222:	edd7 6a07 	vldr	s13, [r7, #28]
 8009226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800922a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800922e:	ee17 2a90 	vmov	r2, s15
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009236:	e008      	b.n	800924a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	609a      	str	r2, [r3, #8]
}
 800924a:	bf00      	nop
 800924c:	3724      	adds	r7, #36	@ 0x24
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr
 8009256:	bf00      	nop
 8009258:	58024400 	.word	0x58024400
 800925c:	03d09000 	.word	0x03d09000
 8009260:	46000000 	.word	0x46000000
 8009264:	4c742400 	.word	0x4c742400
 8009268:	4a742400 	.word	0x4a742400
 800926c:	4bbebc20 	.word	0x4bbebc20

08009270 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009270:	b480      	push	{r7}
 8009272:	b089      	sub	sp, #36	@ 0x24
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009278:	4ba0      	ldr	r3, [pc, #640]	@ (80094fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800927a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800927c:	f003 0303 	and.w	r3, r3, #3
 8009280:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009282:	4b9e      	ldr	r3, [pc, #632]	@ (80094fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009286:	091b      	lsrs	r3, r3, #4
 8009288:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800928c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800928e:	4b9b      	ldr	r3, [pc, #620]	@ (80094fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009292:	f003 0301 	and.w	r3, r3, #1
 8009296:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009298:	4b98      	ldr	r3, [pc, #608]	@ (80094fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800929a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800929c:	08db      	lsrs	r3, r3, #3
 800929e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092a2:	693a      	ldr	r2, [r7, #16]
 80092a4:	fb02 f303 	mul.w	r3, r2, r3
 80092a8:	ee07 3a90 	vmov	s15, r3
 80092ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092b0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f000 8111 	beq.w	80094de <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	2b02      	cmp	r3, #2
 80092c0:	f000 8083 	beq.w	80093ca <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	f200 80a1 	bhi.w	800940e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d003      	beq.n	80092da <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d056      	beq.n	8009386 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80092d8:	e099      	b.n	800940e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092da:	4b88      	ldr	r3, [pc, #544]	@ (80094fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 0320 	and.w	r3, r3, #32
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d02d      	beq.n	8009342 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092e6:	4b85      	ldr	r3, [pc, #532]	@ (80094fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	08db      	lsrs	r3, r3, #3
 80092ec:	f003 0303 	and.w	r3, r3, #3
 80092f0:	4a83      	ldr	r2, [pc, #524]	@ (8009500 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80092f2:	fa22 f303 	lsr.w	r3, r2, r3
 80092f6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	ee07 3a90 	vmov	s15, r3
 80092fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	ee07 3a90 	vmov	s15, r3
 8009308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800930c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009310:	4b7a      	ldr	r3, [pc, #488]	@ (80094fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009318:	ee07 3a90 	vmov	s15, r3
 800931c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009320:	ed97 6a03 	vldr	s12, [r7, #12]
 8009324:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009504 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009328:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800932c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009330:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009334:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800933c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009340:	e087      	b.n	8009452 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	ee07 3a90 	vmov	s15, r3
 8009348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800934c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009508 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009350:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009354:	4b69      	ldr	r3, [pc, #420]	@ (80094fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800935c:	ee07 3a90 	vmov	s15, r3
 8009360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009364:	ed97 6a03 	vldr	s12, [r7, #12]
 8009368:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009504 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800936c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009370:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009374:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009378:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800937c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009380:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009384:	e065      	b.n	8009452 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	ee07 3a90 	vmov	s15, r3
 800938c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009390:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800950c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009394:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009398:	4b58      	ldr	r3, [pc, #352]	@ (80094fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800939a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800939c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093a0:	ee07 3a90 	vmov	s15, r3
 80093a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80093ac:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009504 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093c8:	e043      	b.n	8009452 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	ee07 3a90 	vmov	s15, r3
 80093d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009510 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80093d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093dc:	4b47      	ldr	r3, [pc, #284]	@ (80094fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093e4:	ee07 3a90 	vmov	s15, r3
 80093e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80093f0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009504 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009400:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009408:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800940c:	e021      	b.n	8009452 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	ee07 3a90 	vmov	s15, r3
 8009414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009418:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009508 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800941c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009420:	4b36      	ldr	r3, [pc, #216]	@ (80094fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009428:	ee07 3a90 	vmov	s15, r3
 800942c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009430:	ed97 6a03 	vldr	s12, [r7, #12]
 8009434:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009504 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009438:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800943c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009440:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009444:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800944c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009450:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009452:	4b2a      	ldr	r3, [pc, #168]	@ (80094fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009456:	0a5b      	lsrs	r3, r3, #9
 8009458:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800945c:	ee07 3a90 	vmov	s15, r3
 8009460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009464:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009468:	ee37 7a87 	vadd.f32	s14, s15, s14
 800946c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009478:	ee17 2a90 	vmov	r2, s15
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009480:	4b1e      	ldr	r3, [pc, #120]	@ (80094fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009484:	0c1b      	lsrs	r3, r3, #16
 8009486:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800948a:	ee07 3a90 	vmov	s15, r3
 800948e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009492:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009496:	ee37 7a87 	vadd.f32	s14, s15, s14
 800949a:	edd7 6a07 	vldr	s13, [r7, #28]
 800949e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094a6:	ee17 2a90 	vmov	r2, s15
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80094ae:	4b13      	ldr	r3, [pc, #76]	@ (80094fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094b2:	0e1b      	lsrs	r3, r3, #24
 80094b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094b8:	ee07 3a90 	vmov	s15, r3
 80094bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80094cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094d4:	ee17 2a90 	vmov	r2, s15
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80094dc:	e008      	b.n	80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	609a      	str	r2, [r3, #8]
}
 80094f0:	bf00      	nop
 80094f2:	3724      	adds	r7, #36	@ 0x24
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr
 80094fc:	58024400 	.word	0x58024400
 8009500:	03d09000 	.word	0x03d09000
 8009504:	46000000 	.word	0x46000000
 8009508:	4c742400 	.word	0x4c742400
 800950c:	4a742400 	.word	0x4a742400
 8009510:	4bbebc20 	.word	0x4bbebc20

08009514 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800951e:	2300      	movs	r3, #0
 8009520:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009522:	4b53      	ldr	r3, [pc, #332]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 8009524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009526:	f003 0303 	and.w	r3, r3, #3
 800952a:	2b03      	cmp	r3, #3
 800952c:	d101      	bne.n	8009532 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e099      	b.n	8009666 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009532:	4b4f      	ldr	r3, [pc, #316]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a4e      	ldr	r2, [pc, #312]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 8009538:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800953c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800953e:	f7f8 f921 	bl	8001784 <HAL_GetTick>
 8009542:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009544:	e008      	b.n	8009558 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009546:	f7f8 f91d 	bl	8001784 <HAL_GetTick>
 800954a:	4602      	mov	r2, r0
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	1ad3      	subs	r3, r2, r3
 8009550:	2b02      	cmp	r3, #2
 8009552:	d901      	bls.n	8009558 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009554:	2303      	movs	r3, #3
 8009556:	e086      	b.n	8009666 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009558:	4b45      	ldr	r3, [pc, #276]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1f0      	bne.n	8009546 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009564:	4b42      	ldr	r3, [pc, #264]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 8009566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009568:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	031b      	lsls	r3, r3, #12
 8009572:	493f      	ldr	r1, [pc, #252]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 8009574:	4313      	orrs	r3, r2
 8009576:	628b      	str	r3, [r1, #40]	@ 0x28
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	3b01      	subs	r3, #1
 800957e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	3b01      	subs	r3, #1
 8009588:	025b      	lsls	r3, r3, #9
 800958a:	b29b      	uxth	r3, r3
 800958c:	431a      	orrs	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	3b01      	subs	r3, #1
 8009594:	041b      	lsls	r3, r3, #16
 8009596:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800959a:	431a      	orrs	r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	3b01      	subs	r3, #1
 80095a2:	061b      	lsls	r3, r3, #24
 80095a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80095a8:	4931      	ldr	r1, [pc, #196]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 80095aa:	4313      	orrs	r3, r2
 80095ac:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80095ae:	4b30      	ldr	r3, [pc, #192]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 80095b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	695b      	ldr	r3, [r3, #20]
 80095ba:	492d      	ldr	r1, [pc, #180]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 80095bc:	4313      	orrs	r3, r2
 80095be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80095c0:	4b2b      	ldr	r3, [pc, #172]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 80095c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c4:	f023 0220 	bic.w	r2, r3, #32
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	4928      	ldr	r1, [pc, #160]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 80095ce:	4313      	orrs	r3, r2
 80095d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80095d2:	4b27      	ldr	r3, [pc, #156]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 80095d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d6:	4a26      	ldr	r2, [pc, #152]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 80095d8:	f023 0310 	bic.w	r3, r3, #16
 80095dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80095de:	4b24      	ldr	r3, [pc, #144]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 80095e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095e2:	4b24      	ldr	r3, [pc, #144]	@ (8009674 <RCCEx_PLL2_Config+0x160>)
 80095e4:	4013      	ands	r3, r2
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	69d2      	ldr	r2, [r2, #28]
 80095ea:	00d2      	lsls	r2, r2, #3
 80095ec:	4920      	ldr	r1, [pc, #128]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 80095ee:	4313      	orrs	r3, r2
 80095f0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80095f2:	4b1f      	ldr	r3, [pc, #124]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 80095f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095f6:	4a1e      	ldr	r2, [pc, #120]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 80095f8:	f043 0310 	orr.w	r3, r3, #16
 80095fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d106      	bne.n	8009612 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009604:	4b1a      	ldr	r3, [pc, #104]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 8009606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009608:	4a19      	ldr	r2, [pc, #100]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 800960a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800960e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009610:	e00f      	b.n	8009632 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d106      	bne.n	8009626 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009618:	4b15      	ldr	r3, [pc, #84]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 800961a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800961c:	4a14      	ldr	r2, [pc, #80]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 800961e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009622:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009624:	e005      	b.n	8009632 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009626:	4b12      	ldr	r3, [pc, #72]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 8009628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800962a:	4a11      	ldr	r2, [pc, #68]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 800962c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009630:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009632:	4b0f      	ldr	r3, [pc, #60]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a0e      	ldr	r2, [pc, #56]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 8009638:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800963c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800963e:	f7f8 f8a1 	bl	8001784 <HAL_GetTick>
 8009642:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009644:	e008      	b.n	8009658 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009646:	f7f8 f89d 	bl	8001784 <HAL_GetTick>
 800964a:	4602      	mov	r2, r0
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	2b02      	cmp	r3, #2
 8009652:	d901      	bls.n	8009658 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009654:	2303      	movs	r3, #3
 8009656:	e006      	b.n	8009666 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009658:	4b05      	ldr	r3, [pc, #20]	@ (8009670 <RCCEx_PLL2_Config+0x15c>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009660:	2b00      	cmp	r3, #0
 8009662:	d0f0      	beq.n	8009646 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009664:	7bfb      	ldrb	r3, [r7, #15]
}
 8009666:	4618      	mov	r0, r3
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	58024400 	.word	0x58024400
 8009674:	ffff0007 	.word	0xffff0007

08009678 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009686:	4b53      	ldr	r3, [pc, #332]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 8009688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800968a:	f003 0303 	and.w	r3, r3, #3
 800968e:	2b03      	cmp	r3, #3
 8009690:	d101      	bne.n	8009696 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e099      	b.n	80097ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009696:	4b4f      	ldr	r3, [pc, #316]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a4e      	ldr	r2, [pc, #312]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 800969c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096a2:	f7f8 f86f 	bl	8001784 <HAL_GetTick>
 80096a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80096a8:	e008      	b.n	80096bc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80096aa:	f7f8 f86b 	bl	8001784 <HAL_GetTick>
 80096ae:	4602      	mov	r2, r0
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	1ad3      	subs	r3, r2, r3
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d901      	bls.n	80096bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80096b8:	2303      	movs	r3, #3
 80096ba:	e086      	b.n	80097ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80096bc:	4b45      	ldr	r3, [pc, #276]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1f0      	bne.n	80096aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80096c8:	4b42      	ldr	r3, [pc, #264]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 80096ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096cc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	051b      	lsls	r3, r3, #20
 80096d6:	493f      	ldr	r1, [pc, #252]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 80096d8:	4313      	orrs	r3, r2
 80096da:	628b      	str	r3, [r1, #40]	@ 0x28
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	3b01      	subs	r3, #1
 80096e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	3b01      	subs	r3, #1
 80096ec:	025b      	lsls	r3, r3, #9
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	431a      	orrs	r2, r3
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	3b01      	subs	r3, #1
 80096f8:	041b      	lsls	r3, r3, #16
 80096fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80096fe:	431a      	orrs	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	691b      	ldr	r3, [r3, #16]
 8009704:	3b01      	subs	r3, #1
 8009706:	061b      	lsls	r3, r3, #24
 8009708:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800970c:	4931      	ldr	r1, [pc, #196]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 800970e:	4313      	orrs	r3, r2
 8009710:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009712:	4b30      	ldr	r3, [pc, #192]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 8009714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009716:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	695b      	ldr	r3, [r3, #20]
 800971e:	492d      	ldr	r1, [pc, #180]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 8009720:	4313      	orrs	r3, r2
 8009722:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009724:	4b2b      	ldr	r3, [pc, #172]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 8009726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009728:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	4928      	ldr	r1, [pc, #160]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 8009732:	4313      	orrs	r3, r2
 8009734:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009736:	4b27      	ldr	r3, [pc, #156]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 8009738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800973a:	4a26      	ldr	r2, [pc, #152]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 800973c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009740:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009742:	4b24      	ldr	r3, [pc, #144]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 8009744:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009746:	4b24      	ldr	r3, [pc, #144]	@ (80097d8 <RCCEx_PLL3_Config+0x160>)
 8009748:	4013      	ands	r3, r2
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	69d2      	ldr	r2, [r2, #28]
 800974e:	00d2      	lsls	r2, r2, #3
 8009750:	4920      	ldr	r1, [pc, #128]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 8009752:	4313      	orrs	r3, r2
 8009754:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009756:	4b1f      	ldr	r3, [pc, #124]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 8009758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800975a:	4a1e      	ldr	r2, [pc, #120]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 800975c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009760:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d106      	bne.n	8009776 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009768:	4b1a      	ldr	r3, [pc, #104]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 800976a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800976c:	4a19      	ldr	r2, [pc, #100]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 800976e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009772:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009774:	e00f      	b.n	8009796 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	2b01      	cmp	r3, #1
 800977a:	d106      	bne.n	800978a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800977c:	4b15      	ldr	r3, [pc, #84]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 800977e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009780:	4a14      	ldr	r2, [pc, #80]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 8009782:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009786:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009788:	e005      	b.n	8009796 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800978a:	4b12      	ldr	r3, [pc, #72]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 800978c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800978e:	4a11      	ldr	r2, [pc, #68]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 8009790:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009794:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009796:	4b0f      	ldr	r3, [pc, #60]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a0e      	ldr	r2, [pc, #56]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 800979c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80097a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097a2:	f7f7 ffef 	bl	8001784 <HAL_GetTick>
 80097a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80097a8:	e008      	b.n	80097bc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80097aa:	f7f7 ffeb 	bl	8001784 <HAL_GetTick>
 80097ae:	4602      	mov	r2, r0
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	1ad3      	subs	r3, r2, r3
 80097b4:	2b02      	cmp	r3, #2
 80097b6:	d901      	bls.n	80097bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80097b8:	2303      	movs	r3, #3
 80097ba:	e006      	b.n	80097ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80097bc:	4b05      	ldr	r3, [pc, #20]	@ (80097d4 <RCCEx_PLL3_Config+0x15c>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d0f0      	beq.n	80097aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80097c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	58024400 	.word	0x58024400
 80097d8:	ffff0007 	.word	0xffff0007

080097dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d101      	bne.n	80097ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e049      	b.n	8009882 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d106      	bne.n	8009808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f7f7 fb60 	bl	8000ec8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2202      	movs	r2, #2
 800980c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	3304      	adds	r3, #4
 8009818:	4619      	mov	r1, r3
 800981a:	4610      	mov	r0, r2
 800981c:	f000 f99e 	bl	8009b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2201      	movs	r2, #1
 800983c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3708      	adds	r7, #8
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
	...

0800988c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800988c:	b480      	push	{r7}
 800988e:	b085      	sub	sp, #20
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800989a:	b2db      	uxtb	r3, r3
 800989c:	2b01      	cmp	r3, #1
 800989e:	d001      	beq.n	80098a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	e04c      	b.n	800993e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2202      	movs	r2, #2
 80098a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a26      	ldr	r2, [pc, #152]	@ (800994c <HAL_TIM_Base_Start+0xc0>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d022      	beq.n	80098fc <HAL_TIM_Base_Start+0x70>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098be:	d01d      	beq.n	80098fc <HAL_TIM_Base_Start+0x70>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a22      	ldr	r2, [pc, #136]	@ (8009950 <HAL_TIM_Base_Start+0xc4>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d018      	beq.n	80098fc <HAL_TIM_Base_Start+0x70>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a21      	ldr	r2, [pc, #132]	@ (8009954 <HAL_TIM_Base_Start+0xc8>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d013      	beq.n	80098fc <HAL_TIM_Base_Start+0x70>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a1f      	ldr	r2, [pc, #124]	@ (8009958 <HAL_TIM_Base_Start+0xcc>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d00e      	beq.n	80098fc <HAL_TIM_Base_Start+0x70>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a1e      	ldr	r2, [pc, #120]	@ (800995c <HAL_TIM_Base_Start+0xd0>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d009      	beq.n	80098fc <HAL_TIM_Base_Start+0x70>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a1c      	ldr	r2, [pc, #112]	@ (8009960 <HAL_TIM_Base_Start+0xd4>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d004      	beq.n	80098fc <HAL_TIM_Base_Start+0x70>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a1b      	ldr	r2, [pc, #108]	@ (8009964 <HAL_TIM_Base_Start+0xd8>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d115      	bne.n	8009928 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	689a      	ldr	r2, [r3, #8]
 8009902:	4b19      	ldr	r3, [pc, #100]	@ (8009968 <HAL_TIM_Base_Start+0xdc>)
 8009904:	4013      	ands	r3, r2
 8009906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2b06      	cmp	r3, #6
 800990c:	d015      	beq.n	800993a <HAL_TIM_Base_Start+0xae>
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009914:	d011      	beq.n	800993a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f042 0201 	orr.w	r2, r2, #1
 8009924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009926:	e008      	b.n	800993a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f042 0201 	orr.w	r2, r2, #1
 8009936:	601a      	str	r2, [r3, #0]
 8009938:	e000      	b.n	800993c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800993a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800993c:	2300      	movs	r3, #0
}
 800993e:	4618      	mov	r0, r3
 8009940:	3714      	adds	r7, #20
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop
 800994c:	40010000 	.word	0x40010000
 8009950:	40000400 	.word	0x40000400
 8009954:	40000800 	.word	0x40000800
 8009958:	40000c00 	.word	0x40000c00
 800995c:	40010400 	.word	0x40010400
 8009960:	40001800 	.word	0x40001800
 8009964:	40014000 	.word	0x40014000
 8009968:	00010007 	.word	0x00010007

0800996c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009980:	2b01      	cmp	r3, #1
 8009982:	d101      	bne.n	8009988 <HAL_TIM_ConfigClockSource+0x1c>
 8009984:	2302      	movs	r3, #2
 8009986:	e0dc      	b.n	8009b42 <HAL_TIM_ConfigClockSource+0x1d6>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2202      	movs	r2, #2
 8009994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80099a0:	68ba      	ldr	r2, [r7, #8]
 80099a2:	4b6a      	ldr	r3, [pc, #424]	@ (8009b4c <HAL_TIM_ConfigClockSource+0x1e0>)
 80099a4:	4013      	ands	r3, r2
 80099a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80099ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	68ba      	ldr	r2, [r7, #8]
 80099b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a64      	ldr	r2, [pc, #400]	@ (8009b50 <HAL_TIM_ConfigClockSource+0x1e4>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	f000 80a9 	beq.w	8009b16 <HAL_TIM_ConfigClockSource+0x1aa>
 80099c4:	4a62      	ldr	r2, [pc, #392]	@ (8009b50 <HAL_TIM_ConfigClockSource+0x1e4>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	f200 80ae 	bhi.w	8009b28 <HAL_TIM_ConfigClockSource+0x1bc>
 80099cc:	4a61      	ldr	r2, [pc, #388]	@ (8009b54 <HAL_TIM_ConfigClockSource+0x1e8>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	f000 80a1 	beq.w	8009b16 <HAL_TIM_ConfigClockSource+0x1aa>
 80099d4:	4a5f      	ldr	r2, [pc, #380]	@ (8009b54 <HAL_TIM_ConfigClockSource+0x1e8>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	f200 80a6 	bhi.w	8009b28 <HAL_TIM_ConfigClockSource+0x1bc>
 80099dc:	4a5e      	ldr	r2, [pc, #376]	@ (8009b58 <HAL_TIM_ConfigClockSource+0x1ec>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	f000 8099 	beq.w	8009b16 <HAL_TIM_ConfigClockSource+0x1aa>
 80099e4:	4a5c      	ldr	r2, [pc, #368]	@ (8009b58 <HAL_TIM_ConfigClockSource+0x1ec>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	f200 809e 	bhi.w	8009b28 <HAL_TIM_ConfigClockSource+0x1bc>
 80099ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80099f0:	f000 8091 	beq.w	8009b16 <HAL_TIM_ConfigClockSource+0x1aa>
 80099f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80099f8:	f200 8096 	bhi.w	8009b28 <HAL_TIM_ConfigClockSource+0x1bc>
 80099fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a00:	f000 8089 	beq.w	8009b16 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a08:	f200 808e 	bhi.w	8009b28 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a10:	d03e      	beq.n	8009a90 <HAL_TIM_ConfigClockSource+0x124>
 8009a12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a16:	f200 8087 	bhi.w	8009b28 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a1e:	f000 8086 	beq.w	8009b2e <HAL_TIM_ConfigClockSource+0x1c2>
 8009a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a26:	d87f      	bhi.n	8009b28 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a28:	2b70      	cmp	r3, #112	@ 0x70
 8009a2a:	d01a      	beq.n	8009a62 <HAL_TIM_ConfigClockSource+0xf6>
 8009a2c:	2b70      	cmp	r3, #112	@ 0x70
 8009a2e:	d87b      	bhi.n	8009b28 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a30:	2b60      	cmp	r3, #96	@ 0x60
 8009a32:	d050      	beq.n	8009ad6 <HAL_TIM_ConfigClockSource+0x16a>
 8009a34:	2b60      	cmp	r3, #96	@ 0x60
 8009a36:	d877      	bhi.n	8009b28 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a38:	2b50      	cmp	r3, #80	@ 0x50
 8009a3a:	d03c      	beq.n	8009ab6 <HAL_TIM_ConfigClockSource+0x14a>
 8009a3c:	2b50      	cmp	r3, #80	@ 0x50
 8009a3e:	d873      	bhi.n	8009b28 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a40:	2b40      	cmp	r3, #64	@ 0x40
 8009a42:	d058      	beq.n	8009af6 <HAL_TIM_ConfigClockSource+0x18a>
 8009a44:	2b40      	cmp	r3, #64	@ 0x40
 8009a46:	d86f      	bhi.n	8009b28 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a48:	2b30      	cmp	r3, #48	@ 0x30
 8009a4a:	d064      	beq.n	8009b16 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a4c:	2b30      	cmp	r3, #48	@ 0x30
 8009a4e:	d86b      	bhi.n	8009b28 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a50:	2b20      	cmp	r3, #32
 8009a52:	d060      	beq.n	8009b16 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a54:	2b20      	cmp	r3, #32
 8009a56:	d867      	bhi.n	8009b28 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d05c      	beq.n	8009b16 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a5c:	2b10      	cmp	r3, #16
 8009a5e:	d05a      	beq.n	8009b16 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a60:	e062      	b.n	8009b28 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a72:	f000 f991 	bl	8009d98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009a84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68ba      	ldr	r2, [r7, #8]
 8009a8c:	609a      	str	r2, [r3, #8]
      break;
 8009a8e:	e04f      	b.n	8009b30 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009aa0:	f000 f97a 	bl	8009d98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	689a      	ldr	r2, [r3, #8]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009ab2:	609a      	str	r2, [r3, #8]
      break;
 8009ab4:	e03c      	b.n	8009b30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	f000 f8ea 	bl	8009c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2150      	movs	r1, #80	@ 0x50
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f000 f944 	bl	8009d5c <TIM_ITRx_SetConfig>
      break;
 8009ad4:	e02c      	b.n	8009b30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	f000 f909 	bl	8009cfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2160      	movs	r1, #96	@ 0x60
 8009aee:	4618      	mov	r0, r3
 8009af0:	f000 f934 	bl	8009d5c <TIM_ITRx_SetConfig>
      break;
 8009af4:	e01c      	b.n	8009b30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b02:	461a      	mov	r2, r3
 8009b04:	f000 f8ca 	bl	8009c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2140      	movs	r1, #64	@ 0x40
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 f924 	bl	8009d5c <TIM_ITRx_SetConfig>
      break;
 8009b14:	e00c      	b.n	8009b30 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4619      	mov	r1, r3
 8009b20:	4610      	mov	r0, r2
 8009b22:	f000 f91b 	bl	8009d5c <TIM_ITRx_SetConfig>
      break;
 8009b26:	e003      	b.n	8009b30 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8009b2c:	e000      	b.n	8009b30 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009b2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	ffceff88 	.word	0xffceff88
 8009b50:	00100040 	.word	0x00100040
 8009b54:	00100030 	.word	0x00100030
 8009b58:	00100020 	.word	0x00100020

08009b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4a43      	ldr	r2, [pc, #268]	@ (8009c7c <TIM_Base_SetConfig+0x120>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d013      	beq.n	8009b9c <TIM_Base_SetConfig+0x40>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b7a:	d00f      	beq.n	8009b9c <TIM_Base_SetConfig+0x40>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	4a40      	ldr	r2, [pc, #256]	@ (8009c80 <TIM_Base_SetConfig+0x124>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d00b      	beq.n	8009b9c <TIM_Base_SetConfig+0x40>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a3f      	ldr	r2, [pc, #252]	@ (8009c84 <TIM_Base_SetConfig+0x128>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d007      	beq.n	8009b9c <TIM_Base_SetConfig+0x40>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a3e      	ldr	r2, [pc, #248]	@ (8009c88 <TIM_Base_SetConfig+0x12c>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d003      	beq.n	8009b9c <TIM_Base_SetConfig+0x40>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	4a3d      	ldr	r2, [pc, #244]	@ (8009c8c <TIM_Base_SetConfig+0x130>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d108      	bne.n	8009bae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	4a32      	ldr	r2, [pc, #200]	@ (8009c7c <TIM_Base_SetConfig+0x120>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d01f      	beq.n	8009bf6 <TIM_Base_SetConfig+0x9a>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bbc:	d01b      	beq.n	8009bf6 <TIM_Base_SetConfig+0x9a>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	4a2f      	ldr	r2, [pc, #188]	@ (8009c80 <TIM_Base_SetConfig+0x124>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d017      	beq.n	8009bf6 <TIM_Base_SetConfig+0x9a>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4a2e      	ldr	r2, [pc, #184]	@ (8009c84 <TIM_Base_SetConfig+0x128>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d013      	beq.n	8009bf6 <TIM_Base_SetConfig+0x9a>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4a2d      	ldr	r2, [pc, #180]	@ (8009c88 <TIM_Base_SetConfig+0x12c>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d00f      	beq.n	8009bf6 <TIM_Base_SetConfig+0x9a>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4a2c      	ldr	r2, [pc, #176]	@ (8009c8c <TIM_Base_SetConfig+0x130>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d00b      	beq.n	8009bf6 <TIM_Base_SetConfig+0x9a>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	4a2b      	ldr	r2, [pc, #172]	@ (8009c90 <TIM_Base_SetConfig+0x134>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d007      	beq.n	8009bf6 <TIM_Base_SetConfig+0x9a>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	4a2a      	ldr	r2, [pc, #168]	@ (8009c94 <TIM_Base_SetConfig+0x138>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d003      	beq.n	8009bf6 <TIM_Base_SetConfig+0x9a>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4a29      	ldr	r2, [pc, #164]	@ (8009c98 <TIM_Base_SetConfig+0x13c>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d108      	bne.n	8009c08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	4313      	orrs	r3, r2
 8009c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	695b      	ldr	r3, [r3, #20]
 8009c12:	4313      	orrs	r3, r2
 8009c14:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	689a      	ldr	r2, [r3, #8]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	4a14      	ldr	r2, [pc, #80]	@ (8009c7c <TIM_Base_SetConfig+0x120>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d00f      	beq.n	8009c4e <TIM_Base_SetConfig+0xf2>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a16      	ldr	r2, [pc, #88]	@ (8009c8c <TIM_Base_SetConfig+0x130>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d00b      	beq.n	8009c4e <TIM_Base_SetConfig+0xf2>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4a15      	ldr	r2, [pc, #84]	@ (8009c90 <TIM_Base_SetConfig+0x134>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d007      	beq.n	8009c4e <TIM_Base_SetConfig+0xf2>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a14      	ldr	r2, [pc, #80]	@ (8009c94 <TIM_Base_SetConfig+0x138>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d003      	beq.n	8009c4e <TIM_Base_SetConfig+0xf2>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a13      	ldr	r2, [pc, #76]	@ (8009c98 <TIM_Base_SetConfig+0x13c>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d103      	bne.n	8009c56 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	691a      	ldr	r2, [r3, #16]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f043 0204 	orr.w	r2, r3, #4
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2201      	movs	r2, #1
 8009c66:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	601a      	str	r2, [r3, #0]
}
 8009c6e:	bf00      	nop
 8009c70:	3714      	adds	r7, #20
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr
 8009c7a:	bf00      	nop
 8009c7c:	40010000 	.word	0x40010000
 8009c80:	40000400 	.word	0x40000400
 8009c84:	40000800 	.word	0x40000800
 8009c88:	40000c00 	.word	0x40000c00
 8009c8c:	40010400 	.word	0x40010400
 8009c90:	40014000 	.word	0x40014000
 8009c94:	40014400 	.word	0x40014400
 8009c98:	40014800 	.word	0x40014800

08009c9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b087      	sub	sp, #28
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6a1b      	ldr	r3, [r3, #32]
 8009cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6a1b      	ldr	r3, [r3, #32]
 8009cb2:	f023 0201 	bic.w	r2, r3, #1
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	699b      	ldr	r3, [r3, #24]
 8009cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	011b      	lsls	r3, r3, #4
 8009ccc:	693a      	ldr	r2, [r7, #16]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	f023 030a 	bic.w	r3, r3, #10
 8009cd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009cda:	697a      	ldr	r2, [r7, #20]
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	693a      	ldr	r2, [r7, #16]
 8009ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	697a      	ldr	r2, [r7, #20]
 8009cec:	621a      	str	r2, [r3, #32]
}
 8009cee:	bf00      	nop
 8009cf0:	371c      	adds	r7, #28
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr

08009cfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cfa:	b480      	push	{r7}
 8009cfc:	b087      	sub	sp, #28
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	60f8      	str	r0, [r7, #12]
 8009d02:	60b9      	str	r1, [r7, #8]
 8009d04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6a1b      	ldr	r3, [r3, #32]
 8009d0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	6a1b      	ldr	r3, [r3, #32]
 8009d10:	f023 0210 	bic.w	r2, r3, #16
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	699b      	ldr	r3, [r3, #24]
 8009d1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009d24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	031b      	lsls	r3, r3, #12
 8009d2a:	693a      	ldr	r2, [r7, #16]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009d36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	011b      	lsls	r3, r3, #4
 8009d3c:	697a      	ldr	r2, [r7, #20]
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	693a      	ldr	r2, [r7, #16]
 8009d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	697a      	ldr	r2, [r7, #20]
 8009d4c:	621a      	str	r2, [r3, #32]
}
 8009d4e:	bf00      	nop
 8009d50:	371c      	adds	r7, #28
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr
	...

08009d5c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	4b09      	ldr	r3, [pc, #36]	@ (8009d94 <TIM_ITRx_SetConfig+0x38>)
 8009d70:	4013      	ands	r3, r2
 8009d72:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d74:	683a      	ldr	r2, [r7, #0]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	f043 0307 	orr.w	r3, r3, #7
 8009d7e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	609a      	str	r2, [r3, #8]
}
 8009d86:	bf00      	nop
 8009d88:	3714      	adds	r7, #20
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	ffcfff8f 	.word	0xffcfff8f

08009d98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b087      	sub	sp, #28
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]
 8009da4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009db2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	021a      	lsls	r2, r3, #8
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	431a      	orrs	r2, r3
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	697a      	ldr	r2, [r7, #20]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	697a      	ldr	r2, [r7, #20]
 8009dca:	609a      	str	r2, [r3, #8]
}
 8009dcc:	bf00      	nop
 8009dce:	371c      	adds	r7, #28
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d101      	bne.n	8009df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009dec:	2302      	movs	r3, #2
 8009dee:	e06d      	b.n	8009ecc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2201      	movs	r2, #1
 8009df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a30      	ldr	r2, [pc, #192]	@ (8009ed8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d004      	beq.n	8009e24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a2f      	ldr	r2, [pc, #188]	@ (8009edc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d108      	bne.n	8009e36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009e2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	4313      	orrs	r3, r2
 8009e34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a20      	ldr	r2, [pc, #128]	@ (8009ed8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d022      	beq.n	8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e62:	d01d      	beq.n	8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a1d      	ldr	r2, [pc, #116]	@ (8009ee0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d018      	beq.n	8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a1c      	ldr	r2, [pc, #112]	@ (8009ee4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d013      	beq.n	8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a1a      	ldr	r2, [pc, #104]	@ (8009ee8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d00e      	beq.n	8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a15      	ldr	r2, [pc, #84]	@ (8009edc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d009      	beq.n	8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a16      	ldr	r2, [pc, #88]	@ (8009eec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d004      	beq.n	8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a15      	ldr	r2, [pc, #84]	@ (8009ef0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d10c      	bne.n	8009eba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ea6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3714      	adds	r7, #20
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr
 8009ed8:	40010000 	.word	0x40010000
 8009edc:	40010400 	.word	0x40010400
 8009ee0:	40000400 	.word	0x40000400
 8009ee4:	40000800 	.word	0x40000800
 8009ee8:	40000c00 	.word	0x40000c00
 8009eec:	40001800 	.word	0x40001800
 8009ef0:	40014000 	.word	0x40014000

08009ef4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d101      	bne.n	8009f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e042      	b.n	8009f8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d106      	bne.n	8009f1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 f83b 	bl	8009f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2224      	movs	r2, #36	@ 0x24
 8009f22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f022 0201 	bic.w	r2, r2, #1
 8009f34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d002      	beq.n	8009f44 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 fe28 	bl	800ab94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 f8bd 	bl	800a0c4 <UART_SetConfig>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d101      	bne.n	8009f54 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	e01b      	b.n	8009f8c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	685a      	ldr	r2, [r3, #4]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009f62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	689a      	ldr	r2, [r3, #8]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009f72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f042 0201 	orr.w	r2, r2, #1
 8009f82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fea7 	bl	800acd8 <UART_CheckIdleState>
 8009f8a:	4603      	mov	r3, r0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8009f9c:	bf00      	nop
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b08a      	sub	sp, #40	@ 0x28
 8009fac:	af02      	add	r7, sp, #8
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	603b      	str	r3, [r7, #0]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fbe:	2b20      	cmp	r3, #32
 8009fc0:	d17b      	bne.n	800a0ba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d002      	beq.n	8009fce <HAL_UART_Transmit+0x26>
 8009fc8:	88fb      	ldrh	r3, [r7, #6]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d101      	bne.n	8009fd2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e074      	b.n	800a0bc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2221      	movs	r2, #33	@ 0x21
 8009fde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009fe2:	f7f7 fbcf 	bl	8001784 <HAL_GetTick>
 8009fe6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	88fa      	ldrh	r2, [r7, #6]
 8009fec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	88fa      	ldrh	r2, [r7, #6]
 8009ff4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a000:	d108      	bne.n	800a014 <HAL_UART_Transmit+0x6c>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	691b      	ldr	r3, [r3, #16]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d104      	bne.n	800a014 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a00a:	2300      	movs	r3, #0
 800a00c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	61bb      	str	r3, [r7, #24]
 800a012:	e003      	b.n	800a01c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a018:	2300      	movs	r3, #0
 800a01a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a01c:	e030      	b.n	800a080 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	9300      	str	r3, [sp, #0]
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	2200      	movs	r2, #0
 800a026:	2180      	movs	r1, #128	@ 0x80
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f000 feff 	bl	800ae2c <UART_WaitOnFlagUntilTimeout>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d005      	beq.n	800a040 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2220      	movs	r2, #32
 800a038:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e03d      	b.n	800a0bc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10b      	bne.n	800a05e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	881b      	ldrh	r3, [r3, #0]
 800a04a:	461a      	mov	r2, r3
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a054:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	3302      	adds	r3, #2
 800a05a:	61bb      	str	r3, [r7, #24]
 800a05c:	e007      	b.n	800a06e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	781a      	ldrb	r2, [r3, #0]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	3301      	adds	r3, #1
 800a06c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a074:	b29b      	uxth	r3, r3
 800a076:	3b01      	subs	r3, #1
 800a078:	b29a      	uxth	r2, r3
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a086:	b29b      	uxth	r3, r3
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d1c8      	bne.n	800a01e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	2200      	movs	r2, #0
 800a094:	2140      	movs	r1, #64	@ 0x40
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f000 fec8 	bl	800ae2c <UART_WaitOnFlagUntilTimeout>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d005      	beq.n	800a0ae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2220      	movs	r2, #32
 800a0a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	e006      	b.n	800a0bc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2220      	movs	r2, #32
 800a0b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	e000      	b.n	800a0bc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a0ba:	2302      	movs	r3, #2
  }
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3720      	adds	r7, #32
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0c8:	b092      	sub	sp, #72	@ 0x48
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	689a      	ldr	r2, [r3, #8]
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	691b      	ldr	r3, [r3, #16]
 800a0dc:	431a      	orrs	r2, r3
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	695b      	ldr	r3, [r3, #20]
 800a0e2:	431a      	orrs	r2, r3
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	69db      	ldr	r3, [r3, #28]
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	4bbe      	ldr	r3, [pc, #760]	@ (800a3ec <UART_SetConfig+0x328>)
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	697a      	ldr	r2, [r7, #20]
 800a0f8:	6812      	ldr	r2, [r2, #0]
 800a0fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a0fc:	430b      	orrs	r3, r1
 800a0fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	68da      	ldr	r2, [r3, #12]
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	430a      	orrs	r2, r1
 800a114:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	699b      	ldr	r3, [r3, #24]
 800a11a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4ab3      	ldr	r2, [pc, #716]	@ (800a3f0 <UART_SetConfig+0x32c>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d004      	beq.n	800a130 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	6a1b      	ldr	r3, [r3, #32]
 800a12a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a12c:	4313      	orrs	r3, r2
 800a12e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	689a      	ldr	r2, [r3, #8]
 800a136:	4baf      	ldr	r3, [pc, #700]	@ (800a3f4 <UART_SetConfig+0x330>)
 800a138:	4013      	ands	r3, r2
 800a13a:	697a      	ldr	r2, [r7, #20]
 800a13c:	6812      	ldr	r2, [r2, #0]
 800a13e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a140:	430b      	orrs	r3, r1
 800a142:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a14a:	f023 010f 	bic.w	r1, r3, #15
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	430a      	orrs	r2, r1
 800a158:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4aa6      	ldr	r2, [pc, #664]	@ (800a3f8 <UART_SetConfig+0x334>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d177      	bne.n	800a254 <UART_SetConfig+0x190>
 800a164:	4ba5      	ldr	r3, [pc, #660]	@ (800a3fc <UART_SetConfig+0x338>)
 800a166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a168:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a16c:	2b28      	cmp	r3, #40	@ 0x28
 800a16e:	d86d      	bhi.n	800a24c <UART_SetConfig+0x188>
 800a170:	a201      	add	r2, pc, #4	@ (adr r2, 800a178 <UART_SetConfig+0xb4>)
 800a172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a176:	bf00      	nop
 800a178:	0800a21d 	.word	0x0800a21d
 800a17c:	0800a24d 	.word	0x0800a24d
 800a180:	0800a24d 	.word	0x0800a24d
 800a184:	0800a24d 	.word	0x0800a24d
 800a188:	0800a24d 	.word	0x0800a24d
 800a18c:	0800a24d 	.word	0x0800a24d
 800a190:	0800a24d 	.word	0x0800a24d
 800a194:	0800a24d 	.word	0x0800a24d
 800a198:	0800a225 	.word	0x0800a225
 800a19c:	0800a24d 	.word	0x0800a24d
 800a1a0:	0800a24d 	.word	0x0800a24d
 800a1a4:	0800a24d 	.word	0x0800a24d
 800a1a8:	0800a24d 	.word	0x0800a24d
 800a1ac:	0800a24d 	.word	0x0800a24d
 800a1b0:	0800a24d 	.word	0x0800a24d
 800a1b4:	0800a24d 	.word	0x0800a24d
 800a1b8:	0800a22d 	.word	0x0800a22d
 800a1bc:	0800a24d 	.word	0x0800a24d
 800a1c0:	0800a24d 	.word	0x0800a24d
 800a1c4:	0800a24d 	.word	0x0800a24d
 800a1c8:	0800a24d 	.word	0x0800a24d
 800a1cc:	0800a24d 	.word	0x0800a24d
 800a1d0:	0800a24d 	.word	0x0800a24d
 800a1d4:	0800a24d 	.word	0x0800a24d
 800a1d8:	0800a235 	.word	0x0800a235
 800a1dc:	0800a24d 	.word	0x0800a24d
 800a1e0:	0800a24d 	.word	0x0800a24d
 800a1e4:	0800a24d 	.word	0x0800a24d
 800a1e8:	0800a24d 	.word	0x0800a24d
 800a1ec:	0800a24d 	.word	0x0800a24d
 800a1f0:	0800a24d 	.word	0x0800a24d
 800a1f4:	0800a24d 	.word	0x0800a24d
 800a1f8:	0800a23d 	.word	0x0800a23d
 800a1fc:	0800a24d 	.word	0x0800a24d
 800a200:	0800a24d 	.word	0x0800a24d
 800a204:	0800a24d 	.word	0x0800a24d
 800a208:	0800a24d 	.word	0x0800a24d
 800a20c:	0800a24d 	.word	0x0800a24d
 800a210:	0800a24d 	.word	0x0800a24d
 800a214:	0800a24d 	.word	0x0800a24d
 800a218:	0800a245 	.word	0x0800a245
 800a21c:	2301      	movs	r3, #1
 800a21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a222:	e222      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a224:	2304      	movs	r3, #4
 800a226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a22a:	e21e      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a22c:	2308      	movs	r3, #8
 800a22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a232:	e21a      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a234:	2310      	movs	r3, #16
 800a236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a23a:	e216      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a23c:	2320      	movs	r3, #32
 800a23e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a242:	e212      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a244:	2340      	movs	r3, #64	@ 0x40
 800a246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a24a:	e20e      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a24c:	2380      	movs	r3, #128	@ 0x80
 800a24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a252:	e20a      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a69      	ldr	r2, [pc, #420]	@ (800a400 <UART_SetConfig+0x33c>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d130      	bne.n	800a2c0 <UART_SetConfig+0x1fc>
 800a25e:	4b67      	ldr	r3, [pc, #412]	@ (800a3fc <UART_SetConfig+0x338>)
 800a260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a262:	f003 0307 	and.w	r3, r3, #7
 800a266:	2b05      	cmp	r3, #5
 800a268:	d826      	bhi.n	800a2b8 <UART_SetConfig+0x1f4>
 800a26a:	a201      	add	r2, pc, #4	@ (adr r2, 800a270 <UART_SetConfig+0x1ac>)
 800a26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a270:	0800a289 	.word	0x0800a289
 800a274:	0800a291 	.word	0x0800a291
 800a278:	0800a299 	.word	0x0800a299
 800a27c:	0800a2a1 	.word	0x0800a2a1
 800a280:	0800a2a9 	.word	0x0800a2a9
 800a284:	0800a2b1 	.word	0x0800a2b1
 800a288:	2300      	movs	r3, #0
 800a28a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a28e:	e1ec      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a290:	2304      	movs	r3, #4
 800a292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a296:	e1e8      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a298:	2308      	movs	r3, #8
 800a29a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a29e:	e1e4      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a2a0:	2310      	movs	r3, #16
 800a2a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2a6:	e1e0      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a2a8:	2320      	movs	r3, #32
 800a2aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ae:	e1dc      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a2b0:	2340      	movs	r3, #64	@ 0x40
 800a2b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2b6:	e1d8      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a2b8:	2380      	movs	r3, #128	@ 0x80
 800a2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2be:	e1d4      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a4f      	ldr	r2, [pc, #316]	@ (800a404 <UART_SetConfig+0x340>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d130      	bne.n	800a32c <UART_SetConfig+0x268>
 800a2ca:	4b4c      	ldr	r3, [pc, #304]	@ (800a3fc <UART_SetConfig+0x338>)
 800a2cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2ce:	f003 0307 	and.w	r3, r3, #7
 800a2d2:	2b05      	cmp	r3, #5
 800a2d4:	d826      	bhi.n	800a324 <UART_SetConfig+0x260>
 800a2d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a2dc <UART_SetConfig+0x218>)
 800a2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2dc:	0800a2f5 	.word	0x0800a2f5
 800a2e0:	0800a2fd 	.word	0x0800a2fd
 800a2e4:	0800a305 	.word	0x0800a305
 800a2e8:	0800a30d 	.word	0x0800a30d
 800a2ec:	0800a315 	.word	0x0800a315
 800a2f0:	0800a31d 	.word	0x0800a31d
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2fa:	e1b6      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a2fc:	2304      	movs	r3, #4
 800a2fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a302:	e1b2      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a304:	2308      	movs	r3, #8
 800a306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a30a:	e1ae      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a30c:	2310      	movs	r3, #16
 800a30e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a312:	e1aa      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a314:	2320      	movs	r3, #32
 800a316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a31a:	e1a6      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a31c:	2340      	movs	r3, #64	@ 0x40
 800a31e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a322:	e1a2      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a324:	2380      	movs	r3, #128	@ 0x80
 800a326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a32a:	e19e      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a35      	ldr	r2, [pc, #212]	@ (800a408 <UART_SetConfig+0x344>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d130      	bne.n	800a398 <UART_SetConfig+0x2d4>
 800a336:	4b31      	ldr	r3, [pc, #196]	@ (800a3fc <UART_SetConfig+0x338>)
 800a338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a33a:	f003 0307 	and.w	r3, r3, #7
 800a33e:	2b05      	cmp	r3, #5
 800a340:	d826      	bhi.n	800a390 <UART_SetConfig+0x2cc>
 800a342:	a201      	add	r2, pc, #4	@ (adr r2, 800a348 <UART_SetConfig+0x284>)
 800a344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a348:	0800a361 	.word	0x0800a361
 800a34c:	0800a369 	.word	0x0800a369
 800a350:	0800a371 	.word	0x0800a371
 800a354:	0800a379 	.word	0x0800a379
 800a358:	0800a381 	.word	0x0800a381
 800a35c:	0800a389 	.word	0x0800a389
 800a360:	2300      	movs	r3, #0
 800a362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a366:	e180      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a368:	2304      	movs	r3, #4
 800a36a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a36e:	e17c      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a370:	2308      	movs	r3, #8
 800a372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a376:	e178      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a378:	2310      	movs	r3, #16
 800a37a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a37e:	e174      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a380:	2320      	movs	r3, #32
 800a382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a386:	e170      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a388:	2340      	movs	r3, #64	@ 0x40
 800a38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a38e:	e16c      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a390:	2380      	movs	r3, #128	@ 0x80
 800a392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a396:	e168      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a1b      	ldr	r2, [pc, #108]	@ (800a40c <UART_SetConfig+0x348>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d142      	bne.n	800a428 <UART_SetConfig+0x364>
 800a3a2:	4b16      	ldr	r3, [pc, #88]	@ (800a3fc <UART_SetConfig+0x338>)
 800a3a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3a6:	f003 0307 	and.w	r3, r3, #7
 800a3aa:	2b05      	cmp	r3, #5
 800a3ac:	d838      	bhi.n	800a420 <UART_SetConfig+0x35c>
 800a3ae:	a201      	add	r2, pc, #4	@ (adr r2, 800a3b4 <UART_SetConfig+0x2f0>)
 800a3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b4:	0800a3cd 	.word	0x0800a3cd
 800a3b8:	0800a3d5 	.word	0x0800a3d5
 800a3bc:	0800a3dd 	.word	0x0800a3dd
 800a3c0:	0800a3e5 	.word	0x0800a3e5
 800a3c4:	0800a411 	.word	0x0800a411
 800a3c8:	0800a419 	.word	0x0800a419
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3d2:	e14a      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a3d4:	2304      	movs	r3, #4
 800a3d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3da:	e146      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a3dc:	2308      	movs	r3, #8
 800a3de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3e2:	e142      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a3e4:	2310      	movs	r3, #16
 800a3e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ea:	e13e      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a3ec:	cfff69f3 	.word	0xcfff69f3
 800a3f0:	58000c00 	.word	0x58000c00
 800a3f4:	11fff4ff 	.word	0x11fff4ff
 800a3f8:	40011000 	.word	0x40011000
 800a3fc:	58024400 	.word	0x58024400
 800a400:	40004400 	.word	0x40004400
 800a404:	40004800 	.word	0x40004800
 800a408:	40004c00 	.word	0x40004c00
 800a40c:	40005000 	.word	0x40005000
 800a410:	2320      	movs	r3, #32
 800a412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a416:	e128      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a418:	2340      	movs	r3, #64	@ 0x40
 800a41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a41e:	e124      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a420:	2380      	movs	r3, #128	@ 0x80
 800a422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a426:	e120      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4acb      	ldr	r2, [pc, #812]	@ (800a75c <UART_SetConfig+0x698>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d176      	bne.n	800a520 <UART_SetConfig+0x45c>
 800a432:	4bcb      	ldr	r3, [pc, #812]	@ (800a760 <UART_SetConfig+0x69c>)
 800a434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a436:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a43a:	2b28      	cmp	r3, #40	@ 0x28
 800a43c:	d86c      	bhi.n	800a518 <UART_SetConfig+0x454>
 800a43e:	a201      	add	r2, pc, #4	@ (adr r2, 800a444 <UART_SetConfig+0x380>)
 800a440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a444:	0800a4e9 	.word	0x0800a4e9
 800a448:	0800a519 	.word	0x0800a519
 800a44c:	0800a519 	.word	0x0800a519
 800a450:	0800a519 	.word	0x0800a519
 800a454:	0800a519 	.word	0x0800a519
 800a458:	0800a519 	.word	0x0800a519
 800a45c:	0800a519 	.word	0x0800a519
 800a460:	0800a519 	.word	0x0800a519
 800a464:	0800a4f1 	.word	0x0800a4f1
 800a468:	0800a519 	.word	0x0800a519
 800a46c:	0800a519 	.word	0x0800a519
 800a470:	0800a519 	.word	0x0800a519
 800a474:	0800a519 	.word	0x0800a519
 800a478:	0800a519 	.word	0x0800a519
 800a47c:	0800a519 	.word	0x0800a519
 800a480:	0800a519 	.word	0x0800a519
 800a484:	0800a4f9 	.word	0x0800a4f9
 800a488:	0800a519 	.word	0x0800a519
 800a48c:	0800a519 	.word	0x0800a519
 800a490:	0800a519 	.word	0x0800a519
 800a494:	0800a519 	.word	0x0800a519
 800a498:	0800a519 	.word	0x0800a519
 800a49c:	0800a519 	.word	0x0800a519
 800a4a0:	0800a519 	.word	0x0800a519
 800a4a4:	0800a501 	.word	0x0800a501
 800a4a8:	0800a519 	.word	0x0800a519
 800a4ac:	0800a519 	.word	0x0800a519
 800a4b0:	0800a519 	.word	0x0800a519
 800a4b4:	0800a519 	.word	0x0800a519
 800a4b8:	0800a519 	.word	0x0800a519
 800a4bc:	0800a519 	.word	0x0800a519
 800a4c0:	0800a519 	.word	0x0800a519
 800a4c4:	0800a509 	.word	0x0800a509
 800a4c8:	0800a519 	.word	0x0800a519
 800a4cc:	0800a519 	.word	0x0800a519
 800a4d0:	0800a519 	.word	0x0800a519
 800a4d4:	0800a519 	.word	0x0800a519
 800a4d8:	0800a519 	.word	0x0800a519
 800a4dc:	0800a519 	.word	0x0800a519
 800a4e0:	0800a519 	.word	0x0800a519
 800a4e4:	0800a511 	.word	0x0800a511
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ee:	e0bc      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a4f0:	2304      	movs	r3, #4
 800a4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4f6:	e0b8      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a4f8:	2308      	movs	r3, #8
 800a4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4fe:	e0b4      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a500:	2310      	movs	r3, #16
 800a502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a506:	e0b0      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a508:	2320      	movs	r3, #32
 800a50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a50e:	e0ac      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a510:	2340      	movs	r3, #64	@ 0x40
 800a512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a516:	e0a8      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a518:	2380      	movs	r3, #128	@ 0x80
 800a51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a51e:	e0a4      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a8f      	ldr	r2, [pc, #572]	@ (800a764 <UART_SetConfig+0x6a0>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d130      	bne.n	800a58c <UART_SetConfig+0x4c8>
 800a52a:	4b8d      	ldr	r3, [pc, #564]	@ (800a760 <UART_SetConfig+0x69c>)
 800a52c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a52e:	f003 0307 	and.w	r3, r3, #7
 800a532:	2b05      	cmp	r3, #5
 800a534:	d826      	bhi.n	800a584 <UART_SetConfig+0x4c0>
 800a536:	a201      	add	r2, pc, #4	@ (adr r2, 800a53c <UART_SetConfig+0x478>)
 800a538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a53c:	0800a555 	.word	0x0800a555
 800a540:	0800a55d 	.word	0x0800a55d
 800a544:	0800a565 	.word	0x0800a565
 800a548:	0800a56d 	.word	0x0800a56d
 800a54c:	0800a575 	.word	0x0800a575
 800a550:	0800a57d 	.word	0x0800a57d
 800a554:	2300      	movs	r3, #0
 800a556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a55a:	e086      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a55c:	2304      	movs	r3, #4
 800a55e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a562:	e082      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a564:	2308      	movs	r3, #8
 800a566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a56a:	e07e      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a56c:	2310      	movs	r3, #16
 800a56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a572:	e07a      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a574:	2320      	movs	r3, #32
 800a576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a57a:	e076      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a57c:	2340      	movs	r3, #64	@ 0x40
 800a57e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a582:	e072      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a584:	2380      	movs	r3, #128	@ 0x80
 800a586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a58a:	e06e      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a75      	ldr	r2, [pc, #468]	@ (800a768 <UART_SetConfig+0x6a4>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d130      	bne.n	800a5f8 <UART_SetConfig+0x534>
 800a596:	4b72      	ldr	r3, [pc, #456]	@ (800a760 <UART_SetConfig+0x69c>)
 800a598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a59a:	f003 0307 	and.w	r3, r3, #7
 800a59e:	2b05      	cmp	r3, #5
 800a5a0:	d826      	bhi.n	800a5f0 <UART_SetConfig+0x52c>
 800a5a2:	a201      	add	r2, pc, #4	@ (adr r2, 800a5a8 <UART_SetConfig+0x4e4>)
 800a5a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a8:	0800a5c1 	.word	0x0800a5c1
 800a5ac:	0800a5c9 	.word	0x0800a5c9
 800a5b0:	0800a5d1 	.word	0x0800a5d1
 800a5b4:	0800a5d9 	.word	0x0800a5d9
 800a5b8:	0800a5e1 	.word	0x0800a5e1
 800a5bc:	0800a5e9 	.word	0x0800a5e9
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5c6:	e050      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a5c8:	2304      	movs	r3, #4
 800a5ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ce:	e04c      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a5d0:	2308      	movs	r3, #8
 800a5d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5d6:	e048      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a5d8:	2310      	movs	r3, #16
 800a5da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5de:	e044      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a5e0:	2320      	movs	r3, #32
 800a5e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5e6:	e040      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a5e8:	2340      	movs	r3, #64	@ 0x40
 800a5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ee:	e03c      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a5f0:	2380      	movs	r3, #128	@ 0x80
 800a5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5f6:	e038      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a5b      	ldr	r2, [pc, #364]	@ (800a76c <UART_SetConfig+0x6a8>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d130      	bne.n	800a664 <UART_SetConfig+0x5a0>
 800a602:	4b57      	ldr	r3, [pc, #348]	@ (800a760 <UART_SetConfig+0x69c>)
 800a604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a606:	f003 0307 	and.w	r3, r3, #7
 800a60a:	2b05      	cmp	r3, #5
 800a60c:	d826      	bhi.n	800a65c <UART_SetConfig+0x598>
 800a60e:	a201      	add	r2, pc, #4	@ (adr r2, 800a614 <UART_SetConfig+0x550>)
 800a610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a614:	0800a62d 	.word	0x0800a62d
 800a618:	0800a635 	.word	0x0800a635
 800a61c:	0800a63d 	.word	0x0800a63d
 800a620:	0800a645 	.word	0x0800a645
 800a624:	0800a64d 	.word	0x0800a64d
 800a628:	0800a655 	.word	0x0800a655
 800a62c:	2302      	movs	r3, #2
 800a62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a632:	e01a      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a634:	2304      	movs	r3, #4
 800a636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a63a:	e016      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a63c:	2308      	movs	r3, #8
 800a63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a642:	e012      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a644:	2310      	movs	r3, #16
 800a646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a64a:	e00e      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a64c:	2320      	movs	r3, #32
 800a64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a652:	e00a      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a654:	2340      	movs	r3, #64	@ 0x40
 800a656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a65a:	e006      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a65c:	2380      	movs	r3, #128	@ 0x80
 800a65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a662:	e002      	b.n	800a66a <UART_SetConfig+0x5a6>
 800a664:	2380      	movs	r3, #128	@ 0x80
 800a666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a3f      	ldr	r2, [pc, #252]	@ (800a76c <UART_SetConfig+0x6a8>)
 800a670:	4293      	cmp	r3, r2
 800a672:	f040 80f8 	bne.w	800a866 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a676:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a67a:	2b20      	cmp	r3, #32
 800a67c:	dc46      	bgt.n	800a70c <UART_SetConfig+0x648>
 800a67e:	2b02      	cmp	r3, #2
 800a680:	f2c0 8082 	blt.w	800a788 <UART_SetConfig+0x6c4>
 800a684:	3b02      	subs	r3, #2
 800a686:	2b1e      	cmp	r3, #30
 800a688:	d87e      	bhi.n	800a788 <UART_SetConfig+0x6c4>
 800a68a:	a201      	add	r2, pc, #4	@ (adr r2, 800a690 <UART_SetConfig+0x5cc>)
 800a68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a690:	0800a713 	.word	0x0800a713
 800a694:	0800a789 	.word	0x0800a789
 800a698:	0800a71b 	.word	0x0800a71b
 800a69c:	0800a789 	.word	0x0800a789
 800a6a0:	0800a789 	.word	0x0800a789
 800a6a4:	0800a789 	.word	0x0800a789
 800a6a8:	0800a72b 	.word	0x0800a72b
 800a6ac:	0800a789 	.word	0x0800a789
 800a6b0:	0800a789 	.word	0x0800a789
 800a6b4:	0800a789 	.word	0x0800a789
 800a6b8:	0800a789 	.word	0x0800a789
 800a6bc:	0800a789 	.word	0x0800a789
 800a6c0:	0800a789 	.word	0x0800a789
 800a6c4:	0800a789 	.word	0x0800a789
 800a6c8:	0800a73b 	.word	0x0800a73b
 800a6cc:	0800a789 	.word	0x0800a789
 800a6d0:	0800a789 	.word	0x0800a789
 800a6d4:	0800a789 	.word	0x0800a789
 800a6d8:	0800a789 	.word	0x0800a789
 800a6dc:	0800a789 	.word	0x0800a789
 800a6e0:	0800a789 	.word	0x0800a789
 800a6e4:	0800a789 	.word	0x0800a789
 800a6e8:	0800a789 	.word	0x0800a789
 800a6ec:	0800a789 	.word	0x0800a789
 800a6f0:	0800a789 	.word	0x0800a789
 800a6f4:	0800a789 	.word	0x0800a789
 800a6f8:	0800a789 	.word	0x0800a789
 800a6fc:	0800a789 	.word	0x0800a789
 800a700:	0800a789 	.word	0x0800a789
 800a704:	0800a789 	.word	0x0800a789
 800a708:	0800a77b 	.word	0x0800a77b
 800a70c:	2b40      	cmp	r3, #64	@ 0x40
 800a70e:	d037      	beq.n	800a780 <UART_SetConfig+0x6bc>
 800a710:	e03a      	b.n	800a788 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a712:	f7fe faef 	bl	8008cf4 <HAL_RCCEx_GetD3PCLK1Freq>
 800a716:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a718:	e03c      	b.n	800a794 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a71a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a71e:	4618      	mov	r0, r3
 800a720:	f7fe fafe 	bl	8008d20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a728:	e034      	b.n	800a794 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a72a:	f107 0318 	add.w	r3, r7, #24
 800a72e:	4618      	mov	r0, r3
 800a730:	f7fe fc4a 	bl	8008fc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a738:	e02c      	b.n	800a794 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a73a:	4b09      	ldr	r3, [pc, #36]	@ (800a760 <UART_SetConfig+0x69c>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f003 0320 	and.w	r3, r3, #32
 800a742:	2b00      	cmp	r3, #0
 800a744:	d016      	beq.n	800a774 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a746:	4b06      	ldr	r3, [pc, #24]	@ (800a760 <UART_SetConfig+0x69c>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	08db      	lsrs	r3, r3, #3
 800a74c:	f003 0303 	and.w	r3, r3, #3
 800a750:	4a07      	ldr	r2, [pc, #28]	@ (800a770 <UART_SetConfig+0x6ac>)
 800a752:	fa22 f303 	lsr.w	r3, r2, r3
 800a756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a758:	e01c      	b.n	800a794 <UART_SetConfig+0x6d0>
 800a75a:	bf00      	nop
 800a75c:	40011400 	.word	0x40011400
 800a760:	58024400 	.word	0x58024400
 800a764:	40007800 	.word	0x40007800
 800a768:	40007c00 	.word	0x40007c00
 800a76c:	58000c00 	.word	0x58000c00
 800a770:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a774:	4b9d      	ldr	r3, [pc, #628]	@ (800a9ec <UART_SetConfig+0x928>)
 800a776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a778:	e00c      	b.n	800a794 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a77a:	4b9d      	ldr	r3, [pc, #628]	@ (800a9f0 <UART_SetConfig+0x92c>)
 800a77c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a77e:	e009      	b.n	800a794 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a780:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a786:	e005      	b.n	800a794 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a788:	2300      	movs	r3, #0
 800a78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a78c:	2301      	movs	r3, #1
 800a78e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a792:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a796:	2b00      	cmp	r3, #0
 800a798:	f000 81de 	beq.w	800ab58 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7a0:	4a94      	ldr	r2, [pc, #592]	@ (800a9f4 <UART_SetConfig+0x930>)
 800a7a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7ae:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	685a      	ldr	r2, [r3, #4]
 800a7b4:	4613      	mov	r3, r2
 800a7b6:	005b      	lsls	r3, r3, #1
 800a7b8:	4413      	add	r3, r2
 800a7ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d305      	bcc.n	800a7cc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a7c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d903      	bls.n	800a7d4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a7d2:	e1c1      	b.n	800ab58 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	60bb      	str	r3, [r7, #8]
 800a7da:	60fa      	str	r2, [r7, #12]
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7e0:	4a84      	ldr	r2, [pc, #528]	@ (800a9f4 <UART_SetConfig+0x930>)
 800a7e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	603b      	str	r3, [r7, #0]
 800a7ec:	607a      	str	r2, [r7, #4]
 800a7ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a7f6:	f7f5 fe23 	bl	8000440 <__aeabi_uldivmod>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	4610      	mov	r0, r2
 800a800:	4619      	mov	r1, r3
 800a802:	f04f 0200 	mov.w	r2, #0
 800a806:	f04f 0300 	mov.w	r3, #0
 800a80a:	020b      	lsls	r3, r1, #8
 800a80c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a810:	0202      	lsls	r2, r0, #8
 800a812:	6979      	ldr	r1, [r7, #20]
 800a814:	6849      	ldr	r1, [r1, #4]
 800a816:	0849      	lsrs	r1, r1, #1
 800a818:	2000      	movs	r0, #0
 800a81a:	460c      	mov	r4, r1
 800a81c:	4605      	mov	r5, r0
 800a81e:	eb12 0804 	adds.w	r8, r2, r4
 800a822:	eb43 0905 	adc.w	r9, r3, r5
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	469a      	mov	sl, r3
 800a82e:	4693      	mov	fp, r2
 800a830:	4652      	mov	r2, sl
 800a832:	465b      	mov	r3, fp
 800a834:	4640      	mov	r0, r8
 800a836:	4649      	mov	r1, r9
 800a838:	f7f5 fe02 	bl	8000440 <__aeabi_uldivmod>
 800a83c:	4602      	mov	r2, r0
 800a83e:	460b      	mov	r3, r1
 800a840:	4613      	mov	r3, r2
 800a842:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a846:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a84a:	d308      	bcc.n	800a85e <UART_SetConfig+0x79a>
 800a84c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a84e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a852:	d204      	bcs.n	800a85e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a85a:	60da      	str	r2, [r3, #12]
 800a85c:	e17c      	b.n	800ab58 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a864:	e178      	b.n	800ab58 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	69db      	ldr	r3, [r3, #28]
 800a86a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a86e:	f040 80c5 	bne.w	800a9fc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a872:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a876:	2b20      	cmp	r3, #32
 800a878:	dc48      	bgt.n	800a90c <UART_SetConfig+0x848>
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	db7b      	blt.n	800a976 <UART_SetConfig+0x8b2>
 800a87e:	2b20      	cmp	r3, #32
 800a880:	d879      	bhi.n	800a976 <UART_SetConfig+0x8b2>
 800a882:	a201      	add	r2, pc, #4	@ (adr r2, 800a888 <UART_SetConfig+0x7c4>)
 800a884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a888:	0800a913 	.word	0x0800a913
 800a88c:	0800a91b 	.word	0x0800a91b
 800a890:	0800a977 	.word	0x0800a977
 800a894:	0800a977 	.word	0x0800a977
 800a898:	0800a923 	.word	0x0800a923
 800a89c:	0800a977 	.word	0x0800a977
 800a8a0:	0800a977 	.word	0x0800a977
 800a8a4:	0800a977 	.word	0x0800a977
 800a8a8:	0800a933 	.word	0x0800a933
 800a8ac:	0800a977 	.word	0x0800a977
 800a8b0:	0800a977 	.word	0x0800a977
 800a8b4:	0800a977 	.word	0x0800a977
 800a8b8:	0800a977 	.word	0x0800a977
 800a8bc:	0800a977 	.word	0x0800a977
 800a8c0:	0800a977 	.word	0x0800a977
 800a8c4:	0800a977 	.word	0x0800a977
 800a8c8:	0800a943 	.word	0x0800a943
 800a8cc:	0800a977 	.word	0x0800a977
 800a8d0:	0800a977 	.word	0x0800a977
 800a8d4:	0800a977 	.word	0x0800a977
 800a8d8:	0800a977 	.word	0x0800a977
 800a8dc:	0800a977 	.word	0x0800a977
 800a8e0:	0800a977 	.word	0x0800a977
 800a8e4:	0800a977 	.word	0x0800a977
 800a8e8:	0800a977 	.word	0x0800a977
 800a8ec:	0800a977 	.word	0x0800a977
 800a8f0:	0800a977 	.word	0x0800a977
 800a8f4:	0800a977 	.word	0x0800a977
 800a8f8:	0800a977 	.word	0x0800a977
 800a8fc:	0800a977 	.word	0x0800a977
 800a900:	0800a977 	.word	0x0800a977
 800a904:	0800a977 	.word	0x0800a977
 800a908:	0800a969 	.word	0x0800a969
 800a90c:	2b40      	cmp	r3, #64	@ 0x40
 800a90e:	d02e      	beq.n	800a96e <UART_SetConfig+0x8aa>
 800a910:	e031      	b.n	800a976 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a912:	f7fc fa39 	bl	8006d88 <HAL_RCC_GetPCLK1Freq>
 800a916:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a918:	e033      	b.n	800a982 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a91a:	f7fc fa4b 	bl	8006db4 <HAL_RCC_GetPCLK2Freq>
 800a91e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a920:	e02f      	b.n	800a982 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a926:	4618      	mov	r0, r3
 800a928:	f7fe f9fa 	bl	8008d20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a930:	e027      	b.n	800a982 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a932:	f107 0318 	add.w	r3, r7, #24
 800a936:	4618      	mov	r0, r3
 800a938:	f7fe fb46 	bl	8008fc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a940:	e01f      	b.n	800a982 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a942:	4b2d      	ldr	r3, [pc, #180]	@ (800a9f8 <UART_SetConfig+0x934>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f003 0320 	and.w	r3, r3, #32
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d009      	beq.n	800a962 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a94e:	4b2a      	ldr	r3, [pc, #168]	@ (800a9f8 <UART_SetConfig+0x934>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	08db      	lsrs	r3, r3, #3
 800a954:	f003 0303 	and.w	r3, r3, #3
 800a958:	4a24      	ldr	r2, [pc, #144]	@ (800a9ec <UART_SetConfig+0x928>)
 800a95a:	fa22 f303 	lsr.w	r3, r2, r3
 800a95e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a960:	e00f      	b.n	800a982 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a962:	4b22      	ldr	r3, [pc, #136]	@ (800a9ec <UART_SetConfig+0x928>)
 800a964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a966:	e00c      	b.n	800a982 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a968:	4b21      	ldr	r3, [pc, #132]	@ (800a9f0 <UART_SetConfig+0x92c>)
 800a96a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a96c:	e009      	b.n	800a982 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a96e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a974:	e005      	b.n	800a982 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a976:	2300      	movs	r3, #0
 800a978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a97a:	2301      	movs	r3, #1
 800a97c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a980:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a984:	2b00      	cmp	r3, #0
 800a986:	f000 80e7 	beq.w	800ab58 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a98e:	4a19      	ldr	r2, [pc, #100]	@ (800a9f4 <UART_SetConfig+0x930>)
 800a990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a994:	461a      	mov	r2, r3
 800a996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a998:	fbb3 f3f2 	udiv	r3, r3, r2
 800a99c:	005a      	lsls	r2, r3, #1
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	085b      	lsrs	r3, r3, #1
 800a9a4:	441a      	add	r2, r3
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9b2:	2b0f      	cmp	r3, #15
 800a9b4:	d916      	bls.n	800a9e4 <UART_SetConfig+0x920>
 800a9b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9bc:	d212      	bcs.n	800a9e4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	f023 030f 	bic.w	r3, r3, #15
 800a9c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ca:	085b      	lsrs	r3, r3, #1
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	f003 0307 	and.w	r3, r3, #7
 800a9d2:	b29a      	uxth	r2, r3
 800a9d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a9e0:	60da      	str	r2, [r3, #12]
 800a9e2:	e0b9      	b.n	800ab58 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a9ea:	e0b5      	b.n	800ab58 <UART_SetConfig+0xa94>
 800a9ec:	03d09000 	.word	0x03d09000
 800a9f0:	003d0900 	.word	0x003d0900
 800a9f4:	0800ceb0 	.word	0x0800ceb0
 800a9f8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a9fc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aa00:	2b20      	cmp	r3, #32
 800aa02:	dc49      	bgt.n	800aa98 <UART_SetConfig+0x9d4>
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	db7c      	blt.n	800ab02 <UART_SetConfig+0xa3e>
 800aa08:	2b20      	cmp	r3, #32
 800aa0a:	d87a      	bhi.n	800ab02 <UART_SetConfig+0xa3e>
 800aa0c:	a201      	add	r2, pc, #4	@ (adr r2, 800aa14 <UART_SetConfig+0x950>)
 800aa0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa12:	bf00      	nop
 800aa14:	0800aa9f 	.word	0x0800aa9f
 800aa18:	0800aaa7 	.word	0x0800aaa7
 800aa1c:	0800ab03 	.word	0x0800ab03
 800aa20:	0800ab03 	.word	0x0800ab03
 800aa24:	0800aaaf 	.word	0x0800aaaf
 800aa28:	0800ab03 	.word	0x0800ab03
 800aa2c:	0800ab03 	.word	0x0800ab03
 800aa30:	0800ab03 	.word	0x0800ab03
 800aa34:	0800aabf 	.word	0x0800aabf
 800aa38:	0800ab03 	.word	0x0800ab03
 800aa3c:	0800ab03 	.word	0x0800ab03
 800aa40:	0800ab03 	.word	0x0800ab03
 800aa44:	0800ab03 	.word	0x0800ab03
 800aa48:	0800ab03 	.word	0x0800ab03
 800aa4c:	0800ab03 	.word	0x0800ab03
 800aa50:	0800ab03 	.word	0x0800ab03
 800aa54:	0800aacf 	.word	0x0800aacf
 800aa58:	0800ab03 	.word	0x0800ab03
 800aa5c:	0800ab03 	.word	0x0800ab03
 800aa60:	0800ab03 	.word	0x0800ab03
 800aa64:	0800ab03 	.word	0x0800ab03
 800aa68:	0800ab03 	.word	0x0800ab03
 800aa6c:	0800ab03 	.word	0x0800ab03
 800aa70:	0800ab03 	.word	0x0800ab03
 800aa74:	0800ab03 	.word	0x0800ab03
 800aa78:	0800ab03 	.word	0x0800ab03
 800aa7c:	0800ab03 	.word	0x0800ab03
 800aa80:	0800ab03 	.word	0x0800ab03
 800aa84:	0800ab03 	.word	0x0800ab03
 800aa88:	0800ab03 	.word	0x0800ab03
 800aa8c:	0800ab03 	.word	0x0800ab03
 800aa90:	0800ab03 	.word	0x0800ab03
 800aa94:	0800aaf5 	.word	0x0800aaf5
 800aa98:	2b40      	cmp	r3, #64	@ 0x40
 800aa9a:	d02e      	beq.n	800aafa <UART_SetConfig+0xa36>
 800aa9c:	e031      	b.n	800ab02 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa9e:	f7fc f973 	bl	8006d88 <HAL_RCC_GetPCLK1Freq>
 800aaa2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aaa4:	e033      	b.n	800ab0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aaa6:	f7fc f985 	bl	8006db4 <HAL_RCC_GetPCLK2Freq>
 800aaaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aaac:	e02f      	b.n	800ab0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7fe f934 	bl	8008d20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aabc:	e027      	b.n	800ab0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aabe:	f107 0318 	add.w	r3, r7, #24
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fe fa80 	bl	8008fc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aac8:	69fb      	ldr	r3, [r7, #28]
 800aaca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aacc:	e01f      	b.n	800ab0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aace:	4b2d      	ldr	r3, [pc, #180]	@ (800ab84 <UART_SetConfig+0xac0>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f003 0320 	and.w	r3, r3, #32
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d009      	beq.n	800aaee <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aada:	4b2a      	ldr	r3, [pc, #168]	@ (800ab84 <UART_SetConfig+0xac0>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	08db      	lsrs	r3, r3, #3
 800aae0:	f003 0303 	and.w	r3, r3, #3
 800aae4:	4a28      	ldr	r2, [pc, #160]	@ (800ab88 <UART_SetConfig+0xac4>)
 800aae6:	fa22 f303 	lsr.w	r3, r2, r3
 800aaea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aaec:	e00f      	b.n	800ab0e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800aaee:	4b26      	ldr	r3, [pc, #152]	@ (800ab88 <UART_SetConfig+0xac4>)
 800aaf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaf2:	e00c      	b.n	800ab0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aaf4:	4b25      	ldr	r3, [pc, #148]	@ (800ab8c <UART_SetConfig+0xac8>)
 800aaf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaf8:	e009      	b.n	800ab0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aafa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aafe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab00:	e005      	b.n	800ab0e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ab02:	2300      	movs	r3, #0
 800ab04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ab06:	2301      	movs	r3, #1
 800ab08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ab0c:	bf00      	nop
    }

    if (pclk != 0U)
 800ab0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d021      	beq.n	800ab58 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab18:	4a1d      	ldr	r2, [pc, #116]	@ (800ab90 <UART_SetConfig+0xacc>)
 800ab1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab1e:	461a      	mov	r2, r3
 800ab20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab22:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	085b      	lsrs	r3, r3, #1
 800ab2c:	441a      	add	r2, r3
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab36:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab3a:	2b0f      	cmp	r3, #15
 800ab3c:	d909      	bls.n	800ab52 <UART_SetConfig+0xa8e>
 800ab3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab44:	d205      	bcs.n	800ab52 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab48:	b29a      	uxth	r2, r3
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	60da      	str	r2, [r3, #12]
 800ab50:	e002      	b.n	800ab58 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	2200      	movs	r2, #0
 800ab72:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ab74:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3748      	adds	r7, #72	@ 0x48
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab82:	bf00      	nop
 800ab84:	58024400 	.word	0x58024400
 800ab88:	03d09000 	.word	0x03d09000
 800ab8c:	003d0900 	.word	0x003d0900
 800ab90:	0800ceb0 	.word	0x0800ceb0

0800ab94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aba0:	f003 0308 	and.w	r3, r3, #8
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00a      	beq.n	800abbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	430a      	orrs	r2, r1
 800abbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abc2:	f003 0301 	and.w	r3, r3, #1
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00a      	beq.n	800abe0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	430a      	orrs	r2, r1
 800abde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abe4:	f003 0302 	and.w	r3, r3, #2
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d00a      	beq.n	800ac02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	430a      	orrs	r2, r1
 800ac00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac06:	f003 0304 	and.w	r3, r3, #4
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00a      	beq.n	800ac24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	430a      	orrs	r2, r1
 800ac22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac28:	f003 0310 	and.w	r3, r3, #16
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00a      	beq.n	800ac46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	430a      	orrs	r2, r1
 800ac44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac4a:	f003 0320 	and.w	r3, r3, #32
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d00a      	beq.n	800ac68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	430a      	orrs	r2, r1
 800ac66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d01a      	beq.n	800acaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	430a      	orrs	r2, r1
 800ac88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac92:	d10a      	bne.n	800acaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	430a      	orrs	r2, r1
 800aca8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d00a      	beq.n	800accc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	430a      	orrs	r2, r1
 800acca:	605a      	str	r2, [r3, #4]
  }
}
 800accc:	bf00      	nop
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b098      	sub	sp, #96	@ 0x60
 800acdc:	af02      	add	r7, sp, #8
 800acde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ace8:	f7f6 fd4c 	bl	8001784 <HAL_GetTick>
 800acec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f003 0308 	and.w	r3, r3, #8
 800acf8:	2b08      	cmp	r3, #8
 800acfa:	d12f      	bne.n	800ad5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acfc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad04:	2200      	movs	r2, #0
 800ad06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 f88e 	bl	800ae2c <UART_WaitOnFlagUntilTimeout>
 800ad10:	4603      	mov	r3, r0
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d022      	beq.n	800ad5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad1e:	e853 3f00 	ldrex	r3, [r3]
 800ad22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ad24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad2a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	461a      	mov	r2, r3
 800ad32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad34:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad36:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad3c:	e841 2300 	strex	r3, r2, [r1]
 800ad40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d1e6      	bne.n	800ad16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2220      	movs	r2, #32
 800ad4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad58:	2303      	movs	r3, #3
 800ad5a:	e063      	b.n	800ae24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 0304 	and.w	r3, r3, #4
 800ad66:	2b04      	cmp	r3, #4
 800ad68:	d149      	bne.n	800adfe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ad6e:	9300      	str	r3, [sp, #0]
 800ad70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad72:	2200      	movs	r2, #0
 800ad74:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 f857 	bl	800ae2c <UART_WaitOnFlagUntilTimeout>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d03c      	beq.n	800adfe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad8c:	e853 3f00 	ldrex	r3, [r3]
 800ad90:	623b      	str	r3, [r7, #32]
   return(result);
 800ad92:	6a3b      	ldr	r3, [r7, #32]
 800ad94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ada2:	633b      	str	r3, [r7, #48]	@ 0x30
 800ada4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ada8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adaa:	e841 2300 	strex	r3, r2, [r1]
 800adae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800adb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1e6      	bne.n	800ad84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	3308      	adds	r3, #8
 800adbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	e853 3f00 	ldrex	r3, [r3]
 800adc4:	60fb      	str	r3, [r7, #12]
   return(result);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f023 0301 	bic.w	r3, r3, #1
 800adcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	3308      	adds	r3, #8
 800add4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800add6:	61fa      	str	r2, [r7, #28]
 800add8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adda:	69b9      	ldr	r1, [r7, #24]
 800addc:	69fa      	ldr	r2, [r7, #28]
 800adde:	e841 2300 	strex	r3, r2, [r1]
 800ade2:	617b      	str	r3, [r7, #20]
   return(result);
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d1e5      	bne.n	800adb6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2220      	movs	r2, #32
 800adee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adfa:	2303      	movs	r3, #3
 800adfc:	e012      	b.n	800ae24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2220      	movs	r2, #32
 800ae02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2220      	movs	r2, #32
 800ae0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2200      	movs	r2, #0
 800ae12:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2200      	movs	r2, #0
 800ae18:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae22:	2300      	movs	r3, #0
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3758      	adds	r7, #88	@ 0x58
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	603b      	str	r3, [r7, #0]
 800ae38:	4613      	mov	r3, r2
 800ae3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae3c:	e04f      	b.n	800aede <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae3e:	69bb      	ldr	r3, [r7, #24]
 800ae40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae44:	d04b      	beq.n	800aede <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae46:	f7f6 fc9d 	bl	8001784 <HAL_GetTick>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	1ad3      	subs	r3, r2, r3
 800ae50:	69ba      	ldr	r2, [r7, #24]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d302      	bcc.n	800ae5c <UART_WaitOnFlagUntilTimeout+0x30>
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d101      	bne.n	800ae60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ae5c:	2303      	movs	r3, #3
 800ae5e:	e04e      	b.n	800aefe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 0304 	and.w	r3, r3, #4
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d037      	beq.n	800aede <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	2b80      	cmp	r3, #128	@ 0x80
 800ae72:	d034      	beq.n	800aede <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	2b40      	cmp	r3, #64	@ 0x40
 800ae78:	d031      	beq.n	800aede <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	69db      	ldr	r3, [r3, #28]
 800ae80:	f003 0308 	and.w	r3, r3, #8
 800ae84:	2b08      	cmp	r3, #8
 800ae86:	d110      	bne.n	800aeaa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2208      	movs	r2, #8
 800ae8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f000 f839 	bl	800af08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2208      	movs	r2, #8
 800ae9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800aea6:	2301      	movs	r3, #1
 800aea8:	e029      	b.n	800aefe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	69db      	ldr	r3, [r3, #28]
 800aeb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aeb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aeb8:	d111      	bne.n	800aede <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aec4:	68f8      	ldr	r0, [r7, #12]
 800aec6:	f000 f81f 	bl	800af08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2220      	movs	r2, #32
 800aece:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2200      	movs	r2, #0
 800aed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800aeda:	2303      	movs	r3, #3
 800aedc:	e00f      	b.n	800aefe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	69da      	ldr	r2, [r3, #28]
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	4013      	ands	r3, r2
 800aee8:	68ba      	ldr	r2, [r7, #8]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	bf0c      	ite	eq
 800aeee:	2301      	moveq	r3, #1
 800aef0:	2300      	movne	r3, #0
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	461a      	mov	r2, r3
 800aef6:	79fb      	ldrb	r3, [r7, #7]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d0a0      	beq.n	800ae3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
	...

0800af08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af08:	b480      	push	{r7}
 800af0a:	b095      	sub	sp, #84	@ 0x54
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af18:	e853 3f00 	ldrex	r3, [r3]
 800af1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800af1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	461a      	mov	r2, r3
 800af2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af2e:	643b      	str	r3, [r7, #64]	@ 0x40
 800af30:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800af34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800af36:	e841 2300 	strex	r3, r2, [r1]
 800af3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800af3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d1e6      	bne.n	800af10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	3308      	adds	r3, #8
 800af48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af4a:	6a3b      	ldr	r3, [r7, #32]
 800af4c:	e853 3f00 	ldrex	r3, [r3]
 800af50:	61fb      	str	r3, [r7, #28]
   return(result);
 800af52:	69fa      	ldr	r2, [r7, #28]
 800af54:	4b1e      	ldr	r3, [pc, #120]	@ (800afd0 <UART_EndRxTransfer+0xc8>)
 800af56:	4013      	ands	r3, r2
 800af58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	3308      	adds	r3, #8
 800af60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800af64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af6a:	e841 2300 	strex	r3, r2, [r1]
 800af6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af72:	2b00      	cmp	r3, #0
 800af74:	d1e5      	bne.n	800af42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d118      	bne.n	800afb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	e853 3f00 	ldrex	r3, [r3]
 800af8a:	60bb      	str	r3, [r7, #8]
   return(result);
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	f023 0310 	bic.w	r3, r3, #16
 800af92:	647b      	str	r3, [r7, #68]	@ 0x44
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	461a      	mov	r2, r3
 800af9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af9c:	61bb      	str	r3, [r7, #24]
 800af9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa0:	6979      	ldr	r1, [r7, #20]
 800afa2:	69ba      	ldr	r2, [r7, #24]
 800afa4:	e841 2300 	strex	r3, r2, [r1]
 800afa8:	613b      	str	r3, [r7, #16]
   return(result);
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d1e6      	bne.n	800af7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2220      	movs	r2, #32
 800afb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800afc4:	bf00      	nop
 800afc6:	3754      	adds	r7, #84	@ 0x54
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr
 800afd0:	effffffe 	.word	0xeffffffe

0800afd4 <arm_rfft_fast_init_f32>:
 800afd4:	084b      	lsrs	r3, r1, #1
 800afd6:	2b80      	cmp	r3, #128	@ 0x80
 800afd8:	b430      	push	{r4, r5}
 800afda:	8201      	strh	r1, [r0, #16]
 800afdc:	8003      	strh	r3, [r0, #0]
 800afde:	d06f      	beq.n	800b0c0 <arm_rfft_fast_init_f32+0xec>
 800afe0:	d916      	bls.n	800b010 <arm_rfft_fast_init_f32+0x3c>
 800afe2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afe6:	d05e      	beq.n	800b0a6 <arm_rfft_fast_init_f32+0xd2>
 800afe8:	d935      	bls.n	800b056 <arm_rfft_fast_init_f32+0x82>
 800afea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800afee:	d025      	beq.n	800b03c <arm_rfft_fast_init_f32+0x68>
 800aff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aff4:	d112      	bne.n	800b01c <arm_rfft_fast_init_f32+0x48>
 800aff6:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 800affa:	4c37      	ldr	r4, [pc, #220]	@ (800b0d8 <arm_rfft_fast_init_f32+0x104>)
 800affc:	4937      	ldr	r1, [pc, #220]	@ (800b0dc <arm_rfft_fast_init_f32+0x108>)
 800affe:	2300      	movs	r3, #0
 800b000:	4a37      	ldr	r2, [pc, #220]	@ (800b0e0 <arm_rfft_fast_init_f32+0x10c>)
 800b002:	8185      	strh	r5, [r0, #12]
 800b004:	6084      	str	r4, [r0, #8]
 800b006:	6041      	str	r1, [r0, #4]
 800b008:	6142      	str	r2, [r0, #20]
 800b00a:	b258      	sxtb	r0, r3
 800b00c:	bc30      	pop	{r4, r5}
 800b00e:	4770      	bx	lr
 800b010:	2b20      	cmp	r3, #32
 800b012:	d030      	beq.n	800b076 <arm_rfft_fast_init_f32+0xa2>
 800b014:	2b40      	cmp	r3, #64	@ 0x40
 800b016:	d005      	beq.n	800b024 <arm_rfft_fast_init_f32+0x50>
 800b018:	2b10      	cmp	r3, #16
 800b01a:	d038      	beq.n	800b08e <arm_rfft_fast_init_f32+0xba>
 800b01c:	23ff      	movs	r3, #255	@ 0xff
 800b01e:	bc30      	pop	{r4, r5}
 800b020:	b258      	sxtb	r0, r3
 800b022:	4770      	bx	lr
 800b024:	2538      	movs	r5, #56	@ 0x38
 800b026:	4c2f      	ldr	r4, [pc, #188]	@ (800b0e4 <arm_rfft_fast_init_f32+0x110>)
 800b028:	492f      	ldr	r1, [pc, #188]	@ (800b0e8 <arm_rfft_fast_init_f32+0x114>)
 800b02a:	2300      	movs	r3, #0
 800b02c:	4a2f      	ldr	r2, [pc, #188]	@ (800b0ec <arm_rfft_fast_init_f32+0x118>)
 800b02e:	8185      	strh	r5, [r0, #12]
 800b030:	6084      	str	r4, [r0, #8]
 800b032:	6041      	str	r1, [r0, #4]
 800b034:	6142      	str	r2, [r0, #20]
 800b036:	b258      	sxtb	r0, r3
 800b038:	bc30      	pop	{r4, r5}
 800b03a:	4770      	bx	lr
 800b03c:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 800b040:	4c2b      	ldr	r4, [pc, #172]	@ (800b0f0 <arm_rfft_fast_init_f32+0x11c>)
 800b042:	492c      	ldr	r1, [pc, #176]	@ (800b0f4 <arm_rfft_fast_init_f32+0x120>)
 800b044:	2300      	movs	r3, #0
 800b046:	4a2c      	ldr	r2, [pc, #176]	@ (800b0f8 <arm_rfft_fast_init_f32+0x124>)
 800b048:	8185      	strh	r5, [r0, #12]
 800b04a:	6084      	str	r4, [r0, #8]
 800b04c:	6041      	str	r1, [r0, #4]
 800b04e:	6142      	str	r2, [r0, #20]
 800b050:	b258      	sxtb	r0, r3
 800b052:	bc30      	pop	{r4, r5}
 800b054:	4770      	bx	lr
 800b056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b05a:	d1df      	bne.n	800b01c <arm_rfft_fast_init_f32+0x48>
 800b05c:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 800b060:	4c26      	ldr	r4, [pc, #152]	@ (800b0fc <arm_rfft_fast_init_f32+0x128>)
 800b062:	4927      	ldr	r1, [pc, #156]	@ (800b100 <arm_rfft_fast_init_f32+0x12c>)
 800b064:	2300      	movs	r3, #0
 800b066:	4a27      	ldr	r2, [pc, #156]	@ (800b104 <arm_rfft_fast_init_f32+0x130>)
 800b068:	8185      	strh	r5, [r0, #12]
 800b06a:	6084      	str	r4, [r0, #8]
 800b06c:	6041      	str	r1, [r0, #4]
 800b06e:	6142      	str	r2, [r0, #20]
 800b070:	b258      	sxtb	r0, r3
 800b072:	bc30      	pop	{r4, r5}
 800b074:	4770      	bx	lr
 800b076:	2530      	movs	r5, #48	@ 0x30
 800b078:	4c23      	ldr	r4, [pc, #140]	@ (800b108 <arm_rfft_fast_init_f32+0x134>)
 800b07a:	4924      	ldr	r1, [pc, #144]	@ (800b10c <arm_rfft_fast_init_f32+0x138>)
 800b07c:	2300      	movs	r3, #0
 800b07e:	4a24      	ldr	r2, [pc, #144]	@ (800b110 <arm_rfft_fast_init_f32+0x13c>)
 800b080:	8185      	strh	r5, [r0, #12]
 800b082:	6084      	str	r4, [r0, #8]
 800b084:	6041      	str	r1, [r0, #4]
 800b086:	6142      	str	r2, [r0, #20]
 800b088:	b258      	sxtb	r0, r3
 800b08a:	bc30      	pop	{r4, r5}
 800b08c:	4770      	bx	lr
 800b08e:	2514      	movs	r5, #20
 800b090:	4c20      	ldr	r4, [pc, #128]	@ (800b114 <arm_rfft_fast_init_f32+0x140>)
 800b092:	4921      	ldr	r1, [pc, #132]	@ (800b118 <arm_rfft_fast_init_f32+0x144>)
 800b094:	2300      	movs	r3, #0
 800b096:	4a21      	ldr	r2, [pc, #132]	@ (800b11c <arm_rfft_fast_init_f32+0x148>)
 800b098:	8185      	strh	r5, [r0, #12]
 800b09a:	6084      	str	r4, [r0, #8]
 800b09c:	6041      	str	r1, [r0, #4]
 800b09e:	6142      	str	r2, [r0, #20]
 800b0a0:	b258      	sxtb	r0, r3
 800b0a2:	bc30      	pop	{r4, r5}
 800b0a4:	4770      	bx	lr
 800b0a6:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 800b0aa:	4c1d      	ldr	r4, [pc, #116]	@ (800b120 <arm_rfft_fast_init_f32+0x14c>)
 800b0ac:	491d      	ldr	r1, [pc, #116]	@ (800b124 <arm_rfft_fast_init_f32+0x150>)
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	4a1d      	ldr	r2, [pc, #116]	@ (800b128 <arm_rfft_fast_init_f32+0x154>)
 800b0b2:	8185      	strh	r5, [r0, #12]
 800b0b4:	6084      	str	r4, [r0, #8]
 800b0b6:	6041      	str	r1, [r0, #4]
 800b0b8:	6142      	str	r2, [r0, #20]
 800b0ba:	b258      	sxtb	r0, r3
 800b0bc:	bc30      	pop	{r4, r5}
 800b0be:	4770      	bx	lr
 800b0c0:	25d0      	movs	r5, #208	@ 0xd0
 800b0c2:	4c1a      	ldr	r4, [pc, #104]	@ (800b12c <arm_rfft_fast_init_f32+0x158>)
 800b0c4:	491a      	ldr	r1, [pc, #104]	@ (800b130 <arm_rfft_fast_init_f32+0x15c>)
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	4a1a      	ldr	r2, [pc, #104]	@ (800b134 <arm_rfft_fast_init_f32+0x160>)
 800b0ca:	8185      	strh	r5, [r0, #12]
 800b0cc:	6084      	str	r4, [r0, #8]
 800b0ce:	6041      	str	r1, [r0, #4]
 800b0d0:	6142      	str	r2, [r0, #20]
 800b0d2:	b258      	sxtb	r0, r3
 800b0d4:	bc30      	pop	{r4, r5}
 800b0d6:	4770      	bx	lr
 800b0d8:	0801bcd0 	.word	0x0801bcd0
 800b0dc:	0800cec8 	.word	0x0800cec8
 800b0e0:	08013038 	.word	0x08013038
 800b0e4:	08010fc8 	.word	0x08010fc8
 800b0e8:	0801da90 	.word	0x0801da90
 800b0ec:	0801ff80 	.word	0x0801ff80
 800b0f0:	080199b8 	.word	0x080199b8
 800b0f4:	080178b8 	.word	0x080178b8
 800b0f8:	08011038 	.word	0x08011038
 800b0fc:	0801fc10 	.word	0x0801fc10
 800b100:	08017038 	.word	0x08017038
 800b104:	0801dc90 	.word	0x0801dc90
 800b108:	0801a870 	.word	0x0801a870
 800b10c:	080198b8 	.word	0x080198b8
 800b110:	08010ec8 	.word	0x08010ec8
 800b114:	0801a7c8 	.word	0x0801a7c8
 800b118:	08017838 	.word	0x08017838
 800b11c:	0801a7f0 	.word	0x0801a7f0
 800b120:	0801e490 	.word	0x0801e490
 800b124:	0801acd0 	.word	0x0801acd0
 800b128:	0801e810 	.word	0x0801e810
 800b12c:	08020180 	.word	0x08020180
 800b130:	0801a8d0 	.word	0x0801a8d0
 800b134:	0801f810 	.word	0x0801f810

0800b138 <arm_rfft_fast_f32>:
 800b138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b13c:	8a05      	ldrh	r5, [r0, #16]
 800b13e:	4606      	mov	r6, r0
 800b140:	4690      	mov	r8, r2
 800b142:	460c      	mov	r4, r1
 800b144:	086d      	lsrs	r5, r5, #1
 800b146:	8005      	strh	r5, [r0, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d15e      	bne.n	800b20a <arm_rfft_fast_f32+0xd2>
 800b14c:	461a      	mov	r2, r3
 800b14e:	2301      	movs	r3, #1
 800b150:	f000 fbe0 	bl	800b914 <arm_cfft_f32>
 800b154:	edd4 7a00 	vldr	s15, [r4]
 800b158:	ed94 7a01 	vldr	s14, [r4, #4]
 800b15c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b160:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b164:	8837      	ldrh	r7, [r6, #0]
 800b166:	ee37 7a07 	vadd.f32	s14, s14, s14
 800b16a:	6975      	ldr	r5, [r6, #20]
 800b16c:	3f01      	subs	r7, #1
 800b16e:	eef0 3a46 	vmov.f32	s7, s12
 800b172:	3510      	adds	r5, #16
 800b174:	f108 0610 	add.w	r6, r8, #16
 800b178:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b17c:	eb04 00c7 	add.w	r0, r4, r7, lsl #3
 800b180:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b184:	f104 0310 	add.w	r3, r4, #16
 800b188:	3808      	subs	r0, #8
 800b18a:	ee26 7a86 	vmul.f32	s14, s13, s12
 800b18e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b192:	ed88 7a00 	vstr	s14, [r8]
 800b196:	edc8 7a01 	vstr	s15, [r8, #4]
 800b19a:	edd0 6a02 	vldr	s13, [r0, #8]
 800b19e:	3f01      	subs	r7, #1
 800b1a0:	ed13 5a02 	vldr	s10, [r3, #-8]
 800b1a4:	f1a0 0008 	sub.w	r0, r0, #8
 800b1a8:	ed13 7a01 	vldr	s14, [r3, #-4]
 800b1ac:	f105 0508 	add.w	r5, r5, #8
 800b1b0:	ee76 7ac5 	vsub.f32	s15, s13, s10
 800b1b4:	ed15 6a04 	vldr	s12, [r5, #-16]
 800b1b8:	edd0 5a05 	vldr	s11, [r0, #20]
 800b1bc:	ee36 5a85 	vadd.f32	s10, s13, s10
 800b1c0:	ed55 6a03 	vldr	s13, [r5, #-12]
 800b1c4:	f103 0308 	add.w	r3, r3, #8
 800b1c8:	ee35 4a87 	vadd.f32	s8, s11, s14
 800b1cc:	f106 0608 	add.w	r6, r6, #8
 800b1d0:	ee66 4a27 	vmul.f32	s9, s12, s15
 800b1d4:	ee77 5a65 	vsub.f32	s11, s14, s11
 800b1d8:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800b1dc:	ee34 5a85 	vadd.f32	s10, s9, s10
 800b1e0:	ee26 6a04 	vmul.f32	s12, s12, s8
 800b1e4:	ee66 6a84 	vmul.f32	s13, s13, s8
 800b1e8:	ee77 7a25 	vadd.f32	s15, s14, s11
 800b1ec:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b1f0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b1f4:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800b1f8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800b1fc:	ed46 6a04 	vstr	s13, [r6, #-16]
 800b200:	ed46 7a03 	vstr	s15, [r6, #-12]
 800b204:	d1c9      	bne.n	800b19a <arm_rfft_fast_f32+0x62>
 800b206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b20a:	edd1 7a00 	vldr	s15, [r1]
 800b20e:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800b212:	edd1 6a01 	vldr	s13, [r1, #4]
 800b216:	1e68      	subs	r0, r5, #1
 800b218:	6975      	ldr	r5, [r6, #20]
 800b21a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b21e:	00c1      	lsls	r1, r0, #3
 800b220:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b224:	ee27 7a23 	vmul.f32	s14, s14, s7
 800b228:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800b22c:	ed82 7a00 	vstr	s14, [r2]
 800b230:	edc2 7a01 	vstr	s15, [r2, #4]
 800b234:	b3e0      	cbz	r0, 800b2b0 <arm_rfft_fast_f32+0x178>
 800b236:	3908      	subs	r1, #8
 800b238:	f104 0210 	add.w	r2, r4, #16
 800b23c:	3510      	adds	r5, #16
 800b23e:	440c      	add	r4, r1
 800b240:	f108 0110 	add.w	r1, r8, #16
 800b244:	ed94 7a02 	vldr	s14, [r4, #8]
 800b248:	3801      	subs	r0, #1
 800b24a:	ed52 6a02 	vldr	s13, [r2, #-8]
 800b24e:	f1a4 0408 	sub.w	r4, r4, #8
 800b252:	ed15 6a02 	vldr	s12, [r5, #-8]
 800b256:	f102 0208 	add.w	r2, r2, #8
 800b25a:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800b25e:	ed94 4a05 	vldr	s8, [r4, #20]
 800b262:	ed12 5a03 	vldr	s10, [r2, #-12]
 800b266:	ee77 6a26 	vadd.f32	s13, s14, s13
 800b26a:	ed55 5a01 	vldr	s11, [r5, #-4]
 800b26e:	f101 0108 	add.w	r1, r1, #8
 800b272:	ee26 3a27 	vmul.f32	s6, s12, s15
 800b276:	f105 0508 	add.w	r5, r5, #8
 800b27a:	ee74 4a05 	vadd.f32	s9, s8, s10
 800b27e:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800b282:	ee35 5a44 	vsub.f32	s10, s10, s8
 800b286:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800b28a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800b28e:	ee77 7a05 	vadd.f32	s15, s14, s10
 800b292:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800b296:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b29a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800b29e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800b2a2:	ee27 7a23 	vmul.f32	s14, s14, s7
 800b2a6:	ed41 7a03 	vstr	s15, [r1, #-12]
 800b2aa:	ed01 7a04 	vstr	s14, [r1, #-16]
 800b2ae:	d1c9      	bne.n	800b244 <arm_rfft_fast_f32+0x10c>
 800b2b0:	4630      	mov	r0, r6
 800b2b2:	4641      	mov	r1, r8
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2bc:	f000 bb2a 	b.w	800b914 <arm_cfft_f32>

0800b2c0 <arm_cfft_radix8by2_f32>:
 800b2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2c4:	ed2d 8b06 	vpush	{d8-d10}
 800b2c8:	f8b0 e000 	ldrh.w	lr, [r0]
 800b2cc:	4607      	mov	r7, r0
 800b2ce:	6842      	ldr	r2, [r0, #4]
 800b2d0:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 800b2d4:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 800b2d8:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800b2dc:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800b2e0:	f000 80af 	beq.w	800b442 <arm_cfft_radix8by2_f32+0x182>
 800b2e4:	3310      	adds	r3, #16
 800b2e6:	3210      	adds	r2, #16
 800b2e8:	f101 0610 	add.w	r6, r1, #16
 800b2ec:	f108 0510 	add.w	r5, r8, #16
 800b2f0:	18cc      	adds	r4, r1, r3
 800b2f2:	4443      	add	r3, r8
 800b2f4:	ed55 6a04 	vldr	s13, [r5, #-16]
 800b2f8:	f1be 0e01 	subs.w	lr, lr, #1
 800b2fc:	ed56 4a04 	vldr	s9, [r6, #-16]
 800b300:	f104 0410 	add.w	r4, r4, #16
 800b304:	ed55 7a02 	vldr	s15, [r5, #-8]
 800b308:	f106 0610 	add.w	r6, r6, #16
 800b30c:	ee74 9aa6 	vadd.f32	s19, s9, s13
 800b310:	ed53 0a04 	vldr	s1, [r3, #-16]
 800b314:	ed13 5a03 	vldr	s10, [r3, #-12]
 800b318:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800b31c:	ed13 3a02 	vldr	s6, [r3, #-8]
 800b320:	f102 0210 	add.w	r2, r2, #16
 800b324:	ed15 7a03 	vldr	s14, [r5, #-12]
 800b328:	f103 0310 	add.w	r3, r3, #16
 800b32c:	ed55 2a01 	vldr	s5, [r5, #-4]
 800b330:	f105 0510 	add.w	r5, r5, #16
 800b334:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 800b338:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 800b33c:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 800b340:	ee33 8a83 	vadd.f32	s16, s7, s6
 800b344:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 800b348:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 800b34c:	ee34 0a06 	vadd.f32	s0, s8, s12
 800b350:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 800b354:	ee76 aa87 	vadd.f32	s21, s13, s14
 800b358:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 800b35c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b360:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 800b364:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800b368:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 800b36c:	ee71 8a05 	vadd.f32	s17, s2, s10
 800b370:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800b374:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 800b378:	ee72 9a22 	vadd.f32	s19, s4, s5
 800b37c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800b380:	ee35 5a41 	vsub.f32	s10, s10, s2
 800b384:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 800b388:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 800b38c:	ee36 6a44 	vsub.f32	s12, s12, s8
 800b390:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 800b394:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800b398:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 800b39c:	ee72 7a62 	vsub.f32	s15, s4, s5
 800b3a0:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 800b3a4:	ee73 2a63 	vsub.f32	s5, s6, s7
 800b3a8:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 800b3ac:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 800b3b0:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 800b3b4:	ee24 3a84 	vmul.f32	s6, s9, s8
 800b3b8:	ee27 2a26 	vmul.f32	s4, s14, s13
 800b3bc:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800b3c0:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800b3c4:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b3c8:	ee65 5a84 	vmul.f32	s11, s11, s8
 800b3cc:	ee65 6a26 	vmul.f32	s13, s10, s13
 800b3d0:	ee25 5a04 	vmul.f32	s10, s10, s8
 800b3d4:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b3d8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800b3dc:	ee33 4a02 	vadd.f32	s8, s6, s4
 800b3e0:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800b3e4:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 800b3e8:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 800b3ec:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 800b3f0:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 800b3f4:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 800b3f8:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 800b3fc:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800b400:	ee27 4a87 	vmul.f32	s8, s15, s14
 800b404:	ee61 5a87 	vmul.f32	s11, s3, s14
 800b408:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b40c:	ee22 5a87 	vmul.f32	s10, s5, s14
 800b410:	ee26 7a07 	vmul.f32	s14, s12, s14
 800b414:	ee26 6a26 	vmul.f32	s12, s12, s13
 800b418:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800b41c:	ee74 4a84 	vadd.f32	s9, s9, s8
 800b420:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b424:	ee35 6a46 	vsub.f32	s12, s10, s12
 800b428:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b42c:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 800b430:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 800b434:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 800b438:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 800b43c:	f47f af5a 	bne.w	800b2f4 <arm_cfft_radix8by2_f32+0x34>
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	fa1f f48c 	uxth.w	r4, ip
 800b446:	4608      	mov	r0, r1
 800b448:	2302      	movs	r3, #2
 800b44a:	4621      	mov	r1, r4
 800b44c:	f000 fada 	bl	800ba04 <arm_radix8_butterfly_f32>
 800b450:	4640      	mov	r0, r8
 800b452:	4621      	mov	r1, r4
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	2302      	movs	r3, #2
 800b458:	ecbd 8b06 	vpop	{d8-d10}
 800b45c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b460:	f000 bad0 	b.w	800ba04 <arm_radix8_butterfly_f32>

0800b464 <arm_cfft_radix8by4_f32>:
 800b464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b468:	ed2d 8b06 	vpush	{d8-d10}
 800b46c:	8804      	ldrh	r4, [r0, #0]
 800b46e:	b08f      	sub	sp, #60	@ 0x3c
 800b470:	ed91 6a00 	vldr	s12, [r1]
 800b474:	460a      	mov	r2, r1
 800b476:	0864      	lsrs	r4, r4, #1
 800b478:	ed91 7a01 	vldr	s14, [r1, #4]
 800b47c:	9101      	str	r1, [sp, #4]
 800b47e:	00a3      	lsls	r3, r4, #2
 800b480:	9104      	str	r1, [sp, #16]
 800b482:	0864      	lsrs	r4, r4, #1
 800b484:	6841      	ldr	r1, [r0, #4]
 800b486:	900c      	str	r0, [sp, #48]	@ 0x30
 800b488:	4625      	mov	r5, r4
 800b48a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b48c:	f101 0408 	add.w	r4, r1, #8
 800b490:	f101 0610 	add.w	r6, r1, #16
 800b494:	9406      	str	r4, [sp, #24]
 800b496:	18d4      	adds	r4, r2, r3
 800b498:	1eaa      	subs	r2, r5, #2
 800b49a:	f101 0518 	add.w	r5, r1, #24
 800b49e:	18e0      	adds	r0, r4, r3
 800b4a0:	ed94 4a00 	vldr	s8, [r4]
 800b4a4:	edd4 3a01 	vldr	s7, [r4, #4]
 800b4a8:	46a6      	mov	lr, r4
 800b4aa:	edd0 6a00 	vldr	s13, [r0]
 800b4ae:	18c7      	adds	r7, r0, r3
 800b4b0:	edd0 7a01 	vldr	s15, [r0, #4]
 800b4b4:	46a0      	mov	r8, r4
 800b4b6:	ee76 5a26 	vadd.f32	s11, s12, s13
 800b4ba:	edd7 4a00 	vldr	s9, [r7]
 800b4be:	9402      	str	r4, [sp, #8]
 800b4c0:	4604      	mov	r4, r0
 800b4c2:	9507      	str	r5, [sp, #28]
 800b4c4:	4605      	mov	r5, r0
 800b4c6:	ee75 2a84 	vadd.f32	s5, s11, s8
 800b4ca:	900a      	str	r0, [sp, #40]	@ 0x28
 800b4cc:	9801      	ldr	r0, [sp, #4]
 800b4ce:	ee76 6a66 	vsub.f32	s13, s12, s13
 800b4d2:	ee37 6a27 	vadd.f32	s12, s14, s15
 800b4d6:	ed97 5a01 	vldr	s10, [r7, #4]
 800b4da:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800b4de:	46bc      	mov	ip, r7
 800b4e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4e4:	9605      	str	r6, [sp, #20]
 800b4e6:	ee36 7a63 	vsub.f32	s14, s12, s7
 800b4ea:	9703      	str	r7, [sp, #12]
 800b4ec:	ee12 9a90 	vmov	r9, s5
 800b4f0:	ee33 3aa6 	vadd.f32	s6, s7, s13
 800b4f4:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800b4f8:	1f3e      	subs	r6, r7, #4
 800b4fa:	f840 9b08 	str.w	r9, [r0], #8
 800b4fe:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800b502:	edde 2a01 	vldr	s5, [lr, #4]
 800b506:	ee77 3ac4 	vsub.f32	s7, s15, s8
 800b50a:	ee77 7a84 	vadd.f32	s15, s15, s8
 800b50e:	ed9c 4a01 	vldr	s8, [ip, #4]
 800b512:	ee36 6a22 	vadd.f32	s12, s12, s5
 800b516:	9001      	str	r0, [sp, #4]
 800b518:	ee37 7a45 	vsub.f32	s14, s14, s10
 800b51c:	9804      	ldr	r0, [sp, #16]
 800b51e:	ee75 6a26 	vadd.f32	s13, s10, s13
 800b522:	f1ae 0704 	sub.w	r7, lr, #4
 800b526:	ee36 6a04 	vadd.f32	s12, s12, s8
 800b52a:	ee33 4a45 	vsub.f32	s8, s6, s10
 800b52e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800b532:	ee33 5aa4 	vadd.f32	s10, s7, s9
 800b536:	ed80 6a01 	vstr	s12, [r0, #4]
 800b53a:	ee14 9a10 	vmov	r9, s8
 800b53e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800b542:	f848 9b08 	str.w	r9, [r8], #8
 800b546:	ed8e 5a01 	vstr	s10, [lr, #4]
 800b54a:	ee15 ea90 	vmov	lr, s11
 800b54e:	f844 eb08 	str.w	lr, [r4], #8
 800b552:	ee16 ea90 	vmov	lr, s13
 800b556:	9408      	str	r4, [sp, #32]
 800b558:	462c      	mov	r4, r5
 800b55a:	ed85 7a01 	vstr	s14, [r5, #4]
 800b55e:	9d03      	ldr	r5, [sp, #12]
 800b560:	f84c eb08 	str.w	lr, [ip], #8
 800b564:	edc5 7a01 	vstr	s15, [r5, #4]
 800b568:	0855      	lsrs	r5, r2, #1
 800b56a:	9509      	str	r5, [sp, #36]	@ 0x24
 800b56c:	f000 8130 	beq.w	800b7d0 <arm_cfft_radix8by4_f32+0x36c>
 800b570:	9804      	ldr	r0, [sp, #16]
 800b572:	3b08      	subs	r3, #8
 800b574:	46ab      	mov	fp, r5
 800b576:	f1a4 020c 	sub.w	r2, r4, #12
 800b57a:	f100 0510 	add.w	r5, r0, #16
 800b57e:	f101 0920 	add.w	r9, r1, #32
 800b582:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 800b586:	f8dd a014 	ldr.w	sl, [sp, #20]
 800b58a:	4433      	add	r3, r6
 800b58c:	3410      	adds	r4, #16
 800b58e:	4660      	mov	r0, ip
 800b590:	4641      	mov	r1, r8
 800b592:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 800b596:	ed54 6a02 	vldr	s13, [r4, #-8]
 800b59a:	f1bb 0b01 	subs.w	fp, fp, #1
 800b59e:	ed55 5a02 	vldr	s11, [r5, #-8]
 800b5a2:	f10a 0a08 	add.w	sl, sl, #8
 800b5a6:	edd1 7a00 	vldr	s15, [r1]
 800b5aa:	f105 0508 	add.w	r5, r5, #8
 800b5ae:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800b5b2:	edd0 2a00 	vldr	s5, [r0]
 800b5b6:	ed14 7a01 	vldr	s14, [r4, #-4]
 800b5ba:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800b5be:	ed55 6a03 	vldr	s13, [r5, #-12]
 800b5c2:	f1a2 0208 	sub.w	r2, r2, #8
 800b5c6:	ee73 4aa7 	vadd.f32	s9, s7, s15
 800b5ca:	ed90 2a01 	vldr	s4, [r0, #4]
 800b5ce:	ee36 5a87 	vadd.f32	s10, s13, s14
 800b5d2:	ed91 6a01 	vldr	s12, [r1, #4]
 800b5d6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b5da:	f109 0910 	add.w	r9, r9, #16
 800b5de:	ee72 6aa4 	vadd.f32	s13, s5, s9
 800b5e2:	f104 0408 	add.w	r4, r4, #8
 800b5e6:	ee73 3ae7 	vsub.f32	s7, s7, s15
 800b5ea:	f10e 0e18 	add.w	lr, lr, #24
 800b5ee:	ee37 3a67 	vsub.f32	s6, s14, s15
 800b5f2:	f1a3 0308 	sub.w	r3, r3, #8
 800b5f6:	ed45 6a04 	vstr	s13, [r5, #-16]
 800b5fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b5fe:	edd1 6a01 	vldr	s13, [r1, #4]
 800b602:	ee76 1a25 	vadd.f32	s3, s12, s11
 800b606:	edd0 4a01 	vldr	s9, [r0, #4]
 800b60a:	ee33 3a22 	vadd.f32	s6, s6, s5
 800b60e:	ee75 6a26 	vadd.f32	s13, s10, s13
 800b612:	ee35 5a46 	vsub.f32	s10, s10, s12
 800b616:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800b61a:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b61e:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800b622:	ee35 5a42 	vsub.f32	s10, s10, s4
 800b626:	ed45 6a03 	vstr	s13, [r5, #-12]
 800b62a:	ee32 2a06 	vadd.f32	s4, s4, s12
 800b62e:	edd6 7a00 	vldr	s15, [r6]
 800b632:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800b636:	ed97 1a00 	vldr	s2, [r7]
 800b63a:	ee77 2a62 	vsub.f32	s5, s14, s5
 800b63e:	ed92 8a04 	vldr	s16, [r2, #16]
 800b642:	ee71 8a27 	vadd.f32	s17, s2, s15
 800b646:	ed93 aa04 	vldr	s20, [r3, #16]
 800b64a:	ed16 7a01 	vldr	s14, [r6, #-4]
 800b64e:	ee71 7a67 	vsub.f32	s15, s2, s15
 800b652:	ed57 0a01 	vldr	s1, [r7, #-4]
 800b656:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800b65a:	ee38 6a88 	vadd.f32	s12, s17, s16
 800b65e:	edd3 9a03 	vldr	s19, [r3, #12]
 800b662:	ee30 0a87 	vadd.f32	s0, s1, s14
 800b666:	ed92 9a03 	vldr	s18, [r2, #12]
 800b66a:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800b66e:	ee3a 6a06 	vadd.f32	s12, s20, s12
 800b672:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800b676:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800b67a:	ee16 ca10 	vmov	ip, s12
 800b67e:	ee30 6a49 	vsub.f32	s12, s0, s18
 800b682:	ee71 4a07 	vadd.f32	s9, s2, s14
 800b686:	f847 c908 	str.w	ip, [r7], #-8
 800b68a:	ee34 4a29 	vadd.f32	s8, s8, s19
 800b68e:	edd2 8a03 	vldr	s17, [r2, #12]
 800b692:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800b696:	ed93 8a03 	vldr	s16, [r3, #12]
 800b69a:	ee71 0a47 	vsub.f32	s1, s2, s14
 800b69e:	ee30 0a28 	vadd.f32	s0, s0, s17
 800b6a2:	ee39 1a67 	vsub.f32	s2, s18, s15
 800b6a6:	ee36 6a69 	vsub.f32	s12, s12, s19
 800b6aa:	ee30 0a08 	vadd.f32	s0, s0, s16
 800b6ae:	ee75 5aca 	vsub.f32	s11, s11, s20
 800b6b2:	ed87 0a01 	vstr	s0, [r7, #4]
 800b6b6:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800b6ba:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800b6be:	ee21 8a80 	vmul.f32	s16, s3, s0
 800b6c2:	ee23 7a26 	vmul.f32	s14, s6, s13
 800b6c6:	ee64 7a26 	vmul.f32	s15, s8, s13
 800b6ca:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800b6ce:	ee24 4a00 	vmul.f32	s8, s8, s0
 800b6d2:	ee23 3a00 	vmul.f32	s6, s6, s0
 800b6d6:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800b6da:	ee24 0a80 	vmul.f32	s0, s9, s0
 800b6de:	ee38 7a07 	vadd.f32	s14, s16, s14
 800b6e2:	ee76 6a84 	vadd.f32	s13, s13, s8
 800b6e6:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b6ea:	ee33 3a61 	vsub.f32	s6, s6, s3
 800b6ee:	ee17 ca10 	vmov	ip, s14
 800b6f2:	f841 cb08 	str.w	ip, [r1], #8
 800b6f6:	ed01 3a01 	vstr	s6, [r1, #-4]
 800b6fa:	ed82 0a04 	vstr	s0, [r2, #16]
 800b6fe:	edc2 6a03 	vstr	s13, [r2, #12]
 800b702:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 800b706:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 800b70a:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800b70e:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800b712:	ee65 4a27 	vmul.f32	s9, s10, s15
 800b716:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800b71a:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800b71e:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b722:	ee25 5a26 	vmul.f32	s10, s10, s13
 800b726:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b72a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b72e:	ee34 6a24 	vadd.f32	s12, s8, s9
 800b732:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800b736:	ee35 5a63 	vsub.f32	s10, s10, s7
 800b73a:	ee17 ca90 	vmov	ip, s15
 800b73e:	ed04 6a04 	vstr	s12, [r4, #-16]
 800b742:	ed04 5a03 	vstr	s10, [r4, #-12]
 800b746:	f846 c908 	str.w	ip, [r6], #-8
 800b74a:	edc6 6a01 	vstr	s13, [r6, #4]
 800b74e:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 800b752:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 800b756:	ee62 5a27 	vmul.f32	s11, s4, s15
 800b75a:	ee22 6a87 	vmul.f32	s12, s5, s14
 800b75e:	ee22 2a07 	vmul.f32	s4, s4, s14
 800b762:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800b766:	ee61 6a07 	vmul.f32	s13, s2, s14
 800b76a:	ee20 7a87 	vmul.f32	s14, s1, s14
 800b76e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800b772:	ee61 7a27 	vmul.f32	s15, s2, s15
 800b776:	ee35 6a86 	vadd.f32	s12, s11, s12
 800b77a:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800b77e:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800b782:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b786:	ee16 ca10 	vmov	ip, s12
 800b78a:	f840 cb08 	str.w	ip, [r0], #8
 800b78e:	ed40 2a01 	vstr	s5, [r0, #-4]
 800b792:	edc3 0a04 	vstr	s1, [r3, #16]
 800b796:	edc3 7a03 	vstr	s15, [r3, #12]
 800b79a:	f47f aefc 	bne.w	800b596 <arm_cfft_radix8by4_f32+0x132>
 800b79e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b7a0:	9805      	ldr	r0, [sp, #20]
 800b7a2:	00cb      	lsls	r3, r1, #3
 800b7a4:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 800b7a8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800b7ac:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800b7b0:	4498      	add	r8, r3
 800b7b2:	449c      	add	ip, r3
 800b7b4:	9105      	str	r1, [sp, #20]
 800b7b6:	9901      	ldr	r1, [sp, #4]
 800b7b8:	4419      	add	r1, r3
 800b7ba:	9101      	str	r1, [sp, #4]
 800b7bc:	9906      	ldr	r1, [sp, #24]
 800b7be:	4419      	add	r1, r3
 800b7c0:	9106      	str	r1, [sp, #24]
 800b7c2:	9908      	ldr	r1, [sp, #32]
 800b7c4:	4419      	add	r1, r3
 800b7c6:	9b07      	ldr	r3, [sp, #28]
 800b7c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7cc:	9108      	str	r1, [sp, #32]
 800b7ce:	9307      	str	r3, [sp, #28]
 800b7d0:	9a01      	ldr	r2, [sp, #4]
 800b7d2:	2304      	movs	r3, #4
 800b7d4:	9e08      	ldr	r6, [sp, #32]
 800b7d6:	edd2 6a00 	vldr	s13, [r2]
 800b7da:	ed96 4a00 	vldr	s8, [r6]
 800b7de:	edd8 7a00 	vldr	s15, [r8]
 800b7e2:	ee36 6a84 	vadd.f32	s12, s13, s8
 800b7e6:	eddc 2a00 	vldr	s5, [ip]
 800b7ea:	ed96 7a01 	vldr	s14, [r6, #4]
 800b7ee:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800b7f2:	edd2 6a01 	vldr	s13, [r2, #4]
 800b7f6:	ee76 4a27 	vadd.f32	s9, s12, s15
 800b7fa:	ed98 2a01 	vldr	s4, [r8, #4]
 800b7fe:	ee76 5a87 	vadd.f32	s11, s13, s14
 800b802:	ed9c 5a01 	vldr	s10, [ip, #4]
 800b806:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b80a:	9d05      	ldr	r5, [sp, #20]
 800b80c:	ee72 6aa4 	vadd.f32	s13, s5, s9
 800b810:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 800b814:	ee72 3a04 	vadd.f32	s7, s4, s8
 800b818:	9804      	ldr	r0, [sp, #16]
 800b81a:	ee77 4a67 	vsub.f32	s9, s14, s15
 800b81e:	4621      	mov	r1, r4
 800b820:	edc2 6a00 	vstr	s13, [r2]
 800b824:	ee76 6a67 	vsub.f32	s13, s12, s15
 800b828:	ed98 3a01 	vldr	s6, [r8, #4]
 800b82c:	ee35 6ac2 	vsub.f32	s12, s11, s4
 800b830:	eddc 1a01 	vldr	s3, [ip, #4]
 800b834:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800b838:	ee35 3a83 	vadd.f32	s6, s11, s6
 800b83c:	ee34 4a42 	vsub.f32	s8, s8, s4
 800b840:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800b844:	ee73 5a21 	vadd.f32	s11, s6, s3
 800b848:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b84c:	ee36 6a45 	vsub.f32	s12, s12, s10
 800b850:	edc2 5a01 	vstr	s11, [r2, #4]
 800b854:	ee35 5a04 	vadd.f32	s10, s10, s8
 800b858:	9a06      	ldr	r2, [sp, #24]
 800b85a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800b85e:	edd2 7a00 	vldr	s15, [r2]
 800b862:	edd2 5a01 	vldr	s11, [r2, #4]
 800b866:	ee23 4aa7 	vmul.f32	s8, s7, s15
 800b86a:	ee63 3aa5 	vmul.f32	s7, s7, s11
 800b86e:	ee64 5aa5 	vmul.f32	s11, s9, s11
 800b872:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800b876:	ee77 7a62 	vsub.f32	s15, s14, s5
 800b87a:	ee74 5a25 	vadd.f32	s11, s8, s11
 800b87e:	ee74 4ae3 	vsub.f32	s9, s9, s7
 800b882:	edc8 5a00 	vstr	s11, [r8]
 800b886:	edc8 4a01 	vstr	s9, [r8, #4]
 800b88a:	edd5 4a01 	vldr	s9, [r5, #4]
 800b88e:	ed95 7a00 	vldr	s14, [r5]
 800b892:	9d07      	ldr	r5, [sp, #28]
 800b894:	ee66 5a87 	vmul.f32	s11, s13, s14
 800b898:	ee66 6aa4 	vmul.f32	s13, s13, s9
 800b89c:	ee26 7a07 	vmul.f32	s14, s12, s14
 800b8a0:	ee26 6a24 	vmul.f32	s12, s12, s9
 800b8a4:	ee77 6a66 	vsub.f32	s13, s14, s13
 800b8a8:	ee35 6a86 	vadd.f32	s12, s11, s12
 800b8ac:	edc6 6a01 	vstr	s13, [r6, #4]
 800b8b0:	ed86 6a00 	vstr	s12, [r6]
 800b8b4:	ed95 6a01 	vldr	s12, [r5, #4]
 800b8b8:	ed95 7a00 	vldr	s14, [r5]
 800b8bc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b8be:	ee65 6a07 	vmul.f32	s13, s10, s14
 800b8c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b8c6:	ee25 5a06 	vmul.f32	s10, s10, s12
 800b8ca:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b8ce:	ee37 5a45 	vsub.f32	s10, s14, s10
 800b8d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8d6:	ed8c 5a01 	vstr	s10, [ip, #4]
 800b8da:	edcc 7a00 	vstr	s15, [ip]
 800b8de:	6872      	ldr	r2, [r6, #4]
 800b8e0:	f000 f890 	bl	800ba04 <arm_radix8_butterfly_f32>
 800b8e4:	9802      	ldr	r0, [sp, #8]
 800b8e6:	4621      	mov	r1, r4
 800b8e8:	6872      	ldr	r2, [r6, #4]
 800b8ea:	2304      	movs	r3, #4
 800b8ec:	f000 f88a 	bl	800ba04 <arm_radix8_butterfly_f32>
 800b8f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b8f2:	4621      	mov	r1, r4
 800b8f4:	6872      	ldr	r2, [r6, #4]
 800b8f6:	2304      	movs	r3, #4
 800b8f8:	f000 f884 	bl	800ba04 <arm_radix8_butterfly_f32>
 800b8fc:	9803      	ldr	r0, [sp, #12]
 800b8fe:	4621      	mov	r1, r4
 800b900:	6872      	ldr	r2, [r6, #4]
 800b902:	2304      	movs	r3, #4
 800b904:	b00f      	add	sp, #60	@ 0x3c
 800b906:	ecbd 8b06 	vpop	{d8-d10}
 800b90a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b90e:	f000 b879 	b.w	800ba04 <arm_radix8_butterfly_f32>
 800b912:	bf00      	nop

0800b914 <arm_cfft_f32>:
 800b914:	2a01      	cmp	r2, #1
 800b916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b91a:	4606      	mov	r6, r0
 800b91c:	4617      	mov	r7, r2
 800b91e:	460c      	mov	r4, r1
 800b920:	4698      	mov	r8, r3
 800b922:	8805      	ldrh	r5, [r0, #0]
 800b924:	d053      	beq.n	800b9ce <arm_cfft_f32+0xba>
 800b926:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800b92a:	d04b      	beq.n	800b9c4 <arm_cfft_f32+0xb0>
 800b92c:	d916      	bls.n	800b95c <arm_cfft_f32+0x48>
 800b92e:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800b932:	d01a      	beq.n	800b96a <arm_cfft_f32+0x56>
 800b934:	d95a      	bls.n	800b9ec <arm_cfft_f32+0xd8>
 800b936:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800b93a:	d043      	beq.n	800b9c4 <arm_cfft_f32+0xb0>
 800b93c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800b940:	d105      	bne.n	800b94e <arm_cfft_f32+0x3a>
 800b942:	4620      	mov	r0, r4
 800b944:	4629      	mov	r1, r5
 800b946:	6872      	ldr	r2, [r6, #4]
 800b948:	2301      	movs	r3, #1
 800b94a:	f000 f85b 	bl	800ba04 <arm_radix8_butterfly_f32>
 800b94e:	f1b8 0f00 	cmp.w	r8, #0
 800b952:	d111      	bne.n	800b978 <arm_cfft_f32+0x64>
 800b954:	2f01      	cmp	r7, #1
 800b956:	d016      	beq.n	800b986 <arm_cfft_f32+0x72>
 800b958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b95c:	2d20      	cmp	r5, #32
 800b95e:	d031      	beq.n	800b9c4 <arm_cfft_f32+0xb0>
 800b960:	d948      	bls.n	800b9f4 <arm_cfft_f32+0xe0>
 800b962:	2d40      	cmp	r5, #64	@ 0x40
 800b964:	d0ed      	beq.n	800b942 <arm_cfft_f32+0x2e>
 800b966:	2d80      	cmp	r5, #128	@ 0x80
 800b968:	d1f1      	bne.n	800b94e <arm_cfft_f32+0x3a>
 800b96a:	4630      	mov	r0, r6
 800b96c:	4621      	mov	r1, r4
 800b96e:	f7ff fca7 	bl	800b2c0 <arm_cfft_radix8by2_f32>
 800b972:	f1b8 0f00 	cmp.w	r8, #0
 800b976:	d0ed      	beq.n	800b954 <arm_cfft_f32+0x40>
 800b978:	4620      	mov	r0, r4
 800b97a:	89b1      	ldrh	r1, [r6, #12]
 800b97c:	68b2      	ldr	r2, [r6, #8]
 800b97e:	f7f4 fcaf 	bl	80002e0 <arm_bitreversal_32>
 800b982:	2f01      	cmp	r7, #1
 800b984:	d1e8      	bne.n	800b958 <arm_cfft_f32+0x44>
 800b986:	ee07 5a90 	vmov	s15, r5
 800b98a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b98e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b992:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800b996:	2d00      	cmp	r5, #0
 800b998:	d0de      	beq.n	800b958 <arm_cfft_f32+0x44>
 800b99a:	f104 0108 	add.w	r1, r4, #8
 800b99e:	2300      	movs	r3, #0
 800b9a0:	ed11 7a02 	vldr	s14, [r1, #-8]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b9aa:	3108      	adds	r1, #8
 800b9ac:	429d      	cmp	r5, r3
 800b9ae:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b9b2:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b9b6:	ed01 7a04 	vstr	s14, [r1, #-16]
 800b9ba:	ed41 7a03 	vstr	s15, [r1, #-12]
 800b9be:	d1ef      	bne.n	800b9a0 <arm_cfft_f32+0x8c>
 800b9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9c4:	4630      	mov	r0, r6
 800b9c6:	4621      	mov	r1, r4
 800b9c8:	f7ff fd4c 	bl	800b464 <arm_cfft_radix8by4_f32>
 800b9cc:	e7bf      	b.n	800b94e <arm_cfft_f32+0x3a>
 800b9ce:	b1a5      	cbz	r5, 800b9fa <arm_cfft_f32+0xe6>
 800b9d0:	f101 030c 	add.w	r3, r1, #12
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	ed53 7a02 	vldr	s15, [r3, #-8]
 800b9da:	3201      	adds	r2, #1
 800b9dc:	3308      	adds	r3, #8
 800b9de:	eef1 7a67 	vneg.f32	s15, s15
 800b9e2:	4295      	cmp	r5, r2
 800b9e4:	ed43 7a04 	vstr	s15, [r3, #-16]
 800b9e8:	d1f5      	bne.n	800b9d6 <arm_cfft_f32+0xc2>
 800b9ea:	e79c      	b.n	800b926 <arm_cfft_f32+0x12>
 800b9ec:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800b9f0:	d0a7      	beq.n	800b942 <arm_cfft_f32+0x2e>
 800b9f2:	e7ac      	b.n	800b94e <arm_cfft_f32+0x3a>
 800b9f4:	2d10      	cmp	r5, #16
 800b9f6:	d0b8      	beq.n	800b96a <arm_cfft_f32+0x56>
 800b9f8:	e7a9      	b.n	800b94e <arm_cfft_f32+0x3a>
 800b9fa:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800b9fe:	d896      	bhi.n	800b92e <arm_cfft_f32+0x1a>
 800ba00:	e7ac      	b.n	800b95c <arm_cfft_f32+0x48>
 800ba02:	bf00      	nop

0800ba04 <arm_radix8_butterfly_f32>:
 800ba04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba08:	469e      	mov	lr, r3
 800ba0a:	1d03      	adds	r3, r0, #4
 800ba0c:	4683      	mov	fp, r0
 800ba0e:	468a      	mov	sl, r1
 800ba10:	4688      	mov	r8, r1
 800ba12:	469c      	mov	ip, r3
 800ba14:	ed2d 8b10 	vpush	{d8-d15}
 800ba18:	ed9f 9ac4 	vldr	s18, [pc, #784]	@ 800bd2c <arm_radix8_butterfly_f32+0x328>
 800ba1c:	b09f      	sub	sp, #124	@ 0x7c
 800ba1e:	921c      	str	r2, [sp, #112]	@ 0x70
 800ba20:	931d      	str	r3, [sp, #116]	@ 0x74
 800ba22:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 800ba26:	f04f 0900 	mov.w	r9, #0
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	930e      	str	r3, [sp, #56]	@ 0x38
 800ba2e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800ba32:	0051      	lsls	r1, r2, #1
 800ba34:	4608      	mov	r0, r1
 800ba36:	9103      	str	r1, [sp, #12]
 800ba38:	00d1      	lsls	r1, r2, #3
 800ba3a:	1885      	adds	r5, r0, r2
 800ba3c:	0110      	lsls	r0, r2, #4
 800ba3e:	eb0b 0601 	add.w	r6, fp, r1
 800ba42:	9101      	str	r1, [sp, #4]
 800ba44:	18ac      	adds	r4, r5, r2
 800ba46:	9002      	str	r0, [sp, #8]
 800ba48:	1877      	adds	r7, r6, r1
 800ba4a:	4611      	mov	r1, r2
 800ba4c:	4422      	add	r2, r4
 800ba4e:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800ba52:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800ba56:	1850      	adds	r0, r2, r1
 800ba58:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 800ba5c:	4401      	add	r1, r0
 800ba5e:	3204      	adds	r2, #4
 800ba60:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 800ba64:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 800ba68:	3104      	adds	r1, #4
 800ba6a:	ed1c 7a01 	vldr	s14, [ip, #-4]
 800ba6e:	44c1      	add	r9, r8
 800ba70:	edd4 6a00 	vldr	s13, [r4]
 800ba74:	ed97 6a00 	vldr	s12, [r7]
 800ba78:	45ca      	cmp	sl, r9
 800ba7a:	edd0 7a00 	vldr	s15, [r0]
 800ba7e:	ee37 5a66 	vsub.f32	s10, s14, s13
 800ba82:	edd6 5a00 	vldr	s11, [r6]
 800ba86:	ee37 2a26 	vadd.f32	s4, s14, s13
 800ba8a:	ee76 2a67 	vsub.f32	s5, s12, s15
 800ba8e:	edd5 6a00 	vldr	s13, [r5]
 800ba92:	ed12 7a01 	vldr	s14, [r2, #-4]
 800ba96:	ee76 4a27 	vadd.f32	s9, s12, s15
 800ba9a:	ed11 6a01 	vldr	s12, [r1, #-4]
 800ba9e:	ee75 1a87 	vadd.f32	s3, s11, s14
 800baa2:	ee36 4a86 	vadd.f32	s8, s13, s12
 800baa6:	ee72 7a24 	vadd.f32	s15, s4, s9
 800baaa:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800baae:	ee76 5ac6 	vsub.f32	s11, s13, s12
 800bab2:	ee31 6a84 	vadd.f32	s12, s3, s8
 800bab6:	ee32 2a64 	vsub.f32	s4, s4, s9
 800baba:	ee77 6a65 	vsub.f32	s13, s14, s11
 800babe:	ee77 4a86 	vadd.f32	s9, s15, s12
 800bac2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800bac6:	ee37 7a25 	vadd.f32	s14, s14, s11
 800baca:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800bace:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800bad2:	edc4 7a00 	vstr	s15, [r4]
 800bad6:	ee66 6a89 	vmul.f32	s13, s13, s18
 800bada:	edd6 5a01 	vldr	s11, [r6, #4]
 800bade:	ee27 6a09 	vmul.f32	s12, s14, s18
 800bae2:	edd5 3a01 	vldr	s7, [r5, #4]
 800bae6:	ed92 4a00 	vldr	s8, [r2]
 800baea:	ee35 1a26 	vadd.f32	s2, s10, s13
 800baee:	edd1 4a00 	vldr	s9, [r1]
 800baf2:	ee75 6a66 	vsub.f32	s13, s10, s13
 800baf6:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800bafa:	ed94 0a01 	vldr	s0, [r4, #4]
 800bafe:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800bb02:	ed9c 7a00 	vldr	s14, [ip]
 800bb06:	edd0 0a01 	vldr	s1, [r0, #4]
 800bb0a:	ee35 4a84 	vadd.f32	s8, s11, s8
 800bb0e:	ed97 5a01 	vldr	s10, [r7, #4]
 800bb12:	ee73 4aa4 	vadd.f32	s9, s7, s9
 800bb16:	ee73 5a27 	vadd.f32	s11, s6, s15
 800bb1a:	ee77 3a00 	vadd.f32	s7, s14, s0
 800bb1e:	ee33 3a67 	vsub.f32	s6, s6, s15
 800bb22:	ee37 7a40 	vsub.f32	s14, s14, s0
 800bb26:	ee35 0a20 	vadd.f32	s0, s10, s1
 800bb2a:	ee63 7a09 	vmul.f32	s15, s6, s18
 800bb2e:	ee35 5a60 	vsub.f32	s10, s10, s1
 800bb32:	ee33 3a80 	vadd.f32	s6, s7, s0
 800bb36:	ee74 0a24 	vadd.f32	s1, s8, s9
 800bb3a:	ee65 5a89 	vmul.f32	s11, s11, s18
 800bb3e:	ee74 4a64 	vsub.f32	s9, s8, s9
 800bb42:	ee33 4ac0 	vsub.f32	s8, s7, s0
 800bb46:	ee75 3a25 	vadd.f32	s7, s10, s11
 800bb4a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800bb4e:	ee37 5a27 	vadd.f32	s10, s14, s15
 800bb52:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb56:	ee32 7a86 	vadd.f32	s14, s5, s12
 800bb5a:	ee32 6ac6 	vsub.f32	s12, s5, s12
 800bb5e:	ee73 2a20 	vadd.f32	s5, s6, s1
 800bb62:	ee33 3a60 	vsub.f32	s6, s6, s1
 800bb66:	ee72 0a24 	vadd.f32	s1, s4, s9
 800bb6a:	edcc 2a00 	vstr	s5, [ip]
 800bb6e:	ee72 4a64 	vsub.f32	s9, s4, s9
 800bb72:	ed84 3a01 	vstr	s6, [r4, #4]
 800bb76:	ee74 2a61 	vsub.f32	s5, s8, s3
 800bb7a:	ee31 3a23 	vadd.f32	s6, s2, s7
 800bb7e:	edc7 0a00 	vstr	s1, [r7]
 800bb82:	ee31 1a63 	vsub.f32	s2, s2, s7
 800bb86:	edc0 4a00 	vstr	s9, [r0]
 800bb8a:	ee76 3aa5 	vadd.f32	s7, s13, s11
 800bb8e:	edc7 2a01 	vstr	s5, [r7, #4]
 800bb92:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800bb96:	441c      	add	r4, r3
 800bb98:	ee75 5a47 	vsub.f32	s11, s10, s14
 800bb9c:	449c      	add	ip, r3
 800bb9e:	ee35 5a07 	vadd.f32	s10, s10, s14
 800bba2:	441f      	add	r7, r3
 800bba4:	ee37 7ac6 	vsub.f32	s14, s15, s12
 800bba8:	ee34 4a21 	vadd.f32	s8, s8, s3
 800bbac:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bbb0:	ed80 4a01 	vstr	s8, [r0, #4]
 800bbb4:	4418      	add	r0, r3
 800bbb6:	ed86 3a00 	vstr	s6, [r6]
 800bbba:	ed01 1a01 	vstr	s2, [r1, #-4]
 800bbbe:	ed42 3a01 	vstr	s7, [r2, #-4]
 800bbc2:	edc5 6a00 	vstr	s13, [r5]
 800bbc6:	edc6 5a01 	vstr	s11, [r6, #4]
 800bbca:	441e      	add	r6, r3
 800bbcc:	ed81 5a00 	vstr	s10, [r1]
 800bbd0:	4419      	add	r1, r3
 800bbd2:	ed82 7a00 	vstr	s14, [r2]
 800bbd6:	441a      	add	r2, r3
 800bbd8:	edc5 7a01 	vstr	s15, [r5, #4]
 800bbdc:	441d      	add	r5, r3
 800bbde:	f63f af44 	bhi.w	800ba6a <arm_radix8_butterfly_f32+0x66>
 800bbe2:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800bbe4:	2f07      	cmp	r7, #7
 800bbe6:	f240 81e8 	bls.w	800bfba <arm_radix8_butterfly_f32+0x5b6>
 800bbea:	9903      	ldr	r1, [sp, #12]
 800bbec:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 800bbf0:	9e01      	ldr	r6, [sp, #4]
 800bbf2:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 800bbf6:	19ca      	adds	r2, r1, r7
 800bbf8:	1c4c      	adds	r4, r1, #1
 800bbfa:	eb05 010e 	add.w	r1, r5, lr
 800bbfe:	00ed      	lsls	r5, r5, #3
 800bc00:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800bc04:	3608      	adds	r6, #8
 800bc06:	950f      	str	r5, [sp, #60]	@ 0x3c
 800bc08:	eb01 050e 	add.w	r5, r1, lr
 800bc0c:	00c9      	lsls	r1, r1, #3
 800bc0e:	443c      	add	r4, r7
 800bc10:	9618      	str	r6, [sp, #96]	@ 0x60
 800bc12:	00ee      	lsls	r6, r5, #3
 800bc14:	460f      	mov	r7, r1
 800bc16:	9114      	str	r1, [sp, #80]	@ 0x50
 800bc18:	9902      	ldr	r1, [sp, #8]
 800bc1a:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800bc1e:	9611      	str	r6, [sp, #68]	@ 0x44
 800bc20:	00c0      	lsls	r0, r0, #3
 800bc22:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800bc24:	3108      	adds	r1, #8
 800bc26:	3404      	adds	r4, #4
 800bc28:	f04f 0901 	mov.w	r9, #1
 800bc2c:	9119      	str	r1, [sp, #100]	@ 0x64
 800bc2e:	eb05 010e 	add.w	r1, r5, lr
 800bc32:	4635      	mov	r5, r6
 800bc34:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bc36:	9301      	str	r3, [sp, #4]
 800bc38:	443d      	add	r5, r7
 800bc3a:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800bc3c:	9507      	str	r5, [sp, #28]
 800bc3e:	eb01 050e 	add.w	r5, r1, lr
 800bc42:	00c9      	lsls	r1, r1, #3
 800bc44:	19f7      	adds	r7, r6, r7
 800bc46:	00ed      	lsls	r5, r5, #3
 800bc48:	9110      	str	r1, [sp, #64]	@ 0x40
 800bc4a:	00d1      	lsls	r1, r2, #3
 800bc4c:	970a      	str	r7, [sp, #40]	@ 0x28
 800bc4e:	462f      	mov	r7, r5
 800bc50:	9515      	str	r5, [sp, #84]	@ 0x54
 800bc52:	0112      	lsls	r2, r2, #4
 800bc54:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800bc56:	19f4      	adds	r4, r6, r7
 800bc58:	320c      	adds	r2, #12
 800bc5a:	3108      	adds	r1, #8
 800bc5c:	1975      	adds	r5, r6, r5
 800bc5e:	9408      	str	r4, [sp, #32]
 800bc60:	9217      	str	r2, [sp, #92]	@ 0x5c
 800bc62:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800bc66:	9509      	str	r5, [sp, #36]	@ 0x24
 800bc68:	f100 020c 	add.w	r2, r0, #12
 800bc6c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800bc6e:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800bc70:	1975      	adds	r5, r6, r5
 800bc72:	9216      	str	r2, [sp, #88]	@ 0x58
 800bc74:	1932      	adds	r2, r6, r4
 800bc76:	911b      	str	r1, [sp, #108]	@ 0x6c
 800bc78:	9505      	str	r5, [sp, #20]
 800bc7a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 800bc7e:	0179      	lsls	r1, r7, #5
 800bc80:	9204      	str	r2, [sp, #16]
 800bc82:	1972      	adds	r2, r6, r5
 800bc84:	9412      	str	r4, [sp, #72]	@ 0x48
 800bc86:	9513      	str	r5, [sp, #76]	@ 0x4c
 800bc88:	9206      	str	r2, [sp, #24]
 800bc8a:	f101 0208 	add.w	r2, r1, #8
 800bc8e:	921a      	str	r2, [sp, #104]	@ 0x68
 800bc90:	2200      	movs	r2, #0
 800bc92:	f102 0108 	add.w	r1, r2, #8
 800bc96:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bc98:	46cc      	mov	ip, r9
 800bc9a:	460f      	mov	r7, r1
 800bc9c:	910c      	str	r1, [sp, #48]	@ 0x30
 800bc9e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bca0:	eb0b 0e07 	add.w	lr, fp, r7
 800bca4:	9f04      	ldr	r7, [sp, #16]
 800bca6:	188e      	adds	r6, r1, r2
 800bca8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800bcaa:	edd7 fa00 	vldr	s31, [r7]
 800bcae:	9f06      	ldr	r7, [sp, #24]
 800bcb0:	188d      	adds	r5, r1, r2
 800bcb2:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800bcb4:	445e      	add	r6, fp
 800bcb6:	ed97 fa00 	vldr	s30, [r7]
 800bcba:	445d      	add	r5, fp
 800bcbc:	9f05      	ldr	r7, [sp, #20]
 800bcbe:	188c      	adds	r4, r1, r2
 800bcc0:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800bcc2:	edd7 ea00 	vldr	s29, [r7]
 800bcc6:	445c      	add	r4, fp
 800bcc8:	9f07      	ldr	r7, [sp, #28]
 800bcca:	1888      	adds	r0, r1, r2
 800bccc:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800bcce:	ed97 ea00 	vldr	s28, [r7]
 800bcd2:	4458      	add	r0, fp
 800bcd4:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800bcd6:	4411      	add	r1, r2
 800bcd8:	441a      	add	r2, r3
 800bcda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcdc:	edd7 da00 	vldr	s27, [r7]
 800bce0:	4459      	add	r1, fp
 800bce2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800bce4:	445a      	add	r2, fp
 800bce6:	930d      	str	r3, [sp, #52]	@ 0x34
 800bce8:	ed97 da00 	vldr	s26, [r7]
 800bcec:	9f08      	ldr	r7, [sp, #32]
 800bcee:	edd7 ca00 	vldr	s25, [r7]
 800bcf2:	9f04      	ldr	r7, [sp, #16]
 800bcf4:	ed97 ca01 	vldr	s24, [r7, #4]
 800bcf8:	9f06      	ldr	r7, [sp, #24]
 800bcfa:	edd7 ba01 	vldr	s23, [r7, #4]
 800bcfe:	9f05      	ldr	r7, [sp, #20]
 800bd00:	ed97 ba01 	vldr	s22, [r7, #4]
 800bd04:	9f07      	ldr	r7, [sp, #28]
 800bd06:	edd7 aa01 	vldr	s21, [r7, #4]
 800bd0a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800bd0c:	ed97 aa01 	vldr	s20, [r7, #4]
 800bd10:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800bd12:	9b01      	ldr	r3, [sp, #4]
 800bd14:	edd7 7a01 	vldr	s15, [r7, #4]
 800bd18:	9f08      	ldr	r7, [sp, #32]
 800bd1a:	edcd 7a02 	vstr	s15, [sp, #8]
 800bd1e:	edd7 7a01 	vldr	s15, [r7, #4]
 800bd22:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 800bd24:	edcd 7a03 	vstr	s15, [sp, #12]
 800bd28:	e002      	b.n	800bd30 <arm_radix8_butterfly_f32+0x32c>
 800bd2a:	bf00      	nop
 800bd2c:	3f3504f3 	.word	0x3f3504f3
 800bd30:	ed90 2a00 	vldr	s4, [r0]
 800bd34:	44c4      	add	ip, r8
 800bd36:	ed96 7a00 	vldr	s14, [r6]
 800bd3a:	ed94 8a00 	vldr	s16, [r4]
 800bd3e:	45e2      	cmp	sl, ip
 800bd40:	ed52 7a01 	vldr	s15, [r2, #-4]
 800bd44:	ed95 5a00 	vldr	s10, [r5]
 800bd48:	ed51 5a01 	vldr	s11, [r1, #-4]
 800bd4c:	ee38 6a27 	vadd.f32	s12, s16, s15
 800bd50:	ed9e 1a00 	vldr	s2, [lr]
 800bd54:	ee78 2a67 	vsub.f32	s5, s16, s15
 800bd58:	ed17 4a01 	vldr	s8, [r7, #-4]
 800bd5c:	ee75 3a25 	vadd.f32	s7, s10, s11
 800bd60:	ee31 3a07 	vadd.f32	s6, s2, s14
 800bd64:	edde 4a01 	vldr	s9, [lr, #4]
 800bd68:	ee72 6a04 	vadd.f32	s13, s4, s8
 800bd6c:	ee75 5a65 	vsub.f32	s11, s10, s11
 800bd70:	ee73 1a06 	vadd.f32	s3, s6, s12
 800bd74:	ee33 5aa6 	vadd.f32	s10, s7, s13
 800bd78:	ee32 4a44 	vsub.f32	s8, s4, s8
 800bd7c:	ee31 1a47 	vsub.f32	s2, s2, s14
 800bd80:	ee31 7a85 	vadd.f32	s14, s3, s10
 800bd84:	ee75 7a84 	vadd.f32	s15, s11, s8
 800bd88:	ee33 3a46 	vsub.f32	s6, s6, s12
 800bd8c:	ed8e 7a00 	vstr	s14, [lr]
 800bd90:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800bd94:	ee67 7a89 	vmul.f32	s15, s15, s18
 800bd98:	ed90 2a01 	vldr	s4, [r0, #4]
 800bd9c:	ed95 7a01 	vldr	s14, [r5, #4]
 800bda0:	ee35 4ac4 	vsub.f32	s8, s11, s8
 800bda4:	ed91 6a00 	vldr	s12, [r1]
 800bda8:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800bdac:	edd7 8a00 	vldr	s17, [r7]
 800bdb0:	ee32 8ae7 	vsub.f32	s16, s5, s15
 800bdb4:	ee72 5aa7 	vadd.f32	s11, s5, s15
 800bdb8:	edd2 0a00 	vldr	s1, [r2]
 800bdbc:	ee72 6a68 	vsub.f32	s13, s4, s17
 800bdc0:	edd6 7a01 	vldr	s15, [r6, #4]
 800bdc4:	ee77 2a46 	vsub.f32	s5, s14, s12
 800bdc8:	ee37 0a06 	vadd.f32	s0, s14, s12
 800bdcc:	ed94 7a01 	vldr	s14, [r4, #4]
 800bdd0:	ee32 6a28 	vadd.f32	s12, s4, s17
 800bdd4:	ee72 9ae6 	vsub.f32	s19, s5, s13
 800bdd8:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800bddc:	ee72 2aa6 	vadd.f32	s5, s5, s13
 800bde0:	ee77 6a20 	vadd.f32	s13, s14, s1
 800bde4:	ee74 4ae7 	vsub.f32	s9, s9, s15
 800bde8:	ee37 7a60 	vsub.f32	s14, s14, s1
 800bdec:	ee24 4a09 	vmul.f32	s8, s8, s18
 800bdf0:	ee70 0a06 	vadd.f32	s1, s0, s12
 800bdf4:	ee69 7a89 	vmul.f32	s15, s19, s18
 800bdf8:	ee62 2a89 	vmul.f32	s5, s5, s18
 800bdfc:	ee30 6a46 	vsub.f32	s12, s0, s12
 800be00:	ee32 0a26 	vadd.f32	s0, s4, s13
 800be04:	ee72 6a66 	vsub.f32	s13, s4, s13
 800be08:	ee77 8a62 	vsub.f32	s17, s14, s5
 800be0c:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800be10:	ee74 7ae7 	vsub.f32	s15, s9, s15
 800be14:	ee77 4a22 	vadd.f32	s9, s14, s5
 800be18:	ee71 2a04 	vadd.f32	s5, s2, s8
 800be1c:	ee31 7a44 	vsub.f32	s14, s2, s8
 800be20:	ee30 1a60 	vsub.f32	s2, s0, s1
 800be24:	ee73 1a06 	vadd.f32	s3, s6, s12
 800be28:	ee33 6a46 	vsub.f32	s12, s6, s12
 800be2c:	ee36 3ae3 	vsub.f32	s6, s13, s7
 800be30:	ee37 4ac8 	vsub.f32	s8, s15, s16
 800be34:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800be38:	ee77 7a88 	vadd.f32	s15, s15, s16
 800be3c:	ee72 3a65 	vsub.f32	s7, s4, s11
 800be40:	ee2a 8a81 	vmul.f32	s16, s21, s2
 800be44:	ee72 5a25 	vadd.f32	s11, s4, s11
 800be48:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800be4c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800be50:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800be54:	ee77 2a28 	vadd.f32	s5, s14, s17
 800be58:	ee37 7a68 	vsub.f32	s14, s14, s17
 800be5c:	ee6e 8a05 	vmul.f32	s17, s28, s10
 800be60:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800be64:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800be68:	ee70 0a20 	vadd.f32	s1, s0, s1
 800be6c:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800be70:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800be74:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800be78:	edce 0a01 	vstr	s1, [lr, #4]
 800be7c:	ee38 8a88 	vadd.f32	s16, s17, s16
 800be80:	449e      	add	lr, r3
 800be82:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800be86:	ee31 5a45 	vsub.f32	s10, s2, s10
 800be8a:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800be8e:	ed86 8a00 	vstr	s16, [r6]
 800be92:	ee39 0a80 	vadd.f32	s0, s19, s0
 800be96:	ee33 3a61 	vsub.f32	s6, s6, s3
 800be9a:	ed86 5a01 	vstr	s10, [r6, #4]
 800be9e:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800bea2:	edcd 3a01 	vstr	s7, [sp, #4]
 800bea6:	ed9d 5a03 	vldr	s10, [sp, #12]
 800beaa:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800beae:	eddd 3a02 	vldr	s7, [sp, #8]
 800beb2:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800beb6:	ed84 0a00 	vstr	s0, [r4]
 800beba:	ee65 4a24 	vmul.f32	s9, s10, s9
 800bebe:	ed84 3a01 	vstr	s6, [r4, #4]
 800bec2:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800bec6:	ee23 6a86 	vmul.f32	s12, s7, s12
 800beca:	eddd 3a01 	vldr	s7, [sp, #4]
 800bece:	ee25 5a25 	vmul.f32	s10, s10, s11
 800bed2:	441e      	add	r6, r3
 800bed4:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800bed8:	441c      	add	r4, r3
 800beda:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800bede:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800bee2:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800bee6:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800beea:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800beee:	ee6d 6a26 	vmul.f32	s13, s26, s13
 800bef2:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800bef6:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800befa:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800befe:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800bf02:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800bf06:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800bf0a:	ee38 8a01 	vadd.f32	s16, s16, s2
 800bf0e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800bf12:	ee39 5a85 	vadd.f32	s10, s19, s10
 800bf16:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800bf1a:	ed02 8a01 	vstr	s16, [r2, #-4]
 800bf1e:	ee30 0a21 	vadd.f32	s0, s0, s3
 800bf22:	ed82 6a00 	vstr	s12, [r2]
 800bf26:	ee74 2a62 	vsub.f32	s5, s8, s5
 800bf2a:	edc5 0a00 	vstr	s1, [r5]
 800bf2e:	ee33 3a28 	vadd.f32	s6, s6, s17
 800bf32:	edc5 3a01 	vstr	s7, [r5, #4]
 800bf36:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800bf3a:	ed07 5a01 	vstr	s10, [r7, #-4]
 800bf3e:	edc7 4a00 	vstr	s9, [r7]
 800bf42:	441d      	add	r5, r3
 800bf44:	ed01 0a01 	vstr	s0, [r1, #-4]
 800bf48:	441a      	add	r2, r3
 800bf4a:	edc1 2a00 	vstr	s5, [r1]
 800bf4e:	441f      	add	r7, r3
 800bf50:	ed80 3a00 	vstr	s6, [r0]
 800bf54:	4419      	add	r1, r3
 800bf56:	ed80 7a01 	vstr	s14, [r0, #4]
 800bf5a:	4418      	add	r0, r3
 800bf5c:	f63f aee8 	bhi.w	800bd30 <arm_radix8_butterfly_f32+0x32c>
 800bf60:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bf62:	f109 0901 	add.w	r9, r9, #1
 800bf66:	9301      	str	r3, [sp, #4]
 800bf68:	9b04      	ldr	r3, [sp, #16]
 800bf6a:	4413      	add	r3, r2
 800bf6c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bf6e:	9304      	str	r3, [sp, #16]
 800bf70:	9b06      	ldr	r3, [sp, #24]
 800bf72:	4413      	add	r3, r2
 800bf74:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bf76:	9306      	str	r3, [sp, #24]
 800bf78:	9b05      	ldr	r3, [sp, #20]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bf7e:	9305      	str	r3, [sp, #20]
 800bf80:	9b07      	ldr	r3, [sp, #28]
 800bf82:	4413      	add	r3, r2
 800bf84:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf86:	9307      	str	r3, [sp, #28]
 800bf88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf8a:	4413      	add	r3, r2
 800bf8c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800bf8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf92:	4413      	add	r3, r2
 800bf94:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800bf96:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf98:	9b08      	ldr	r3, [sp, #32]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bf9e:	9308      	str	r3, [sp, #32]
 800bfa0:	3208      	adds	r2, #8
 800bfa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfa4:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bfa6:	4599      	cmp	r9, r3
 800bfa8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bfaa:	f47f ae72 	bne.w	800bc92 <arm_radix8_butterfly_f32+0x28e>
 800bfae:	f8bd e048 	ldrh.w	lr, [sp, #72]	@ 0x48
 800bfb2:	46c8      	mov	r8, r9
 800bfb4:	f8dd c074 	ldr.w	ip, [sp, #116]	@ 0x74
 800bfb8:	e533      	b.n	800ba22 <arm_radix8_butterfly_f32+0x1e>
 800bfba:	b01f      	add	sp, #124	@ 0x7c
 800bfbc:	ecbd 8b10 	vpop	{d8-d15}
 800bfc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bfc4 <std>:
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	b510      	push	{r4, lr}
 800bfc8:	4604      	mov	r4, r0
 800bfca:	e9c0 3300 	strd	r3, r3, [r0]
 800bfce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bfd2:	6083      	str	r3, [r0, #8]
 800bfd4:	8181      	strh	r1, [r0, #12]
 800bfd6:	6643      	str	r3, [r0, #100]	@ 0x64
 800bfd8:	81c2      	strh	r2, [r0, #14]
 800bfda:	6183      	str	r3, [r0, #24]
 800bfdc:	4619      	mov	r1, r3
 800bfde:	2208      	movs	r2, #8
 800bfe0:	305c      	adds	r0, #92	@ 0x5c
 800bfe2:	f000 f8c3 	bl	800c16c <memset>
 800bfe6:	4b0d      	ldr	r3, [pc, #52]	@ (800c01c <std+0x58>)
 800bfe8:	6263      	str	r3, [r4, #36]	@ 0x24
 800bfea:	4b0d      	ldr	r3, [pc, #52]	@ (800c020 <std+0x5c>)
 800bfec:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bfee:	4b0d      	ldr	r3, [pc, #52]	@ (800c024 <std+0x60>)
 800bff0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bff2:	4b0d      	ldr	r3, [pc, #52]	@ (800c028 <std+0x64>)
 800bff4:	6323      	str	r3, [r4, #48]	@ 0x30
 800bff6:	4b0d      	ldr	r3, [pc, #52]	@ (800c02c <std+0x68>)
 800bff8:	6224      	str	r4, [r4, #32]
 800bffa:	429c      	cmp	r4, r3
 800bffc:	d006      	beq.n	800c00c <std+0x48>
 800bffe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c002:	4294      	cmp	r4, r2
 800c004:	d002      	beq.n	800c00c <std+0x48>
 800c006:	33d0      	adds	r3, #208	@ 0xd0
 800c008:	429c      	cmp	r4, r3
 800c00a:	d105      	bne.n	800c018 <std+0x54>
 800c00c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c014:	f000 b8dc 	b.w	800c1d0 <__retarget_lock_init_recursive>
 800c018:	bd10      	pop	{r4, pc}
 800c01a:	bf00      	nop
 800c01c:	0800ca29 	.word	0x0800ca29
 800c020:	0800ca4b 	.word	0x0800ca4b
 800c024:	0800ca83 	.word	0x0800ca83
 800c028:	0800caa7 	.word	0x0800caa7
 800c02c:	240044a8 	.word	0x240044a8

0800c030 <stdio_exit_handler>:
 800c030:	4a02      	ldr	r2, [pc, #8]	@ (800c03c <stdio_exit_handler+0xc>)
 800c032:	4903      	ldr	r1, [pc, #12]	@ (800c040 <stdio_exit_handler+0x10>)
 800c034:	4803      	ldr	r0, [pc, #12]	@ (800c044 <stdio_exit_handler+0x14>)
 800c036:	f000 b869 	b.w	800c10c <_fwalk_sglue>
 800c03a:	bf00      	nop
 800c03c:	2400002c 	.word	0x2400002c
 800c040:	0800c9c1 	.word	0x0800c9c1
 800c044:	2400003c 	.word	0x2400003c

0800c048 <cleanup_stdio>:
 800c048:	6841      	ldr	r1, [r0, #4]
 800c04a:	4b0c      	ldr	r3, [pc, #48]	@ (800c07c <cleanup_stdio+0x34>)
 800c04c:	4299      	cmp	r1, r3
 800c04e:	b510      	push	{r4, lr}
 800c050:	4604      	mov	r4, r0
 800c052:	d001      	beq.n	800c058 <cleanup_stdio+0x10>
 800c054:	f000 fcb4 	bl	800c9c0 <_fflush_r>
 800c058:	68a1      	ldr	r1, [r4, #8]
 800c05a:	4b09      	ldr	r3, [pc, #36]	@ (800c080 <cleanup_stdio+0x38>)
 800c05c:	4299      	cmp	r1, r3
 800c05e:	d002      	beq.n	800c066 <cleanup_stdio+0x1e>
 800c060:	4620      	mov	r0, r4
 800c062:	f000 fcad 	bl	800c9c0 <_fflush_r>
 800c066:	68e1      	ldr	r1, [r4, #12]
 800c068:	4b06      	ldr	r3, [pc, #24]	@ (800c084 <cleanup_stdio+0x3c>)
 800c06a:	4299      	cmp	r1, r3
 800c06c:	d004      	beq.n	800c078 <cleanup_stdio+0x30>
 800c06e:	4620      	mov	r0, r4
 800c070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c074:	f000 bca4 	b.w	800c9c0 <_fflush_r>
 800c078:	bd10      	pop	{r4, pc}
 800c07a:	bf00      	nop
 800c07c:	240044a8 	.word	0x240044a8
 800c080:	24004510 	.word	0x24004510
 800c084:	24004578 	.word	0x24004578

0800c088 <global_stdio_init.part.0>:
 800c088:	b510      	push	{r4, lr}
 800c08a:	4b0b      	ldr	r3, [pc, #44]	@ (800c0b8 <global_stdio_init.part.0+0x30>)
 800c08c:	4c0b      	ldr	r4, [pc, #44]	@ (800c0bc <global_stdio_init.part.0+0x34>)
 800c08e:	4a0c      	ldr	r2, [pc, #48]	@ (800c0c0 <global_stdio_init.part.0+0x38>)
 800c090:	601a      	str	r2, [r3, #0]
 800c092:	4620      	mov	r0, r4
 800c094:	2200      	movs	r2, #0
 800c096:	2104      	movs	r1, #4
 800c098:	f7ff ff94 	bl	800bfc4 <std>
 800c09c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	2109      	movs	r1, #9
 800c0a4:	f7ff ff8e 	bl	800bfc4 <std>
 800c0a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c0ac:	2202      	movs	r2, #2
 800c0ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0b2:	2112      	movs	r1, #18
 800c0b4:	f7ff bf86 	b.w	800bfc4 <std>
 800c0b8:	240045e0 	.word	0x240045e0
 800c0bc:	240044a8 	.word	0x240044a8
 800c0c0:	0800c031 	.word	0x0800c031

0800c0c4 <__sfp_lock_acquire>:
 800c0c4:	4801      	ldr	r0, [pc, #4]	@ (800c0cc <__sfp_lock_acquire+0x8>)
 800c0c6:	f000 b884 	b.w	800c1d2 <__retarget_lock_acquire_recursive>
 800c0ca:	bf00      	nop
 800c0cc:	240045e5 	.word	0x240045e5

0800c0d0 <__sfp_lock_release>:
 800c0d0:	4801      	ldr	r0, [pc, #4]	@ (800c0d8 <__sfp_lock_release+0x8>)
 800c0d2:	f000 b87f 	b.w	800c1d4 <__retarget_lock_release_recursive>
 800c0d6:	bf00      	nop
 800c0d8:	240045e5 	.word	0x240045e5

0800c0dc <__sinit>:
 800c0dc:	b510      	push	{r4, lr}
 800c0de:	4604      	mov	r4, r0
 800c0e0:	f7ff fff0 	bl	800c0c4 <__sfp_lock_acquire>
 800c0e4:	6a23      	ldr	r3, [r4, #32]
 800c0e6:	b11b      	cbz	r3, 800c0f0 <__sinit+0x14>
 800c0e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0ec:	f7ff bff0 	b.w	800c0d0 <__sfp_lock_release>
 800c0f0:	4b04      	ldr	r3, [pc, #16]	@ (800c104 <__sinit+0x28>)
 800c0f2:	6223      	str	r3, [r4, #32]
 800c0f4:	4b04      	ldr	r3, [pc, #16]	@ (800c108 <__sinit+0x2c>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d1f5      	bne.n	800c0e8 <__sinit+0xc>
 800c0fc:	f7ff ffc4 	bl	800c088 <global_stdio_init.part.0>
 800c100:	e7f2      	b.n	800c0e8 <__sinit+0xc>
 800c102:	bf00      	nop
 800c104:	0800c049 	.word	0x0800c049
 800c108:	240045e0 	.word	0x240045e0

0800c10c <_fwalk_sglue>:
 800c10c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c110:	4607      	mov	r7, r0
 800c112:	4688      	mov	r8, r1
 800c114:	4614      	mov	r4, r2
 800c116:	2600      	movs	r6, #0
 800c118:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c11c:	f1b9 0901 	subs.w	r9, r9, #1
 800c120:	d505      	bpl.n	800c12e <_fwalk_sglue+0x22>
 800c122:	6824      	ldr	r4, [r4, #0]
 800c124:	2c00      	cmp	r4, #0
 800c126:	d1f7      	bne.n	800c118 <_fwalk_sglue+0xc>
 800c128:	4630      	mov	r0, r6
 800c12a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c12e:	89ab      	ldrh	r3, [r5, #12]
 800c130:	2b01      	cmp	r3, #1
 800c132:	d907      	bls.n	800c144 <_fwalk_sglue+0x38>
 800c134:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c138:	3301      	adds	r3, #1
 800c13a:	d003      	beq.n	800c144 <_fwalk_sglue+0x38>
 800c13c:	4629      	mov	r1, r5
 800c13e:	4638      	mov	r0, r7
 800c140:	47c0      	blx	r8
 800c142:	4306      	orrs	r6, r0
 800c144:	3568      	adds	r5, #104	@ 0x68
 800c146:	e7e9      	b.n	800c11c <_fwalk_sglue+0x10>

0800c148 <iprintf>:
 800c148:	b40f      	push	{r0, r1, r2, r3}
 800c14a:	b507      	push	{r0, r1, r2, lr}
 800c14c:	4906      	ldr	r1, [pc, #24]	@ (800c168 <iprintf+0x20>)
 800c14e:	ab04      	add	r3, sp, #16
 800c150:	6808      	ldr	r0, [r1, #0]
 800c152:	f853 2b04 	ldr.w	r2, [r3], #4
 800c156:	6881      	ldr	r1, [r0, #8]
 800c158:	9301      	str	r3, [sp, #4]
 800c15a:	f000 f865 	bl	800c228 <_vfiprintf_r>
 800c15e:	b003      	add	sp, #12
 800c160:	f85d eb04 	ldr.w	lr, [sp], #4
 800c164:	b004      	add	sp, #16
 800c166:	4770      	bx	lr
 800c168:	24000038 	.word	0x24000038

0800c16c <memset>:
 800c16c:	4402      	add	r2, r0
 800c16e:	4603      	mov	r3, r0
 800c170:	4293      	cmp	r3, r2
 800c172:	d100      	bne.n	800c176 <memset+0xa>
 800c174:	4770      	bx	lr
 800c176:	f803 1b01 	strb.w	r1, [r3], #1
 800c17a:	e7f9      	b.n	800c170 <memset+0x4>

0800c17c <__errno>:
 800c17c:	4b01      	ldr	r3, [pc, #4]	@ (800c184 <__errno+0x8>)
 800c17e:	6818      	ldr	r0, [r3, #0]
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop
 800c184:	24000038 	.word	0x24000038

0800c188 <__libc_init_array>:
 800c188:	b570      	push	{r4, r5, r6, lr}
 800c18a:	4d0d      	ldr	r5, [pc, #52]	@ (800c1c0 <__libc_init_array+0x38>)
 800c18c:	4c0d      	ldr	r4, [pc, #52]	@ (800c1c4 <__libc_init_array+0x3c>)
 800c18e:	1b64      	subs	r4, r4, r5
 800c190:	10a4      	asrs	r4, r4, #2
 800c192:	2600      	movs	r6, #0
 800c194:	42a6      	cmp	r6, r4
 800c196:	d109      	bne.n	800c1ac <__libc_init_array+0x24>
 800c198:	4d0b      	ldr	r5, [pc, #44]	@ (800c1c8 <__libc_init_array+0x40>)
 800c19a:	4c0c      	ldr	r4, [pc, #48]	@ (800c1cc <__libc_init_array+0x44>)
 800c19c:	f000 fe62 	bl	800ce64 <_init>
 800c1a0:	1b64      	subs	r4, r4, r5
 800c1a2:	10a4      	asrs	r4, r4, #2
 800c1a4:	2600      	movs	r6, #0
 800c1a6:	42a6      	cmp	r6, r4
 800c1a8:	d105      	bne.n	800c1b6 <__libc_init_array+0x2e>
 800c1aa:	bd70      	pop	{r4, r5, r6, pc}
 800c1ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1b0:	4798      	blx	r3
 800c1b2:	3601      	adds	r6, #1
 800c1b4:	e7ee      	b.n	800c194 <__libc_init_array+0xc>
 800c1b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1ba:	4798      	blx	r3
 800c1bc:	3601      	adds	r6, #1
 800c1be:	e7f2      	b.n	800c1a6 <__libc_init_array+0x1e>
 800c1c0:	0802035c 	.word	0x0802035c
 800c1c4:	0802035c 	.word	0x0802035c
 800c1c8:	0802035c 	.word	0x0802035c
 800c1cc:	08020360 	.word	0x08020360

0800c1d0 <__retarget_lock_init_recursive>:
 800c1d0:	4770      	bx	lr

0800c1d2 <__retarget_lock_acquire_recursive>:
 800c1d2:	4770      	bx	lr

0800c1d4 <__retarget_lock_release_recursive>:
 800c1d4:	4770      	bx	lr

0800c1d6 <__sfputc_r>:
 800c1d6:	6893      	ldr	r3, [r2, #8]
 800c1d8:	3b01      	subs	r3, #1
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	b410      	push	{r4}
 800c1de:	6093      	str	r3, [r2, #8]
 800c1e0:	da08      	bge.n	800c1f4 <__sfputc_r+0x1e>
 800c1e2:	6994      	ldr	r4, [r2, #24]
 800c1e4:	42a3      	cmp	r3, r4
 800c1e6:	db01      	blt.n	800c1ec <__sfputc_r+0x16>
 800c1e8:	290a      	cmp	r1, #10
 800c1ea:	d103      	bne.n	800c1f4 <__sfputc_r+0x1e>
 800c1ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1f0:	f000 bc5d 	b.w	800caae <__swbuf_r>
 800c1f4:	6813      	ldr	r3, [r2, #0]
 800c1f6:	1c58      	adds	r0, r3, #1
 800c1f8:	6010      	str	r0, [r2, #0]
 800c1fa:	7019      	strb	r1, [r3, #0]
 800c1fc:	4608      	mov	r0, r1
 800c1fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c202:	4770      	bx	lr

0800c204 <__sfputs_r>:
 800c204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c206:	4606      	mov	r6, r0
 800c208:	460f      	mov	r7, r1
 800c20a:	4614      	mov	r4, r2
 800c20c:	18d5      	adds	r5, r2, r3
 800c20e:	42ac      	cmp	r4, r5
 800c210:	d101      	bne.n	800c216 <__sfputs_r+0x12>
 800c212:	2000      	movs	r0, #0
 800c214:	e007      	b.n	800c226 <__sfputs_r+0x22>
 800c216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c21a:	463a      	mov	r2, r7
 800c21c:	4630      	mov	r0, r6
 800c21e:	f7ff ffda 	bl	800c1d6 <__sfputc_r>
 800c222:	1c43      	adds	r3, r0, #1
 800c224:	d1f3      	bne.n	800c20e <__sfputs_r+0xa>
 800c226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c228 <_vfiprintf_r>:
 800c228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c22c:	460d      	mov	r5, r1
 800c22e:	b09d      	sub	sp, #116	@ 0x74
 800c230:	4614      	mov	r4, r2
 800c232:	4698      	mov	r8, r3
 800c234:	4606      	mov	r6, r0
 800c236:	b118      	cbz	r0, 800c240 <_vfiprintf_r+0x18>
 800c238:	6a03      	ldr	r3, [r0, #32]
 800c23a:	b90b      	cbnz	r3, 800c240 <_vfiprintf_r+0x18>
 800c23c:	f7ff ff4e 	bl	800c0dc <__sinit>
 800c240:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c242:	07d9      	lsls	r1, r3, #31
 800c244:	d405      	bmi.n	800c252 <_vfiprintf_r+0x2a>
 800c246:	89ab      	ldrh	r3, [r5, #12]
 800c248:	059a      	lsls	r2, r3, #22
 800c24a:	d402      	bmi.n	800c252 <_vfiprintf_r+0x2a>
 800c24c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c24e:	f7ff ffc0 	bl	800c1d2 <__retarget_lock_acquire_recursive>
 800c252:	89ab      	ldrh	r3, [r5, #12]
 800c254:	071b      	lsls	r3, r3, #28
 800c256:	d501      	bpl.n	800c25c <_vfiprintf_r+0x34>
 800c258:	692b      	ldr	r3, [r5, #16]
 800c25a:	b99b      	cbnz	r3, 800c284 <_vfiprintf_r+0x5c>
 800c25c:	4629      	mov	r1, r5
 800c25e:	4630      	mov	r0, r6
 800c260:	f000 fc64 	bl	800cb2c <__swsetup_r>
 800c264:	b170      	cbz	r0, 800c284 <_vfiprintf_r+0x5c>
 800c266:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c268:	07dc      	lsls	r4, r3, #31
 800c26a:	d504      	bpl.n	800c276 <_vfiprintf_r+0x4e>
 800c26c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c270:	b01d      	add	sp, #116	@ 0x74
 800c272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c276:	89ab      	ldrh	r3, [r5, #12]
 800c278:	0598      	lsls	r0, r3, #22
 800c27a:	d4f7      	bmi.n	800c26c <_vfiprintf_r+0x44>
 800c27c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c27e:	f7ff ffa9 	bl	800c1d4 <__retarget_lock_release_recursive>
 800c282:	e7f3      	b.n	800c26c <_vfiprintf_r+0x44>
 800c284:	2300      	movs	r3, #0
 800c286:	9309      	str	r3, [sp, #36]	@ 0x24
 800c288:	2320      	movs	r3, #32
 800c28a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c28e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c292:	2330      	movs	r3, #48	@ 0x30
 800c294:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c444 <_vfiprintf_r+0x21c>
 800c298:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c29c:	f04f 0901 	mov.w	r9, #1
 800c2a0:	4623      	mov	r3, r4
 800c2a2:	469a      	mov	sl, r3
 800c2a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2a8:	b10a      	cbz	r2, 800c2ae <_vfiprintf_r+0x86>
 800c2aa:	2a25      	cmp	r2, #37	@ 0x25
 800c2ac:	d1f9      	bne.n	800c2a2 <_vfiprintf_r+0x7a>
 800c2ae:	ebba 0b04 	subs.w	fp, sl, r4
 800c2b2:	d00b      	beq.n	800c2cc <_vfiprintf_r+0xa4>
 800c2b4:	465b      	mov	r3, fp
 800c2b6:	4622      	mov	r2, r4
 800c2b8:	4629      	mov	r1, r5
 800c2ba:	4630      	mov	r0, r6
 800c2bc:	f7ff ffa2 	bl	800c204 <__sfputs_r>
 800c2c0:	3001      	adds	r0, #1
 800c2c2:	f000 80a7 	beq.w	800c414 <_vfiprintf_r+0x1ec>
 800c2c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2c8:	445a      	add	r2, fp
 800c2ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800c2cc:	f89a 3000 	ldrb.w	r3, [sl]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	f000 809f 	beq.w	800c414 <_vfiprintf_r+0x1ec>
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c2dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2e0:	f10a 0a01 	add.w	sl, sl, #1
 800c2e4:	9304      	str	r3, [sp, #16]
 800c2e6:	9307      	str	r3, [sp, #28]
 800c2e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c2ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800c2ee:	4654      	mov	r4, sl
 800c2f0:	2205      	movs	r2, #5
 800c2f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2f6:	4853      	ldr	r0, [pc, #332]	@ (800c444 <_vfiprintf_r+0x21c>)
 800c2f8:	f7f4 f852 	bl	80003a0 <memchr>
 800c2fc:	9a04      	ldr	r2, [sp, #16]
 800c2fe:	b9d8      	cbnz	r0, 800c338 <_vfiprintf_r+0x110>
 800c300:	06d1      	lsls	r1, r2, #27
 800c302:	bf44      	itt	mi
 800c304:	2320      	movmi	r3, #32
 800c306:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c30a:	0713      	lsls	r3, r2, #28
 800c30c:	bf44      	itt	mi
 800c30e:	232b      	movmi	r3, #43	@ 0x2b
 800c310:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c314:	f89a 3000 	ldrb.w	r3, [sl]
 800c318:	2b2a      	cmp	r3, #42	@ 0x2a
 800c31a:	d015      	beq.n	800c348 <_vfiprintf_r+0x120>
 800c31c:	9a07      	ldr	r2, [sp, #28]
 800c31e:	4654      	mov	r4, sl
 800c320:	2000      	movs	r0, #0
 800c322:	f04f 0c0a 	mov.w	ip, #10
 800c326:	4621      	mov	r1, r4
 800c328:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c32c:	3b30      	subs	r3, #48	@ 0x30
 800c32e:	2b09      	cmp	r3, #9
 800c330:	d94b      	bls.n	800c3ca <_vfiprintf_r+0x1a2>
 800c332:	b1b0      	cbz	r0, 800c362 <_vfiprintf_r+0x13a>
 800c334:	9207      	str	r2, [sp, #28]
 800c336:	e014      	b.n	800c362 <_vfiprintf_r+0x13a>
 800c338:	eba0 0308 	sub.w	r3, r0, r8
 800c33c:	fa09 f303 	lsl.w	r3, r9, r3
 800c340:	4313      	orrs	r3, r2
 800c342:	9304      	str	r3, [sp, #16]
 800c344:	46a2      	mov	sl, r4
 800c346:	e7d2      	b.n	800c2ee <_vfiprintf_r+0xc6>
 800c348:	9b03      	ldr	r3, [sp, #12]
 800c34a:	1d19      	adds	r1, r3, #4
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	9103      	str	r1, [sp, #12]
 800c350:	2b00      	cmp	r3, #0
 800c352:	bfbb      	ittet	lt
 800c354:	425b      	neglt	r3, r3
 800c356:	f042 0202 	orrlt.w	r2, r2, #2
 800c35a:	9307      	strge	r3, [sp, #28]
 800c35c:	9307      	strlt	r3, [sp, #28]
 800c35e:	bfb8      	it	lt
 800c360:	9204      	strlt	r2, [sp, #16]
 800c362:	7823      	ldrb	r3, [r4, #0]
 800c364:	2b2e      	cmp	r3, #46	@ 0x2e
 800c366:	d10a      	bne.n	800c37e <_vfiprintf_r+0x156>
 800c368:	7863      	ldrb	r3, [r4, #1]
 800c36a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c36c:	d132      	bne.n	800c3d4 <_vfiprintf_r+0x1ac>
 800c36e:	9b03      	ldr	r3, [sp, #12]
 800c370:	1d1a      	adds	r2, r3, #4
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	9203      	str	r2, [sp, #12]
 800c376:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c37a:	3402      	adds	r4, #2
 800c37c:	9305      	str	r3, [sp, #20]
 800c37e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c454 <_vfiprintf_r+0x22c>
 800c382:	7821      	ldrb	r1, [r4, #0]
 800c384:	2203      	movs	r2, #3
 800c386:	4650      	mov	r0, sl
 800c388:	f7f4 f80a 	bl	80003a0 <memchr>
 800c38c:	b138      	cbz	r0, 800c39e <_vfiprintf_r+0x176>
 800c38e:	9b04      	ldr	r3, [sp, #16]
 800c390:	eba0 000a 	sub.w	r0, r0, sl
 800c394:	2240      	movs	r2, #64	@ 0x40
 800c396:	4082      	lsls	r2, r0
 800c398:	4313      	orrs	r3, r2
 800c39a:	3401      	adds	r4, #1
 800c39c:	9304      	str	r3, [sp, #16]
 800c39e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3a2:	4829      	ldr	r0, [pc, #164]	@ (800c448 <_vfiprintf_r+0x220>)
 800c3a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c3a8:	2206      	movs	r2, #6
 800c3aa:	f7f3 fff9 	bl	80003a0 <memchr>
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	d03f      	beq.n	800c432 <_vfiprintf_r+0x20a>
 800c3b2:	4b26      	ldr	r3, [pc, #152]	@ (800c44c <_vfiprintf_r+0x224>)
 800c3b4:	bb1b      	cbnz	r3, 800c3fe <_vfiprintf_r+0x1d6>
 800c3b6:	9b03      	ldr	r3, [sp, #12]
 800c3b8:	3307      	adds	r3, #7
 800c3ba:	f023 0307 	bic.w	r3, r3, #7
 800c3be:	3308      	adds	r3, #8
 800c3c0:	9303      	str	r3, [sp, #12]
 800c3c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3c4:	443b      	add	r3, r7
 800c3c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3c8:	e76a      	b.n	800c2a0 <_vfiprintf_r+0x78>
 800c3ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3ce:	460c      	mov	r4, r1
 800c3d0:	2001      	movs	r0, #1
 800c3d2:	e7a8      	b.n	800c326 <_vfiprintf_r+0xfe>
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	3401      	adds	r4, #1
 800c3d8:	9305      	str	r3, [sp, #20]
 800c3da:	4619      	mov	r1, r3
 800c3dc:	f04f 0c0a 	mov.w	ip, #10
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3e6:	3a30      	subs	r2, #48	@ 0x30
 800c3e8:	2a09      	cmp	r2, #9
 800c3ea:	d903      	bls.n	800c3f4 <_vfiprintf_r+0x1cc>
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d0c6      	beq.n	800c37e <_vfiprintf_r+0x156>
 800c3f0:	9105      	str	r1, [sp, #20]
 800c3f2:	e7c4      	b.n	800c37e <_vfiprintf_r+0x156>
 800c3f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3f8:	4604      	mov	r4, r0
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	e7f0      	b.n	800c3e0 <_vfiprintf_r+0x1b8>
 800c3fe:	ab03      	add	r3, sp, #12
 800c400:	9300      	str	r3, [sp, #0]
 800c402:	462a      	mov	r2, r5
 800c404:	4b12      	ldr	r3, [pc, #72]	@ (800c450 <_vfiprintf_r+0x228>)
 800c406:	a904      	add	r1, sp, #16
 800c408:	4630      	mov	r0, r6
 800c40a:	f3af 8000 	nop.w
 800c40e:	4607      	mov	r7, r0
 800c410:	1c78      	adds	r0, r7, #1
 800c412:	d1d6      	bne.n	800c3c2 <_vfiprintf_r+0x19a>
 800c414:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c416:	07d9      	lsls	r1, r3, #31
 800c418:	d405      	bmi.n	800c426 <_vfiprintf_r+0x1fe>
 800c41a:	89ab      	ldrh	r3, [r5, #12]
 800c41c:	059a      	lsls	r2, r3, #22
 800c41e:	d402      	bmi.n	800c426 <_vfiprintf_r+0x1fe>
 800c420:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c422:	f7ff fed7 	bl	800c1d4 <__retarget_lock_release_recursive>
 800c426:	89ab      	ldrh	r3, [r5, #12]
 800c428:	065b      	lsls	r3, r3, #25
 800c42a:	f53f af1f 	bmi.w	800c26c <_vfiprintf_r+0x44>
 800c42e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c430:	e71e      	b.n	800c270 <_vfiprintf_r+0x48>
 800c432:	ab03      	add	r3, sp, #12
 800c434:	9300      	str	r3, [sp, #0]
 800c436:	462a      	mov	r2, r5
 800c438:	4b05      	ldr	r3, [pc, #20]	@ (800c450 <_vfiprintf_r+0x228>)
 800c43a:	a904      	add	r1, sp, #16
 800c43c:	4630      	mov	r0, r6
 800c43e:	f000 f91b 	bl	800c678 <_printf_i>
 800c442:	e7e4      	b.n	800c40e <_vfiprintf_r+0x1e6>
 800c444:	08020320 	.word	0x08020320
 800c448:	0802032a 	.word	0x0802032a
 800c44c:	00000000 	.word	0x00000000
 800c450:	0800c205 	.word	0x0800c205
 800c454:	08020326 	.word	0x08020326

0800c458 <sbrk_aligned>:
 800c458:	b570      	push	{r4, r5, r6, lr}
 800c45a:	4e0f      	ldr	r6, [pc, #60]	@ (800c498 <sbrk_aligned+0x40>)
 800c45c:	460c      	mov	r4, r1
 800c45e:	6831      	ldr	r1, [r6, #0]
 800c460:	4605      	mov	r5, r0
 800c462:	b911      	cbnz	r1, 800c46a <sbrk_aligned+0x12>
 800c464:	f000 fc70 	bl	800cd48 <_sbrk_r>
 800c468:	6030      	str	r0, [r6, #0]
 800c46a:	4621      	mov	r1, r4
 800c46c:	4628      	mov	r0, r5
 800c46e:	f000 fc6b 	bl	800cd48 <_sbrk_r>
 800c472:	1c43      	adds	r3, r0, #1
 800c474:	d103      	bne.n	800c47e <sbrk_aligned+0x26>
 800c476:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c47a:	4620      	mov	r0, r4
 800c47c:	bd70      	pop	{r4, r5, r6, pc}
 800c47e:	1cc4      	adds	r4, r0, #3
 800c480:	f024 0403 	bic.w	r4, r4, #3
 800c484:	42a0      	cmp	r0, r4
 800c486:	d0f8      	beq.n	800c47a <sbrk_aligned+0x22>
 800c488:	1a21      	subs	r1, r4, r0
 800c48a:	4628      	mov	r0, r5
 800c48c:	f000 fc5c 	bl	800cd48 <_sbrk_r>
 800c490:	3001      	adds	r0, #1
 800c492:	d1f2      	bne.n	800c47a <sbrk_aligned+0x22>
 800c494:	e7ef      	b.n	800c476 <sbrk_aligned+0x1e>
 800c496:	bf00      	nop
 800c498:	240045e8 	.word	0x240045e8

0800c49c <_malloc_r>:
 800c49c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4a0:	1ccd      	adds	r5, r1, #3
 800c4a2:	f025 0503 	bic.w	r5, r5, #3
 800c4a6:	3508      	adds	r5, #8
 800c4a8:	2d0c      	cmp	r5, #12
 800c4aa:	bf38      	it	cc
 800c4ac:	250c      	movcc	r5, #12
 800c4ae:	2d00      	cmp	r5, #0
 800c4b0:	4606      	mov	r6, r0
 800c4b2:	db01      	blt.n	800c4b8 <_malloc_r+0x1c>
 800c4b4:	42a9      	cmp	r1, r5
 800c4b6:	d904      	bls.n	800c4c2 <_malloc_r+0x26>
 800c4b8:	230c      	movs	r3, #12
 800c4ba:	6033      	str	r3, [r6, #0]
 800c4bc:	2000      	movs	r0, #0
 800c4be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c598 <_malloc_r+0xfc>
 800c4c6:	f000 faa3 	bl	800ca10 <__malloc_lock>
 800c4ca:	f8d8 3000 	ldr.w	r3, [r8]
 800c4ce:	461c      	mov	r4, r3
 800c4d0:	bb44      	cbnz	r4, 800c524 <_malloc_r+0x88>
 800c4d2:	4629      	mov	r1, r5
 800c4d4:	4630      	mov	r0, r6
 800c4d6:	f7ff ffbf 	bl	800c458 <sbrk_aligned>
 800c4da:	1c43      	adds	r3, r0, #1
 800c4dc:	4604      	mov	r4, r0
 800c4de:	d158      	bne.n	800c592 <_malloc_r+0xf6>
 800c4e0:	f8d8 4000 	ldr.w	r4, [r8]
 800c4e4:	4627      	mov	r7, r4
 800c4e6:	2f00      	cmp	r7, #0
 800c4e8:	d143      	bne.n	800c572 <_malloc_r+0xd6>
 800c4ea:	2c00      	cmp	r4, #0
 800c4ec:	d04b      	beq.n	800c586 <_malloc_r+0xea>
 800c4ee:	6823      	ldr	r3, [r4, #0]
 800c4f0:	4639      	mov	r1, r7
 800c4f2:	4630      	mov	r0, r6
 800c4f4:	eb04 0903 	add.w	r9, r4, r3
 800c4f8:	f000 fc26 	bl	800cd48 <_sbrk_r>
 800c4fc:	4581      	cmp	r9, r0
 800c4fe:	d142      	bne.n	800c586 <_malloc_r+0xea>
 800c500:	6821      	ldr	r1, [r4, #0]
 800c502:	1a6d      	subs	r5, r5, r1
 800c504:	4629      	mov	r1, r5
 800c506:	4630      	mov	r0, r6
 800c508:	f7ff ffa6 	bl	800c458 <sbrk_aligned>
 800c50c:	3001      	adds	r0, #1
 800c50e:	d03a      	beq.n	800c586 <_malloc_r+0xea>
 800c510:	6823      	ldr	r3, [r4, #0]
 800c512:	442b      	add	r3, r5
 800c514:	6023      	str	r3, [r4, #0]
 800c516:	f8d8 3000 	ldr.w	r3, [r8]
 800c51a:	685a      	ldr	r2, [r3, #4]
 800c51c:	bb62      	cbnz	r2, 800c578 <_malloc_r+0xdc>
 800c51e:	f8c8 7000 	str.w	r7, [r8]
 800c522:	e00f      	b.n	800c544 <_malloc_r+0xa8>
 800c524:	6822      	ldr	r2, [r4, #0]
 800c526:	1b52      	subs	r2, r2, r5
 800c528:	d420      	bmi.n	800c56c <_malloc_r+0xd0>
 800c52a:	2a0b      	cmp	r2, #11
 800c52c:	d917      	bls.n	800c55e <_malloc_r+0xc2>
 800c52e:	1961      	adds	r1, r4, r5
 800c530:	42a3      	cmp	r3, r4
 800c532:	6025      	str	r5, [r4, #0]
 800c534:	bf18      	it	ne
 800c536:	6059      	strne	r1, [r3, #4]
 800c538:	6863      	ldr	r3, [r4, #4]
 800c53a:	bf08      	it	eq
 800c53c:	f8c8 1000 	streq.w	r1, [r8]
 800c540:	5162      	str	r2, [r4, r5]
 800c542:	604b      	str	r3, [r1, #4]
 800c544:	4630      	mov	r0, r6
 800c546:	f000 fa69 	bl	800ca1c <__malloc_unlock>
 800c54a:	f104 000b 	add.w	r0, r4, #11
 800c54e:	1d23      	adds	r3, r4, #4
 800c550:	f020 0007 	bic.w	r0, r0, #7
 800c554:	1ac2      	subs	r2, r0, r3
 800c556:	bf1c      	itt	ne
 800c558:	1a1b      	subne	r3, r3, r0
 800c55a:	50a3      	strne	r3, [r4, r2]
 800c55c:	e7af      	b.n	800c4be <_malloc_r+0x22>
 800c55e:	6862      	ldr	r2, [r4, #4]
 800c560:	42a3      	cmp	r3, r4
 800c562:	bf0c      	ite	eq
 800c564:	f8c8 2000 	streq.w	r2, [r8]
 800c568:	605a      	strne	r2, [r3, #4]
 800c56a:	e7eb      	b.n	800c544 <_malloc_r+0xa8>
 800c56c:	4623      	mov	r3, r4
 800c56e:	6864      	ldr	r4, [r4, #4]
 800c570:	e7ae      	b.n	800c4d0 <_malloc_r+0x34>
 800c572:	463c      	mov	r4, r7
 800c574:	687f      	ldr	r7, [r7, #4]
 800c576:	e7b6      	b.n	800c4e6 <_malloc_r+0x4a>
 800c578:	461a      	mov	r2, r3
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	42a3      	cmp	r3, r4
 800c57e:	d1fb      	bne.n	800c578 <_malloc_r+0xdc>
 800c580:	2300      	movs	r3, #0
 800c582:	6053      	str	r3, [r2, #4]
 800c584:	e7de      	b.n	800c544 <_malloc_r+0xa8>
 800c586:	230c      	movs	r3, #12
 800c588:	6033      	str	r3, [r6, #0]
 800c58a:	4630      	mov	r0, r6
 800c58c:	f000 fa46 	bl	800ca1c <__malloc_unlock>
 800c590:	e794      	b.n	800c4bc <_malloc_r+0x20>
 800c592:	6005      	str	r5, [r0, #0]
 800c594:	e7d6      	b.n	800c544 <_malloc_r+0xa8>
 800c596:	bf00      	nop
 800c598:	240045ec 	.word	0x240045ec

0800c59c <_printf_common>:
 800c59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5a0:	4616      	mov	r6, r2
 800c5a2:	4698      	mov	r8, r3
 800c5a4:	688a      	ldr	r2, [r1, #8]
 800c5a6:	690b      	ldr	r3, [r1, #16]
 800c5a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	bfb8      	it	lt
 800c5b0:	4613      	movlt	r3, r2
 800c5b2:	6033      	str	r3, [r6, #0]
 800c5b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c5b8:	4607      	mov	r7, r0
 800c5ba:	460c      	mov	r4, r1
 800c5bc:	b10a      	cbz	r2, 800c5c2 <_printf_common+0x26>
 800c5be:	3301      	adds	r3, #1
 800c5c0:	6033      	str	r3, [r6, #0]
 800c5c2:	6823      	ldr	r3, [r4, #0]
 800c5c4:	0699      	lsls	r1, r3, #26
 800c5c6:	bf42      	ittt	mi
 800c5c8:	6833      	ldrmi	r3, [r6, #0]
 800c5ca:	3302      	addmi	r3, #2
 800c5cc:	6033      	strmi	r3, [r6, #0]
 800c5ce:	6825      	ldr	r5, [r4, #0]
 800c5d0:	f015 0506 	ands.w	r5, r5, #6
 800c5d4:	d106      	bne.n	800c5e4 <_printf_common+0x48>
 800c5d6:	f104 0a19 	add.w	sl, r4, #25
 800c5da:	68e3      	ldr	r3, [r4, #12]
 800c5dc:	6832      	ldr	r2, [r6, #0]
 800c5de:	1a9b      	subs	r3, r3, r2
 800c5e0:	42ab      	cmp	r3, r5
 800c5e2:	dc26      	bgt.n	800c632 <_printf_common+0x96>
 800c5e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c5e8:	6822      	ldr	r2, [r4, #0]
 800c5ea:	3b00      	subs	r3, #0
 800c5ec:	bf18      	it	ne
 800c5ee:	2301      	movne	r3, #1
 800c5f0:	0692      	lsls	r2, r2, #26
 800c5f2:	d42b      	bmi.n	800c64c <_printf_common+0xb0>
 800c5f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c5f8:	4641      	mov	r1, r8
 800c5fa:	4638      	mov	r0, r7
 800c5fc:	47c8      	blx	r9
 800c5fe:	3001      	adds	r0, #1
 800c600:	d01e      	beq.n	800c640 <_printf_common+0xa4>
 800c602:	6823      	ldr	r3, [r4, #0]
 800c604:	6922      	ldr	r2, [r4, #16]
 800c606:	f003 0306 	and.w	r3, r3, #6
 800c60a:	2b04      	cmp	r3, #4
 800c60c:	bf02      	ittt	eq
 800c60e:	68e5      	ldreq	r5, [r4, #12]
 800c610:	6833      	ldreq	r3, [r6, #0]
 800c612:	1aed      	subeq	r5, r5, r3
 800c614:	68a3      	ldr	r3, [r4, #8]
 800c616:	bf0c      	ite	eq
 800c618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c61c:	2500      	movne	r5, #0
 800c61e:	4293      	cmp	r3, r2
 800c620:	bfc4      	itt	gt
 800c622:	1a9b      	subgt	r3, r3, r2
 800c624:	18ed      	addgt	r5, r5, r3
 800c626:	2600      	movs	r6, #0
 800c628:	341a      	adds	r4, #26
 800c62a:	42b5      	cmp	r5, r6
 800c62c:	d11a      	bne.n	800c664 <_printf_common+0xc8>
 800c62e:	2000      	movs	r0, #0
 800c630:	e008      	b.n	800c644 <_printf_common+0xa8>
 800c632:	2301      	movs	r3, #1
 800c634:	4652      	mov	r2, sl
 800c636:	4641      	mov	r1, r8
 800c638:	4638      	mov	r0, r7
 800c63a:	47c8      	blx	r9
 800c63c:	3001      	adds	r0, #1
 800c63e:	d103      	bne.n	800c648 <_printf_common+0xac>
 800c640:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c648:	3501      	adds	r5, #1
 800c64a:	e7c6      	b.n	800c5da <_printf_common+0x3e>
 800c64c:	18e1      	adds	r1, r4, r3
 800c64e:	1c5a      	adds	r2, r3, #1
 800c650:	2030      	movs	r0, #48	@ 0x30
 800c652:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c656:	4422      	add	r2, r4
 800c658:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c65c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c660:	3302      	adds	r3, #2
 800c662:	e7c7      	b.n	800c5f4 <_printf_common+0x58>
 800c664:	2301      	movs	r3, #1
 800c666:	4622      	mov	r2, r4
 800c668:	4641      	mov	r1, r8
 800c66a:	4638      	mov	r0, r7
 800c66c:	47c8      	blx	r9
 800c66e:	3001      	adds	r0, #1
 800c670:	d0e6      	beq.n	800c640 <_printf_common+0xa4>
 800c672:	3601      	adds	r6, #1
 800c674:	e7d9      	b.n	800c62a <_printf_common+0x8e>
	...

0800c678 <_printf_i>:
 800c678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c67c:	7e0f      	ldrb	r7, [r1, #24]
 800c67e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c680:	2f78      	cmp	r7, #120	@ 0x78
 800c682:	4691      	mov	r9, r2
 800c684:	4680      	mov	r8, r0
 800c686:	460c      	mov	r4, r1
 800c688:	469a      	mov	sl, r3
 800c68a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c68e:	d807      	bhi.n	800c6a0 <_printf_i+0x28>
 800c690:	2f62      	cmp	r7, #98	@ 0x62
 800c692:	d80a      	bhi.n	800c6aa <_printf_i+0x32>
 800c694:	2f00      	cmp	r7, #0
 800c696:	f000 80d2 	beq.w	800c83e <_printf_i+0x1c6>
 800c69a:	2f58      	cmp	r7, #88	@ 0x58
 800c69c:	f000 80b9 	beq.w	800c812 <_printf_i+0x19a>
 800c6a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c6a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c6a8:	e03a      	b.n	800c720 <_printf_i+0xa8>
 800c6aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c6ae:	2b15      	cmp	r3, #21
 800c6b0:	d8f6      	bhi.n	800c6a0 <_printf_i+0x28>
 800c6b2:	a101      	add	r1, pc, #4	@ (adr r1, 800c6b8 <_printf_i+0x40>)
 800c6b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c6b8:	0800c711 	.word	0x0800c711
 800c6bc:	0800c725 	.word	0x0800c725
 800c6c0:	0800c6a1 	.word	0x0800c6a1
 800c6c4:	0800c6a1 	.word	0x0800c6a1
 800c6c8:	0800c6a1 	.word	0x0800c6a1
 800c6cc:	0800c6a1 	.word	0x0800c6a1
 800c6d0:	0800c725 	.word	0x0800c725
 800c6d4:	0800c6a1 	.word	0x0800c6a1
 800c6d8:	0800c6a1 	.word	0x0800c6a1
 800c6dc:	0800c6a1 	.word	0x0800c6a1
 800c6e0:	0800c6a1 	.word	0x0800c6a1
 800c6e4:	0800c825 	.word	0x0800c825
 800c6e8:	0800c74f 	.word	0x0800c74f
 800c6ec:	0800c7df 	.word	0x0800c7df
 800c6f0:	0800c6a1 	.word	0x0800c6a1
 800c6f4:	0800c6a1 	.word	0x0800c6a1
 800c6f8:	0800c847 	.word	0x0800c847
 800c6fc:	0800c6a1 	.word	0x0800c6a1
 800c700:	0800c74f 	.word	0x0800c74f
 800c704:	0800c6a1 	.word	0x0800c6a1
 800c708:	0800c6a1 	.word	0x0800c6a1
 800c70c:	0800c7e7 	.word	0x0800c7e7
 800c710:	6833      	ldr	r3, [r6, #0]
 800c712:	1d1a      	adds	r2, r3, #4
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	6032      	str	r2, [r6, #0]
 800c718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c71c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c720:	2301      	movs	r3, #1
 800c722:	e09d      	b.n	800c860 <_printf_i+0x1e8>
 800c724:	6833      	ldr	r3, [r6, #0]
 800c726:	6820      	ldr	r0, [r4, #0]
 800c728:	1d19      	adds	r1, r3, #4
 800c72a:	6031      	str	r1, [r6, #0]
 800c72c:	0606      	lsls	r6, r0, #24
 800c72e:	d501      	bpl.n	800c734 <_printf_i+0xbc>
 800c730:	681d      	ldr	r5, [r3, #0]
 800c732:	e003      	b.n	800c73c <_printf_i+0xc4>
 800c734:	0645      	lsls	r5, r0, #25
 800c736:	d5fb      	bpl.n	800c730 <_printf_i+0xb8>
 800c738:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c73c:	2d00      	cmp	r5, #0
 800c73e:	da03      	bge.n	800c748 <_printf_i+0xd0>
 800c740:	232d      	movs	r3, #45	@ 0x2d
 800c742:	426d      	negs	r5, r5
 800c744:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c748:	4859      	ldr	r0, [pc, #356]	@ (800c8b0 <_printf_i+0x238>)
 800c74a:	230a      	movs	r3, #10
 800c74c:	e011      	b.n	800c772 <_printf_i+0xfa>
 800c74e:	6821      	ldr	r1, [r4, #0]
 800c750:	6833      	ldr	r3, [r6, #0]
 800c752:	0608      	lsls	r0, r1, #24
 800c754:	f853 5b04 	ldr.w	r5, [r3], #4
 800c758:	d402      	bmi.n	800c760 <_printf_i+0xe8>
 800c75a:	0649      	lsls	r1, r1, #25
 800c75c:	bf48      	it	mi
 800c75e:	b2ad      	uxthmi	r5, r5
 800c760:	2f6f      	cmp	r7, #111	@ 0x6f
 800c762:	4853      	ldr	r0, [pc, #332]	@ (800c8b0 <_printf_i+0x238>)
 800c764:	6033      	str	r3, [r6, #0]
 800c766:	bf14      	ite	ne
 800c768:	230a      	movne	r3, #10
 800c76a:	2308      	moveq	r3, #8
 800c76c:	2100      	movs	r1, #0
 800c76e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c772:	6866      	ldr	r6, [r4, #4]
 800c774:	60a6      	str	r6, [r4, #8]
 800c776:	2e00      	cmp	r6, #0
 800c778:	bfa2      	ittt	ge
 800c77a:	6821      	ldrge	r1, [r4, #0]
 800c77c:	f021 0104 	bicge.w	r1, r1, #4
 800c780:	6021      	strge	r1, [r4, #0]
 800c782:	b90d      	cbnz	r5, 800c788 <_printf_i+0x110>
 800c784:	2e00      	cmp	r6, #0
 800c786:	d04b      	beq.n	800c820 <_printf_i+0x1a8>
 800c788:	4616      	mov	r6, r2
 800c78a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c78e:	fb03 5711 	mls	r7, r3, r1, r5
 800c792:	5dc7      	ldrb	r7, [r0, r7]
 800c794:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c798:	462f      	mov	r7, r5
 800c79a:	42bb      	cmp	r3, r7
 800c79c:	460d      	mov	r5, r1
 800c79e:	d9f4      	bls.n	800c78a <_printf_i+0x112>
 800c7a0:	2b08      	cmp	r3, #8
 800c7a2:	d10b      	bne.n	800c7bc <_printf_i+0x144>
 800c7a4:	6823      	ldr	r3, [r4, #0]
 800c7a6:	07df      	lsls	r7, r3, #31
 800c7a8:	d508      	bpl.n	800c7bc <_printf_i+0x144>
 800c7aa:	6923      	ldr	r3, [r4, #16]
 800c7ac:	6861      	ldr	r1, [r4, #4]
 800c7ae:	4299      	cmp	r1, r3
 800c7b0:	bfde      	ittt	le
 800c7b2:	2330      	movle	r3, #48	@ 0x30
 800c7b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c7b8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c7bc:	1b92      	subs	r2, r2, r6
 800c7be:	6122      	str	r2, [r4, #16]
 800c7c0:	f8cd a000 	str.w	sl, [sp]
 800c7c4:	464b      	mov	r3, r9
 800c7c6:	aa03      	add	r2, sp, #12
 800c7c8:	4621      	mov	r1, r4
 800c7ca:	4640      	mov	r0, r8
 800c7cc:	f7ff fee6 	bl	800c59c <_printf_common>
 800c7d0:	3001      	adds	r0, #1
 800c7d2:	d14a      	bne.n	800c86a <_printf_i+0x1f2>
 800c7d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c7d8:	b004      	add	sp, #16
 800c7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7de:	6823      	ldr	r3, [r4, #0]
 800c7e0:	f043 0320 	orr.w	r3, r3, #32
 800c7e4:	6023      	str	r3, [r4, #0]
 800c7e6:	4833      	ldr	r0, [pc, #204]	@ (800c8b4 <_printf_i+0x23c>)
 800c7e8:	2778      	movs	r7, #120	@ 0x78
 800c7ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c7ee:	6823      	ldr	r3, [r4, #0]
 800c7f0:	6831      	ldr	r1, [r6, #0]
 800c7f2:	061f      	lsls	r7, r3, #24
 800c7f4:	f851 5b04 	ldr.w	r5, [r1], #4
 800c7f8:	d402      	bmi.n	800c800 <_printf_i+0x188>
 800c7fa:	065f      	lsls	r7, r3, #25
 800c7fc:	bf48      	it	mi
 800c7fe:	b2ad      	uxthmi	r5, r5
 800c800:	6031      	str	r1, [r6, #0]
 800c802:	07d9      	lsls	r1, r3, #31
 800c804:	bf44      	itt	mi
 800c806:	f043 0320 	orrmi.w	r3, r3, #32
 800c80a:	6023      	strmi	r3, [r4, #0]
 800c80c:	b11d      	cbz	r5, 800c816 <_printf_i+0x19e>
 800c80e:	2310      	movs	r3, #16
 800c810:	e7ac      	b.n	800c76c <_printf_i+0xf4>
 800c812:	4827      	ldr	r0, [pc, #156]	@ (800c8b0 <_printf_i+0x238>)
 800c814:	e7e9      	b.n	800c7ea <_printf_i+0x172>
 800c816:	6823      	ldr	r3, [r4, #0]
 800c818:	f023 0320 	bic.w	r3, r3, #32
 800c81c:	6023      	str	r3, [r4, #0]
 800c81e:	e7f6      	b.n	800c80e <_printf_i+0x196>
 800c820:	4616      	mov	r6, r2
 800c822:	e7bd      	b.n	800c7a0 <_printf_i+0x128>
 800c824:	6833      	ldr	r3, [r6, #0]
 800c826:	6825      	ldr	r5, [r4, #0]
 800c828:	6961      	ldr	r1, [r4, #20]
 800c82a:	1d18      	adds	r0, r3, #4
 800c82c:	6030      	str	r0, [r6, #0]
 800c82e:	062e      	lsls	r6, r5, #24
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	d501      	bpl.n	800c838 <_printf_i+0x1c0>
 800c834:	6019      	str	r1, [r3, #0]
 800c836:	e002      	b.n	800c83e <_printf_i+0x1c6>
 800c838:	0668      	lsls	r0, r5, #25
 800c83a:	d5fb      	bpl.n	800c834 <_printf_i+0x1bc>
 800c83c:	8019      	strh	r1, [r3, #0]
 800c83e:	2300      	movs	r3, #0
 800c840:	6123      	str	r3, [r4, #16]
 800c842:	4616      	mov	r6, r2
 800c844:	e7bc      	b.n	800c7c0 <_printf_i+0x148>
 800c846:	6833      	ldr	r3, [r6, #0]
 800c848:	1d1a      	adds	r2, r3, #4
 800c84a:	6032      	str	r2, [r6, #0]
 800c84c:	681e      	ldr	r6, [r3, #0]
 800c84e:	6862      	ldr	r2, [r4, #4]
 800c850:	2100      	movs	r1, #0
 800c852:	4630      	mov	r0, r6
 800c854:	f7f3 fda4 	bl	80003a0 <memchr>
 800c858:	b108      	cbz	r0, 800c85e <_printf_i+0x1e6>
 800c85a:	1b80      	subs	r0, r0, r6
 800c85c:	6060      	str	r0, [r4, #4]
 800c85e:	6863      	ldr	r3, [r4, #4]
 800c860:	6123      	str	r3, [r4, #16]
 800c862:	2300      	movs	r3, #0
 800c864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c868:	e7aa      	b.n	800c7c0 <_printf_i+0x148>
 800c86a:	6923      	ldr	r3, [r4, #16]
 800c86c:	4632      	mov	r2, r6
 800c86e:	4649      	mov	r1, r9
 800c870:	4640      	mov	r0, r8
 800c872:	47d0      	blx	sl
 800c874:	3001      	adds	r0, #1
 800c876:	d0ad      	beq.n	800c7d4 <_printf_i+0x15c>
 800c878:	6823      	ldr	r3, [r4, #0]
 800c87a:	079b      	lsls	r3, r3, #30
 800c87c:	d413      	bmi.n	800c8a6 <_printf_i+0x22e>
 800c87e:	68e0      	ldr	r0, [r4, #12]
 800c880:	9b03      	ldr	r3, [sp, #12]
 800c882:	4298      	cmp	r0, r3
 800c884:	bfb8      	it	lt
 800c886:	4618      	movlt	r0, r3
 800c888:	e7a6      	b.n	800c7d8 <_printf_i+0x160>
 800c88a:	2301      	movs	r3, #1
 800c88c:	4632      	mov	r2, r6
 800c88e:	4649      	mov	r1, r9
 800c890:	4640      	mov	r0, r8
 800c892:	47d0      	blx	sl
 800c894:	3001      	adds	r0, #1
 800c896:	d09d      	beq.n	800c7d4 <_printf_i+0x15c>
 800c898:	3501      	adds	r5, #1
 800c89a:	68e3      	ldr	r3, [r4, #12]
 800c89c:	9903      	ldr	r1, [sp, #12]
 800c89e:	1a5b      	subs	r3, r3, r1
 800c8a0:	42ab      	cmp	r3, r5
 800c8a2:	dcf2      	bgt.n	800c88a <_printf_i+0x212>
 800c8a4:	e7eb      	b.n	800c87e <_printf_i+0x206>
 800c8a6:	2500      	movs	r5, #0
 800c8a8:	f104 0619 	add.w	r6, r4, #25
 800c8ac:	e7f5      	b.n	800c89a <_printf_i+0x222>
 800c8ae:	bf00      	nop
 800c8b0:	08020331 	.word	0x08020331
 800c8b4:	08020342 	.word	0x08020342

0800c8b8 <__sflush_r>:
 800c8b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8c0:	0716      	lsls	r6, r2, #28
 800c8c2:	4605      	mov	r5, r0
 800c8c4:	460c      	mov	r4, r1
 800c8c6:	d454      	bmi.n	800c972 <__sflush_r+0xba>
 800c8c8:	684b      	ldr	r3, [r1, #4]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	dc02      	bgt.n	800c8d4 <__sflush_r+0x1c>
 800c8ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	dd48      	ble.n	800c966 <__sflush_r+0xae>
 800c8d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c8d6:	2e00      	cmp	r6, #0
 800c8d8:	d045      	beq.n	800c966 <__sflush_r+0xae>
 800c8da:	2300      	movs	r3, #0
 800c8dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c8e0:	682f      	ldr	r7, [r5, #0]
 800c8e2:	6a21      	ldr	r1, [r4, #32]
 800c8e4:	602b      	str	r3, [r5, #0]
 800c8e6:	d030      	beq.n	800c94a <__sflush_r+0x92>
 800c8e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c8ea:	89a3      	ldrh	r3, [r4, #12]
 800c8ec:	0759      	lsls	r1, r3, #29
 800c8ee:	d505      	bpl.n	800c8fc <__sflush_r+0x44>
 800c8f0:	6863      	ldr	r3, [r4, #4]
 800c8f2:	1ad2      	subs	r2, r2, r3
 800c8f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c8f6:	b10b      	cbz	r3, 800c8fc <__sflush_r+0x44>
 800c8f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c8fa:	1ad2      	subs	r2, r2, r3
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c900:	6a21      	ldr	r1, [r4, #32]
 800c902:	4628      	mov	r0, r5
 800c904:	47b0      	blx	r6
 800c906:	1c43      	adds	r3, r0, #1
 800c908:	89a3      	ldrh	r3, [r4, #12]
 800c90a:	d106      	bne.n	800c91a <__sflush_r+0x62>
 800c90c:	6829      	ldr	r1, [r5, #0]
 800c90e:	291d      	cmp	r1, #29
 800c910:	d82b      	bhi.n	800c96a <__sflush_r+0xb2>
 800c912:	4a2a      	ldr	r2, [pc, #168]	@ (800c9bc <__sflush_r+0x104>)
 800c914:	410a      	asrs	r2, r1
 800c916:	07d6      	lsls	r6, r2, #31
 800c918:	d427      	bmi.n	800c96a <__sflush_r+0xb2>
 800c91a:	2200      	movs	r2, #0
 800c91c:	6062      	str	r2, [r4, #4]
 800c91e:	04d9      	lsls	r1, r3, #19
 800c920:	6922      	ldr	r2, [r4, #16]
 800c922:	6022      	str	r2, [r4, #0]
 800c924:	d504      	bpl.n	800c930 <__sflush_r+0x78>
 800c926:	1c42      	adds	r2, r0, #1
 800c928:	d101      	bne.n	800c92e <__sflush_r+0x76>
 800c92a:	682b      	ldr	r3, [r5, #0]
 800c92c:	b903      	cbnz	r3, 800c930 <__sflush_r+0x78>
 800c92e:	6560      	str	r0, [r4, #84]	@ 0x54
 800c930:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c932:	602f      	str	r7, [r5, #0]
 800c934:	b1b9      	cbz	r1, 800c966 <__sflush_r+0xae>
 800c936:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c93a:	4299      	cmp	r1, r3
 800c93c:	d002      	beq.n	800c944 <__sflush_r+0x8c>
 800c93e:	4628      	mov	r0, r5
 800c940:	f000 fa24 	bl	800cd8c <_free_r>
 800c944:	2300      	movs	r3, #0
 800c946:	6363      	str	r3, [r4, #52]	@ 0x34
 800c948:	e00d      	b.n	800c966 <__sflush_r+0xae>
 800c94a:	2301      	movs	r3, #1
 800c94c:	4628      	mov	r0, r5
 800c94e:	47b0      	blx	r6
 800c950:	4602      	mov	r2, r0
 800c952:	1c50      	adds	r0, r2, #1
 800c954:	d1c9      	bne.n	800c8ea <__sflush_r+0x32>
 800c956:	682b      	ldr	r3, [r5, #0]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d0c6      	beq.n	800c8ea <__sflush_r+0x32>
 800c95c:	2b1d      	cmp	r3, #29
 800c95e:	d001      	beq.n	800c964 <__sflush_r+0xac>
 800c960:	2b16      	cmp	r3, #22
 800c962:	d11e      	bne.n	800c9a2 <__sflush_r+0xea>
 800c964:	602f      	str	r7, [r5, #0]
 800c966:	2000      	movs	r0, #0
 800c968:	e022      	b.n	800c9b0 <__sflush_r+0xf8>
 800c96a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c96e:	b21b      	sxth	r3, r3
 800c970:	e01b      	b.n	800c9aa <__sflush_r+0xf2>
 800c972:	690f      	ldr	r7, [r1, #16]
 800c974:	2f00      	cmp	r7, #0
 800c976:	d0f6      	beq.n	800c966 <__sflush_r+0xae>
 800c978:	0793      	lsls	r3, r2, #30
 800c97a:	680e      	ldr	r6, [r1, #0]
 800c97c:	bf08      	it	eq
 800c97e:	694b      	ldreq	r3, [r1, #20]
 800c980:	600f      	str	r7, [r1, #0]
 800c982:	bf18      	it	ne
 800c984:	2300      	movne	r3, #0
 800c986:	eba6 0807 	sub.w	r8, r6, r7
 800c98a:	608b      	str	r3, [r1, #8]
 800c98c:	f1b8 0f00 	cmp.w	r8, #0
 800c990:	dde9      	ble.n	800c966 <__sflush_r+0xae>
 800c992:	6a21      	ldr	r1, [r4, #32]
 800c994:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c996:	4643      	mov	r3, r8
 800c998:	463a      	mov	r2, r7
 800c99a:	4628      	mov	r0, r5
 800c99c:	47b0      	blx	r6
 800c99e:	2800      	cmp	r0, #0
 800c9a0:	dc08      	bgt.n	800c9b4 <__sflush_r+0xfc>
 800c9a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9aa:	81a3      	strh	r3, [r4, #12]
 800c9ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9b4:	4407      	add	r7, r0
 800c9b6:	eba8 0800 	sub.w	r8, r8, r0
 800c9ba:	e7e7      	b.n	800c98c <__sflush_r+0xd4>
 800c9bc:	dfbffffe 	.word	0xdfbffffe

0800c9c0 <_fflush_r>:
 800c9c0:	b538      	push	{r3, r4, r5, lr}
 800c9c2:	690b      	ldr	r3, [r1, #16]
 800c9c4:	4605      	mov	r5, r0
 800c9c6:	460c      	mov	r4, r1
 800c9c8:	b913      	cbnz	r3, 800c9d0 <_fflush_r+0x10>
 800c9ca:	2500      	movs	r5, #0
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	bd38      	pop	{r3, r4, r5, pc}
 800c9d0:	b118      	cbz	r0, 800c9da <_fflush_r+0x1a>
 800c9d2:	6a03      	ldr	r3, [r0, #32]
 800c9d4:	b90b      	cbnz	r3, 800c9da <_fflush_r+0x1a>
 800c9d6:	f7ff fb81 	bl	800c0dc <__sinit>
 800c9da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d0f3      	beq.n	800c9ca <_fflush_r+0xa>
 800c9e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c9e4:	07d0      	lsls	r0, r2, #31
 800c9e6:	d404      	bmi.n	800c9f2 <_fflush_r+0x32>
 800c9e8:	0599      	lsls	r1, r3, #22
 800c9ea:	d402      	bmi.n	800c9f2 <_fflush_r+0x32>
 800c9ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9ee:	f7ff fbf0 	bl	800c1d2 <__retarget_lock_acquire_recursive>
 800c9f2:	4628      	mov	r0, r5
 800c9f4:	4621      	mov	r1, r4
 800c9f6:	f7ff ff5f 	bl	800c8b8 <__sflush_r>
 800c9fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c9fc:	07da      	lsls	r2, r3, #31
 800c9fe:	4605      	mov	r5, r0
 800ca00:	d4e4      	bmi.n	800c9cc <_fflush_r+0xc>
 800ca02:	89a3      	ldrh	r3, [r4, #12]
 800ca04:	059b      	lsls	r3, r3, #22
 800ca06:	d4e1      	bmi.n	800c9cc <_fflush_r+0xc>
 800ca08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca0a:	f7ff fbe3 	bl	800c1d4 <__retarget_lock_release_recursive>
 800ca0e:	e7dd      	b.n	800c9cc <_fflush_r+0xc>

0800ca10 <__malloc_lock>:
 800ca10:	4801      	ldr	r0, [pc, #4]	@ (800ca18 <__malloc_lock+0x8>)
 800ca12:	f7ff bbde 	b.w	800c1d2 <__retarget_lock_acquire_recursive>
 800ca16:	bf00      	nop
 800ca18:	240045e4 	.word	0x240045e4

0800ca1c <__malloc_unlock>:
 800ca1c:	4801      	ldr	r0, [pc, #4]	@ (800ca24 <__malloc_unlock+0x8>)
 800ca1e:	f7ff bbd9 	b.w	800c1d4 <__retarget_lock_release_recursive>
 800ca22:	bf00      	nop
 800ca24:	240045e4 	.word	0x240045e4

0800ca28 <__sread>:
 800ca28:	b510      	push	{r4, lr}
 800ca2a:	460c      	mov	r4, r1
 800ca2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca30:	f000 f978 	bl	800cd24 <_read_r>
 800ca34:	2800      	cmp	r0, #0
 800ca36:	bfab      	itete	ge
 800ca38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ca3a:	89a3      	ldrhlt	r3, [r4, #12]
 800ca3c:	181b      	addge	r3, r3, r0
 800ca3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ca42:	bfac      	ite	ge
 800ca44:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ca46:	81a3      	strhlt	r3, [r4, #12]
 800ca48:	bd10      	pop	{r4, pc}

0800ca4a <__swrite>:
 800ca4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca4e:	461f      	mov	r7, r3
 800ca50:	898b      	ldrh	r3, [r1, #12]
 800ca52:	05db      	lsls	r3, r3, #23
 800ca54:	4605      	mov	r5, r0
 800ca56:	460c      	mov	r4, r1
 800ca58:	4616      	mov	r6, r2
 800ca5a:	d505      	bpl.n	800ca68 <__swrite+0x1e>
 800ca5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca60:	2302      	movs	r3, #2
 800ca62:	2200      	movs	r2, #0
 800ca64:	f000 f94c 	bl	800cd00 <_lseek_r>
 800ca68:	89a3      	ldrh	r3, [r4, #12]
 800ca6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ca72:	81a3      	strh	r3, [r4, #12]
 800ca74:	4632      	mov	r2, r6
 800ca76:	463b      	mov	r3, r7
 800ca78:	4628      	mov	r0, r5
 800ca7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca7e:	f000 b973 	b.w	800cd68 <_write_r>

0800ca82 <__sseek>:
 800ca82:	b510      	push	{r4, lr}
 800ca84:	460c      	mov	r4, r1
 800ca86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca8a:	f000 f939 	bl	800cd00 <_lseek_r>
 800ca8e:	1c43      	adds	r3, r0, #1
 800ca90:	89a3      	ldrh	r3, [r4, #12]
 800ca92:	bf15      	itete	ne
 800ca94:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ca96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ca9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ca9e:	81a3      	strheq	r3, [r4, #12]
 800caa0:	bf18      	it	ne
 800caa2:	81a3      	strhne	r3, [r4, #12]
 800caa4:	bd10      	pop	{r4, pc}

0800caa6 <__sclose>:
 800caa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caaa:	f000 b8f7 	b.w	800cc9c <_close_r>

0800caae <__swbuf_r>:
 800caae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cab0:	460e      	mov	r6, r1
 800cab2:	4614      	mov	r4, r2
 800cab4:	4605      	mov	r5, r0
 800cab6:	b118      	cbz	r0, 800cac0 <__swbuf_r+0x12>
 800cab8:	6a03      	ldr	r3, [r0, #32]
 800caba:	b90b      	cbnz	r3, 800cac0 <__swbuf_r+0x12>
 800cabc:	f7ff fb0e 	bl	800c0dc <__sinit>
 800cac0:	69a3      	ldr	r3, [r4, #24]
 800cac2:	60a3      	str	r3, [r4, #8]
 800cac4:	89a3      	ldrh	r3, [r4, #12]
 800cac6:	071a      	lsls	r2, r3, #28
 800cac8:	d501      	bpl.n	800cace <__swbuf_r+0x20>
 800caca:	6923      	ldr	r3, [r4, #16]
 800cacc:	b943      	cbnz	r3, 800cae0 <__swbuf_r+0x32>
 800cace:	4621      	mov	r1, r4
 800cad0:	4628      	mov	r0, r5
 800cad2:	f000 f82b 	bl	800cb2c <__swsetup_r>
 800cad6:	b118      	cbz	r0, 800cae0 <__swbuf_r+0x32>
 800cad8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800cadc:	4638      	mov	r0, r7
 800cade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cae0:	6823      	ldr	r3, [r4, #0]
 800cae2:	6922      	ldr	r2, [r4, #16]
 800cae4:	1a98      	subs	r0, r3, r2
 800cae6:	6963      	ldr	r3, [r4, #20]
 800cae8:	b2f6      	uxtb	r6, r6
 800caea:	4283      	cmp	r3, r0
 800caec:	4637      	mov	r7, r6
 800caee:	dc05      	bgt.n	800cafc <__swbuf_r+0x4e>
 800caf0:	4621      	mov	r1, r4
 800caf2:	4628      	mov	r0, r5
 800caf4:	f7ff ff64 	bl	800c9c0 <_fflush_r>
 800caf8:	2800      	cmp	r0, #0
 800cafa:	d1ed      	bne.n	800cad8 <__swbuf_r+0x2a>
 800cafc:	68a3      	ldr	r3, [r4, #8]
 800cafe:	3b01      	subs	r3, #1
 800cb00:	60a3      	str	r3, [r4, #8]
 800cb02:	6823      	ldr	r3, [r4, #0]
 800cb04:	1c5a      	adds	r2, r3, #1
 800cb06:	6022      	str	r2, [r4, #0]
 800cb08:	701e      	strb	r6, [r3, #0]
 800cb0a:	6962      	ldr	r2, [r4, #20]
 800cb0c:	1c43      	adds	r3, r0, #1
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d004      	beq.n	800cb1c <__swbuf_r+0x6e>
 800cb12:	89a3      	ldrh	r3, [r4, #12]
 800cb14:	07db      	lsls	r3, r3, #31
 800cb16:	d5e1      	bpl.n	800cadc <__swbuf_r+0x2e>
 800cb18:	2e0a      	cmp	r6, #10
 800cb1a:	d1df      	bne.n	800cadc <__swbuf_r+0x2e>
 800cb1c:	4621      	mov	r1, r4
 800cb1e:	4628      	mov	r0, r5
 800cb20:	f7ff ff4e 	bl	800c9c0 <_fflush_r>
 800cb24:	2800      	cmp	r0, #0
 800cb26:	d0d9      	beq.n	800cadc <__swbuf_r+0x2e>
 800cb28:	e7d6      	b.n	800cad8 <__swbuf_r+0x2a>
	...

0800cb2c <__swsetup_r>:
 800cb2c:	b538      	push	{r3, r4, r5, lr}
 800cb2e:	4b29      	ldr	r3, [pc, #164]	@ (800cbd4 <__swsetup_r+0xa8>)
 800cb30:	4605      	mov	r5, r0
 800cb32:	6818      	ldr	r0, [r3, #0]
 800cb34:	460c      	mov	r4, r1
 800cb36:	b118      	cbz	r0, 800cb40 <__swsetup_r+0x14>
 800cb38:	6a03      	ldr	r3, [r0, #32]
 800cb3a:	b90b      	cbnz	r3, 800cb40 <__swsetup_r+0x14>
 800cb3c:	f7ff face 	bl	800c0dc <__sinit>
 800cb40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb44:	0719      	lsls	r1, r3, #28
 800cb46:	d422      	bmi.n	800cb8e <__swsetup_r+0x62>
 800cb48:	06da      	lsls	r2, r3, #27
 800cb4a:	d407      	bmi.n	800cb5c <__swsetup_r+0x30>
 800cb4c:	2209      	movs	r2, #9
 800cb4e:	602a      	str	r2, [r5, #0]
 800cb50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb54:	81a3      	strh	r3, [r4, #12]
 800cb56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cb5a:	e033      	b.n	800cbc4 <__swsetup_r+0x98>
 800cb5c:	0758      	lsls	r0, r3, #29
 800cb5e:	d512      	bpl.n	800cb86 <__swsetup_r+0x5a>
 800cb60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb62:	b141      	cbz	r1, 800cb76 <__swsetup_r+0x4a>
 800cb64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb68:	4299      	cmp	r1, r3
 800cb6a:	d002      	beq.n	800cb72 <__swsetup_r+0x46>
 800cb6c:	4628      	mov	r0, r5
 800cb6e:	f000 f90d 	bl	800cd8c <_free_r>
 800cb72:	2300      	movs	r3, #0
 800cb74:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb76:	89a3      	ldrh	r3, [r4, #12]
 800cb78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cb7c:	81a3      	strh	r3, [r4, #12]
 800cb7e:	2300      	movs	r3, #0
 800cb80:	6063      	str	r3, [r4, #4]
 800cb82:	6923      	ldr	r3, [r4, #16]
 800cb84:	6023      	str	r3, [r4, #0]
 800cb86:	89a3      	ldrh	r3, [r4, #12]
 800cb88:	f043 0308 	orr.w	r3, r3, #8
 800cb8c:	81a3      	strh	r3, [r4, #12]
 800cb8e:	6923      	ldr	r3, [r4, #16]
 800cb90:	b94b      	cbnz	r3, 800cba6 <__swsetup_r+0x7a>
 800cb92:	89a3      	ldrh	r3, [r4, #12]
 800cb94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cb98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb9c:	d003      	beq.n	800cba6 <__swsetup_r+0x7a>
 800cb9e:	4621      	mov	r1, r4
 800cba0:	4628      	mov	r0, r5
 800cba2:	f000 f83f 	bl	800cc24 <__smakebuf_r>
 800cba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbaa:	f013 0201 	ands.w	r2, r3, #1
 800cbae:	d00a      	beq.n	800cbc6 <__swsetup_r+0x9a>
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	60a2      	str	r2, [r4, #8]
 800cbb4:	6962      	ldr	r2, [r4, #20]
 800cbb6:	4252      	negs	r2, r2
 800cbb8:	61a2      	str	r2, [r4, #24]
 800cbba:	6922      	ldr	r2, [r4, #16]
 800cbbc:	b942      	cbnz	r2, 800cbd0 <__swsetup_r+0xa4>
 800cbbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cbc2:	d1c5      	bne.n	800cb50 <__swsetup_r+0x24>
 800cbc4:	bd38      	pop	{r3, r4, r5, pc}
 800cbc6:	0799      	lsls	r1, r3, #30
 800cbc8:	bf58      	it	pl
 800cbca:	6962      	ldrpl	r2, [r4, #20]
 800cbcc:	60a2      	str	r2, [r4, #8]
 800cbce:	e7f4      	b.n	800cbba <__swsetup_r+0x8e>
 800cbd0:	2000      	movs	r0, #0
 800cbd2:	e7f7      	b.n	800cbc4 <__swsetup_r+0x98>
 800cbd4:	24000038 	.word	0x24000038

0800cbd8 <__swhatbuf_r>:
 800cbd8:	b570      	push	{r4, r5, r6, lr}
 800cbda:	460c      	mov	r4, r1
 800cbdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbe0:	2900      	cmp	r1, #0
 800cbe2:	b096      	sub	sp, #88	@ 0x58
 800cbe4:	4615      	mov	r5, r2
 800cbe6:	461e      	mov	r6, r3
 800cbe8:	da0d      	bge.n	800cc06 <__swhatbuf_r+0x2e>
 800cbea:	89a3      	ldrh	r3, [r4, #12]
 800cbec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cbf0:	f04f 0100 	mov.w	r1, #0
 800cbf4:	bf14      	ite	ne
 800cbf6:	2340      	movne	r3, #64	@ 0x40
 800cbf8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cbfc:	2000      	movs	r0, #0
 800cbfe:	6031      	str	r1, [r6, #0]
 800cc00:	602b      	str	r3, [r5, #0]
 800cc02:	b016      	add	sp, #88	@ 0x58
 800cc04:	bd70      	pop	{r4, r5, r6, pc}
 800cc06:	466a      	mov	r2, sp
 800cc08:	f000 f858 	bl	800ccbc <_fstat_r>
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	dbec      	blt.n	800cbea <__swhatbuf_r+0x12>
 800cc10:	9901      	ldr	r1, [sp, #4]
 800cc12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cc16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cc1a:	4259      	negs	r1, r3
 800cc1c:	4159      	adcs	r1, r3
 800cc1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc22:	e7eb      	b.n	800cbfc <__swhatbuf_r+0x24>

0800cc24 <__smakebuf_r>:
 800cc24:	898b      	ldrh	r3, [r1, #12]
 800cc26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc28:	079d      	lsls	r5, r3, #30
 800cc2a:	4606      	mov	r6, r0
 800cc2c:	460c      	mov	r4, r1
 800cc2e:	d507      	bpl.n	800cc40 <__smakebuf_r+0x1c>
 800cc30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cc34:	6023      	str	r3, [r4, #0]
 800cc36:	6123      	str	r3, [r4, #16]
 800cc38:	2301      	movs	r3, #1
 800cc3a:	6163      	str	r3, [r4, #20]
 800cc3c:	b003      	add	sp, #12
 800cc3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc40:	ab01      	add	r3, sp, #4
 800cc42:	466a      	mov	r2, sp
 800cc44:	f7ff ffc8 	bl	800cbd8 <__swhatbuf_r>
 800cc48:	9f00      	ldr	r7, [sp, #0]
 800cc4a:	4605      	mov	r5, r0
 800cc4c:	4639      	mov	r1, r7
 800cc4e:	4630      	mov	r0, r6
 800cc50:	f7ff fc24 	bl	800c49c <_malloc_r>
 800cc54:	b948      	cbnz	r0, 800cc6a <__smakebuf_r+0x46>
 800cc56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc5a:	059a      	lsls	r2, r3, #22
 800cc5c:	d4ee      	bmi.n	800cc3c <__smakebuf_r+0x18>
 800cc5e:	f023 0303 	bic.w	r3, r3, #3
 800cc62:	f043 0302 	orr.w	r3, r3, #2
 800cc66:	81a3      	strh	r3, [r4, #12]
 800cc68:	e7e2      	b.n	800cc30 <__smakebuf_r+0xc>
 800cc6a:	89a3      	ldrh	r3, [r4, #12]
 800cc6c:	6020      	str	r0, [r4, #0]
 800cc6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc72:	81a3      	strh	r3, [r4, #12]
 800cc74:	9b01      	ldr	r3, [sp, #4]
 800cc76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cc7a:	b15b      	cbz	r3, 800cc94 <__smakebuf_r+0x70>
 800cc7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc80:	4630      	mov	r0, r6
 800cc82:	f000 f82d 	bl	800cce0 <_isatty_r>
 800cc86:	b128      	cbz	r0, 800cc94 <__smakebuf_r+0x70>
 800cc88:	89a3      	ldrh	r3, [r4, #12]
 800cc8a:	f023 0303 	bic.w	r3, r3, #3
 800cc8e:	f043 0301 	orr.w	r3, r3, #1
 800cc92:	81a3      	strh	r3, [r4, #12]
 800cc94:	89a3      	ldrh	r3, [r4, #12]
 800cc96:	431d      	orrs	r5, r3
 800cc98:	81a5      	strh	r5, [r4, #12]
 800cc9a:	e7cf      	b.n	800cc3c <__smakebuf_r+0x18>

0800cc9c <_close_r>:
 800cc9c:	b538      	push	{r3, r4, r5, lr}
 800cc9e:	4d06      	ldr	r5, [pc, #24]	@ (800ccb8 <_close_r+0x1c>)
 800cca0:	2300      	movs	r3, #0
 800cca2:	4604      	mov	r4, r0
 800cca4:	4608      	mov	r0, r1
 800cca6:	602b      	str	r3, [r5, #0]
 800cca8:	f7f4 f9b4 	bl	8001014 <_close>
 800ccac:	1c43      	adds	r3, r0, #1
 800ccae:	d102      	bne.n	800ccb6 <_close_r+0x1a>
 800ccb0:	682b      	ldr	r3, [r5, #0]
 800ccb2:	b103      	cbz	r3, 800ccb6 <_close_r+0x1a>
 800ccb4:	6023      	str	r3, [r4, #0]
 800ccb6:	bd38      	pop	{r3, r4, r5, pc}
 800ccb8:	240045f0 	.word	0x240045f0

0800ccbc <_fstat_r>:
 800ccbc:	b538      	push	{r3, r4, r5, lr}
 800ccbe:	4d07      	ldr	r5, [pc, #28]	@ (800ccdc <_fstat_r+0x20>)
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	4604      	mov	r4, r0
 800ccc4:	4608      	mov	r0, r1
 800ccc6:	4611      	mov	r1, r2
 800ccc8:	602b      	str	r3, [r5, #0]
 800ccca:	f7f4 f9af 	bl	800102c <_fstat>
 800ccce:	1c43      	adds	r3, r0, #1
 800ccd0:	d102      	bne.n	800ccd8 <_fstat_r+0x1c>
 800ccd2:	682b      	ldr	r3, [r5, #0]
 800ccd4:	b103      	cbz	r3, 800ccd8 <_fstat_r+0x1c>
 800ccd6:	6023      	str	r3, [r4, #0]
 800ccd8:	bd38      	pop	{r3, r4, r5, pc}
 800ccda:	bf00      	nop
 800ccdc:	240045f0 	.word	0x240045f0

0800cce0 <_isatty_r>:
 800cce0:	b538      	push	{r3, r4, r5, lr}
 800cce2:	4d06      	ldr	r5, [pc, #24]	@ (800ccfc <_isatty_r+0x1c>)
 800cce4:	2300      	movs	r3, #0
 800cce6:	4604      	mov	r4, r0
 800cce8:	4608      	mov	r0, r1
 800ccea:	602b      	str	r3, [r5, #0]
 800ccec:	f7f4 f9ae 	bl	800104c <_isatty>
 800ccf0:	1c43      	adds	r3, r0, #1
 800ccf2:	d102      	bne.n	800ccfa <_isatty_r+0x1a>
 800ccf4:	682b      	ldr	r3, [r5, #0]
 800ccf6:	b103      	cbz	r3, 800ccfa <_isatty_r+0x1a>
 800ccf8:	6023      	str	r3, [r4, #0]
 800ccfa:	bd38      	pop	{r3, r4, r5, pc}
 800ccfc:	240045f0 	.word	0x240045f0

0800cd00 <_lseek_r>:
 800cd00:	b538      	push	{r3, r4, r5, lr}
 800cd02:	4d07      	ldr	r5, [pc, #28]	@ (800cd20 <_lseek_r+0x20>)
 800cd04:	4604      	mov	r4, r0
 800cd06:	4608      	mov	r0, r1
 800cd08:	4611      	mov	r1, r2
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	602a      	str	r2, [r5, #0]
 800cd0e:	461a      	mov	r2, r3
 800cd10:	f7f4 f9a7 	bl	8001062 <_lseek>
 800cd14:	1c43      	adds	r3, r0, #1
 800cd16:	d102      	bne.n	800cd1e <_lseek_r+0x1e>
 800cd18:	682b      	ldr	r3, [r5, #0]
 800cd1a:	b103      	cbz	r3, 800cd1e <_lseek_r+0x1e>
 800cd1c:	6023      	str	r3, [r4, #0]
 800cd1e:	bd38      	pop	{r3, r4, r5, pc}
 800cd20:	240045f0 	.word	0x240045f0

0800cd24 <_read_r>:
 800cd24:	b538      	push	{r3, r4, r5, lr}
 800cd26:	4d07      	ldr	r5, [pc, #28]	@ (800cd44 <_read_r+0x20>)
 800cd28:	4604      	mov	r4, r0
 800cd2a:	4608      	mov	r0, r1
 800cd2c:	4611      	mov	r1, r2
 800cd2e:	2200      	movs	r2, #0
 800cd30:	602a      	str	r2, [r5, #0]
 800cd32:	461a      	mov	r2, r3
 800cd34:	f7f4 f935 	bl	8000fa2 <_read>
 800cd38:	1c43      	adds	r3, r0, #1
 800cd3a:	d102      	bne.n	800cd42 <_read_r+0x1e>
 800cd3c:	682b      	ldr	r3, [r5, #0]
 800cd3e:	b103      	cbz	r3, 800cd42 <_read_r+0x1e>
 800cd40:	6023      	str	r3, [r4, #0]
 800cd42:	bd38      	pop	{r3, r4, r5, pc}
 800cd44:	240045f0 	.word	0x240045f0

0800cd48 <_sbrk_r>:
 800cd48:	b538      	push	{r3, r4, r5, lr}
 800cd4a:	4d06      	ldr	r5, [pc, #24]	@ (800cd64 <_sbrk_r+0x1c>)
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	4604      	mov	r4, r0
 800cd50:	4608      	mov	r0, r1
 800cd52:	602b      	str	r3, [r5, #0]
 800cd54:	f7f4 f992 	bl	800107c <_sbrk>
 800cd58:	1c43      	adds	r3, r0, #1
 800cd5a:	d102      	bne.n	800cd62 <_sbrk_r+0x1a>
 800cd5c:	682b      	ldr	r3, [r5, #0]
 800cd5e:	b103      	cbz	r3, 800cd62 <_sbrk_r+0x1a>
 800cd60:	6023      	str	r3, [r4, #0]
 800cd62:	bd38      	pop	{r3, r4, r5, pc}
 800cd64:	240045f0 	.word	0x240045f0

0800cd68 <_write_r>:
 800cd68:	b538      	push	{r3, r4, r5, lr}
 800cd6a:	4d07      	ldr	r5, [pc, #28]	@ (800cd88 <_write_r+0x20>)
 800cd6c:	4604      	mov	r4, r0
 800cd6e:	4608      	mov	r0, r1
 800cd70:	4611      	mov	r1, r2
 800cd72:	2200      	movs	r2, #0
 800cd74:	602a      	str	r2, [r5, #0]
 800cd76:	461a      	mov	r2, r3
 800cd78:	f7f4 f930 	bl	8000fdc <_write>
 800cd7c:	1c43      	adds	r3, r0, #1
 800cd7e:	d102      	bne.n	800cd86 <_write_r+0x1e>
 800cd80:	682b      	ldr	r3, [r5, #0]
 800cd82:	b103      	cbz	r3, 800cd86 <_write_r+0x1e>
 800cd84:	6023      	str	r3, [r4, #0]
 800cd86:	bd38      	pop	{r3, r4, r5, pc}
 800cd88:	240045f0 	.word	0x240045f0

0800cd8c <_free_r>:
 800cd8c:	b538      	push	{r3, r4, r5, lr}
 800cd8e:	4605      	mov	r5, r0
 800cd90:	2900      	cmp	r1, #0
 800cd92:	d041      	beq.n	800ce18 <_free_r+0x8c>
 800cd94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd98:	1f0c      	subs	r4, r1, #4
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	bfb8      	it	lt
 800cd9e:	18e4      	addlt	r4, r4, r3
 800cda0:	f7ff fe36 	bl	800ca10 <__malloc_lock>
 800cda4:	4a1d      	ldr	r2, [pc, #116]	@ (800ce1c <_free_r+0x90>)
 800cda6:	6813      	ldr	r3, [r2, #0]
 800cda8:	b933      	cbnz	r3, 800cdb8 <_free_r+0x2c>
 800cdaa:	6063      	str	r3, [r4, #4]
 800cdac:	6014      	str	r4, [r2, #0]
 800cdae:	4628      	mov	r0, r5
 800cdb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdb4:	f7ff be32 	b.w	800ca1c <__malloc_unlock>
 800cdb8:	42a3      	cmp	r3, r4
 800cdba:	d908      	bls.n	800cdce <_free_r+0x42>
 800cdbc:	6820      	ldr	r0, [r4, #0]
 800cdbe:	1821      	adds	r1, r4, r0
 800cdc0:	428b      	cmp	r3, r1
 800cdc2:	bf01      	itttt	eq
 800cdc4:	6819      	ldreq	r1, [r3, #0]
 800cdc6:	685b      	ldreq	r3, [r3, #4]
 800cdc8:	1809      	addeq	r1, r1, r0
 800cdca:	6021      	streq	r1, [r4, #0]
 800cdcc:	e7ed      	b.n	800cdaa <_free_r+0x1e>
 800cdce:	461a      	mov	r2, r3
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	b10b      	cbz	r3, 800cdd8 <_free_r+0x4c>
 800cdd4:	42a3      	cmp	r3, r4
 800cdd6:	d9fa      	bls.n	800cdce <_free_r+0x42>
 800cdd8:	6811      	ldr	r1, [r2, #0]
 800cdda:	1850      	adds	r0, r2, r1
 800cddc:	42a0      	cmp	r0, r4
 800cdde:	d10b      	bne.n	800cdf8 <_free_r+0x6c>
 800cde0:	6820      	ldr	r0, [r4, #0]
 800cde2:	4401      	add	r1, r0
 800cde4:	1850      	adds	r0, r2, r1
 800cde6:	4283      	cmp	r3, r0
 800cde8:	6011      	str	r1, [r2, #0]
 800cdea:	d1e0      	bne.n	800cdae <_free_r+0x22>
 800cdec:	6818      	ldr	r0, [r3, #0]
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	6053      	str	r3, [r2, #4]
 800cdf2:	4408      	add	r0, r1
 800cdf4:	6010      	str	r0, [r2, #0]
 800cdf6:	e7da      	b.n	800cdae <_free_r+0x22>
 800cdf8:	d902      	bls.n	800ce00 <_free_r+0x74>
 800cdfa:	230c      	movs	r3, #12
 800cdfc:	602b      	str	r3, [r5, #0]
 800cdfe:	e7d6      	b.n	800cdae <_free_r+0x22>
 800ce00:	6820      	ldr	r0, [r4, #0]
 800ce02:	1821      	adds	r1, r4, r0
 800ce04:	428b      	cmp	r3, r1
 800ce06:	bf04      	itt	eq
 800ce08:	6819      	ldreq	r1, [r3, #0]
 800ce0a:	685b      	ldreq	r3, [r3, #4]
 800ce0c:	6063      	str	r3, [r4, #4]
 800ce0e:	bf04      	itt	eq
 800ce10:	1809      	addeq	r1, r1, r0
 800ce12:	6021      	streq	r1, [r4, #0]
 800ce14:	6054      	str	r4, [r2, #4]
 800ce16:	e7ca      	b.n	800cdae <_free_r+0x22>
 800ce18:	bd38      	pop	{r3, r4, r5, pc}
 800ce1a:	bf00      	nop
 800ce1c:	240045ec 	.word	0x240045ec

0800ce20 <sqrtf>:
 800ce20:	b508      	push	{r3, lr}
 800ce22:	ed2d 8b02 	vpush	{d8}
 800ce26:	eeb0 8a40 	vmov.f32	s16, s0
 800ce2a:	f000 f817 	bl	800ce5c <__ieee754_sqrtf>
 800ce2e:	eeb4 8a48 	vcmp.f32	s16, s16
 800ce32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce36:	d60c      	bvs.n	800ce52 <sqrtf+0x32>
 800ce38:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ce58 <sqrtf+0x38>
 800ce3c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ce40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce44:	d505      	bpl.n	800ce52 <sqrtf+0x32>
 800ce46:	f7ff f999 	bl	800c17c <__errno>
 800ce4a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ce4e:	2321      	movs	r3, #33	@ 0x21
 800ce50:	6003      	str	r3, [r0, #0]
 800ce52:	ecbd 8b02 	vpop	{d8}
 800ce56:	bd08      	pop	{r3, pc}
 800ce58:	00000000 	.word	0x00000000

0800ce5c <__ieee754_sqrtf>:
 800ce5c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ce60:	4770      	bx	lr
	...

0800ce64 <_init>:
 800ce64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce66:	bf00      	nop
 800ce68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce6a:	bc08      	pop	{r3}
 800ce6c:	469e      	mov	lr, r3
 800ce6e:	4770      	bx	lr

0800ce70 <_fini>:
 800ce70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce72:	bf00      	nop
 800ce74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce76:	bc08      	pop	{r3}
 800ce78:	469e      	mov	lr, r3
 800ce7a:	4770      	bx	lr
