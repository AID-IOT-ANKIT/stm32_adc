
adc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbe4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000134d8  0800ce84  0800ce84  0000de84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802035c  0802035c  0002135c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020364  08020364  00021364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08020368  08020368  00021368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  0802036c  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000456c  24000088  080203f4  00022088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240045f4  080203f4  000225f4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00022088  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d9c4  00000000  00000000  000220b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003569  00000000  00000000  0003fa7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001680  00000000  00000000  00042fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000010df  00000000  00000000  00044668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a94b  00000000  00000000  00045747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001dcc4  00000000  00000000  00080092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017bfc6  00000000  00000000  0009dd56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b3  00000000  00000000  00219d1c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000067b4  00000000  00000000  00219dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  00220584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    0000318f  00000000  00000000  002205e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000060  00000000  00000000  00223775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ce6c 	.word	0x0800ce6c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	0800ce6c 	.word	0x0800ce6c

080002e0 <arm_bitreversal_32>:
 80002e0:	1c4b      	adds	r3, r1, #1
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	bf98      	it	ls
 80002e6:	4770      	bxls	lr
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002ec:	1c91      	adds	r1, r2, #2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002f8:	880a      	ldrh	r2, [r1, #0]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002fe:	4480      	add	r8, r0
 8000300:	4481      	add	r9, r0
 8000302:	4402      	add	r2, r0
 8000304:	4484      	add	ip, r0
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
 800030e:	6815      	ldr	r5, [r2, #0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
 8000314:	f8c9 6000 	str.w	r6, [r9]
 8000318:	f8c8 7000 	str.w	r7, [r8]
 800031c:	f8cc 5000 	str.w	r5, [ip]
 8000320:	6014      	str	r4, [r2, #0]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800032a:	6855      	ldr	r5, [r2, #4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
 800033c:	6054      	str	r4, [r2, #4]
 800033e:	3108      	adds	r1, #8
 8000340:	3b01      	subs	r3, #1
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
 800034a:	1c4b      	adds	r3, r1, #1
 800034c:	2b01      	cmp	r3, #1
 800034e:	bf98      	it	ls
 8000350:	4770      	bxls	lr
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000356:	1c91      	adds	r1, r2, #2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000362:	880a      	ldrh	r2, [r1, #0]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
 8000380:	6815      	ldr	r5, [r2, #0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
 8000386:	f8c9 6000 	str.w	r6, [r9]
 800038a:	f8c8 7000 	str.w	r7, [r8]
 800038e:	f8cc 5000 	str.w	r5, [ip]
 8000392:	6014      	str	r4, [r2, #0]
 8000394:	3108      	adds	r1, #8
 8000396:	3b01      	subs	r3, #1
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800039e:	4770      	bx	lr

080003a0 <memchr>:
 80003a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80003a4:	2a10      	cmp	r2, #16
 80003a6:	db2b      	blt.n	8000400 <memchr+0x60>
 80003a8:	f010 0f07 	tst.w	r0, #7
 80003ac:	d008      	beq.n	80003c0 <memchr+0x20>
 80003ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003b2:	3a01      	subs	r2, #1
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d02d      	beq.n	8000414 <memchr+0x74>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	b342      	cbz	r2, 8000410 <memchr+0x70>
 80003be:	d1f6      	bne.n	80003ae <memchr+0xe>
 80003c0:	b4f0      	push	{r4, r5, r6, r7}
 80003c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003ca:	f022 0407 	bic.w	r4, r2, #7
 80003ce:	f07f 0700 	mvns.w	r7, #0
 80003d2:	2300      	movs	r3, #0
 80003d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003d8:	3c08      	subs	r4, #8
 80003da:	ea85 0501 	eor.w	r5, r5, r1
 80003de:	ea86 0601 	eor.w	r6, r6, r1
 80003e2:	fa85 f547 	uadd8	r5, r5, r7
 80003e6:	faa3 f587 	sel	r5, r3, r7
 80003ea:	fa86 f647 	uadd8	r6, r6, r7
 80003ee:	faa5 f687 	sel	r6, r5, r7
 80003f2:	b98e      	cbnz	r6, 8000418 <memchr+0x78>
 80003f4:	d1ee      	bne.n	80003d4 <memchr+0x34>
 80003f6:	bcf0      	pop	{r4, r5, r6, r7}
 80003f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80003fc:	f002 0207 	and.w	r2, r2, #7
 8000400:	b132      	cbz	r2, 8000410 <memchr+0x70>
 8000402:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000406:	3a01      	subs	r2, #1
 8000408:	ea83 0301 	eor.w	r3, r3, r1
 800040c:	b113      	cbz	r3, 8000414 <memchr+0x74>
 800040e:	d1f8      	bne.n	8000402 <memchr+0x62>
 8000410:	2000      	movs	r0, #0
 8000412:	4770      	bx	lr
 8000414:	3801      	subs	r0, #1
 8000416:	4770      	bx	lr
 8000418:	2d00      	cmp	r5, #0
 800041a:	bf06      	itte	eq
 800041c:	4635      	moveq	r5, r6
 800041e:	3803      	subeq	r0, #3
 8000420:	3807      	subne	r0, #7
 8000422:	f015 0f01 	tst.w	r5, #1
 8000426:	d107      	bne.n	8000438 <memchr+0x98>
 8000428:	3001      	adds	r0, #1
 800042a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800042e:	bf02      	ittt	eq
 8000430:	3001      	addeq	r0, #1
 8000432:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000436:	3001      	addeq	r0, #1
 8000438:	bcf0      	pop	{r4, r5, r6, r7}
 800043a:	3801      	subs	r0, #1
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop

08000440 <__aeabi_uldivmod>:
 8000440:	b953      	cbnz	r3, 8000458 <__aeabi_uldivmod+0x18>
 8000442:	b94a      	cbnz	r2, 8000458 <__aeabi_uldivmod+0x18>
 8000444:	2900      	cmp	r1, #0
 8000446:	bf08      	it	eq
 8000448:	2800      	cmpeq	r0, #0
 800044a:	bf1c      	itt	ne
 800044c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000450:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000454:	f000 b96a 	b.w	800072c <__aeabi_idiv0>
 8000458:	f1ad 0c08 	sub.w	ip, sp, #8
 800045c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000460:	f000 f806 	bl	8000470 <__udivmoddi4>
 8000464:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800046c:	b004      	add	sp, #16
 800046e:	4770      	bx	lr

08000470 <__udivmoddi4>:
 8000470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000474:	9d08      	ldr	r5, [sp, #32]
 8000476:	460c      	mov	r4, r1
 8000478:	2b00      	cmp	r3, #0
 800047a:	d14e      	bne.n	800051a <__udivmoddi4+0xaa>
 800047c:	4694      	mov	ip, r2
 800047e:	458c      	cmp	ip, r1
 8000480:	4686      	mov	lr, r0
 8000482:	fab2 f282 	clz	r2, r2
 8000486:	d962      	bls.n	800054e <__udivmoddi4+0xde>
 8000488:	b14a      	cbz	r2, 800049e <__udivmoddi4+0x2e>
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	4091      	lsls	r1, r2
 8000490:	fa20 f303 	lsr.w	r3, r0, r3
 8000494:	fa0c fc02 	lsl.w	ip, ip, r2
 8000498:	4319      	orrs	r1, r3
 800049a:	fa00 fe02 	lsl.w	lr, r0, r2
 800049e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a2:	fa1f f68c 	uxth.w	r6, ip
 80004a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ae:	fb07 1114 	mls	r1, r7, r4, r1
 80004b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b6:	fb04 f106 	mul.w	r1, r4, r6
 80004ba:	4299      	cmp	r1, r3
 80004bc:	d90a      	bls.n	80004d4 <__udivmoddi4+0x64>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004c6:	f080 8112 	bcs.w	80006ee <__udivmoddi4+0x27e>
 80004ca:	4299      	cmp	r1, r3
 80004cc:	f240 810f 	bls.w	80006ee <__udivmoddi4+0x27e>
 80004d0:	3c02      	subs	r4, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	fa1f f38e 	uxth.w	r3, lr
 80004da:	fbb1 f0f7 	udiv	r0, r1, r7
 80004de:	fb07 1110 	mls	r1, r7, r0, r1
 80004e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e6:	fb00 f606 	mul.w	r6, r0, r6
 80004ea:	429e      	cmp	r6, r3
 80004ec:	d90a      	bls.n	8000504 <__udivmoddi4+0x94>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80004f6:	f080 80fc 	bcs.w	80006f2 <__udivmoddi4+0x282>
 80004fa:	429e      	cmp	r6, r3
 80004fc:	f240 80f9 	bls.w	80006f2 <__udivmoddi4+0x282>
 8000500:	4463      	add	r3, ip
 8000502:	3802      	subs	r0, #2
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800050a:	2100      	movs	r1, #0
 800050c:	b11d      	cbz	r5, 8000516 <__udivmoddi4+0xa6>
 800050e:	40d3      	lsrs	r3, r2
 8000510:	2200      	movs	r2, #0
 8000512:	e9c5 3200 	strd	r3, r2, [r5]
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	428b      	cmp	r3, r1
 800051c:	d905      	bls.n	800052a <__udivmoddi4+0xba>
 800051e:	b10d      	cbz	r5, 8000524 <__udivmoddi4+0xb4>
 8000520:	e9c5 0100 	strd	r0, r1, [r5]
 8000524:	2100      	movs	r1, #0
 8000526:	4608      	mov	r0, r1
 8000528:	e7f5      	b.n	8000516 <__udivmoddi4+0xa6>
 800052a:	fab3 f183 	clz	r1, r3
 800052e:	2900      	cmp	r1, #0
 8000530:	d146      	bne.n	80005c0 <__udivmoddi4+0x150>
 8000532:	42a3      	cmp	r3, r4
 8000534:	d302      	bcc.n	800053c <__udivmoddi4+0xcc>
 8000536:	4290      	cmp	r0, r2
 8000538:	f0c0 80f0 	bcc.w	800071c <__udivmoddi4+0x2ac>
 800053c:	1a86      	subs	r6, r0, r2
 800053e:	eb64 0303 	sbc.w	r3, r4, r3
 8000542:	2001      	movs	r0, #1
 8000544:	2d00      	cmp	r5, #0
 8000546:	d0e6      	beq.n	8000516 <__udivmoddi4+0xa6>
 8000548:	e9c5 6300 	strd	r6, r3, [r5]
 800054c:	e7e3      	b.n	8000516 <__udivmoddi4+0xa6>
 800054e:	2a00      	cmp	r2, #0
 8000550:	f040 8090 	bne.w	8000674 <__udivmoddi4+0x204>
 8000554:	eba1 040c 	sub.w	r4, r1, ip
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	2101      	movs	r1, #1
 8000562:	fbb4 f6f8 	udiv	r6, r4, r8
 8000566:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800056a:	fb08 4416 	mls	r4, r8, r6, r4
 800056e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000572:	fb07 f006 	mul.w	r0, r7, r6
 8000576:	4298      	cmp	r0, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x11c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000582:	d202      	bcs.n	800058a <__udivmoddi4+0x11a>
 8000584:	4298      	cmp	r0, r3
 8000586:	f200 80cd 	bhi.w	8000724 <__udivmoddi4+0x2b4>
 800058a:	4626      	mov	r6, r4
 800058c:	1a1c      	subs	r4, r3, r0
 800058e:	fa1f f38e 	uxth.w	r3, lr
 8000592:	fbb4 f0f8 	udiv	r0, r4, r8
 8000596:	fb08 4410 	mls	r4, r8, r0, r4
 800059a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800059e:	fb00 f707 	mul.w	r7, r0, r7
 80005a2:	429f      	cmp	r7, r3
 80005a4:	d908      	bls.n	80005b8 <__udivmoddi4+0x148>
 80005a6:	eb1c 0303 	adds.w	r3, ip, r3
 80005aa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005ae:	d202      	bcs.n	80005b6 <__udivmoddi4+0x146>
 80005b0:	429f      	cmp	r7, r3
 80005b2:	f200 80b0 	bhi.w	8000716 <__udivmoddi4+0x2a6>
 80005b6:	4620      	mov	r0, r4
 80005b8:	1bdb      	subs	r3, r3, r7
 80005ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005be:	e7a5      	b.n	800050c <__udivmoddi4+0x9c>
 80005c0:	f1c1 0620 	rsb	r6, r1, #32
 80005c4:	408b      	lsls	r3, r1
 80005c6:	fa22 f706 	lsr.w	r7, r2, r6
 80005ca:	431f      	orrs	r7, r3
 80005cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005d0:	fa04 f301 	lsl.w	r3, r4, r1
 80005d4:	ea43 030c 	orr.w	r3, r3, ip
 80005d8:	40f4      	lsrs	r4, r6
 80005da:	fa00 f801 	lsl.w	r8, r0, r1
 80005de:	0c38      	lsrs	r0, r7, #16
 80005e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005e4:	fbb4 fef0 	udiv	lr, r4, r0
 80005e8:	fa1f fc87 	uxth.w	ip, r7
 80005ec:	fb00 441e 	mls	r4, r0, lr, r4
 80005f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005f4:	fb0e f90c 	mul.w	r9, lr, ip
 80005f8:	45a1      	cmp	r9, r4
 80005fa:	fa02 f201 	lsl.w	r2, r2, r1
 80005fe:	d90a      	bls.n	8000616 <__udivmoddi4+0x1a6>
 8000600:	193c      	adds	r4, r7, r4
 8000602:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000606:	f080 8084 	bcs.w	8000712 <__udivmoddi4+0x2a2>
 800060a:	45a1      	cmp	r9, r4
 800060c:	f240 8081 	bls.w	8000712 <__udivmoddi4+0x2a2>
 8000610:	f1ae 0e02 	sub.w	lr, lr, #2
 8000614:	443c      	add	r4, r7
 8000616:	eba4 0409 	sub.w	r4, r4, r9
 800061a:	fa1f f983 	uxth.w	r9, r3
 800061e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000622:	fb00 4413 	mls	r4, r0, r3, r4
 8000626:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800062a:	fb03 fc0c 	mul.w	ip, r3, ip
 800062e:	45a4      	cmp	ip, r4
 8000630:	d907      	bls.n	8000642 <__udivmoddi4+0x1d2>
 8000632:	193c      	adds	r4, r7, r4
 8000634:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000638:	d267      	bcs.n	800070a <__udivmoddi4+0x29a>
 800063a:	45a4      	cmp	ip, r4
 800063c:	d965      	bls.n	800070a <__udivmoddi4+0x29a>
 800063e:	3b02      	subs	r3, #2
 8000640:	443c      	add	r4, r7
 8000642:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000646:	fba0 9302 	umull	r9, r3, r0, r2
 800064a:	eba4 040c 	sub.w	r4, r4, ip
 800064e:	429c      	cmp	r4, r3
 8000650:	46ce      	mov	lr, r9
 8000652:	469c      	mov	ip, r3
 8000654:	d351      	bcc.n	80006fa <__udivmoddi4+0x28a>
 8000656:	d04e      	beq.n	80006f6 <__udivmoddi4+0x286>
 8000658:	b155      	cbz	r5, 8000670 <__udivmoddi4+0x200>
 800065a:	ebb8 030e 	subs.w	r3, r8, lr
 800065e:	eb64 040c 	sbc.w	r4, r4, ip
 8000662:	fa04 f606 	lsl.w	r6, r4, r6
 8000666:	40cb      	lsrs	r3, r1
 8000668:	431e      	orrs	r6, r3
 800066a:	40cc      	lsrs	r4, r1
 800066c:	e9c5 6400 	strd	r6, r4, [r5]
 8000670:	2100      	movs	r1, #0
 8000672:	e750      	b.n	8000516 <__udivmoddi4+0xa6>
 8000674:	f1c2 0320 	rsb	r3, r2, #32
 8000678:	fa20 f103 	lsr.w	r1, r0, r3
 800067c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000680:	fa24 f303 	lsr.w	r3, r4, r3
 8000684:	4094      	lsls	r4, r2
 8000686:	430c      	orrs	r4, r1
 8000688:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800068c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000690:	fa1f f78c 	uxth.w	r7, ip
 8000694:	fbb3 f0f8 	udiv	r0, r3, r8
 8000698:	fb08 3110 	mls	r1, r8, r0, r3
 800069c:	0c23      	lsrs	r3, r4, #16
 800069e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006a2:	fb00 f107 	mul.w	r1, r0, r7
 80006a6:	4299      	cmp	r1, r3
 80006a8:	d908      	bls.n	80006bc <__udivmoddi4+0x24c>
 80006aa:	eb1c 0303 	adds.w	r3, ip, r3
 80006ae:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006b2:	d22c      	bcs.n	800070e <__udivmoddi4+0x29e>
 80006b4:	4299      	cmp	r1, r3
 80006b6:	d92a      	bls.n	800070e <__udivmoddi4+0x29e>
 80006b8:	3802      	subs	r0, #2
 80006ba:	4463      	add	r3, ip
 80006bc:	1a5b      	subs	r3, r3, r1
 80006be:	b2a4      	uxth	r4, r4
 80006c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006c4:	fb08 3311 	mls	r3, r8, r1, r3
 80006c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006cc:	fb01 f307 	mul.w	r3, r1, r7
 80006d0:	42a3      	cmp	r3, r4
 80006d2:	d908      	bls.n	80006e6 <__udivmoddi4+0x276>
 80006d4:	eb1c 0404 	adds.w	r4, ip, r4
 80006d8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006dc:	d213      	bcs.n	8000706 <__udivmoddi4+0x296>
 80006de:	42a3      	cmp	r3, r4
 80006e0:	d911      	bls.n	8000706 <__udivmoddi4+0x296>
 80006e2:	3902      	subs	r1, #2
 80006e4:	4464      	add	r4, ip
 80006e6:	1ae4      	subs	r4, r4, r3
 80006e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006ec:	e739      	b.n	8000562 <__udivmoddi4+0xf2>
 80006ee:	4604      	mov	r4, r0
 80006f0:	e6f0      	b.n	80004d4 <__udivmoddi4+0x64>
 80006f2:	4608      	mov	r0, r1
 80006f4:	e706      	b.n	8000504 <__udivmoddi4+0x94>
 80006f6:	45c8      	cmp	r8, r9
 80006f8:	d2ae      	bcs.n	8000658 <__udivmoddi4+0x1e8>
 80006fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80006fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000702:	3801      	subs	r0, #1
 8000704:	e7a8      	b.n	8000658 <__udivmoddi4+0x1e8>
 8000706:	4631      	mov	r1, r6
 8000708:	e7ed      	b.n	80006e6 <__udivmoddi4+0x276>
 800070a:	4603      	mov	r3, r0
 800070c:	e799      	b.n	8000642 <__udivmoddi4+0x1d2>
 800070e:	4630      	mov	r0, r6
 8000710:	e7d4      	b.n	80006bc <__udivmoddi4+0x24c>
 8000712:	46d6      	mov	lr, sl
 8000714:	e77f      	b.n	8000616 <__udivmoddi4+0x1a6>
 8000716:	4463      	add	r3, ip
 8000718:	3802      	subs	r0, #2
 800071a:	e74d      	b.n	80005b8 <__udivmoddi4+0x148>
 800071c:	4606      	mov	r6, r0
 800071e:	4623      	mov	r3, r4
 8000720:	4608      	mov	r0, r1
 8000722:	e70f      	b.n	8000544 <__udivmoddi4+0xd4>
 8000724:	3e02      	subs	r6, #2
 8000726:	4463      	add	r3, ip
 8000728:	e730      	b.n	800058c <__udivmoddi4+0x11c>
 800072a:	bf00      	nop

0800072c <__aeabi_idiv0>:
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop

08000730 <HAL_ADC_ConvCpltCallback>:
//
//		}
//	}
//}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < ADC_BUFFER_LENGTH; ++i) {
 8000738:	2300      	movs	r3, #0
 800073a:	81fb      	strh	r3, [r7, #14]
 800073c:	e027      	b.n	800078e <HAL_ADC_ConvCpltCallback+0x5e>

			fftInBuf[fftIndex++] = adc_data[i];
 800073e:	89fb      	ldrh	r3, [r7, #14]
 8000740:	4a17      	ldr	r2, [pc, #92]	@ (80007a0 <HAL_ADC_ConvCpltCallback+0x70>)
 8000742:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000746:	b298      	uxth	r0, r3
 8000748:	4b16      	ldr	r3, [pc, #88]	@ (80007a4 <HAL_ADC_ConvCpltCallback+0x74>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	1c5a      	adds	r2, r3, #1
 800074e:	b291      	uxth	r1, r2
 8000750:	4a14      	ldr	r2, [pc, #80]	@ (80007a4 <HAL_ADC_ConvCpltCallback+0x74>)
 8000752:	8011      	strh	r1, [r2, #0]
 8000754:	ee07 0a90 	vmov	s15, r0
 8000758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800075c:	4a12      	ldr	r2, [pc, #72]	@ (80007a8 <HAL_ADC_ConvCpltCallback+0x78>)
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	4413      	add	r3, r2
 8000762:	edc3 7a00 	vstr	s15, [r3]

			if(fftIndex == FFT_BUFFER_SIZE) {
 8000766:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <HAL_ADC_ConvCpltCallback+0x74>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800076e:	d10b      	bne.n	8000788 <HAL_ADC_ConvCpltCallback+0x58>

				arm_rfft_fast_f32(&fftHandler, fftInBuf, fftOutBuf, 0);
 8000770:	2300      	movs	r3, #0
 8000772:	4a0e      	ldr	r2, [pc, #56]	@ (80007ac <HAL_ADC_ConvCpltCallback+0x7c>)
 8000774:	490c      	ldr	r1, [pc, #48]	@ (80007a8 <HAL_ADC_ConvCpltCallback+0x78>)
 8000776:	480e      	ldr	r0, [pc, #56]	@ (80007b0 <HAL_ADC_ConvCpltCallback+0x80>)
 8000778:	f00a fce2 	bl	800b140 <arm_rfft_fast_f32>

				// Set FFT flag
				fftFlag = 1;
 800077c:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <HAL_ADC_ConvCpltCallback+0x84>)
 800077e:	2201      	movs	r2, #1
 8000780:	701a      	strb	r2, [r3, #0]

				fftIndex = 0;
 8000782:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <HAL_ADC_ConvCpltCallback+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i < ADC_BUFFER_LENGTH; ++i) {
 8000788:	89fb      	ldrh	r3, [r7, #14]
 800078a:	3301      	adds	r3, #1
 800078c:	81fb      	strh	r3, [r7, #14]
 800078e:	89fb      	ldrh	r3, [r7, #14]
 8000790:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8000794:	d3d3      	bcc.n	800073e <HAL_ADC_ConvCpltCallback+0xe>
			}
	}
}
 8000796:	bf00      	nop
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	240001dc 	.word	0x240001dc
 80007a4:	240043fe 	.word	0x240043fe
 80007a8:	240003fc 	.word	0x240003fc
 80007ac:	240023fc 	.word	0x240023fc
 80007b0:	240003e4 	.word	0x240003e4
 80007b4:	240043fc 	.word	0x240043fc

080007b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007be:	f000 fa8b 	bl	8000cd8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c2:	f000 ff5d 	bl	8001680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c6:	f000 f8d3 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ca:	f000 fa4d 	bl	8000c68 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ce:	f000 fa2b 	bl	8000c28 <MX_DMA_Init>
  MX_ADC1_Init();
 80007d2:	f000 f949 	bl	8000a68 <MX_ADC1_Init>
  MX_TIM8_Init();
 80007d6:	f000 f9d5 	bl	8000b84 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  uint32_t printTimer = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]

  float peakVal = 0.0f;
 80007de:	f04f 0300 	mov.w	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
  uint16_t peakHz = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	81fb      	strh	r3, [r7, #14]


  // Initialize FFT
  arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 80007e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007ec:	4858      	ldr	r0, [pc, #352]	@ (8000950 <main+0x198>)
 80007ee:	f00a fbf5 	bl	800afdc <arm_rfft_fast_init_f32>

  HAL_ADCEx_Calibration_Start(&hadc1,ADC_CALIB_OFFSET,ADC_SINGLE_ENDED);
 80007f2:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80007f6:	2100      	movs	r1, #0
 80007f8:	4856      	ldr	r0, [pc, #344]	@ (8000954 <main+0x19c>)
 80007fa:	f002 fcd3 	bl	80031a4 <HAL_ADCEx_Calibration_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&adc_data, ADC_BUFFER_LENGTH);
 80007fe:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000802:	4955      	ldr	r1, [pc, #340]	@ (8000958 <main+0x1a0>)
 8000804:	4853      	ldr	r0, [pc, #332]	@ (8000954 <main+0x19c>)
 8000806:	f001 fbdd 	bl	8001fc4 <HAL_ADC_Start_DMA>
  // it will fill data at 2.5 million

  HAL_TIM_Base_Start(&htim8);
 800080a:	4854      	ldr	r0, [pc, #336]	@ (800095c <main+0x1a4>)
 800080c:	f009 f842 	bl	8009894 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000810:	2000      	movs	r0, #0
 8000812:	f000 fd51 	bl	80012b8 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000816:	2001      	movs	r0, #1
 8000818:	f000 fd4e 	bl	80012b8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800081c:	2002      	movs	r0, #2
 800081e:	f000 fd4b 	bl	80012b8 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000822:	2101      	movs	r1, #1
 8000824:	2000      	movs	r0, #0
 8000826:	f000 fdbd 	bl	80013a4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800082a:	4b4d      	ldr	r3, [pc, #308]	@ (8000960 <main+0x1a8>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000830:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000832:	4b4b      	ldr	r3, [pc, #300]	@ (8000960 <main+0x1a8>)
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000838:	4b49      	ldr	r3, [pc, #292]	@ (8000960 <main+0x1a8>)
 800083a:	2200      	movs	r2, #0
 800083c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800083e:	4b48      	ldr	r3, [pc, #288]	@ (8000960 <main+0x1a8>)
 8000840:	2200      	movs	r2, #0
 8000842:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000844:	4b46      	ldr	r3, [pc, #280]	@ (8000960 <main+0x1a8>)
 8000846:	2200      	movs	r2, #0
 8000848:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800084a:	4945      	ldr	r1, [pc, #276]	@ (8000960 <main+0x1a8>)
 800084c:	2000      	movs	r0, #0
 800084e:	f000 fe39 	bl	80014c4 <BSP_COM_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <main+0xa4>
  {
    Error_Handler();
 8000858:	f000 fa6a 	bl	8000d30 <Error_Handler>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 if(fftFlag) {
 800085c:	4b41      	ldr	r3, [pc, #260]	@ (8000964 <main+0x1ac>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d059      	beq.n	8000918 <main+0x160>
		 peakVal = 0.0f;
 8000864:	f04f 0300 	mov.w	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
		 peakHz = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	81fb      	strh	r3, [r7, #14]

		 uint16_t freqIndex = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	81bb      	strh	r3, [r7, #12]
		 for(uint16_t i = 0; i < FFT_BUFFER_SIZE; i += 2) {
 8000872:	2300      	movs	r3, #0
 8000874:	817b      	strh	r3, [r7, #10]
 8000876:	e048      	b.n	800090a <main+0x152>

			 float currVal = sqrtf((fftOutBuf[i] * fftOutBuf[i]) + (fftOutBuf[i+1] * fftOutBuf[i+1]));
 8000878:	897b      	ldrh	r3, [r7, #10]
 800087a:	4a3b      	ldr	r2, [pc, #236]	@ (8000968 <main+0x1b0>)
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	4413      	add	r3, r2
 8000880:	ed93 7a00 	vldr	s14, [r3]
 8000884:	897b      	ldrh	r3, [r7, #10]
 8000886:	4a38      	ldr	r2, [pc, #224]	@ (8000968 <main+0x1b0>)
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	4413      	add	r3, r2
 800088c:	edd3 7a00 	vldr	s15, [r3]
 8000890:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000894:	897b      	ldrh	r3, [r7, #10]
 8000896:	3301      	adds	r3, #1
 8000898:	4a33      	ldr	r2, [pc, #204]	@ (8000968 <main+0x1b0>)
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	4413      	add	r3, r2
 800089e:	edd3 6a00 	vldr	s13, [r3]
 80008a2:	897b      	ldrh	r3, [r7, #10]
 80008a4:	3301      	adds	r3, #1
 80008a6:	4a30      	ldr	r2, [pc, #192]	@ (8000968 <main+0x1b0>)
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	4413      	add	r3, r2
 80008ac:	edd3 7a00 	vldr	s15, [r3]
 80008b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008b8:	eeb0 0a67 	vmov.f32	s0, s15
 80008bc:	f00c fab4 	bl	800ce28 <sqrtf>
 80008c0:	ed87 0a01 	vstr	s0, [r7, #4]

			 if(currVal > peakVal) {
 80008c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80008c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80008cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008d4:	dd13      	ble.n	80008fe <main+0x146>

				 peakVal = currVal;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	613b      	str	r3, [r7, #16]

				 peakHz = (uint16_t)((freqIndex * SAMPLE_RATE_HZ) / (float)FFT_BUFFER_SIZE);
 80008da:	89bb      	ldrh	r3, [r7, #12]
 80008dc:	ee07 3a90 	vmov	s15, r3
 80008e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008e4:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8000940 <main+0x188>
 80008e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80008ec:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 8000948 <main+0x190>
 80008f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80008f8:	ee17 3a90 	vmov	r3, s15
 80008fc:	81fb      	strh	r3, [r7, #14]

			 }

			 freqIndex++;
 80008fe:	89bb      	ldrh	r3, [r7, #12]
 8000900:	3301      	adds	r3, #1
 8000902:	81bb      	strh	r3, [r7, #12]
		 for(uint16_t i = 0; i < FFT_BUFFER_SIZE; i += 2) {
 8000904:	897b      	ldrh	r3, [r7, #10]
 8000906:	3302      	adds	r3, #2
 8000908:	817b      	strh	r3, [r7, #10]
 800090a:	897b      	ldrh	r3, [r7, #10]
 800090c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000910:	d3b2      	bcc.n	8000878 <main+0xc0>
		 }

		 fftFlag = 0;
 8000912:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <main+0x1ac>)
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
	 }

	 if(HAL_GetTick() - printTimer > PRINT_TIME) {
 8000918:	f000 ff38 	bl	800178c <HAL_GetTick>
 800091c:	4602      	mov	r2, r0
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000926:	d999      	bls.n	800085c <main+0xa4>

		 printf("peak Hz: %u\n", peakHz);
 8000928:	89fb      	ldrh	r3, [r7, #14]
 800092a:	4619      	mov	r1, r3
 800092c:	480f      	ldr	r0, [pc, #60]	@ (800096c <main+0x1b4>)
 800092e:	f00b fc0f 	bl	800c150 <iprintf>

		 printTimer = HAL_GetTick();
 8000932:	f000 ff2b 	bl	800178c <HAL_GetTick>
 8000936:	6178      	str	r0, [r7, #20]
	 if(fftFlag) {
 8000938:	e790      	b.n	800085c <main+0xa4>
 800093a:	bf00      	nop
 800093c:	f3af 8000 	nop.w
 8000940:	00000000 	.word	0x00000000
 8000944:	414312d0 	.word	0x414312d0
 8000948:	00000000 	.word	0x00000000
 800094c:	40a00000 	.word	0x40a00000
 8000950:	240003e4 	.word	0x240003e4
 8000954:	240000b4 	.word	0x240000b4
 8000958:	240001dc 	.word	0x240001dc
 800095c:	24000190 	.word	0x24000190
 8000960:	240000a4 	.word	0x240000a4
 8000964:	240043fc 	.word	0x240043fc
 8000968:	240023fc 	.word	0x240023fc
 800096c:	0800ce84 	.word	0x0800ce84

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b09c      	sub	sp, #112	@ 0x70
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097a:	224c      	movs	r2, #76	@ 0x4c
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f00b fbf8 	bl	800c174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2220      	movs	r2, #32
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f00b fbf2 	bl	800c174 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000990:	2002      	movs	r0, #2
 8000992:	f005 fa09 	bl	8005da8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b31      	ldr	r3, [pc, #196]	@ (8000a60 <SystemClock_Config+0xf0>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	4a30      	ldr	r2, [pc, #192]	@ (8000a60 <SystemClock_Config+0xf0>)
 80009a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009a4:	6193      	str	r3, [r2, #24]
 80009a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000a60 <SystemClock_Config+0xf0>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000a64 <SystemClock_Config+0xf4>)
 80009b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009b4:	4a2b      	ldr	r2, [pc, #172]	@ (8000a64 <SystemClock_Config+0xf4>)
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009bc:	4b29      	ldr	r3, [pc, #164]	@ (8000a64 <SystemClock_Config+0xf4>)
 80009be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009c8:	bf00      	nop
 80009ca:	4b25      	ldr	r3, [pc, #148]	@ (8000a60 <SystemClock_Config+0xf0>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009d6:	d1f8      	bne.n	80009ca <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d8:	2302      	movs	r3, #2
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009dc:	2301      	movs	r3, #1
 80009de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e0:	2340      	movs	r3, #64	@ 0x40
 80009e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e4:	2302      	movs	r3, #2
 80009e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009e8:	2300      	movs	r3, #0
 80009ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009ec:	2304      	movs	r3, #4
 80009ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80009f0:	233c      	movs	r3, #60	@ 0x3c
 80009f2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a00:	230c      	movs	r3, #12
 8000a02:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a10:	4618      	mov	r0, r3
 8000a12:	f005 fa03 	bl	8005e1c <HAL_RCC_OscConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000a1c:	f000 f988 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a20:	233f      	movs	r3, #63	@ 0x3f
 8000a22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a24:	2303      	movs	r3, #3
 8000a26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a2c:	2308      	movs	r3, #8
 8000a2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a30:	2340      	movs	r3, #64	@ 0x40
 8000a32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a34:	2340      	movs	r3, #64	@ 0x40
 8000a36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a3c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a3e:	2340      	movs	r3, #64	@ 0x40
 8000a40:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2104      	movs	r1, #4
 8000a46:	4618      	mov	r0, r3
 8000a48:	f005 fe42 	bl	80066d0 <HAL_RCC_ClockConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000a52:	f000 f96d 	bl	8000d30 <Error_Handler>
  }
}
 8000a56:	bf00      	nop
 8000a58:	3770      	adds	r7, #112	@ 0x70
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	58024800 	.word	0x58024800
 8000a64:	58000400 	.word	0x58000400

08000a68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	@ 0x28
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
 8000a88:	615a      	str	r2, [r3, #20]
 8000a8a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a8c:	4b39      	ldr	r3, [pc, #228]	@ (8000b74 <MX_ADC1_Init+0x10c>)
 8000a8e:	4a3a      	ldr	r2, [pc, #232]	@ (8000b78 <MX_ADC1_Init+0x110>)
 8000a90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000a92:	4b38      	ldr	r3, [pc, #224]	@ (8000b74 <MX_ADC1_Init+0x10c>)
 8000a94:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a9a:	4b36      	ldr	r3, [pc, #216]	@ (8000b74 <MX_ADC1_Init+0x10c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000aa0:	4b34      	ldr	r3, [pc, #208]	@ (8000b74 <MX_ADC1_Init+0x10c>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000aa6:	4b33      	ldr	r3, [pc, #204]	@ (8000b74 <MX_ADC1_Init+0x10c>)
 8000aa8:	2208      	movs	r2, #8
 8000aaa:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000aac:	4b31      	ldr	r3, [pc, #196]	@ (8000b74 <MX_ADC1_Init+0x10c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ab2:	4b30      	ldr	r3, [pc, #192]	@ (8000b74 <MX_ADC1_Init+0x10c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8000b74 <MX_ADC1_Init+0x10c>)
 8000aba:	2202      	movs	r2, #2
 8000abc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000abe:	4b2d      	ldr	r3, [pc, #180]	@ (8000b74 <MX_ADC1_Init+0x10c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO2;
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b74 <MX_ADC1_Init+0x10c>)
 8000ac6:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000aca:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000acc:	4b29      	ldr	r3, [pc, #164]	@ (8000b74 <MX_ADC1_Init+0x10c>)
 8000ace:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ad2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000ad4:	4b27      	ldr	r3, [pc, #156]	@ (8000b74 <MX_ADC1_Init+0x10c>)
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ada:	4b26      	ldr	r3, [pc, #152]	@ (8000b74 <MX_ADC1_Init+0x10c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ae0:	4b24      	ldr	r3, [pc, #144]	@ (8000b74 <MX_ADC1_Init+0x10c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ae6:	4b23      	ldr	r3, [pc, #140]	@ (8000b74 <MX_ADC1_Init+0x10c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000aee:	4b21      	ldr	r3, [pc, #132]	@ (8000b74 <MX_ADC1_Init+0x10c>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000af4:	481f      	ldr	r0, [pc, #124]	@ (8000b74 <MX_ADC1_Init+0x10c>)
 8000af6:	f001 f8c3 	bl	8001c80 <HAL_ADC_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000b00:	f000 f916 	bl	8000d30 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4819      	ldr	r0, [pc, #100]	@ (8000b74 <MX_ADC1_Init+0x10c>)
 8000b10:	f002 fbde 	bl	80032d0 <HAL_ADCEx_MultiModeConfigChannel>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000b1a:	f000 f909 	bl	8000d30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000b1e:	4b17      	ldr	r3, [pc, #92]	@ (8000b7c <MX_ADC1_Init+0x114>)
 8000b20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b22:	2306      	movs	r3, #6
 8000b24:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b2a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b2e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b30:	2304      	movs	r3, #4
 8000b32:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <MX_ADC1_Init+0x10c>)
 8000b42:	f001 fd5b 	bl	80025fc <HAL_ADC_ConfigChannel>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000b4c:	f000 f8f0 	bl	8000d30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000b50:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <MX_ADC1_Init+0x118>)
 8000b52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b54:	230c      	movs	r3, #12
 8000b56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b58:	463b      	mov	r3, r7
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4805      	ldr	r0, [pc, #20]	@ (8000b74 <MX_ADC1_Init+0x10c>)
 8000b5e:	f001 fd4d 	bl	80025fc <HAL_ADC_ConfigChannel>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8000b68:	f000 f8e2 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	3728      	adds	r7, #40	@ 0x28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	240000b4 	.word	0x240000b4
 8000b78:	40022000 	.word	0x40022000
 8000b7c:	43210000 	.word	0x43210000
 8000b80:	47520000 	.word	0x47520000

08000b84 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c20 <MX_TIM8_Init+0x9c>)
 8000ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8000c24 <MX_TIM8_Init+0xa0>)
 8000ba6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 12 - 1;
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c20 <MX_TIM8_Init+0x9c>)
 8000baa:	220b      	movs	r2, #11
 8000bac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bae:	4b1c      	ldr	r3, [pc, #112]	@ (8000c20 <MX_TIM8_Init+0x9c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 6 - 1;
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <MX_TIM8_Init+0x9c>)
 8000bb6:	2205      	movs	r2, #5
 8000bb8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bba:	4b19      	ldr	r3, [pc, #100]	@ (8000c20 <MX_TIM8_Init+0x9c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000bc0:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <MX_TIM8_Init+0x9c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc6:	4b16      	ldr	r3, [pc, #88]	@ (8000c20 <MX_TIM8_Init+0x9c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000bcc:	4814      	ldr	r0, [pc, #80]	@ (8000c20 <MX_TIM8_Init+0x9c>)
 8000bce:	f008 fe09 	bl	80097e4 <HAL_TIM_Base_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8000bd8:	f000 f8aa 	bl	8000d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000be0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	4619      	mov	r1, r3
 8000be8:	480d      	ldr	r0, [pc, #52]	@ (8000c20 <MX_TIM8_Init+0x9c>)
 8000bea:	f008 fec3 	bl	8009974 <HAL_TIM_ConfigClockSource>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8000bf4:	f000 f89c 	bl	8000d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bf8:	2320      	movs	r3, #32
 8000bfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	4619      	mov	r1, r3
 8000c08:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <MX_TIM8_Init+0x9c>)
 8000c0a:	f009 f8e9 	bl	8009de0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8000c14:	f000 f88c 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	3720      	adds	r7, #32
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	24000190 	.word	0x24000190
 8000c24:	40010400 	.word	0x40010400

08000c28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c64 <MX_DMA_Init+0x3c>)
 8000c30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c34:	4a0b      	ldr	r2, [pc, #44]	@ (8000c64 <MX_DMA_Init+0x3c>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c3e:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <MX_DMA_Init+0x3c>)
 8000c40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2100      	movs	r1, #0
 8000c50:	200b      	movs	r0, #11
 8000c52:	f002 fcf6 	bl	8003642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c56:	200b      	movs	r0, #11
 8000c58:	f002 fd0d 	bl	8003676 <HAL_NVIC_EnableIRQ>

}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	58024400 	.word	0x58024400

08000c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6e:	4b19      	ldr	r3, [pc, #100]	@ (8000cd4 <MX_GPIO_Init+0x6c>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c74:	4a17      	ldr	r2, [pc, #92]	@ (8000cd4 <MX_GPIO_Init+0x6c>)
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c7e:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <MX_GPIO_Init+0x6c>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c84:	f003 0304 	and.w	r3, r3, #4
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c8c:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <MX_GPIO_Init+0x6c>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c92:	4a10      	ldr	r2, [pc, #64]	@ (8000cd4 <MX_GPIO_Init+0x6c>)
 8000c94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd4 <MX_GPIO_Init+0x6c>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd4 <MX_GPIO_Init+0x6c>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb0:	4a08      	ldr	r2, [pc, #32]	@ (8000cd4 <MX_GPIO_Init+0x6c>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <MX_GPIO_Init+0x6c>)
 8000cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	58024400 	.word	0x58024400

08000cd8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cde:	463b      	mov	r3, r7
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000cea:	f002 fcdf 	bl	80036ac <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000cfa:	231f      	movs	r3, #31
 8000cfc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000cfe:	2387      	movs	r3, #135	@ 0x87
 8000d00:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d06:	2300      	movs	r3, #0
 8000d08:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f002 fcfd 	bl	800371c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d22:	2004      	movs	r0, #4
 8000d24:	f002 fcda 	bl	80036dc <HAL_MPU_Enable>

}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <Error_Handler+0x8>

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <HAL_MspInit+0x30>)
 8000d44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d48:	4a08      	ldr	r2, [pc, #32]	@ (8000d6c <HAL_MspInit+0x30>)
 8000d4a:	f043 0302 	orr.w	r3, r3, #2
 8000d4e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <HAL_MspInit+0x30>)
 8000d54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	58024400 	.word	0x58024400

08000d70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b0ba      	sub	sp, #232	@ 0xe8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	22c0      	movs	r2, #192	@ 0xc0
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f00b f9ef 	bl	800c174 <memset>
  if(hadc->Instance==ADC1)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a48      	ldr	r2, [pc, #288]	@ (8000ebc <HAL_ADC_MspInit+0x14c>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	f040 8088 	bne.w	8000eb2 <HAL_ADC_MspInit+0x142>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000da2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000da6:	f04f 0300 	mov.w	r3, #0
 8000daa:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000dae:	2304      	movs	r3, #4
 8000db0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000db2:	230a      	movs	r3, #10
 8000db4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000db6:	2302      	movs	r3, #2
 8000db8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000dc2:	23c0      	movs	r3, #192	@ 0xc0
 8000dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000dc6:	2320      	movs	r3, #32
 8000dc8:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f006 f805 	bl	8006de8 <HAL_RCCEx_PeriphCLKConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000de4:	f7ff ffa4 	bl	8000d30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000de8:	4b35      	ldr	r3, [pc, #212]	@ (8000ec0 <HAL_ADC_MspInit+0x150>)
 8000dea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dee:	4a34      	ldr	r2, [pc, #208]	@ (8000ec0 <HAL_ADC_MspInit+0x150>)
 8000df0:	f043 0320 	orr.w	r3, r3, #32
 8000df4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000df8:	4b31      	ldr	r3, [pc, #196]	@ (8000ec0 <HAL_ADC_MspInit+0x150>)
 8000dfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dfe:	f003 0320 	and.w	r3, r3, #32
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4b2e      	ldr	r3, [pc, #184]	@ (8000ec0 <HAL_ADC_MspInit+0x150>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0c:	4a2c      	ldr	r2, [pc, #176]	@ (8000ec0 <HAL_ADC_MspInit+0x150>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e16:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec0 <HAL_ADC_MspInit+0x150>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA1     ------> ADC1_INP17
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e24:	2303      	movs	r3, #3
 8000e26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4821      	ldr	r0, [pc, #132]	@ (8000ec4 <HAL_ADC_MspInit+0x154>)
 8000e3e:	f004 fde9 	bl	8005a14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000e42:	4b21      	ldr	r3, [pc, #132]	@ (8000ec8 <HAL_ADC_MspInit+0x158>)
 8000e44:	4a21      	ldr	r2, [pc, #132]	@ (8000ecc <HAL_ADC_MspInit+0x15c>)
 8000e46:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e48:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec8 <HAL_ADC_MspInit+0x158>)
 8000e4a:	2209      	movs	r2, #9
 8000e4c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec8 <HAL_ADC_MspInit+0x158>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e54:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <HAL_ADC_MspInit+0x158>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec8 <HAL_ADC_MspInit+0x158>)
 8000e5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e60:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e62:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <HAL_ADC_MspInit+0x158>)
 8000e64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e68:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <HAL_ADC_MspInit+0x158>)
 8000e6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e72:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <HAL_ADC_MspInit+0x158>)
 8000e74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e78:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <HAL_ADC_MspInit+0x158>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e80:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <HAL_ADC_MspInit+0x158>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e86:	4810      	ldr	r0, [pc, #64]	@ (8000ec8 <HAL_ADC_MspInit+0x158>)
 8000e88:	f002 fc88 	bl	800379c <HAL_DMA_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_ADC_MspInit+0x126>
    {
      Error_Handler();
 8000e92:	f7ff ff4d 	bl	8000d30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec8 <HAL_ADC_MspInit+0x158>)
 8000e9a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec8 <HAL_ADC_MspInit+0x158>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2012      	movs	r0, #18
 8000ea8:	f002 fbcb 	bl	8003642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000eac:	2012      	movs	r0, #18
 8000eae:	f002 fbe2 	bl	8003676 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000eb2:	bf00      	nop
 8000eb4:	37e8      	adds	r7, #232	@ 0xe8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40022000 	.word	0x40022000
 8000ec0:	58024400 	.word	0x58024400
 8000ec4:	58020000 	.word	0x58020000
 8000ec8:	24000118 	.word	0x24000118
 8000ecc:	40020010 	.word	0x40020010

08000ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0b      	ldr	r2, [pc, #44]	@ (8000f0c <HAL_TIM_Base_MspInit+0x3c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d10e      	bne.n	8000f00 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8000f10 <HAL_TIM_Base_MspInit+0x40>)
 8000ee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ee8:	4a09      	ldr	r2, [pc, #36]	@ (8000f10 <HAL_TIM_Base_MspInit+0x40>)
 8000eea:	f043 0302 	orr.w	r3, r3, #2
 8000eee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000ef2:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <HAL_TIM_Base_MspInit+0x40>)
 8000ef4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	40010400 	.word	0x40010400
 8000f10:	58024400 	.word	0x58024400

08000f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <NMI_Handler+0x4>

08000f1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <HardFault_Handler+0x4>

08000f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <MemManage_Handler+0x4>

08000f2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <BusFault_Handler+0x4>

08000f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <UsageFault_Handler+0x4>

08000f3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6a:	f000 fbfb 	bl	8001764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f78:	4802      	ldr	r0, [pc, #8]	@ (8000f84 <DMA1_Stream0_IRQHandler+0x10>)
 8000f7a:	f003 f9d5 	bl	8004328 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	24000118 	.word	0x24000118

08000f88 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f8c:	4802      	ldr	r0, [pc, #8]	@ (8000f98 <ADC_IRQHandler+0x10>)
 8000f8e:	f001 f8dd 	bl	800214c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	240000b4 	.word	0x240000b4

08000f9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f000 fa71 	bl	8001488 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	e00a      	b.n	8000fd2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fbc:	f3af 8000 	nop.w
 8000fc0:	4601      	mov	r1, r0
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	1c5a      	adds	r2, r3, #1
 8000fc6:	60ba      	str	r2, [r7, #8]
 8000fc8:	b2ca      	uxtb	r2, r1
 8000fca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	dbf0      	blt.n	8000fbc <_read+0x12>
  }

  return len;
 8000fda:	687b      	ldr	r3, [r7, #4]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	e009      	b.n	800100a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	1c5a      	adds	r2, r3, #1
 8000ffa:	60ba      	str	r2, [r7, #8]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 fac2 	bl	8001588 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	429a      	cmp	r2, r3
 8001010:	dbf1      	blt.n	8000ff6 <_write+0x12>
  }
  return len;
 8001012:	687b      	ldr	r3, [r7, #4]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <_close>:

int _close(int file)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001024:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001044:	605a      	str	r2, [r3, #4]
  return 0;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <_isatty>:

int _isatty(int file)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800105c:	2301      	movs	r3, #1
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800106a:	b480      	push	{r7}
 800106c:	b085      	sub	sp, #20
 800106e:	af00      	add	r7, sp, #0
 8001070:	60f8      	str	r0, [r7, #12]
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800108c:	4a14      	ldr	r2, [pc, #80]	@ (80010e0 <_sbrk+0x5c>)
 800108e:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <_sbrk+0x60>)
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001098:	4b13      	ldr	r3, [pc, #76]	@ (80010e8 <_sbrk+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d102      	bne.n	80010a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a0:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <_sbrk+0x64>)
 80010a2:	4a12      	ldr	r2, [pc, #72]	@ (80010ec <_sbrk+0x68>)
 80010a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a6:	4b10      	ldr	r3, [pc, #64]	@ (80010e8 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d207      	bcs.n	80010c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b4:	f00b f866 	bl	800c184 <__errno>
 80010b8:	4603      	mov	r3, r0
 80010ba:	220c      	movs	r2, #12
 80010bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010c2:	e009      	b.n	80010d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c4:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <_sbrk+0x64>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ca:	4b07      	ldr	r3, [pc, #28]	@ (80010e8 <_sbrk+0x64>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	4a05      	ldr	r2, [pc, #20]	@ (80010e8 <_sbrk+0x64>)
 80010d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010d6:	68fb      	ldr	r3, [r7, #12]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	24080000 	.word	0x24080000
 80010e4:	00000400 	.word	0x00000400
 80010e8:	24004400 	.word	0x24004400
 80010ec:	240045f8 	.word	0x240045f8

080010f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010f4:	4b43      	ldr	r3, [pc, #268]	@ (8001204 <SystemInit+0x114>)
 80010f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010fa:	4a42      	ldr	r2, [pc, #264]	@ (8001204 <SystemInit+0x114>)
 80010fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001100:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001104:	4b40      	ldr	r3, [pc, #256]	@ (8001208 <SystemInit+0x118>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 030f 	and.w	r3, r3, #15
 800110c:	2b06      	cmp	r3, #6
 800110e:	d807      	bhi.n	8001120 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001110:	4b3d      	ldr	r3, [pc, #244]	@ (8001208 <SystemInit+0x118>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f023 030f 	bic.w	r3, r3, #15
 8001118:	4a3b      	ldr	r2, [pc, #236]	@ (8001208 <SystemInit+0x118>)
 800111a:	f043 0307 	orr.w	r3, r3, #7
 800111e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001120:	4b3a      	ldr	r3, [pc, #232]	@ (800120c <SystemInit+0x11c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a39      	ldr	r2, [pc, #228]	@ (800120c <SystemInit+0x11c>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800112c:	4b37      	ldr	r3, [pc, #220]	@ (800120c <SystemInit+0x11c>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001132:	4b36      	ldr	r3, [pc, #216]	@ (800120c <SystemInit+0x11c>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4935      	ldr	r1, [pc, #212]	@ (800120c <SystemInit+0x11c>)
 8001138:	4b35      	ldr	r3, [pc, #212]	@ (8001210 <SystemInit+0x120>)
 800113a:	4013      	ands	r3, r2
 800113c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800113e:	4b32      	ldr	r3, [pc, #200]	@ (8001208 <SystemInit+0x118>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	2b00      	cmp	r3, #0
 8001148:	d007      	beq.n	800115a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800114a:	4b2f      	ldr	r3, [pc, #188]	@ (8001208 <SystemInit+0x118>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f023 030f 	bic.w	r3, r3, #15
 8001152:	4a2d      	ldr	r2, [pc, #180]	@ (8001208 <SystemInit+0x118>)
 8001154:	f043 0307 	orr.w	r3, r3, #7
 8001158:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800115a:	4b2c      	ldr	r3, [pc, #176]	@ (800120c <SystemInit+0x11c>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001160:	4b2a      	ldr	r3, [pc, #168]	@ (800120c <SystemInit+0x11c>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001166:	4b29      	ldr	r3, [pc, #164]	@ (800120c <SystemInit+0x11c>)
 8001168:	2200      	movs	r2, #0
 800116a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800116c:	4b27      	ldr	r3, [pc, #156]	@ (800120c <SystemInit+0x11c>)
 800116e:	4a29      	ldr	r2, [pc, #164]	@ (8001214 <SystemInit+0x124>)
 8001170:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001172:	4b26      	ldr	r3, [pc, #152]	@ (800120c <SystemInit+0x11c>)
 8001174:	4a28      	ldr	r2, [pc, #160]	@ (8001218 <SystemInit+0x128>)
 8001176:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001178:	4b24      	ldr	r3, [pc, #144]	@ (800120c <SystemInit+0x11c>)
 800117a:	4a28      	ldr	r2, [pc, #160]	@ (800121c <SystemInit+0x12c>)
 800117c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800117e:	4b23      	ldr	r3, [pc, #140]	@ (800120c <SystemInit+0x11c>)
 8001180:	2200      	movs	r2, #0
 8001182:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001184:	4b21      	ldr	r3, [pc, #132]	@ (800120c <SystemInit+0x11c>)
 8001186:	4a25      	ldr	r2, [pc, #148]	@ (800121c <SystemInit+0x12c>)
 8001188:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800118a:	4b20      	ldr	r3, [pc, #128]	@ (800120c <SystemInit+0x11c>)
 800118c:	2200      	movs	r2, #0
 800118e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001190:	4b1e      	ldr	r3, [pc, #120]	@ (800120c <SystemInit+0x11c>)
 8001192:	4a22      	ldr	r2, [pc, #136]	@ (800121c <SystemInit+0x12c>)
 8001194:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001196:	4b1d      	ldr	r3, [pc, #116]	@ (800120c <SystemInit+0x11c>)
 8001198:	2200      	movs	r2, #0
 800119a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800119c:	4b1b      	ldr	r3, [pc, #108]	@ (800120c <SystemInit+0x11c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a1a      	ldr	r2, [pc, #104]	@ (800120c <SystemInit+0x11c>)
 80011a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011a8:	4b18      	ldr	r3, [pc, #96]	@ (800120c <SystemInit+0x11c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001220 <SystemInit+0x130>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <SystemInit+0x134>)
 80011b4:	4013      	ands	r3, r2
 80011b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011ba:	d202      	bcs.n	80011c2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001228 <SystemInit+0x138>)
 80011be:	2201      	movs	r2, #1
 80011c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80011c2:	4b12      	ldr	r3, [pc, #72]	@ (800120c <SystemInit+0x11c>)
 80011c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d113      	bne.n	80011f8 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80011d0:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <SystemInit+0x11c>)
 80011d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011d6:	4a0d      	ldr	r2, [pc, #52]	@ (800120c <SystemInit+0x11c>)
 80011d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011e0:	4b12      	ldr	r3, [pc, #72]	@ (800122c <SystemInit+0x13c>)
 80011e2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80011e6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <SystemInit+0x11c>)
 80011ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011ee:	4a07      	ldr	r2, [pc, #28]	@ (800120c <SystemInit+0x11c>)
 80011f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80011f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00
 8001208:	52002000 	.word	0x52002000
 800120c:	58024400 	.word	0x58024400
 8001210:	eaf6ed7f 	.word	0xeaf6ed7f
 8001214:	02020200 	.word	0x02020200
 8001218:	01ff0000 	.word	0x01ff0000
 800121c:	01010280 	.word	0x01010280
 8001220:	5c001000 	.word	0x5c001000
 8001224:	ffff0000 	.word	0xffff0000
 8001228:	51008108 	.word	0x51008108
 800122c:	52004000 	.word	0x52004000

08001230 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001234:	4b09      	ldr	r3, [pc, #36]	@ (800125c <ExitRun0Mode+0x2c>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	4a08      	ldr	r2, [pc, #32]	@ (800125c <ExitRun0Mode+0x2c>)
 800123a:	f043 0302 	orr.w	r3, r3, #2
 800123e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001240:	bf00      	nop
 8001242:	4b06      	ldr	r3, [pc, #24]	@ (800125c <ExitRun0Mode+0x2c>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f9      	beq.n	8001242 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800124e:	bf00      	nop
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	58024800 	.word	0x58024800

08001260 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001260:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800129c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001264:	f7ff ffe4 	bl	8001230 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001268:	f7ff ff42 	bl	80010f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800126c:	480c      	ldr	r0, [pc, #48]	@ (80012a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800126e:	490d      	ldr	r1, [pc, #52]	@ (80012a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001270:	4a0d      	ldr	r2, [pc, #52]	@ (80012a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001274:	e002      	b.n	800127c <LoopCopyDataInit>

08001276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127a:	3304      	adds	r3, #4

0800127c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800127c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001280:	d3f9      	bcc.n	8001276 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001282:	4a0a      	ldr	r2, [pc, #40]	@ (80012ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001284:	4c0a      	ldr	r4, [pc, #40]	@ (80012b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001288:	e001      	b.n	800128e <LoopFillZerobss>

0800128a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800128c:	3204      	adds	r2, #4

0800128e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001290:	d3fb      	bcc.n	800128a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001292:	f00a ff7d 	bl	800c190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001296:	f7ff fa8f 	bl	80007b8 <main>
  bx  lr
 800129a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800129c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012a4:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 80012a8:	0802036c 	.word	0x0802036c
  ldr r2, =_sbss
 80012ac:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 80012b0:	240045f4 	.word	0x240045f4

080012b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b4:	e7fe      	b.n	80012b4 <ADC3_IRQHandler>
	...

080012b8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08c      	sub	sp, #48	@ 0x30
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d009      	beq.n	80012e0 <BSP_LED_Init+0x28>
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d006      	beq.n	80012e0 <BSP_LED_Init+0x28>
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d003      	beq.n	80012e0 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80012d8:	f06f 0301 	mvn.w	r3, #1
 80012dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012de:	e055      	b.n	800138c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10f      	bne.n	8001306 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80012e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001398 <BSP_LED_Init+0xe0>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ec:	4a2a      	ldr	r2, [pc, #168]	@ (8001398 <BSP_LED_Init+0xe0>)
 80012ee:	f043 0302 	orr.w	r3, r3, #2
 80012f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012f6:	4b28      	ldr	r3, [pc, #160]	@ (8001398 <BSP_LED_Init+0xe0>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	e021      	b.n	800134a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d10f      	bne.n	800132c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 800130c:	4b22      	ldr	r3, [pc, #136]	@ (8001398 <BSP_LED_Init+0xe0>)
 800130e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001312:	4a21      	ldr	r2, [pc, #132]	@ (8001398 <BSP_LED_Init+0xe0>)
 8001314:	f043 0310 	orr.w	r3, r3, #16
 8001318:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800131c:	4b1e      	ldr	r3, [pc, #120]	@ (8001398 <BSP_LED_Init+0xe0>)
 800131e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001322:	f003 0310 	and.w	r3, r3, #16
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	e00e      	b.n	800134a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 800132c:	4b1a      	ldr	r3, [pc, #104]	@ (8001398 <BSP_LED_Init+0xe0>)
 800132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001332:	4a19      	ldr	r2, [pc, #100]	@ (8001398 <BSP_LED_Init+0xe0>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800133c:	4b16      	ldr	r3, [pc, #88]	@ (8001398 <BSP_LED_Init+0xe0>)
 800133e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	4a13      	ldr	r2, [pc, #76]	@ (800139c <BSP_LED_Init+0xe4>)
 800134e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001352:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001354:	2301      	movs	r3, #1
 8001356:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	4a0f      	ldr	r2, [pc, #60]	@ (80013a0 <BSP_LED_Init+0xe8>)
 8001364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001368:	f107 0218 	add.w	r2, r7, #24
 800136c:	4611      	mov	r1, r2
 800136e:	4618      	mov	r0, r3
 8001370:	f004 fb50 	bl	8005a14 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	4a0a      	ldr	r2, [pc, #40]	@ (80013a0 <BSP_LED_Init+0xe8>)
 8001378:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	4a07      	ldr	r2, [pc, #28]	@ (800139c <BSP_LED_Init+0xe4>)
 8001380:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001384:	2200      	movs	r2, #0
 8001386:	4619      	mov	r1, r3
 8001388:	f004 fcf4 	bl	8005d74 <HAL_GPIO_WritePin>
  }

  return ret;
 800138c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800138e:	4618      	mov	r0, r3
 8001390:	3730      	adds	r7, #48	@ 0x30
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	58024400 	.word	0x58024400
 800139c:	0800cea4 	.word	0x0800cea4
 80013a0:	2400000c 	.word	0x2400000c

080013a4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	460a      	mov	r2, r1
 80013ae:	71fb      	strb	r3, [r7, #7]
 80013b0:	4613      	mov	r3, r2
 80013b2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80013b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001470 <BSP_PB_Init+0xcc>)
 80013b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ba:	4a2d      	ldr	r2, [pc, #180]	@ (8001470 <BSP_PB_Init+0xcc>)
 80013bc:	f043 0304 	orr.w	r3, r3, #4
 80013c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001470 <BSP_PB_Init+0xcc>)
 80013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80013d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013d6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80013d8:	2302      	movs	r3, #2
 80013da:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80013dc:	2302      	movs	r3, #2
 80013de:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80013e0:	79bb      	ldrb	r3, [r7, #6]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10c      	bne.n	8001400 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	4a21      	ldr	r2, [pc, #132]	@ (8001474 <BSP_PB_Init+0xd0>)
 80013ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f2:	f107 020c 	add.w	r2, r7, #12
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f004 fb0b 	bl	8005a14 <HAL_GPIO_Init>
 80013fe:	e031      	b.n	8001464 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001400:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001404:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	4a1a      	ldr	r2, [pc, #104]	@ (8001474 <BSP_PB_Init+0xd0>)
 800140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140e:	f107 020c 	add.w	r2, r7, #12
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f004 fafd 	bl	8005a14 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4a16      	ldr	r2, [pc, #88]	@ (8001478 <BSP_PB_Init+0xd4>)
 8001420:	441a      	add	r2, r3
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	4915      	ldr	r1, [pc, #84]	@ (800147c <BSP_PB_Init+0xd8>)
 8001426:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800142a:	4619      	mov	r1, r3
 800142c:	4610      	mov	r0, r2
 800142e:	f004 faac 	bl	800598a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4a10      	ldr	r2, [pc, #64]	@ (8001478 <BSP_PB_Init+0xd4>)
 8001438:	1898      	adds	r0, r3, r2
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	4a10      	ldr	r2, [pc, #64]	@ (8001480 <BSP_PB_Init+0xdc>)
 800143e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001442:	461a      	mov	r2, r3
 8001444:	2100      	movs	r1, #0
 8001446:	f004 fa81 	bl	800594c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800144a:	2028      	movs	r0, #40	@ 0x28
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	4a0d      	ldr	r2, [pc, #52]	@ (8001484 <BSP_PB_Init+0xe0>)
 8001450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001454:	2200      	movs	r2, #0
 8001456:	4619      	mov	r1, r3
 8001458:	f002 f8f3 	bl	8003642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800145c:	2328      	movs	r3, #40	@ 0x28
 800145e:	4618      	mov	r0, r3
 8001460:	f002 f909 	bl	8003676 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3720      	adds	r7, #32
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	58024400 	.word	0x58024400
 8001474:	24000018 	.word	0x24000018
 8001478:	24004404 	.word	0x24004404
 800147c:	0800ceac 	.word	0x0800ceac
 8001480:	2400001c 	.word	0x2400001c
 8001484:	24000020 	.word	0x24000020

08001488 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4a04      	ldr	r2, [pc, #16]	@ (80014a8 <BSP_PB_IRQHandler+0x20>)
 8001498:	4413      	add	r3, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f004 fa8a 	bl	80059b4 <HAL_EXTI_IRQHandler>
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	24004404 	.word	0x24004404

080014ac <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80014da:	f06f 0301 	mvn.w	r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	e018      	b.n	8001514 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	2294      	movs	r2, #148	@ 0x94
 80014e6:	fb02 f303 	mul.w	r3, r2, r3
 80014ea:	4a0d      	ldr	r2, [pc, #52]	@ (8001520 <BSP_COM_Init+0x5c>)
 80014ec:	4413      	add	r3, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f86e 	bl	80015d0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	2294      	movs	r2, #148	@ 0x94
 80014f8:	fb02 f303 	mul.w	r3, r2, r3
 80014fc:	4a08      	ldr	r2, [pc, #32]	@ (8001520 <BSP_COM_Init+0x5c>)
 80014fe:	4413      	add	r3, r2
 8001500:	6839      	ldr	r1, [r7, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f000 f80e 	bl	8001524 <MX_USART3_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d002      	beq.n	8001514 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800150e:	f06f 0303 	mvn.w	r3, #3
 8001512:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001514:	68fb      	ldr	r3, [r7, #12]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2400440c 	.word	0x2400440c

08001524 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800152e:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <MX_USART3_Init+0x60>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	220c      	movs	r2, #12
 8001542:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	895b      	ldrh	r3, [r3, #10]
 8001548:	461a      	mov	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	891b      	ldrh	r3, [r3, #8]
 800155a:	461a      	mov	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	899b      	ldrh	r3, [r3, #12]
 8001564:	461a      	mov	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001570:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f008 fcc2 	bl	8009efc <HAL_UART_Init>
 8001578:	4603      	mov	r3, r0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	24000008 	.word	0x24000008

08001588 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001590:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <__io_putchar+0x30>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	2394      	movs	r3, #148	@ 0x94
 8001598:	fb02 f303 	mul.w	r3, r2, r3
 800159c:	4a07      	ldr	r2, [pc, #28]	@ (80015bc <__io_putchar+0x34>)
 800159e:	1898      	adds	r0, r3, r2
 80015a0:	1d39      	adds	r1, r7, #4
 80015a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015a6:	2201      	movs	r2, #1
 80015a8:	f008 fd02 	bl	8009fb0 <HAL_UART_Transmit>
  return ch;
 80015ac:	687b      	ldr	r3, [r7, #4]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	240044a0 	.word	0x240044a0
 80015bc:	2400440c 	.word	0x2400440c

080015c0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80015c4:	2000      	movs	r0, #0
 80015c6:	f7ff ff71 	bl	80014ac <BSP_PB_Callback>
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	@ 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80015d8:	4b27      	ldr	r3, [pc, #156]	@ (8001678 <COM1_MspInit+0xa8>)
 80015da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015de:	4a26      	ldr	r2, [pc, #152]	@ (8001678 <COM1_MspInit+0xa8>)
 80015e0:	f043 0308 	orr.w	r3, r3, #8
 80015e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015e8:	4b23      	ldr	r3, [pc, #140]	@ (8001678 <COM1_MspInit+0xa8>)
 80015ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80015f6:	4b20      	ldr	r3, [pc, #128]	@ (8001678 <COM1_MspInit+0xa8>)
 80015f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001678 <COM1_MspInit+0xa8>)
 80015fe:	f043 0308 	orr.w	r3, r3, #8
 8001602:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001606:	4b1c      	ldr	r3, [pc, #112]	@ (8001678 <COM1_MspInit+0xa8>)
 8001608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001614:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <COM1_MspInit+0xa8>)
 8001616:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800161a:	4a17      	ldr	r2, [pc, #92]	@ (8001678 <COM1_MspInit+0xa8>)
 800161c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001620:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001624:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <COM1_MspInit+0xa8>)
 8001626:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800162a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001632:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001636:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800163c:	2302      	movs	r3, #2
 800163e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001640:	2301      	movs	r3, #1
 8001642:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001644:	2307      	movs	r3, #7
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	480b      	ldr	r0, [pc, #44]	@ (800167c <COM1_MspInit+0xac>)
 8001650:	f004 f9e0 	bl	8005a14 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001654:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001658:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800165e:	2307      	movs	r3, #7
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	4804      	ldr	r0, [pc, #16]	@ (800167c <COM1_MspInit+0xac>)
 800166a:	f004 f9d3 	bl	8005a14 <HAL_GPIO_Init>
}
 800166e:	bf00      	nop
 8001670:	3728      	adds	r7, #40	@ 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	58024400 	.word	0x58024400
 800167c:	58020c00 	.word	0x58020c00

08001680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001686:	2003      	movs	r0, #3
 8001688:	f001 ffd0 	bl	800362c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800168c:	f005 f9d6 	bl	8006a3c <HAL_RCC_GetSysClockFreq>
 8001690:	4602      	mov	r2, r0
 8001692:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <HAL_Init+0x68>)
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	0a1b      	lsrs	r3, r3, #8
 8001698:	f003 030f 	and.w	r3, r3, #15
 800169c:	4913      	ldr	r1, [pc, #76]	@ (80016ec <HAL_Init+0x6c>)
 800169e:	5ccb      	ldrb	r3, [r1, r3]
 80016a0:	f003 031f 	and.w	r3, r3, #31
 80016a4:	fa22 f303 	lsr.w	r3, r2, r3
 80016a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016aa:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <HAL_Init+0x68>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	4a0e      	ldr	r2, [pc, #56]	@ (80016ec <HAL_Init+0x6c>)
 80016b4:	5cd3      	ldrb	r3, [r2, r3]
 80016b6:	f003 031f 	and.w	r3, r3, #31
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	fa22 f303 	lsr.w	r3, r2, r3
 80016c0:	4a0b      	ldr	r2, [pc, #44]	@ (80016f0 <HAL_Init+0x70>)
 80016c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016c4:	4a0b      	ldr	r2, [pc, #44]	@ (80016f4 <HAL_Init+0x74>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ca:	2000      	movs	r0, #0
 80016cc:	f000 f814 	bl	80016f8 <HAL_InitTick>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e002      	b.n	80016e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016da:	f7ff fb2f 	bl	8000d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	58024400 	.word	0x58024400
 80016ec:	0800ce94 	.word	0x0800ce94
 80016f0:	24000004 	.word	0x24000004
 80016f4:	24000000 	.word	0x24000000

080016f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001700:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <HAL_InitTick+0x60>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e021      	b.n	8001750 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800170c:	4b13      	ldr	r3, [pc, #76]	@ (800175c <HAL_InitTick+0x64>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <HAL_InitTick+0x60>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800171a:	fbb3 f3f1 	udiv	r3, r3, r1
 800171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f001 ffb5 	bl	8003692 <HAL_SYSTICK_Config>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e00e      	b.n	8001750 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b0f      	cmp	r3, #15
 8001736:	d80a      	bhi.n	800174e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001738:	2200      	movs	r2, #0
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001740:	f001 ff7f 	bl	8003642 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001744:	4a06      	ldr	r2, [pc, #24]	@ (8001760 <HAL_InitTick+0x68>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	e000      	b.n	8001750 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	24000028 	.word	0x24000028
 800175c:	24000000 	.word	0x24000000
 8001760:	24000024 	.word	0x24000024

08001764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <HAL_IncTick+0x20>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <HAL_IncTick+0x24>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4413      	add	r3, r2
 8001774:	4a04      	ldr	r2, [pc, #16]	@ (8001788 <HAL_IncTick+0x24>)
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	24000028 	.word	0x24000028
 8001788:	240044a4 	.word	0x240044a4

0800178c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return uwTick;
 8001790:	4b03      	ldr	r3, [pc, #12]	@ (80017a0 <HAL_GetTick+0x14>)
 8001792:	681b      	ldr	r3, [r3, #0]
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	240044a4 	.word	0x240044a4

080017a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017a8:	4b03      	ldr	r3, [pc, #12]	@ (80017b8 <HAL_GetREVID+0x14>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	0c1b      	lsrs	r3, r3, #16
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	5c001000 	.word	0x5c001000

080017bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	431a      	orrs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	609a      	str	r2, [r3, #8]
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	431a      	orrs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	609a      	str	r2, [r3, #8]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001824:	b480      	push	{r7}
 8001826:	b087      	sub	sp, #28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001834:	2b00      	cmp	r3, #0
 8001836:	d107      	bne.n	8001848 <LL_ADC_SetChannelPreselection+0x24>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	0e9b      	lsrs	r3, r3, #26
 800183c:	f003 031f 	and.w	r3, r3, #31
 8001840:	2201      	movs	r2, #1
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	e015      	b.n	8001874 <LL_ADC_SetChannelPreselection+0x50>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	fa93 f3a3 	rbit	r3, r3
 8001852:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 800185e:	2320      	movs	r3, #32
 8001860:	e003      	b.n	800186a <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	fab3 f383 	clz	r3, r3
 8001868:	b2db      	uxtb	r3, r3
 800186a:	f003 031f 	and.w	r3, r3, #31
 800186e:	2201      	movs	r2, #1
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	69d2      	ldr	r2, [r2, #28]
 8001878:	431a      	orrs	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 800187e:	bf00      	nop
 8001880:	371c      	adds	r7, #28
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800188a:	b480      	push	{r7}
 800188c:	b087      	sub	sp, #28
 800188e:	af00      	add	r7, sp, #0
 8001890:	60f8      	str	r0, [r7, #12]
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
 8001896:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	3360      	adds	r3, #96	@ 0x60
 800189c:	461a      	mov	r2, r3
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	430b      	orrs	r3, r1
 80018b8:	431a      	orrs	r2, r3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80018be:	bf00      	nop
 80018c0:	371c      	adds	r7, #28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b085      	sub	sp, #20
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	f003 031f 	and.w	r3, r3, #31
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	431a      	orrs	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	611a      	str	r2, [r3, #16]
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	3360      	adds	r3, #96	@ 0x60
 800190c:	461a      	mov	r2, r3
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	431a      	orrs	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	601a      	str	r2, [r3, #0]
  }
}
 8001926:	bf00      	nop
 8001928:	371c      	adds	r7, #28
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	3330      	adds	r3, #48	@ 0x30
 8001968:	461a      	mov	r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	4413      	add	r3, r2
 8001976:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	f003 031f 	and.w	r3, r3, #31
 8001982:	211f      	movs	r1, #31
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	401a      	ands	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	0e9b      	lsrs	r3, r3, #26
 8001990:	f003 011f 	and.w	r1, r3, #31
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	f003 031f 	and.w	r3, r3, #31
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	431a      	orrs	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019a4:	bf00      	nop
 80019a6:	371c      	adds	r7, #28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	f023 0203 	bic.w	r2, r3, #3
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	60da      	str	r2, [r3, #12]
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	3314      	adds	r3, #20
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	0e5b      	lsrs	r3, r3, #25
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	4413      	add	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	0d1b      	lsrs	r3, r3, #20
 8001a24:	f003 031f 	and.w	r3, r3, #31
 8001a28:	2107      	movs	r1, #7
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	401a      	ands	r2, r3
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	0d1b      	lsrs	r3, r3, #20
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	431a      	orrs	r2, r3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a46:	bf00      	nop
 8001a48:	371c      	adds	r7, #28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	401a      	ands	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0318 	and.w	r3, r3, #24
 8001a76:	4908      	ldr	r1, [pc, #32]	@ (8001a98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a78:	40d9      	lsrs	r1, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	400b      	ands	r3, r1
 8001a7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a82:	431a      	orrs	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	000fffff 	.word	0x000fffff

08001a9c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 031f 	and.w	r3, r3, #31
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	4b04      	ldr	r3, [pc, #16]	@ (8001af4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6093      	str	r3, [r2, #8]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	5fffffc0 	.word	0x5fffffc0

08001af8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b0c:	d101      	bne.n	8001b12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <LL_ADC_EnableInternalRegulator+0x24>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	6fffffc0 	.word	0x6fffffc0

08001b48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b5c:	d101      	bne.n	8001b62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	4b05      	ldr	r3, [pc, #20]	@ (8001b94 <LL_ADC_Enable+0x24>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	f043 0201 	orr.w	r2, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	7fffffc0 	.word	0x7fffffc0

08001b98 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	4b05      	ldr	r3, [pc, #20]	@ (8001bbc <LL_ADC_Disable+0x24>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	f043 0202 	orr.w	r2, r3, #2
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	7fffffc0 	.word	0x7fffffc0

08001bc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <LL_ADC_IsEnabled+0x18>
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e000      	b.n	8001bda <LL_ADC_IsEnabled+0x1a>
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d101      	bne.n	8001bfe <LL_ADC_IsDisableOngoing+0x18>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <LL_ADC_IsDisableOngoing+0x1a>
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	4b05      	ldr	r3, [pc, #20]	@ (8001c30 <LL_ADC_REG_StartConversion+0x24>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	f043 0204 	orr.w	r2, r3, #4
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	7fffffc0 	.word	0x7fffffc0

08001c34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d101      	bne.n	8001c4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e000      	b.n	8001c4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d101      	bne.n	8001c72 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b089      	sub	sp, #36	@ 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e18f      	b.n	8001fba <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d109      	bne.n	8001cbc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff f861 	bl	8000d70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff19 	bl	8001af8 <LL_ADC_IsDeepPowerDownEnabled>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d004      	beq.n	8001cd6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff feff 	bl	8001ad4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ff34 	bl	8001b48 <LL_ADC_IsInternalRegulatorEnabled>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d114      	bne.n	8001d10 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff18 	bl	8001b20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cf0:	4b87      	ldr	r3, [pc, #540]	@ (8001f10 <HAL_ADC_Init+0x290>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	099b      	lsrs	r3, r3, #6
 8001cf6:	4a87      	ldr	r2, [pc, #540]	@ (8001f14 <HAL_ADC_Init+0x294>)
 8001cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfc:	099b      	lsrs	r3, r3, #6
 8001cfe:	3301      	adds	r3, #1
 8001d00:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d02:	e002      	b.n	8001d0a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1f9      	bne.n	8001d04 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff17 	bl	8001b48 <LL_ADC_IsInternalRegulatorEnabled>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10d      	bne.n	8001d3c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d24:	f043 0210 	orr.w	r2, r3, #16
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d30:	f043 0201 	orr.w	r2, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff77 	bl	8001c34 <LL_ADC_REG_IsConversionOngoing>
 8001d46:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d4c:	f003 0310 	and.w	r3, r3, #16
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f040 8129 	bne.w	8001fa8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f040 8125 	bne.w	8001fa8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d62:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d66:	f043 0202 	orr.w	r2, r3, #2
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff24 	bl	8001bc0 <LL_ADC_IsEnabled>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d136      	bne.n	8001dec <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a65      	ldr	r2, [pc, #404]	@ (8001f18 <HAL_ADC_Init+0x298>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d004      	beq.n	8001d92 <HAL_ADC_Init+0x112>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a63      	ldr	r2, [pc, #396]	@ (8001f1c <HAL_ADC_Init+0x29c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d10e      	bne.n	8001db0 <HAL_ADC_Init+0x130>
 8001d92:	4861      	ldr	r0, [pc, #388]	@ (8001f18 <HAL_ADC_Init+0x298>)
 8001d94:	f7ff ff14 	bl	8001bc0 <LL_ADC_IsEnabled>
 8001d98:	4604      	mov	r4, r0
 8001d9a:	4860      	ldr	r0, [pc, #384]	@ (8001f1c <HAL_ADC_Init+0x29c>)
 8001d9c:	f7ff ff10 	bl	8001bc0 <LL_ADC_IsEnabled>
 8001da0:	4603      	mov	r3, r0
 8001da2:	4323      	orrs	r3, r4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bf0c      	ite	eq
 8001da8:	2301      	moveq	r3, #1
 8001daa:	2300      	movne	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	e008      	b.n	8001dc2 <HAL_ADC_Init+0x142>
 8001db0:	485b      	ldr	r0, [pc, #364]	@ (8001f20 <HAL_ADC_Init+0x2a0>)
 8001db2:	f7ff ff05 	bl	8001bc0 <LL_ADC_IsEnabled>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bf0c      	ite	eq
 8001dbc:	2301      	moveq	r3, #1
 8001dbe:	2300      	movne	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d012      	beq.n	8001dec <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a53      	ldr	r2, [pc, #332]	@ (8001f18 <HAL_ADC_Init+0x298>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d004      	beq.n	8001dda <HAL_ADC_Init+0x15a>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a51      	ldr	r2, [pc, #324]	@ (8001f1c <HAL_ADC_Init+0x29c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d101      	bne.n	8001dde <HAL_ADC_Init+0x15e>
 8001dda:	4a52      	ldr	r2, [pc, #328]	@ (8001f24 <HAL_ADC_Init+0x2a4>)
 8001ddc:	e000      	b.n	8001de0 <HAL_ADC_Init+0x160>
 8001dde:	4a52      	ldr	r2, [pc, #328]	@ (8001f28 <HAL_ADC_Init+0x2a8>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	4619      	mov	r1, r3
 8001de6:	4610      	mov	r0, r2
 8001de8:	f7ff fce8 	bl	80017bc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001dec:	f7ff fcda 	bl	80017a4 <HAL_GetREVID>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d914      	bls.n	8001e24 <HAL_ADC_Init+0x1a4>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2b10      	cmp	r3, #16
 8001e00:	d110      	bne.n	8001e24 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7d5b      	ldrb	r3, [r3, #21]
 8001e06:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e0c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e12:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7f1b      	ldrb	r3, [r3, #28]
 8001e18:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e1a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e1c:	f043 030c 	orr.w	r3, r3, #12
 8001e20:	61bb      	str	r3, [r7, #24]
 8001e22:	e00d      	b.n	8001e40 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	7d5b      	ldrb	r3, [r3, #21]
 8001e28:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e2e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e34:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7f1b      	ldrb	r3, [r3, #28]
 8001e3a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	7f1b      	ldrb	r3, [r3, #28]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d106      	bne.n	8001e56 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	045b      	lsls	r3, r3, #17
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d009      	beq.n	8001e72 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e62:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	4b2c      	ldr	r3, [pc, #176]	@ (8001f2c <HAL_ADC_Init+0x2ac>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	69b9      	ldr	r1, [r7, #24]
 8001e82:	430b      	orrs	r3, r1
 8001e84:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fed2 	bl	8001c34 <LL_ADC_REG_IsConversionOngoing>
 8001e90:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fedf 	bl	8001c5a <LL_ADC_INJ_IsConversionOngoing>
 8001e9c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d15f      	bne.n	8001f64 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d15c      	bne.n	8001f64 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7d1b      	ldrb	r3, [r3, #20]
 8001eae:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8001f30 <HAL_ADC_Init+0x2b0>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	69b9      	ldr	r1, [r7, #24]
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d130      	bne.n	8001f38 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eda:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	4b14      	ldr	r3, [pc, #80]	@ (8001f34 <HAL_ADC_Init+0x2b4>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001eea:	3a01      	subs	r2, #1
 8001eec:	0411      	lsls	r1, r2, #16
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ef2:	4311      	orrs	r1, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001ef8:	4311      	orrs	r1, r2
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001efe:	430a      	orrs	r2, r1
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0201 	orr.w	r2, r2, #1
 8001f0a:	611a      	str	r2, [r3, #16]
 8001f0c:	e01c      	b.n	8001f48 <HAL_ADC_Init+0x2c8>
 8001f0e:	bf00      	nop
 8001f10:	24000000 	.word	0x24000000
 8001f14:	053e2d63 	.word	0x053e2d63
 8001f18:	40022000 	.word	0x40022000
 8001f1c:	40022100 	.word	0x40022100
 8001f20:	58026000 	.word	0x58026000
 8001f24:	40022300 	.word	0x40022300
 8001f28:	58026300 	.word	0x58026300
 8001f2c:	fff0c003 	.word	0xfff0c003
 8001f30:	ffffbffc 	.word	0xffffbffc
 8001f34:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691a      	ldr	r2, [r3, #16]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 ffba 	bl	8002ed8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d10c      	bne.n	8001f86 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	f023 010f 	bic.w	r1, r3, #15
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	1e5a      	subs	r2, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f84:	e007      	b.n	8001f96 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 020f 	bic.w	r2, r2, #15
 8001f94:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f9a:	f023 0303 	bic.w	r3, r3, #3
 8001f9e:	f043 0201 	orr.w	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	655a      	str	r2, [r3, #84]	@ 0x54
 8001fa6:	e007      	b.n	8001fb8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fac:	f043 0210 	orr.w	r2, r3, #16
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3724      	adds	r7, #36	@ 0x24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd90      	pop	{r4, r7, pc}
 8001fc2:	bf00      	nop

08001fc4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a55      	ldr	r2, [pc, #340]	@ (800212c <HAL_ADC_Start_DMA+0x168>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d004      	beq.n	8001fe4 <HAL_ADC_Start_DMA+0x20>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a54      	ldr	r2, [pc, #336]	@ (8002130 <HAL_ADC_Start_DMA+0x16c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d101      	bne.n	8001fe8 <HAL_ADC_Start_DMA+0x24>
 8001fe4:	4b53      	ldr	r3, [pc, #332]	@ (8002134 <HAL_ADC_Start_DMA+0x170>)
 8001fe6:	e000      	b.n	8001fea <HAL_ADC_Start_DMA+0x26>
 8001fe8:	4b53      	ldr	r3, [pc, #332]	@ (8002138 <HAL_ADC_Start_DMA+0x174>)
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fd56 	bl	8001a9c <LL_ADC_GetMultimode>
 8001ff0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fe1c 	bl	8001c34 <LL_ADC_REG_IsConversionOngoing>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f040 808c 	bne.w	800211c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800200a:	2b01      	cmp	r3, #1
 800200c:	d101      	bne.n	8002012 <HAL_ADC_Start_DMA+0x4e>
 800200e:	2302      	movs	r3, #2
 8002010:	e087      	b.n	8002122 <HAL_ADC_Start_DMA+0x15e>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	2b05      	cmp	r3, #5
 8002024:	d002      	beq.n	800202c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2b09      	cmp	r3, #9
 800202a:	d170      	bne.n	800210e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 fdd5 	bl	8002bdc <ADC_Enable>
 8002032:	4603      	mov	r3, r0
 8002034:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002036:	7dfb      	ldrb	r3, [r7, #23]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d163      	bne.n	8002104 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002040:	4b3e      	ldr	r3, [pc, #248]	@ (800213c <HAL_ADC_Start_DMA+0x178>)
 8002042:	4013      	ands	r3, r2
 8002044:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a37      	ldr	r2, [pc, #220]	@ (8002130 <HAL_ADC_Start_DMA+0x16c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d002      	beq.n	800205c <HAL_ADC_Start_DMA+0x98>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	e000      	b.n	800205e <HAL_ADC_Start_DMA+0x9a>
 800205c:	4b33      	ldr	r3, [pc, #204]	@ (800212c <HAL_ADC_Start_DMA+0x168>)
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	4293      	cmp	r3, r2
 8002064:	d002      	beq.n	800206c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d105      	bne.n	8002078 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002070:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800207c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d006      	beq.n	8002092 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002088:	f023 0206 	bic.w	r2, r3, #6
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002090:	e002      	b.n	8002098 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209c:	4a28      	ldr	r2, [pc, #160]	@ (8002140 <HAL_ADC_Start_DMA+0x17c>)
 800209e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a4:	4a27      	ldr	r2, [pc, #156]	@ (8002144 <HAL_ADC_Start_DMA+0x180>)
 80020a6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ac:	4a26      	ldr	r2, [pc, #152]	@ (8002148 <HAL_ADC_Start_DMA+0x184>)
 80020ae:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	221c      	movs	r2, #28
 80020b6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0210 	orr.w	r2, r2, #16
 80020ce:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d8:	4619      	mov	r1, r3
 80020da:	4610      	mov	r0, r2
 80020dc:	f7ff fc68 	bl	80019b0 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	3340      	adds	r3, #64	@ 0x40
 80020ea:	4619      	mov	r1, r3
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f001 feb0 	bl	8003e54 <HAL_DMA_Start_IT>
 80020f4:	4603      	mov	r3, r0
 80020f6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fd85 	bl	8001c0c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002102:	e00d      	b.n	8002120 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800210c:	e008      	b.n	8002120 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800211a:	e001      	b.n	8002120 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800211c:	2302      	movs	r3, #2
 800211e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002120:	7dfb      	ldrb	r3, [r7, #23]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40022000 	.word	0x40022000
 8002130:	40022100 	.word	0x40022100
 8002134:	40022300 	.word	0x40022300
 8002138:	58026300 	.word	0x58026300
 800213c:	fffff0fe 	.word	0xfffff0fe
 8002140:	08002daf 	.word	0x08002daf
 8002144:	08002e87 	.word	0x08002e87
 8002148:	08002ea3 	.word	0x08002ea3

0800214c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	@ 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002154:	2300      	movs	r3, #0
 8002156:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a87      	ldr	r2, [pc, #540]	@ (800238c <HAL_ADC_IRQHandler+0x240>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d004      	beq.n	800217c <HAL_ADC_IRQHandler+0x30>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a86      	ldr	r2, [pc, #536]	@ (8002390 <HAL_ADC_IRQHandler+0x244>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d101      	bne.n	8002180 <HAL_ADC_IRQHandler+0x34>
 800217c:	4b85      	ldr	r3, [pc, #532]	@ (8002394 <HAL_ADC_IRQHandler+0x248>)
 800217e:	e000      	b.n	8002182 <HAL_ADC_IRQHandler+0x36>
 8002180:	4b85      	ldr	r3, [pc, #532]	@ (8002398 <HAL_ADC_IRQHandler+0x24c>)
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fc8a 	bl	8001a9c <LL_ADC_GetMultimode>
 8002188:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d017      	beq.n	80021c4 <HAL_ADC_IRQHandler+0x78>
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d012      	beq.n	80021c4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a2:	f003 0310 	and.w	r3, r3, #16
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d105      	bne.n	80021b6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ae:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f001 f880 	bl	80032bc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2202      	movs	r2, #2
 80021c2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f003 0304 	and.w	r3, r3, #4
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d004      	beq.n	80021d8 <HAL_ADC_IRQHandler+0x8c>
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10a      	bne.n	80021ee <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8083 	beq.w	80022ea <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d07d      	beq.n	80022ea <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f2:	f003 0310 	and.w	r3, r3, #16
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d105      	bne.n	8002206 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fb91 	bl	8001932 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d062      	beq.n	80022dc <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a5d      	ldr	r2, [pc, #372]	@ (8002390 <HAL_ADC_IRQHandler+0x244>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d002      	beq.n	8002226 <HAL_ADC_IRQHandler+0xda>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	e000      	b.n	8002228 <HAL_ADC_IRQHandler+0xdc>
 8002226:	4b59      	ldr	r3, [pc, #356]	@ (800238c <HAL_ADC_IRQHandler+0x240>)
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	4293      	cmp	r3, r2
 800222e:	d008      	beq.n	8002242 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d005      	beq.n	8002242 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2b05      	cmp	r3, #5
 800223a:	d002      	beq.n	8002242 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2b09      	cmp	r3, #9
 8002240:	d104      	bne.n	800224c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	623b      	str	r3, [r7, #32]
 800224a:	e00c      	b.n	8002266 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a4f      	ldr	r2, [pc, #316]	@ (8002390 <HAL_ADC_IRQHandler+0x244>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d002      	beq.n	800225c <HAL_ADC_IRQHandler+0x110>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	e000      	b.n	800225e <HAL_ADC_IRQHandler+0x112>
 800225c:	4b4b      	ldr	r3, [pc, #300]	@ (800238c <HAL_ADC_IRQHandler+0x240>)
 800225e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d135      	bne.n	80022dc <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b08      	cmp	r3, #8
 800227c:	d12e      	bne.n	80022dc <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fcd6 	bl	8001c34 <LL_ADC_REG_IsConversionOngoing>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d11a      	bne.n	80022c4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 020c 	bic.w	r2, r2, #12
 800229c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d112      	bne.n	80022dc <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ba:	f043 0201 	orr.w	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	655a      	str	r2, [r3, #84]	@ 0x54
 80022c2:	e00b      	b.n	80022dc <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c8:	f043 0210 	orr.w	r2, r3, #16
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d4:	f043 0201 	orr.w	r2, r3, #1
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7fe fa27 	bl	8000730 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	220c      	movs	r2, #12
 80022e8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f003 0320 	and.w	r3, r3, #32
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d004      	beq.n	80022fe <HAL_ADC_IRQHandler+0x1b2>
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	f003 0320 	and.w	r3, r3, #32
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10b      	bne.n	8002316 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 80a0 	beq.w	800244a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 809a 	beq.w	800244a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	d105      	bne.n	800232e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002326:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fb4f 	bl	80019d6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002338:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff faf7 	bl	8001932 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002344:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a11      	ldr	r2, [pc, #68]	@ (8002390 <HAL_ADC_IRQHandler+0x244>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d002      	beq.n	8002356 <HAL_ADC_IRQHandler+0x20a>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	e000      	b.n	8002358 <HAL_ADC_IRQHandler+0x20c>
 8002356:	4b0d      	ldr	r3, [pc, #52]	@ (800238c <HAL_ADC_IRQHandler+0x240>)
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	4293      	cmp	r3, r2
 800235e:	d008      	beq.n	8002372 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b06      	cmp	r3, #6
 800236a:	d002      	beq.n	8002372 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	2b07      	cmp	r3, #7
 8002370:	d104      	bne.n	800237c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	623b      	str	r3, [r7, #32]
 800237a:	e014      	b.n	80023a6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a03      	ldr	r2, [pc, #12]	@ (8002390 <HAL_ADC_IRQHandler+0x244>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d00a      	beq.n	800239c <HAL_ADC_IRQHandler+0x250>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	e008      	b.n	800239e <HAL_ADC_IRQHandler+0x252>
 800238c:	40022000 	.word	0x40022000
 8002390:	40022100 	.word	0x40022100
 8002394:	40022300 	.word	0x40022300
 8002398:	58026300 	.word	0x58026300
 800239c:	4b84      	ldr	r3, [pc, #528]	@ (80025b0 <HAL_ADC_IRQHandler+0x464>)
 800239e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d047      	beq.n	800243c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d007      	beq.n	80023c6 <HAL_ADC_IRQHandler+0x27a>
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d03f      	beq.n	800243c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d13a      	bne.n	800243c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023d0:	2b40      	cmp	r3, #64	@ 0x40
 80023d2:	d133      	bne.n	800243c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d12e      	bne.n	800243c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fc39 	bl	8001c5a <LL_ADC_INJ_IsConversionOngoing>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d11a      	bne.n	8002424 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80023fc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002402:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800240e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002412:	2b00      	cmp	r3, #0
 8002414:	d112      	bne.n	800243c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241a:	f043 0201 	orr.w	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	655a      	str	r2, [r3, #84]	@ 0x54
 8002422:	e00b      	b.n	800243c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002428:	f043 0210 	orr.w	r2, r3, #16
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 ff15 	bl	800326c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2260      	movs	r2, #96	@ 0x60
 8002448:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002450:	2b00      	cmp	r3, #0
 8002452:	d011      	beq.n	8002478 <HAL_ADC_IRQHandler+0x32c>
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00c      	beq.n	8002478 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002462:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f8b2 	bl	80025d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2280      	movs	r2, #128	@ 0x80
 8002476:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d012      	beq.n	80024a8 <HAL_ADC_IRQHandler+0x35c>
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00d      	beq.n	80024a8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002490:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 fefb 	bl	8003294 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d012      	beq.n	80024d8 <HAL_ADC_IRQHandler+0x38c>
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00d      	beq.n	80024d8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 feed 	bl	80032a8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d043      	beq.n	800256a <HAL_ADC_IRQHandler+0x41e>
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d03e      	beq.n	800256a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80024f4:	2301      	movs	r3, #1
 80024f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80024f8:	e021      	b.n	800253e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d015      	beq.n	800252c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a2a      	ldr	r2, [pc, #168]	@ (80025b0 <HAL_ADC_IRQHandler+0x464>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d004      	beq.n	8002514 <HAL_ADC_IRQHandler+0x3c8>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a29      	ldr	r2, [pc, #164]	@ (80025b4 <HAL_ADC_IRQHandler+0x468>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d101      	bne.n	8002518 <HAL_ADC_IRQHandler+0x3cc>
 8002514:	4b28      	ldr	r3, [pc, #160]	@ (80025b8 <HAL_ADC_IRQHandler+0x46c>)
 8002516:	e000      	b.n	800251a <HAL_ADC_IRQHandler+0x3ce>
 8002518:	4b28      	ldr	r3, [pc, #160]	@ (80025bc <HAL_ADC_IRQHandler+0x470>)
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff facc 	bl	8001ab8 <LL_ADC_GetMultiDMATransfer>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00b      	beq.n	800253e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002526:	2301      	movs	r3, #1
 8002528:	627b      	str	r3, [r7, #36]	@ 0x24
 800252a:	e008      	b.n	800253e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800253a:	2301      	movs	r3, #1
 800253c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	2b01      	cmp	r3, #1
 8002542:	d10e      	bne.n	8002562 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002548:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002554:	f043 0202 	orr.w	r2, r3, #2
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f843 	bl	80025e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2210      	movs	r2, #16
 8002568:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002570:	2b00      	cmp	r3, #0
 8002572:	d018      	beq.n	80025a6 <HAL_ADC_IRQHandler+0x45a>
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800257a:	2b00      	cmp	r3, #0
 800257c:	d013      	beq.n	80025a6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002582:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258e:	f043 0208 	orr.w	r2, r3, #8
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800259e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 fe6d 	bl	8003280 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80025a6:	bf00      	nop
 80025a8:	3728      	adds	r7, #40	@ 0x28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40022000 	.word	0x40022000
 80025b4:	40022100 	.word	0x40022100
 80025b8:	40022300 	.word	0x40022300
 80025bc:	58026300 	.word	0x58026300

080025c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025fc:	b590      	push	{r4, r7, lr}
 80025fe:	b08d      	sub	sp, #52	@ 0x34
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4a65      	ldr	r2, [pc, #404]	@ (80027ac <HAL_ADC_ConfigChannel+0x1b0>)
 8002616:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x2a>
 8002622:	2302      	movs	r3, #2
 8002624:	e2c7      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x5ba>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fafe 	bl	8001c34 <LL_ADC_REG_IsConversionOngoing>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	f040 82ac 	bne.w	8002b98 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	db2c      	blt.n	80026a2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002650:	2b00      	cmp	r3, #0
 8002652:	d108      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x6a>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	0e9b      	lsrs	r3, r3, #26
 800265a:	f003 031f 	and.w	r3, r3, #31
 800265e:	2201      	movs	r2, #1
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	e016      	b.n	8002694 <HAL_ADC_ConfigChannel+0x98>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	613b      	str	r3, [r7, #16]
  return result;
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 800267e:	2320      	movs	r3, #32
 8002680:	e003      	b.n	800268a <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	fab3 f383 	clz	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	2201      	movs	r2, #1
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	69d1      	ldr	r1, [r2, #28]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	430b      	orrs	r3, r1
 80026a0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6859      	ldr	r1, [r3, #4]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	f7ff f952 	bl	8001958 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fabb 	bl	8001c34 <LL_ADC_REG_IsConversionOngoing>
 80026be:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff fac8 	bl	8001c5a <LL_ADC_INJ_IsConversionOngoing>
 80026ca:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f040 80b8 	bne.w	8002844 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f040 80b4 	bne.w	8002844 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	6819      	ldr	r1, [r3, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	461a      	mov	r2, r3
 80026ea:	f7ff f987 	bl	80019fc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026ee:	4b30      	ldr	r3, [pc, #192]	@ (80027b0 <HAL_ADC_ConfigChannel+0x1b4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80026f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026fa:	d10b      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x118>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	695a      	ldr	r2, [r3, #20]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	089b      	lsrs	r3, r3, #2
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	e01d      	b.n	8002750 <HAL_ADC_ConfigChannel+0x154>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10b      	bne.n	800273a <HAL_ADC_ConfigChannel+0x13e>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	695a      	ldr	r2, [r3, #20]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	089b      	lsrs	r3, r3, #2
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	e00a      	b.n	8002750 <HAL_ADC_ConfigChannel+0x154>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	089b      	lsrs	r3, r3, #2
 8002746:	f003 0304 	and.w	r3, r3, #4
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	2b04      	cmp	r3, #4
 8002758:	d02c      	beq.n	80027b4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6919      	ldr	r1, [r3, #16]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	f7ff f88f 	bl	800188a <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	6919      	ldr	r1, [r3, #16]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	7e5b      	ldrb	r3, [r3, #25]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d102      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x186>
 800277c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002780:	e000      	b.n	8002784 <HAL_ADC_ConfigChannel+0x188>
 8002782:	2300      	movs	r3, #0
 8002784:	461a      	mov	r2, r3
 8002786:	f7ff f8b9 	bl	80018fc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	6919      	ldr	r1, [r3, #16]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	7e1b      	ldrb	r3, [r3, #24]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d102      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x1a4>
 800279a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800279e:	e000      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x1a6>
 80027a0:	2300      	movs	r3, #0
 80027a2:	461a      	mov	r2, r3
 80027a4:	f7ff f891 	bl	80018ca <LL_ADC_SetDataRightShift>
 80027a8:	e04c      	b.n	8002844 <HAL_ADC_ConfigChannel+0x248>
 80027aa:	bf00      	nop
 80027ac:	47ff0000 	.word	0x47ff0000
 80027b0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	069b      	lsls	r3, r3, #26
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d107      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027d6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	069b      	lsls	r3, r3, #26
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d107      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027fa:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002802:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	069b      	lsls	r3, r3, #26
 800280c:	429a      	cmp	r2, r3
 800280e:	d107      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800281e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002826:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	069b      	lsls	r3, r3, #26
 8002830:	429a      	cmp	r2, r3
 8002832:	d107      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002842:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff f9b9 	bl	8001bc0 <LL_ADC_IsEnabled>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	f040 81aa 	bne.w	8002baa <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6818      	ldr	r0, [r3, #0]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	6819      	ldr	r1, [r3, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	461a      	mov	r2, r3
 8002864:	f7ff f8f6 	bl	8001a54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4a87      	ldr	r2, [pc, #540]	@ (8002a8c <HAL_ADC_ConfigChannel+0x490>)
 800286e:	4293      	cmp	r3, r2
 8002870:	f040 809a 	bne.w	80029a8 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4984      	ldr	r1, [pc, #528]	@ (8002a90 <HAL_ADC_ConfigChannel+0x494>)
 800287e:	428b      	cmp	r3, r1
 8002880:	d147      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x316>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4983      	ldr	r1, [pc, #524]	@ (8002a94 <HAL_ADC_ConfigChannel+0x498>)
 8002888:	428b      	cmp	r3, r1
 800288a:	d040      	beq.n	800290e <HAL_ADC_ConfigChannel+0x312>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4981      	ldr	r1, [pc, #516]	@ (8002a98 <HAL_ADC_ConfigChannel+0x49c>)
 8002892:	428b      	cmp	r3, r1
 8002894:	d039      	beq.n	800290a <HAL_ADC_ConfigChannel+0x30e>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4980      	ldr	r1, [pc, #512]	@ (8002a9c <HAL_ADC_ConfigChannel+0x4a0>)
 800289c:	428b      	cmp	r3, r1
 800289e:	d032      	beq.n	8002906 <HAL_ADC_ConfigChannel+0x30a>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	497e      	ldr	r1, [pc, #504]	@ (8002aa0 <HAL_ADC_ConfigChannel+0x4a4>)
 80028a6:	428b      	cmp	r3, r1
 80028a8:	d02b      	beq.n	8002902 <HAL_ADC_ConfigChannel+0x306>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	497d      	ldr	r1, [pc, #500]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x4a8>)
 80028b0:	428b      	cmp	r3, r1
 80028b2:	d024      	beq.n	80028fe <HAL_ADC_ConfigChannel+0x302>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	497b      	ldr	r1, [pc, #492]	@ (8002aa8 <HAL_ADC_ConfigChannel+0x4ac>)
 80028ba:	428b      	cmp	r3, r1
 80028bc:	d01d      	beq.n	80028fa <HAL_ADC_ConfigChannel+0x2fe>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	497a      	ldr	r1, [pc, #488]	@ (8002aac <HAL_ADC_ConfigChannel+0x4b0>)
 80028c4:	428b      	cmp	r3, r1
 80028c6:	d016      	beq.n	80028f6 <HAL_ADC_ConfigChannel+0x2fa>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4978      	ldr	r1, [pc, #480]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x4b4>)
 80028ce:	428b      	cmp	r3, r1
 80028d0:	d00f      	beq.n	80028f2 <HAL_ADC_ConfigChannel+0x2f6>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4977      	ldr	r1, [pc, #476]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x4b8>)
 80028d8:	428b      	cmp	r3, r1
 80028da:	d008      	beq.n	80028ee <HAL_ADC_ConfigChannel+0x2f2>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4975      	ldr	r1, [pc, #468]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x4bc>)
 80028e2:	428b      	cmp	r3, r1
 80028e4:	d101      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x2ee>
 80028e6:	4b75      	ldr	r3, [pc, #468]	@ (8002abc <HAL_ADC_ConfigChannel+0x4c0>)
 80028e8:	e05a      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x3a4>
 80028ea:	2300      	movs	r3, #0
 80028ec:	e058      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x3a4>
 80028ee:	4b74      	ldr	r3, [pc, #464]	@ (8002ac0 <HAL_ADC_ConfigChannel+0x4c4>)
 80028f0:	e056      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x3a4>
 80028f2:	4b74      	ldr	r3, [pc, #464]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x4c8>)
 80028f4:	e054      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x3a4>
 80028f6:	4b6e      	ldr	r3, [pc, #440]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x4b4>)
 80028f8:	e052      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x3a4>
 80028fa:	4b6c      	ldr	r3, [pc, #432]	@ (8002aac <HAL_ADC_ConfigChannel+0x4b0>)
 80028fc:	e050      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x3a4>
 80028fe:	4b72      	ldr	r3, [pc, #456]	@ (8002ac8 <HAL_ADC_ConfigChannel+0x4cc>)
 8002900:	e04e      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x3a4>
 8002902:	4b72      	ldr	r3, [pc, #456]	@ (8002acc <HAL_ADC_ConfigChannel+0x4d0>)
 8002904:	e04c      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x3a4>
 8002906:	4b72      	ldr	r3, [pc, #456]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x4d4>)
 8002908:	e04a      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x3a4>
 800290a:	4b72      	ldr	r3, [pc, #456]	@ (8002ad4 <HAL_ADC_ConfigChannel+0x4d8>)
 800290c:	e048      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x3a4>
 800290e:	2301      	movs	r3, #1
 8002910:	e046      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x3a4>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4970      	ldr	r1, [pc, #448]	@ (8002ad8 <HAL_ADC_ConfigChannel+0x4dc>)
 8002918:	428b      	cmp	r3, r1
 800291a:	d140      	bne.n	800299e <HAL_ADC_ConfigChannel+0x3a2>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	495c      	ldr	r1, [pc, #368]	@ (8002a94 <HAL_ADC_ConfigChannel+0x498>)
 8002922:	428b      	cmp	r3, r1
 8002924:	d039      	beq.n	800299a <HAL_ADC_ConfigChannel+0x39e>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	495b      	ldr	r1, [pc, #364]	@ (8002a98 <HAL_ADC_ConfigChannel+0x49c>)
 800292c:	428b      	cmp	r3, r1
 800292e:	d032      	beq.n	8002996 <HAL_ADC_ConfigChannel+0x39a>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4959      	ldr	r1, [pc, #356]	@ (8002a9c <HAL_ADC_ConfigChannel+0x4a0>)
 8002936:	428b      	cmp	r3, r1
 8002938:	d02b      	beq.n	8002992 <HAL_ADC_ConfigChannel+0x396>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4958      	ldr	r1, [pc, #352]	@ (8002aa0 <HAL_ADC_ConfigChannel+0x4a4>)
 8002940:	428b      	cmp	r3, r1
 8002942:	d024      	beq.n	800298e <HAL_ADC_ConfigChannel+0x392>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4956      	ldr	r1, [pc, #344]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x4a8>)
 800294a:	428b      	cmp	r3, r1
 800294c:	d01d      	beq.n	800298a <HAL_ADC_ConfigChannel+0x38e>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4955      	ldr	r1, [pc, #340]	@ (8002aa8 <HAL_ADC_ConfigChannel+0x4ac>)
 8002954:	428b      	cmp	r3, r1
 8002956:	d016      	beq.n	8002986 <HAL_ADC_ConfigChannel+0x38a>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4953      	ldr	r1, [pc, #332]	@ (8002aac <HAL_ADC_ConfigChannel+0x4b0>)
 800295e:	428b      	cmp	r3, r1
 8002960:	d00f      	beq.n	8002982 <HAL_ADC_ConfigChannel+0x386>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4952      	ldr	r1, [pc, #328]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x4b4>)
 8002968:	428b      	cmp	r3, r1
 800296a:	d008      	beq.n	800297e <HAL_ADC_ConfigChannel+0x382>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4951      	ldr	r1, [pc, #324]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x4bc>)
 8002972:	428b      	cmp	r3, r1
 8002974:	d101      	bne.n	800297a <HAL_ADC_ConfigChannel+0x37e>
 8002976:	4b51      	ldr	r3, [pc, #324]	@ (8002abc <HAL_ADC_ConfigChannel+0x4c0>)
 8002978:	e012      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x3a4>
 800297a:	2300      	movs	r3, #0
 800297c:	e010      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x3a4>
 800297e:	4b51      	ldr	r3, [pc, #324]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x4c8>)
 8002980:	e00e      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x3a4>
 8002982:	4b4b      	ldr	r3, [pc, #300]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x4b4>)
 8002984:	e00c      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x3a4>
 8002986:	4b49      	ldr	r3, [pc, #292]	@ (8002aac <HAL_ADC_ConfigChannel+0x4b0>)
 8002988:	e00a      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x3a4>
 800298a:	4b4f      	ldr	r3, [pc, #316]	@ (8002ac8 <HAL_ADC_ConfigChannel+0x4cc>)
 800298c:	e008      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x3a4>
 800298e:	4b4f      	ldr	r3, [pc, #316]	@ (8002acc <HAL_ADC_ConfigChannel+0x4d0>)
 8002990:	e006      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x3a4>
 8002992:	4b4f      	ldr	r3, [pc, #316]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x4d4>)
 8002994:	e004      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x3a4>
 8002996:	4b4f      	ldr	r3, [pc, #316]	@ (8002ad4 <HAL_ADC_ConfigChannel+0x4d8>)
 8002998:	e002      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x3a4>
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x3a4>
 800299e:	2300      	movs	r3, #0
 80029a0:	4619      	mov	r1, r3
 80029a2:	4610      	mov	r0, r2
 80029a4:	f7fe ff3e 	bl	8001824 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f280 80fc 	bge.w	8002baa <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a36      	ldr	r2, [pc, #216]	@ (8002a90 <HAL_ADC_ConfigChannel+0x494>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d004      	beq.n	80029c6 <HAL_ADC_ConfigChannel+0x3ca>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a45      	ldr	r2, [pc, #276]	@ (8002ad8 <HAL_ADC_ConfigChannel+0x4dc>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d101      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x3ce>
 80029c6:	4b45      	ldr	r3, [pc, #276]	@ (8002adc <HAL_ADC_ConfigChannel+0x4e0>)
 80029c8:	e000      	b.n	80029cc <HAL_ADC_ConfigChannel+0x3d0>
 80029ca:	4b45      	ldr	r3, [pc, #276]	@ (8002ae0 <HAL_ADC_ConfigChannel+0x4e4>)
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fe ff1b 	bl	8001808 <LL_ADC_GetCommonPathInternalCh>
 80029d2:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a2d      	ldr	r2, [pc, #180]	@ (8002a90 <HAL_ADC_ConfigChannel+0x494>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d004      	beq.n	80029e8 <HAL_ADC_ConfigChannel+0x3ec>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a3d      	ldr	r2, [pc, #244]	@ (8002ad8 <HAL_ADC_ConfigChannel+0x4dc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d10e      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x40a>
 80029e8:	4829      	ldr	r0, [pc, #164]	@ (8002a90 <HAL_ADC_ConfigChannel+0x494>)
 80029ea:	f7ff f8e9 	bl	8001bc0 <LL_ADC_IsEnabled>
 80029ee:	4604      	mov	r4, r0
 80029f0:	4839      	ldr	r0, [pc, #228]	@ (8002ad8 <HAL_ADC_ConfigChannel+0x4dc>)
 80029f2:	f7ff f8e5 	bl	8001bc0 <LL_ADC_IsEnabled>
 80029f6:	4603      	mov	r3, r0
 80029f8:	4323      	orrs	r3, r4
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	bf0c      	ite	eq
 80029fe:	2301      	moveq	r3, #1
 8002a00:	2300      	movne	r3, #0
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	e008      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x41c>
 8002a06:	4837      	ldr	r0, [pc, #220]	@ (8002ae4 <HAL_ADC_ConfigChannel+0x4e8>)
 8002a08:	f7ff f8da 	bl	8001bc0 <LL_ADC_IsEnabled>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	bf0c      	ite	eq
 8002a12:	2301      	moveq	r3, #1
 8002a14:	2300      	movne	r3, #0
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80b3 	beq.w	8002b84 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a31      	ldr	r2, [pc, #196]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x4ec>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d165      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x4f8>
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d160      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a2b      	ldr	r2, [pc, #172]	@ (8002ae4 <HAL_ADC_ConfigChannel+0x4e8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	f040 80b6 	bne.w	8002baa <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a13      	ldr	r2, [pc, #76]	@ (8002a90 <HAL_ADC_ConfigChannel+0x494>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d004      	beq.n	8002a52 <HAL_ADC_ConfigChannel+0x456>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a22      	ldr	r2, [pc, #136]	@ (8002ad8 <HAL_ADC_ConfigChannel+0x4dc>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d101      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x45a>
 8002a52:	4a22      	ldr	r2, [pc, #136]	@ (8002adc <HAL_ADC_ConfigChannel+0x4e0>)
 8002a54:	e000      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x45c>
 8002a56:	4a22      	ldr	r2, [pc, #136]	@ (8002ae0 <HAL_ADC_ConfigChannel+0x4e4>)
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4610      	mov	r0, r2
 8002a62:	f7fe febe 	bl	80017e2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a66:	4b21      	ldr	r3, [pc, #132]	@ (8002aec <HAL_ADC_ConfigChannel+0x4f0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	099b      	lsrs	r3, r3, #6
 8002a6c:	4a20      	ldr	r2, [pc, #128]	@ (8002af0 <HAL_ADC_ConfigChannel+0x4f4>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	099b      	lsrs	r3, r3, #6
 8002a74:	3301      	adds	r3, #1
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002a7a:	e002      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f9      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a88:	e08f      	b.n	8002baa <HAL_ADC_ConfigChannel+0x5ae>
 8002a8a:	bf00      	nop
 8002a8c:	47ff0000 	.word	0x47ff0000
 8002a90:	40022000 	.word	0x40022000
 8002a94:	04300002 	.word	0x04300002
 8002a98:	08600004 	.word	0x08600004
 8002a9c:	0c900008 	.word	0x0c900008
 8002aa0:	10c00010 	.word	0x10c00010
 8002aa4:	14f00020 	.word	0x14f00020
 8002aa8:	2a000400 	.word	0x2a000400
 8002aac:	2e300800 	.word	0x2e300800
 8002ab0:	32601000 	.word	0x32601000
 8002ab4:	43210000 	.word	0x43210000
 8002ab8:	4b840000 	.word	0x4b840000
 8002abc:	4fb80000 	.word	0x4fb80000
 8002ac0:	47520000 	.word	0x47520000
 8002ac4:	36902000 	.word	0x36902000
 8002ac8:	25b00200 	.word	0x25b00200
 8002acc:	21800100 	.word	0x21800100
 8002ad0:	1d500080 	.word	0x1d500080
 8002ad4:	19200040 	.word	0x19200040
 8002ad8:	40022100 	.word	0x40022100
 8002adc:	40022300 	.word	0x40022300
 8002ae0:	58026300 	.word	0x58026300
 8002ae4:	58026000 	.word	0x58026000
 8002ae8:	cb840000 	.word	0xcb840000
 8002aec:	24000000 	.word	0x24000000
 8002af0:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a31      	ldr	r2, [pc, #196]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x5c4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d11e      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x540>
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d119      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a2d      	ldr	r2, [pc, #180]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d14b      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a2c      	ldr	r2, [pc, #176]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x5cc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d004      	beq.n	8002b26 <HAL_ADC_ConfigChannel+0x52a>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a2a      	ldr	r2, [pc, #168]	@ (8002bcc <HAL_ADC_ConfigChannel+0x5d0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d101      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x52e>
 8002b26:	4a2a      	ldr	r2, [pc, #168]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x5d4>)
 8002b28:	e000      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x530>
 8002b2a:	4a2a      	ldr	r2, [pc, #168]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x5d8>)
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b32:	4619      	mov	r1, r3
 8002b34:	4610      	mov	r0, r2
 8002b36:	f7fe fe54 	bl	80017e2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b3a:	e036      	b.n	8002baa <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a25      	ldr	r2, [pc, #148]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x5dc>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d131      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x5ae>
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d12c      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a1b      	ldr	r2, [pc, #108]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d127      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a1a      	ldr	r2, [pc, #104]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x5cc>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d004      	beq.n	8002b6e <HAL_ADC_ConfigChannel+0x572>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a18      	ldr	r2, [pc, #96]	@ (8002bcc <HAL_ADC_ConfigChannel+0x5d0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x576>
 8002b6e:	4a18      	ldr	r2, [pc, #96]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x5d4>)
 8002b70:	e000      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x578>
 8002b72:	4a18      	ldr	r2, [pc, #96]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x5d8>)
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	f7fe fe30 	bl	80017e2 <LL_ADC_SetCommonPathInternalCh>
 8002b82:	e012      	b.n	8002baa <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b88:	f043 0220 	orr.w	r2, r3, #32
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002b96:	e008      	b.n	8002baa <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9c:	f043 0220 	orr.w	r2, r3, #32
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3734      	adds	r7, #52	@ 0x34
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd90      	pop	{r4, r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	c7520000 	.word	0xc7520000
 8002bc4:	58026000 	.word	0x58026000
 8002bc8:	40022000 	.word	0x40022000
 8002bcc:	40022100 	.word	0x40022100
 8002bd0:	40022300 	.word	0x40022300
 8002bd4:	58026300 	.word	0x58026300
 8002bd8:	cfb80000 	.word	0xcfb80000

08002bdc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fe ffe9 	bl	8001bc0 <LL_ADC_IsEnabled>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d16e      	bne.n	8002cd2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	4b38      	ldr	r3, [pc, #224]	@ (8002cdc <ADC_Enable+0x100>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00d      	beq.n	8002c1e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c06:	f043 0210 	orr.w	r2, r3, #16
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c12:	f043 0201 	orr.w	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e05a      	b.n	8002cd4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe ffa4 	bl	8001b70 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c28:	f7fe fdb0 	bl	800178c <HAL_GetTick>
 8002c2c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a2b      	ldr	r2, [pc, #172]	@ (8002ce0 <ADC_Enable+0x104>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d004      	beq.n	8002c42 <ADC_Enable+0x66>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a29      	ldr	r2, [pc, #164]	@ (8002ce4 <ADC_Enable+0x108>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d101      	bne.n	8002c46 <ADC_Enable+0x6a>
 8002c42:	4b29      	ldr	r3, [pc, #164]	@ (8002ce8 <ADC_Enable+0x10c>)
 8002c44:	e000      	b.n	8002c48 <ADC_Enable+0x6c>
 8002c46:	4b29      	ldr	r3, [pc, #164]	@ (8002cec <ADC_Enable+0x110>)
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fe ff27 	bl	8001a9c <LL_ADC_GetMultimode>
 8002c4e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a23      	ldr	r2, [pc, #140]	@ (8002ce4 <ADC_Enable+0x108>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d002      	beq.n	8002c60 <ADC_Enable+0x84>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	e000      	b.n	8002c62 <ADC_Enable+0x86>
 8002c60:	4b1f      	ldr	r3, [pc, #124]	@ (8002ce0 <ADC_Enable+0x104>)
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6812      	ldr	r2, [r2, #0]
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d02c      	beq.n	8002cc4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d130      	bne.n	8002cd2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c70:	e028      	b.n	8002cc4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fe ffa2 	bl	8001bc0 <LL_ADC_IsEnabled>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d104      	bne.n	8002c8c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe ff72 	bl	8001b70 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c8c:	f7fe fd7e 	bl	800178c <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d914      	bls.n	8002cc4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d00d      	beq.n	8002cc4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cac:	f043 0210 	orr.w	r2, r3, #16
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb8:	f043 0201 	orr.w	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e007      	b.n	8002cd4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d1cf      	bne.n	8002c72 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	8000003f 	.word	0x8000003f
 8002ce0:	40022000 	.word	0x40022000
 8002ce4:	40022100 	.word	0x40022100
 8002ce8:	40022300 	.word	0x40022300
 8002cec:	58026300 	.word	0x58026300

08002cf0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fe ff72 	bl	8001be6 <LL_ADC_IsDisableOngoing>
 8002d02:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fe ff59 	bl	8001bc0 <LL_ADC_IsEnabled>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d047      	beq.n	8002da4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d144      	bne.n	8002da4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 030d 	and.w	r3, r3, #13
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d10c      	bne.n	8002d42 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fe ff33 	bl	8001b98 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2203      	movs	r2, #3
 8002d38:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d3a:	f7fe fd27 	bl	800178c <HAL_GetTick>
 8002d3e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d40:	e029      	b.n	8002d96 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d46:	f043 0210 	orr.w	r2, r3, #16
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d52:	f043 0201 	orr.w	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e023      	b.n	8002da6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d5e:	f7fe fd15 	bl	800178c <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d914      	bls.n	8002d96 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00d      	beq.n	8002d96 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d7e:	f043 0210 	orr.w	r2, r3, #16
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8a:	f043 0201 	orr.w	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e007      	b.n	8002da6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1dc      	bne.n	8002d5e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b084      	sub	sp, #16
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d14b      	bne.n	8002e60 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dcc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d021      	beq.n	8002e26 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe fda3 	bl	8001932 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d032      	beq.n	8002e58 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d12b      	bne.n	8002e58 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d11f      	bne.n	8002e58 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e1c:	f043 0201 	orr.w	r2, r3, #1
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e24:	e018      	b.n	8002e58 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d111      	bne.n	8002e58 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d105      	bne.n	8002e58 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e50:	f043 0201 	orr.w	r2, r3, #1
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f7fd fc69 	bl	8000730 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e5e:	e00e      	b.n	8002e7e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e64:	f003 0310 	and.w	r3, r3, #16
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f7ff fbbb 	bl	80025e8 <HAL_ADC_ErrorCallback>
}
 8002e72:	e004      	b.n	8002e7e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	4798      	blx	r3
}
 8002e7e:	bf00      	nop
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f7ff fb93 	bl	80025c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec0:	f043 0204 	orr.w	r2, r3, #4
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f7ff fb8d 	bl	80025e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a7a      	ldr	r2, [pc, #488]	@ (80030d0 <ADC_ConfigureBoostMode+0x1f8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d004      	beq.n	8002ef4 <ADC_ConfigureBoostMode+0x1c>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a79      	ldr	r2, [pc, #484]	@ (80030d4 <ADC_ConfigureBoostMode+0x1fc>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d109      	bne.n	8002f08 <ADC_ConfigureBoostMode+0x30>
 8002ef4:	4b78      	ldr	r3, [pc, #480]	@ (80030d8 <ADC_ConfigureBoostMode+0x200>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bf14      	ite	ne
 8002f00:	2301      	movne	r3, #1
 8002f02:	2300      	moveq	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	e008      	b.n	8002f1a <ADC_ConfigureBoostMode+0x42>
 8002f08:	4b74      	ldr	r3, [pc, #464]	@ (80030dc <ADC_ConfigureBoostMode+0x204>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf14      	ite	ne
 8002f14:	2301      	movne	r3, #1
 8002f16:	2300      	moveq	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d01c      	beq.n	8002f58 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002f1e:	f003 ff07 	bl	8006d30 <HAL_RCC_GetHCLKFreq>
 8002f22:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f2c:	d010      	beq.n	8002f50 <ADC_ConfigureBoostMode+0x78>
 8002f2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f32:	d873      	bhi.n	800301c <ADC_ConfigureBoostMode+0x144>
 8002f34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f38:	d002      	beq.n	8002f40 <ADC_ConfigureBoostMode+0x68>
 8002f3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f3e:	d16d      	bne.n	800301c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4c:	60fb      	str	r3, [r7, #12]
        break;
 8002f4e:	e068      	b.n	8003022 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	089b      	lsrs	r3, r3, #2
 8002f54:	60fb      	str	r3, [r7, #12]
        break;
 8002f56:	e064      	b.n	8003022 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002f58:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002f5c:	f04f 0100 	mov.w	r1, #0
 8002f60:	f005 f94c 	bl	80081fc <HAL_RCCEx_GetPeriphCLKFreq>
 8002f64:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002f6e:	d051      	beq.n	8003014 <ADC_ConfigureBoostMode+0x13c>
 8002f70:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002f74:	d854      	bhi.n	8003020 <ADC_ConfigureBoostMode+0x148>
 8002f76:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002f7a:	d047      	beq.n	800300c <ADC_ConfigureBoostMode+0x134>
 8002f7c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002f80:	d84e      	bhi.n	8003020 <ADC_ConfigureBoostMode+0x148>
 8002f82:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002f86:	d03d      	beq.n	8003004 <ADC_ConfigureBoostMode+0x12c>
 8002f88:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002f8c:	d848      	bhi.n	8003020 <ADC_ConfigureBoostMode+0x148>
 8002f8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f92:	d033      	beq.n	8002ffc <ADC_ConfigureBoostMode+0x124>
 8002f94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f98:	d842      	bhi.n	8003020 <ADC_ConfigureBoostMode+0x148>
 8002f9a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002f9e:	d029      	beq.n	8002ff4 <ADC_ConfigureBoostMode+0x11c>
 8002fa0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002fa4:	d83c      	bhi.n	8003020 <ADC_ConfigureBoostMode+0x148>
 8002fa6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002faa:	d01a      	beq.n	8002fe2 <ADC_ConfigureBoostMode+0x10a>
 8002fac:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002fb0:	d836      	bhi.n	8003020 <ADC_ConfigureBoostMode+0x148>
 8002fb2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002fb6:	d014      	beq.n	8002fe2 <ADC_ConfigureBoostMode+0x10a>
 8002fb8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002fbc:	d830      	bhi.n	8003020 <ADC_ConfigureBoostMode+0x148>
 8002fbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fc2:	d00e      	beq.n	8002fe2 <ADC_ConfigureBoostMode+0x10a>
 8002fc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fc8:	d82a      	bhi.n	8003020 <ADC_ConfigureBoostMode+0x148>
 8002fca:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002fce:	d008      	beq.n	8002fe2 <ADC_ConfigureBoostMode+0x10a>
 8002fd0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002fd4:	d824      	bhi.n	8003020 <ADC_ConfigureBoostMode+0x148>
 8002fd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002fda:	d002      	beq.n	8002fe2 <ADC_ConfigureBoostMode+0x10a>
 8002fdc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002fe0:	d11e      	bne.n	8003020 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	0c9b      	lsrs	r3, r3, #18
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff0:	60fb      	str	r3, [r7, #12]
        break;
 8002ff2:	e016      	b.n	8003022 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	60fb      	str	r3, [r7, #12]
        break;
 8002ffa:	e012      	b.n	8003022 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	60fb      	str	r3, [r7, #12]
        break;
 8003002:	e00e      	b.n	8003022 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	099b      	lsrs	r3, r3, #6
 8003008:	60fb      	str	r3, [r7, #12]
        break;
 800300a:	e00a      	b.n	8003022 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	09db      	lsrs	r3, r3, #7
 8003010:	60fb      	str	r3, [r7, #12]
        break;
 8003012:	e006      	b.n	8003022 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	0a1b      	lsrs	r3, r3, #8
 8003018:	60fb      	str	r3, [r7, #12]
        break;
 800301a:	e002      	b.n	8003022 <ADC_ConfigureBoostMode+0x14a>
        break;
 800301c:	bf00      	nop
 800301e:	e000      	b.n	8003022 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003020:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003022:	f7fe fbbf 	bl	80017a4 <HAL_GetREVID>
 8003026:	4603      	mov	r3, r0
 8003028:	f241 0203 	movw	r2, #4099	@ 0x1003
 800302c:	4293      	cmp	r3, r2
 800302e:	d815      	bhi.n	800305c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4a2b      	ldr	r2, [pc, #172]	@ (80030e0 <ADC_ConfigureBoostMode+0x208>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d908      	bls.n	800304a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003046:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003048:	e03e      	b.n	80030c8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003058:	609a      	str	r2, [r3, #8]
}
 800305a:	e035      	b.n	80030c8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	085b      	lsrs	r3, r3, #1
 8003060:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4a1f      	ldr	r2, [pc, #124]	@ (80030e4 <ADC_ConfigureBoostMode+0x20c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d808      	bhi.n	800307c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003078:	609a      	str	r2, [r3, #8]
}
 800307a:	e025      	b.n	80030c8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4a1a      	ldr	r2, [pc, #104]	@ (80030e8 <ADC_ConfigureBoostMode+0x210>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d80a      	bhi.n	800309a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003096:	609a      	str	r2, [r3, #8]
}
 8003098:	e016      	b.n	80030c8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4a13      	ldr	r2, [pc, #76]	@ (80030ec <ADC_ConfigureBoostMode+0x214>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d80a      	bhi.n	80030b8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030b4:	609a      	str	r2, [r3, #8]
}
 80030b6:	e007      	b.n	80030c8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80030c6:	609a      	str	r2, [r3, #8]
}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40022000 	.word	0x40022000
 80030d4:	40022100 	.word	0x40022100
 80030d8:	40022300 	.word	0x40022300
 80030dc:	58026300 	.word	0x58026300
 80030e0:	01312d00 	.word	0x01312d00
 80030e4:	005f5e10 	.word	0x005f5e10
 80030e8:	00bebc20 	.word	0x00bebc20
 80030ec:	017d7840 	.word	0x017d7840

080030f0 <LL_ADC_IsEnabled>:
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b01      	cmp	r3, #1
 8003102:	d101      	bne.n	8003108 <LL_ADC_IsEnabled+0x18>
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <LL_ADC_IsEnabled+0x1a>
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <LL_ADC_StartCalibration>:
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	4b09      	ldr	r3, [pc, #36]	@ (8003150 <LL_ADC_StartCalibration+0x38>)
 800312a:	4013      	ands	r3, r2
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003138:	430a      	orrs	r2, r1
 800313a:	4313      	orrs	r3, r2
 800313c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	609a      	str	r2, [r3, #8]
}
 8003144:	bf00      	nop
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	3ffeffc0 	.word	0x3ffeffc0

08003154 <LL_ADC_IsCalibrationOnGoing>:
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003164:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003168:	d101      	bne.n	800316e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <LL_ADC_REG_IsConversionOngoing>:
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b04      	cmp	r3, #4
 800318e:	d101      	bne.n	8003194 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
	...

080031a4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_ADCEx_Calibration_Start+0x1e>
 80031be:	2302      	movs	r3, #2
 80031c0:	e04c      	b.n	800325c <HAL_ADCEx_Calibration_Start+0xb8>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f7ff fd90 	bl	8002cf0 <ADC_Disable>
 80031d0:	4603      	mov	r3, r0
 80031d2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80031d4:	7dfb      	ldrb	r3, [r7, #23]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d135      	bne.n	8003246 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80031de:	4b21      	ldr	r3, [pc, #132]	@ (8003264 <HAL_ADCEx_Calibration_Start+0xc0>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	f043 0202 	orr.w	r2, r3, #2
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff ff90 	bl	8003118 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80031f8:	e014      	b.n	8003224 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	3301      	adds	r3, #1
 80031fe:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4a19      	ldr	r2, [pc, #100]	@ (8003268 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d30d      	bcc.n	8003224 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800320c:	f023 0312 	bic.w	r3, r3, #18
 8003210:	f043 0210 	orr.w	r2, r3, #16
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e01b      	b.n	800325c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ff93 	bl	8003154 <LL_ADC_IsCalibrationOnGoing>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1e2      	bne.n	80031fa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003238:	f023 0303 	bic.w	r3, r3, #3
 800323c:	f043 0201 	orr.w	r2, r3, #1
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	655a      	str	r2, [r3, #84]	@ 0x54
 8003244:	e005      	b.n	8003252 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324a:	f043 0210 	orr.w	r2, r3, #16
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800325a:	7dfb      	ldrb	r3, [r7, #23]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	ffffeefd 	.word	0xffffeefd
 8003268:	25c3f800 	.word	0x25c3f800

0800326c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b09f      	sub	sp, #124	@ 0x7c
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e0be      	b.n	800346c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80032f6:	2300      	movs	r3, #0
 80032f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80032fa:	2300      	movs	r3, #0
 80032fc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a5c      	ldr	r2, [pc, #368]	@ (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d102      	bne.n	800330e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003308:	4b5b      	ldr	r3, [pc, #364]	@ (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	e001      	b.n	8003312 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800330e:	2300      	movs	r3, #0
 8003310:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10b      	bne.n	8003330 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331c:	f043 0220 	orr.w	r2, r3, #32
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e09d      	b.n	800346c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff ff22 	bl	800317c <LL_ADC_REG_IsConversionOngoing>
 8003338:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff ff1c 	bl	800317c <LL_ADC_REG_IsConversionOngoing>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d17f      	bne.n	800344a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800334a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800334c:	2b00      	cmp	r3, #0
 800334e:	d17c      	bne.n	800344a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a47      	ldr	r2, [pc, #284]	@ (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d004      	beq.n	8003364 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a46      	ldr	r2, [pc, #280]	@ (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d101      	bne.n	8003368 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003364:	4b45      	ldr	r3, [pc, #276]	@ (800347c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003366:	e000      	b.n	800336a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003368:	4b45      	ldr	r3, [pc, #276]	@ (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800336a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d039      	beq.n	80033e8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003374:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	431a      	orrs	r2, r3
 8003382:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003384:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a3a      	ldr	r2, [pc, #232]	@ (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d004      	beq.n	800339a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a38      	ldr	r2, [pc, #224]	@ (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d10e      	bne.n	80033b8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800339a:	4836      	ldr	r0, [pc, #216]	@ (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800339c:	f7ff fea8 	bl	80030f0 <LL_ADC_IsEnabled>
 80033a0:	4604      	mov	r4, r0
 80033a2:	4835      	ldr	r0, [pc, #212]	@ (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033a4:	f7ff fea4 	bl	80030f0 <LL_ADC_IsEnabled>
 80033a8:	4603      	mov	r3, r0
 80033aa:	4323      	orrs	r3, r4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	bf0c      	ite	eq
 80033b0:	2301      	moveq	r3, #1
 80033b2:	2300      	movne	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	e008      	b.n	80033ca <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80033b8:	4832      	ldr	r0, [pc, #200]	@ (8003484 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80033ba:	f7ff fe99 	bl	80030f0 <LL_ADC_IsEnabled>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	bf0c      	ite	eq
 80033c4:	2301      	moveq	r3, #1
 80033c6:	2300      	movne	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d047      	beq.n	800345e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	4b2d      	ldr	r3, [pc, #180]	@ (8003488 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	6811      	ldr	r1, [r2, #0]
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	6892      	ldr	r2, [r2, #8]
 80033de:	430a      	orrs	r2, r1
 80033e0:	431a      	orrs	r2, r3
 80033e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033e4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033e6:	e03a      	b.n	800345e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80033e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033f2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d004      	beq.n	8003408 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a1d      	ldr	r2, [pc, #116]	@ (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d10e      	bne.n	8003426 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003408:	481a      	ldr	r0, [pc, #104]	@ (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800340a:	f7ff fe71 	bl	80030f0 <LL_ADC_IsEnabled>
 800340e:	4604      	mov	r4, r0
 8003410:	4819      	ldr	r0, [pc, #100]	@ (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003412:	f7ff fe6d 	bl	80030f0 <LL_ADC_IsEnabled>
 8003416:	4603      	mov	r3, r0
 8003418:	4323      	orrs	r3, r4
 800341a:	2b00      	cmp	r3, #0
 800341c:	bf0c      	ite	eq
 800341e:	2301      	moveq	r3, #1
 8003420:	2300      	movne	r3, #0
 8003422:	b2db      	uxtb	r3, r3
 8003424:	e008      	b.n	8003438 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003426:	4817      	ldr	r0, [pc, #92]	@ (8003484 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003428:	f7ff fe62 	bl	80030f0 <LL_ADC_IsEnabled>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	bf0c      	ite	eq
 8003432:	2301      	moveq	r3, #1
 8003434:	2300      	movne	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d010      	beq.n	800345e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800343c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	4b11      	ldr	r3, [pc, #68]	@ (8003488 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003442:	4013      	ands	r3, r2
 8003444:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003446:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003448:	e009      	b.n	800345e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344e:	f043 0220 	orr.w	r2, r3, #32
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800345c:	e000      	b.n	8003460 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800345e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003468:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800346c:	4618      	mov	r0, r3
 800346e:	377c      	adds	r7, #124	@ 0x7c
 8003470:	46bd      	mov	sp, r7
 8003472:	bd90      	pop	{r4, r7, pc}
 8003474:	40022000 	.word	0x40022000
 8003478:	40022100 	.word	0x40022100
 800347c:	40022300 	.word	0x40022300
 8003480:	58026300 	.word	0x58026300
 8003484:	58026000 	.word	0x58026000
 8003488:	fffff0e0 	.word	0xfffff0e0

0800348c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800349c:	4b0b      	ldr	r3, [pc, #44]	@ (80034cc <__NVIC_SetPriorityGrouping+0x40>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034a8:	4013      	ands	r3, r2
 80034aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034b4:	4b06      	ldr	r3, [pc, #24]	@ (80034d0 <__NVIC_SetPriorityGrouping+0x44>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ba:	4a04      	ldr	r2, [pc, #16]	@ (80034cc <__NVIC_SetPriorityGrouping+0x40>)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	60d3      	str	r3, [r2, #12]
}
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	e000ed00 	.word	0xe000ed00
 80034d0:	05fa0000 	.word	0x05fa0000

080034d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d8:	4b04      	ldr	r3, [pc, #16]	@ (80034ec <__NVIC_GetPriorityGrouping+0x18>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	0a1b      	lsrs	r3, r3, #8
 80034de:	f003 0307 	and.w	r3, r3, #7
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	e000ed00 	.word	0xe000ed00

080034f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	db0b      	blt.n	800351a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003502:	88fb      	ldrh	r3, [r7, #6]
 8003504:	f003 021f 	and.w	r2, r3, #31
 8003508:	4907      	ldr	r1, [pc, #28]	@ (8003528 <__NVIC_EnableIRQ+0x38>)
 800350a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	2001      	movs	r0, #1
 8003512:	fa00 f202 	lsl.w	r2, r0, r2
 8003516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	e000e100 	.word	0xe000e100

0800352c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	6039      	str	r1, [r7, #0]
 8003536:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003538:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800353c:	2b00      	cmp	r3, #0
 800353e:	db0a      	blt.n	8003556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	b2da      	uxtb	r2, r3
 8003544:	490c      	ldr	r1, [pc, #48]	@ (8003578 <__NVIC_SetPriority+0x4c>)
 8003546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800354a:	0112      	lsls	r2, r2, #4
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	440b      	add	r3, r1
 8003550:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003554:	e00a      	b.n	800356c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	b2da      	uxtb	r2, r3
 800355a:	4908      	ldr	r1, [pc, #32]	@ (800357c <__NVIC_SetPriority+0x50>)
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	3b04      	subs	r3, #4
 8003564:	0112      	lsls	r2, r2, #4
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	440b      	add	r3, r1
 800356a:	761a      	strb	r2, [r3, #24]
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	e000e100 	.word	0xe000e100
 800357c:	e000ed00 	.word	0xe000ed00

08003580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003580:	b480      	push	{r7}
 8003582:	b089      	sub	sp, #36	@ 0x24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f1c3 0307 	rsb	r3, r3, #7
 800359a:	2b04      	cmp	r3, #4
 800359c:	bf28      	it	cs
 800359e:	2304      	movcs	r3, #4
 80035a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3304      	adds	r3, #4
 80035a6:	2b06      	cmp	r3, #6
 80035a8:	d902      	bls.n	80035b0 <NVIC_EncodePriority+0x30>
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3b03      	subs	r3, #3
 80035ae:	e000      	b.n	80035b2 <NVIC_EncodePriority+0x32>
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43da      	mvns	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	401a      	ands	r2, r3
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	fa01 f303 	lsl.w	r3, r1, r3
 80035d2:	43d9      	mvns	r1, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d8:	4313      	orrs	r3, r2
         );
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3724      	adds	r7, #36	@ 0x24
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
	...

080035e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035f8:	d301      	bcc.n	80035fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035fa:	2301      	movs	r3, #1
 80035fc:	e00f      	b.n	800361e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003628 <SysTick_Config+0x40>)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3b01      	subs	r3, #1
 8003604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003606:	210f      	movs	r1, #15
 8003608:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800360c:	f7ff ff8e 	bl	800352c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003610:	4b05      	ldr	r3, [pc, #20]	@ (8003628 <SysTick_Config+0x40>)
 8003612:	2200      	movs	r2, #0
 8003614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003616:	4b04      	ldr	r3, [pc, #16]	@ (8003628 <SysTick_Config+0x40>)
 8003618:	2207      	movs	r2, #7
 800361a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	e000e010 	.word	0xe000e010

0800362c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff ff29 	bl	800348c <__NVIC_SetPriorityGrouping>
}
 800363a:	bf00      	nop
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b086      	sub	sp, #24
 8003646:	af00      	add	r7, sp, #0
 8003648:	4603      	mov	r3, r0
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	607a      	str	r2, [r7, #4]
 800364e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003650:	f7ff ff40 	bl	80034d4 <__NVIC_GetPriorityGrouping>
 8003654:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	6978      	ldr	r0, [r7, #20]
 800365c:	f7ff ff90 	bl	8003580 <NVIC_EncodePriority>
 8003660:	4602      	mov	r2, r0
 8003662:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff ff5f 	bl	800352c <__NVIC_SetPriority>
}
 800366e:	bf00      	nop
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b082      	sub	sp, #8
 800367a:	af00      	add	r7, sp, #0
 800367c:	4603      	mov	r3, r0
 800367e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003680:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff ff33 	bl	80034f0 <__NVIC_EnableIRQ>
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff ffa4 	bl	80035e8 <SysTick_Config>
 80036a0:	4603      	mov	r3, r0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80036b0:	f3bf 8f5f 	dmb	sy
}
 80036b4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80036b6:	4b07      	ldr	r3, [pc, #28]	@ (80036d4 <HAL_MPU_Disable+0x28>)
 80036b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ba:	4a06      	ldr	r2, [pc, #24]	@ (80036d4 <HAL_MPU_Disable+0x28>)
 80036bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80036c2:	4b05      	ldr	r3, [pc, #20]	@ (80036d8 <HAL_MPU_Disable+0x2c>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	605a      	str	r2, [r3, #4]
}
 80036c8:	bf00      	nop
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	e000ed00 	.word	0xe000ed00
 80036d8:	e000ed90 	.word	0xe000ed90

080036dc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80036e4:	4a0b      	ldr	r2, [pc, #44]	@ (8003714 <HAL_MPU_Enable+0x38>)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80036ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003718 <HAL_MPU_Enable+0x3c>)
 80036f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f2:	4a09      	ldr	r2, [pc, #36]	@ (8003718 <HAL_MPU_Enable+0x3c>)
 80036f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036f8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80036fa:	f3bf 8f4f 	dsb	sy
}
 80036fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003700:	f3bf 8f6f 	isb	sy
}
 8003704:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	e000ed90 	.word	0xe000ed90
 8003718:	e000ed00 	.word	0xe000ed00

0800371c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	785a      	ldrb	r2, [r3, #1]
 8003728:	4b1b      	ldr	r3, [pc, #108]	@ (8003798 <HAL_MPU_ConfigRegion+0x7c>)
 800372a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800372c:	4b1a      	ldr	r3, [pc, #104]	@ (8003798 <HAL_MPU_ConfigRegion+0x7c>)
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	4a19      	ldr	r2, [pc, #100]	@ (8003798 <HAL_MPU_ConfigRegion+0x7c>)
 8003732:	f023 0301 	bic.w	r3, r3, #1
 8003736:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003738:	4a17      	ldr	r2, [pc, #92]	@ (8003798 <HAL_MPU_ConfigRegion+0x7c>)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	7b1b      	ldrb	r3, [r3, #12]
 8003744:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	7adb      	ldrb	r3, [r3, #11]
 800374a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800374c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	7a9b      	ldrb	r3, [r3, #10]
 8003752:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003754:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	7b5b      	ldrb	r3, [r3, #13]
 800375a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800375c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	7b9b      	ldrb	r3, [r3, #14]
 8003762:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003764:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	7bdb      	ldrb	r3, [r3, #15]
 800376a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800376c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	7a5b      	ldrb	r3, [r3, #9]
 8003772:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003774:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	7a1b      	ldrb	r3, [r3, #8]
 800377a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800377c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	7812      	ldrb	r2, [r2, #0]
 8003782:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003784:	4a04      	ldr	r2, [pc, #16]	@ (8003798 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003786:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003788:	6113      	str	r3, [r2, #16]
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	e000ed90 	.word	0xe000ed90

0800379c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80037a4:	f7fd fff2 	bl	800178c <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e316      	b.n	8003de2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a66      	ldr	r2, [pc, #408]	@ (8003954 <HAL_DMA_Init+0x1b8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d04a      	beq.n	8003854 <HAL_DMA_Init+0xb8>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a65      	ldr	r2, [pc, #404]	@ (8003958 <HAL_DMA_Init+0x1bc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d045      	beq.n	8003854 <HAL_DMA_Init+0xb8>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a63      	ldr	r2, [pc, #396]	@ (800395c <HAL_DMA_Init+0x1c0>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d040      	beq.n	8003854 <HAL_DMA_Init+0xb8>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a62      	ldr	r2, [pc, #392]	@ (8003960 <HAL_DMA_Init+0x1c4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d03b      	beq.n	8003854 <HAL_DMA_Init+0xb8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a60      	ldr	r2, [pc, #384]	@ (8003964 <HAL_DMA_Init+0x1c8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d036      	beq.n	8003854 <HAL_DMA_Init+0xb8>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a5f      	ldr	r2, [pc, #380]	@ (8003968 <HAL_DMA_Init+0x1cc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d031      	beq.n	8003854 <HAL_DMA_Init+0xb8>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a5d      	ldr	r2, [pc, #372]	@ (800396c <HAL_DMA_Init+0x1d0>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d02c      	beq.n	8003854 <HAL_DMA_Init+0xb8>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a5c      	ldr	r2, [pc, #368]	@ (8003970 <HAL_DMA_Init+0x1d4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d027      	beq.n	8003854 <HAL_DMA_Init+0xb8>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a5a      	ldr	r2, [pc, #360]	@ (8003974 <HAL_DMA_Init+0x1d8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d022      	beq.n	8003854 <HAL_DMA_Init+0xb8>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a59      	ldr	r2, [pc, #356]	@ (8003978 <HAL_DMA_Init+0x1dc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d01d      	beq.n	8003854 <HAL_DMA_Init+0xb8>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a57      	ldr	r2, [pc, #348]	@ (800397c <HAL_DMA_Init+0x1e0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d018      	beq.n	8003854 <HAL_DMA_Init+0xb8>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a56      	ldr	r2, [pc, #344]	@ (8003980 <HAL_DMA_Init+0x1e4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d013      	beq.n	8003854 <HAL_DMA_Init+0xb8>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a54      	ldr	r2, [pc, #336]	@ (8003984 <HAL_DMA_Init+0x1e8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d00e      	beq.n	8003854 <HAL_DMA_Init+0xb8>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a53      	ldr	r2, [pc, #332]	@ (8003988 <HAL_DMA_Init+0x1ec>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d009      	beq.n	8003854 <HAL_DMA_Init+0xb8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a51      	ldr	r2, [pc, #324]	@ (800398c <HAL_DMA_Init+0x1f0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d004      	beq.n	8003854 <HAL_DMA_Init+0xb8>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a50      	ldr	r2, [pc, #320]	@ (8003990 <HAL_DMA_Init+0x1f4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d101      	bne.n	8003858 <HAL_DMA_Init+0xbc>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <HAL_DMA_Init+0xbe>
 8003858:	2300      	movs	r3, #0
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 813b 	beq.w	8003ad6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a37      	ldr	r2, [pc, #220]	@ (8003954 <HAL_DMA_Init+0x1b8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d04a      	beq.n	8003910 <HAL_DMA_Init+0x174>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a36      	ldr	r2, [pc, #216]	@ (8003958 <HAL_DMA_Init+0x1bc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d045      	beq.n	8003910 <HAL_DMA_Init+0x174>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a34      	ldr	r2, [pc, #208]	@ (800395c <HAL_DMA_Init+0x1c0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d040      	beq.n	8003910 <HAL_DMA_Init+0x174>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a33      	ldr	r2, [pc, #204]	@ (8003960 <HAL_DMA_Init+0x1c4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d03b      	beq.n	8003910 <HAL_DMA_Init+0x174>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a31      	ldr	r2, [pc, #196]	@ (8003964 <HAL_DMA_Init+0x1c8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d036      	beq.n	8003910 <HAL_DMA_Init+0x174>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a30      	ldr	r2, [pc, #192]	@ (8003968 <HAL_DMA_Init+0x1cc>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d031      	beq.n	8003910 <HAL_DMA_Init+0x174>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a2e      	ldr	r2, [pc, #184]	@ (800396c <HAL_DMA_Init+0x1d0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d02c      	beq.n	8003910 <HAL_DMA_Init+0x174>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a2d      	ldr	r2, [pc, #180]	@ (8003970 <HAL_DMA_Init+0x1d4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d027      	beq.n	8003910 <HAL_DMA_Init+0x174>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a2b      	ldr	r2, [pc, #172]	@ (8003974 <HAL_DMA_Init+0x1d8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d022      	beq.n	8003910 <HAL_DMA_Init+0x174>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a2a      	ldr	r2, [pc, #168]	@ (8003978 <HAL_DMA_Init+0x1dc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d01d      	beq.n	8003910 <HAL_DMA_Init+0x174>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a28      	ldr	r2, [pc, #160]	@ (800397c <HAL_DMA_Init+0x1e0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d018      	beq.n	8003910 <HAL_DMA_Init+0x174>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a27      	ldr	r2, [pc, #156]	@ (8003980 <HAL_DMA_Init+0x1e4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d013      	beq.n	8003910 <HAL_DMA_Init+0x174>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a25      	ldr	r2, [pc, #148]	@ (8003984 <HAL_DMA_Init+0x1e8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00e      	beq.n	8003910 <HAL_DMA_Init+0x174>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a24      	ldr	r2, [pc, #144]	@ (8003988 <HAL_DMA_Init+0x1ec>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d009      	beq.n	8003910 <HAL_DMA_Init+0x174>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a22      	ldr	r2, [pc, #136]	@ (800398c <HAL_DMA_Init+0x1f0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d004      	beq.n	8003910 <HAL_DMA_Init+0x174>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a21      	ldr	r2, [pc, #132]	@ (8003990 <HAL_DMA_Init+0x1f4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d108      	bne.n	8003922 <HAL_DMA_Init+0x186>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0201 	bic.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	e007      	b.n	8003932 <HAL_DMA_Init+0x196>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0201 	bic.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003932:	e02f      	b.n	8003994 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003934:	f7fd ff2a 	bl	800178c <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b05      	cmp	r3, #5
 8003940:	d928      	bls.n	8003994 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2220      	movs	r2, #32
 8003946:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2203      	movs	r2, #3
 800394c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e246      	b.n	8003de2 <HAL_DMA_Init+0x646>
 8003954:	40020010 	.word	0x40020010
 8003958:	40020028 	.word	0x40020028
 800395c:	40020040 	.word	0x40020040
 8003960:	40020058 	.word	0x40020058
 8003964:	40020070 	.word	0x40020070
 8003968:	40020088 	.word	0x40020088
 800396c:	400200a0 	.word	0x400200a0
 8003970:	400200b8 	.word	0x400200b8
 8003974:	40020410 	.word	0x40020410
 8003978:	40020428 	.word	0x40020428
 800397c:	40020440 	.word	0x40020440
 8003980:	40020458 	.word	0x40020458
 8003984:	40020470 	.word	0x40020470
 8003988:	40020488 	.word	0x40020488
 800398c:	400204a0 	.word	0x400204a0
 8003990:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1c8      	bne.n	8003934 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	4b83      	ldr	r3, [pc, #524]	@ (8003bbc <HAL_DMA_Init+0x420>)
 80039ae:	4013      	ands	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80039ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	4313      	orrs	r3, r2
 80039de:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d107      	bne.n	80039f8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f0:	4313      	orrs	r3, r2
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80039f8:	4b71      	ldr	r3, [pc, #452]	@ (8003bc0 <HAL_DMA_Init+0x424>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4b71      	ldr	r3, [pc, #452]	@ (8003bc4 <HAL_DMA_Init+0x428>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a04:	d328      	bcc.n	8003a58 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b28      	cmp	r3, #40	@ 0x28
 8003a0c:	d903      	bls.n	8003a16 <HAL_DMA_Init+0x27a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a14:	d917      	bls.n	8003a46 <HAL_DMA_Init+0x2aa>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a1c:	d903      	bls.n	8003a26 <HAL_DMA_Init+0x28a>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b42      	cmp	r3, #66	@ 0x42
 8003a24:	d90f      	bls.n	8003a46 <HAL_DMA_Init+0x2aa>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b46      	cmp	r3, #70	@ 0x46
 8003a2c:	d903      	bls.n	8003a36 <HAL_DMA_Init+0x29a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b48      	cmp	r3, #72	@ 0x48
 8003a34:	d907      	bls.n	8003a46 <HAL_DMA_Init+0x2aa>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b4e      	cmp	r3, #78	@ 0x4e
 8003a3c:	d905      	bls.n	8003a4a <HAL_DMA_Init+0x2ae>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b52      	cmp	r3, #82	@ 0x52
 8003a44:	d801      	bhi.n	8003a4a <HAL_DMA_Init+0x2ae>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <HAL_DMA_Init+0x2b0>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a56:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f023 0307 	bic.w	r3, r3, #7
 8003a6e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d117      	bne.n	8003ab2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00e      	beq.n	8003ab2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f001 fdcf 	bl	8005638 <DMA_CheckFifoParam>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2240      	movs	r2, #64	@ 0x40
 8003aa4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e197      	b.n	8003de2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f001 fd0a 	bl	80054d4 <DMA_CalcBaseAndBitshift>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac8:	f003 031f 	and.w	r3, r3, #31
 8003acc:	223f      	movs	r2, #63	@ 0x3f
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	e0cd      	b.n	8003c72 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a3b      	ldr	r2, [pc, #236]	@ (8003bc8 <HAL_DMA_Init+0x42c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d022      	beq.n	8003b26 <HAL_DMA_Init+0x38a>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a39      	ldr	r2, [pc, #228]	@ (8003bcc <HAL_DMA_Init+0x430>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d01d      	beq.n	8003b26 <HAL_DMA_Init+0x38a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a38      	ldr	r2, [pc, #224]	@ (8003bd0 <HAL_DMA_Init+0x434>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d018      	beq.n	8003b26 <HAL_DMA_Init+0x38a>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a36      	ldr	r2, [pc, #216]	@ (8003bd4 <HAL_DMA_Init+0x438>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d013      	beq.n	8003b26 <HAL_DMA_Init+0x38a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a35      	ldr	r2, [pc, #212]	@ (8003bd8 <HAL_DMA_Init+0x43c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00e      	beq.n	8003b26 <HAL_DMA_Init+0x38a>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a33      	ldr	r2, [pc, #204]	@ (8003bdc <HAL_DMA_Init+0x440>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d009      	beq.n	8003b26 <HAL_DMA_Init+0x38a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a32      	ldr	r2, [pc, #200]	@ (8003be0 <HAL_DMA_Init+0x444>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d004      	beq.n	8003b26 <HAL_DMA_Init+0x38a>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a30      	ldr	r2, [pc, #192]	@ (8003be4 <HAL_DMA_Init+0x448>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d101      	bne.n	8003b2a <HAL_DMA_Init+0x38e>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <HAL_DMA_Init+0x390>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 8097 	beq.w	8003c60 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a24      	ldr	r2, [pc, #144]	@ (8003bc8 <HAL_DMA_Init+0x42c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d021      	beq.n	8003b80 <HAL_DMA_Init+0x3e4>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a22      	ldr	r2, [pc, #136]	@ (8003bcc <HAL_DMA_Init+0x430>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d01c      	beq.n	8003b80 <HAL_DMA_Init+0x3e4>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a21      	ldr	r2, [pc, #132]	@ (8003bd0 <HAL_DMA_Init+0x434>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d017      	beq.n	8003b80 <HAL_DMA_Init+0x3e4>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a1f      	ldr	r2, [pc, #124]	@ (8003bd4 <HAL_DMA_Init+0x438>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d012      	beq.n	8003b80 <HAL_DMA_Init+0x3e4>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8003bd8 <HAL_DMA_Init+0x43c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d00d      	beq.n	8003b80 <HAL_DMA_Init+0x3e4>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a1c      	ldr	r2, [pc, #112]	@ (8003bdc <HAL_DMA_Init+0x440>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d008      	beq.n	8003b80 <HAL_DMA_Init+0x3e4>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a1b      	ldr	r2, [pc, #108]	@ (8003be0 <HAL_DMA_Init+0x444>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d003      	beq.n	8003b80 <HAL_DMA_Init+0x3e4>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a19      	ldr	r2, [pc, #100]	@ (8003be4 <HAL_DMA_Init+0x448>)
 8003b7e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	4b13      	ldr	r3, [pc, #76]	@ (8003be8 <HAL_DMA_Init+0x44c>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b40      	cmp	r3, #64	@ 0x40
 8003ba6:	d021      	beq.n	8003bec <HAL_DMA_Init+0x450>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	2b80      	cmp	r3, #128	@ 0x80
 8003bae:	d102      	bne.n	8003bb6 <HAL_DMA_Init+0x41a>
 8003bb0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003bb4:	e01b      	b.n	8003bee <HAL_DMA_Init+0x452>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e019      	b.n	8003bee <HAL_DMA_Init+0x452>
 8003bba:	bf00      	nop
 8003bbc:	fe10803f 	.word	0xfe10803f
 8003bc0:	5c001000 	.word	0x5c001000
 8003bc4:	ffff0000 	.word	0xffff0000
 8003bc8:	58025408 	.word	0x58025408
 8003bcc:	5802541c 	.word	0x5802541c
 8003bd0:	58025430 	.word	0x58025430
 8003bd4:	58025444 	.word	0x58025444
 8003bd8:	58025458 	.word	0x58025458
 8003bdc:	5802546c 	.word	0x5802546c
 8003be0:	58025480 	.word	0x58025480
 8003be4:	58025494 	.word	0x58025494
 8003be8:	fffe000f 	.word	0xfffe000f
 8003bec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	68d2      	ldr	r2, [r2, #12]
 8003bf2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003bf4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003bfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c1c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	461a      	mov	r2, r3
 8003c32:	4b6e      	ldr	r3, [pc, #440]	@ (8003dec <HAL_DMA_Init+0x650>)
 8003c34:	4413      	add	r3, r2
 8003c36:	4a6e      	ldr	r2, [pc, #440]	@ (8003df0 <HAL_DMA_Init+0x654>)
 8003c38:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3c:	091b      	lsrs	r3, r3, #4
 8003c3e:	009a      	lsls	r2, r3, #2
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f001 fc45 	bl	80054d4 <DMA_CalcBaseAndBitshift>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	2201      	movs	r2, #1
 8003c58:	409a      	lsls	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	605a      	str	r2, [r3, #4]
 8003c5e:	e008      	b.n	8003c72 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2240      	movs	r2, #64	@ 0x40
 8003c64:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2203      	movs	r2, #3
 8003c6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e0b7      	b.n	8003de2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a5f      	ldr	r2, [pc, #380]	@ (8003df4 <HAL_DMA_Init+0x658>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d072      	beq.n	8003d62 <HAL_DMA_Init+0x5c6>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a5d      	ldr	r2, [pc, #372]	@ (8003df8 <HAL_DMA_Init+0x65c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d06d      	beq.n	8003d62 <HAL_DMA_Init+0x5c6>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a5c      	ldr	r2, [pc, #368]	@ (8003dfc <HAL_DMA_Init+0x660>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d068      	beq.n	8003d62 <HAL_DMA_Init+0x5c6>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a5a      	ldr	r2, [pc, #360]	@ (8003e00 <HAL_DMA_Init+0x664>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d063      	beq.n	8003d62 <HAL_DMA_Init+0x5c6>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a59      	ldr	r2, [pc, #356]	@ (8003e04 <HAL_DMA_Init+0x668>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d05e      	beq.n	8003d62 <HAL_DMA_Init+0x5c6>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a57      	ldr	r2, [pc, #348]	@ (8003e08 <HAL_DMA_Init+0x66c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d059      	beq.n	8003d62 <HAL_DMA_Init+0x5c6>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a56      	ldr	r2, [pc, #344]	@ (8003e0c <HAL_DMA_Init+0x670>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d054      	beq.n	8003d62 <HAL_DMA_Init+0x5c6>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a54      	ldr	r2, [pc, #336]	@ (8003e10 <HAL_DMA_Init+0x674>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d04f      	beq.n	8003d62 <HAL_DMA_Init+0x5c6>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a53      	ldr	r2, [pc, #332]	@ (8003e14 <HAL_DMA_Init+0x678>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d04a      	beq.n	8003d62 <HAL_DMA_Init+0x5c6>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a51      	ldr	r2, [pc, #324]	@ (8003e18 <HAL_DMA_Init+0x67c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d045      	beq.n	8003d62 <HAL_DMA_Init+0x5c6>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a50      	ldr	r2, [pc, #320]	@ (8003e1c <HAL_DMA_Init+0x680>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d040      	beq.n	8003d62 <HAL_DMA_Init+0x5c6>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a4e      	ldr	r2, [pc, #312]	@ (8003e20 <HAL_DMA_Init+0x684>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d03b      	beq.n	8003d62 <HAL_DMA_Init+0x5c6>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a4d      	ldr	r2, [pc, #308]	@ (8003e24 <HAL_DMA_Init+0x688>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d036      	beq.n	8003d62 <HAL_DMA_Init+0x5c6>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a4b      	ldr	r2, [pc, #300]	@ (8003e28 <HAL_DMA_Init+0x68c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d031      	beq.n	8003d62 <HAL_DMA_Init+0x5c6>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a4a      	ldr	r2, [pc, #296]	@ (8003e2c <HAL_DMA_Init+0x690>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d02c      	beq.n	8003d62 <HAL_DMA_Init+0x5c6>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a48      	ldr	r2, [pc, #288]	@ (8003e30 <HAL_DMA_Init+0x694>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d027      	beq.n	8003d62 <HAL_DMA_Init+0x5c6>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a47      	ldr	r2, [pc, #284]	@ (8003e34 <HAL_DMA_Init+0x698>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d022      	beq.n	8003d62 <HAL_DMA_Init+0x5c6>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a45      	ldr	r2, [pc, #276]	@ (8003e38 <HAL_DMA_Init+0x69c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d01d      	beq.n	8003d62 <HAL_DMA_Init+0x5c6>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a44      	ldr	r2, [pc, #272]	@ (8003e3c <HAL_DMA_Init+0x6a0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d018      	beq.n	8003d62 <HAL_DMA_Init+0x5c6>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a42      	ldr	r2, [pc, #264]	@ (8003e40 <HAL_DMA_Init+0x6a4>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d013      	beq.n	8003d62 <HAL_DMA_Init+0x5c6>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a41      	ldr	r2, [pc, #260]	@ (8003e44 <HAL_DMA_Init+0x6a8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00e      	beq.n	8003d62 <HAL_DMA_Init+0x5c6>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a3f      	ldr	r2, [pc, #252]	@ (8003e48 <HAL_DMA_Init+0x6ac>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d009      	beq.n	8003d62 <HAL_DMA_Init+0x5c6>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a3e      	ldr	r2, [pc, #248]	@ (8003e4c <HAL_DMA_Init+0x6b0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d004      	beq.n	8003d62 <HAL_DMA_Init+0x5c6>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a3c      	ldr	r2, [pc, #240]	@ (8003e50 <HAL_DMA_Init+0x6b4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d101      	bne.n	8003d66 <HAL_DMA_Init+0x5ca>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <HAL_DMA_Init+0x5cc>
 8003d66:	2300      	movs	r3, #0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d032      	beq.n	8003dd2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f001 fcdf 	bl	8005730 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b80      	cmp	r3, #128	@ 0x80
 8003d78:	d102      	bne.n	8003d80 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003d94:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d010      	beq.n	8003dc0 <HAL_DMA_Init+0x624>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d80c      	bhi.n	8003dc0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f001 fd5c 	bl	8005864 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	e008      	b.n	8003dd2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	a7fdabf8 	.word	0xa7fdabf8
 8003df0:	cccccccd 	.word	0xcccccccd
 8003df4:	40020010 	.word	0x40020010
 8003df8:	40020028 	.word	0x40020028
 8003dfc:	40020040 	.word	0x40020040
 8003e00:	40020058 	.word	0x40020058
 8003e04:	40020070 	.word	0x40020070
 8003e08:	40020088 	.word	0x40020088
 8003e0c:	400200a0 	.word	0x400200a0
 8003e10:	400200b8 	.word	0x400200b8
 8003e14:	40020410 	.word	0x40020410
 8003e18:	40020428 	.word	0x40020428
 8003e1c:	40020440 	.word	0x40020440
 8003e20:	40020458 	.word	0x40020458
 8003e24:	40020470 	.word	0x40020470
 8003e28:	40020488 	.word	0x40020488
 8003e2c:	400204a0 	.word	0x400204a0
 8003e30:	400204b8 	.word	0x400204b8
 8003e34:	58025408 	.word	0x58025408
 8003e38:	5802541c 	.word	0x5802541c
 8003e3c:	58025430 	.word	0x58025430
 8003e40:	58025444 	.word	0x58025444
 8003e44:	58025458 	.word	0x58025458
 8003e48:	5802546c 	.word	0x5802546c
 8003e4c:	58025480 	.word	0x58025480
 8003e50:	58025494 	.word	0x58025494

08003e54 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e226      	b.n	80042be <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_DMA_Start_IT+0x2a>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e21f      	b.n	80042be <HAL_DMA_Start_IT+0x46a>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	f040 820a 	bne.w	80042a8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a68      	ldr	r2, [pc, #416]	@ (8004048 <HAL_DMA_Start_IT+0x1f4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d04a      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a66      	ldr	r2, [pc, #408]	@ (800404c <HAL_DMA_Start_IT+0x1f8>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d045      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a65      	ldr	r2, [pc, #404]	@ (8004050 <HAL_DMA_Start_IT+0x1fc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d040      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a63      	ldr	r2, [pc, #396]	@ (8004054 <HAL_DMA_Start_IT+0x200>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d03b      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a62      	ldr	r2, [pc, #392]	@ (8004058 <HAL_DMA_Start_IT+0x204>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d036      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a60      	ldr	r2, [pc, #384]	@ (800405c <HAL_DMA_Start_IT+0x208>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d031      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a5f      	ldr	r2, [pc, #380]	@ (8004060 <HAL_DMA_Start_IT+0x20c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d02c      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a5d      	ldr	r2, [pc, #372]	@ (8004064 <HAL_DMA_Start_IT+0x210>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d027      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a5c      	ldr	r2, [pc, #368]	@ (8004068 <HAL_DMA_Start_IT+0x214>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d022      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a5a      	ldr	r2, [pc, #360]	@ (800406c <HAL_DMA_Start_IT+0x218>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d01d      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a59      	ldr	r2, [pc, #356]	@ (8004070 <HAL_DMA_Start_IT+0x21c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d018      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a57      	ldr	r2, [pc, #348]	@ (8004074 <HAL_DMA_Start_IT+0x220>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d013      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a56      	ldr	r2, [pc, #344]	@ (8004078 <HAL_DMA_Start_IT+0x224>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00e      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a54      	ldr	r2, [pc, #336]	@ (800407c <HAL_DMA_Start_IT+0x228>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d009      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a53      	ldr	r2, [pc, #332]	@ (8004080 <HAL_DMA_Start_IT+0x22c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d004      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a51      	ldr	r2, [pc, #324]	@ (8004084 <HAL_DMA_Start_IT+0x230>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d108      	bne.n	8003f54 <HAL_DMA_Start_IT+0x100>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0201 	bic.w	r2, r2, #1
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	e007      	b.n	8003f64 <HAL_DMA_Start_IT+0x110>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0201 	bic.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f001 f906 	bl	800517c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a34      	ldr	r2, [pc, #208]	@ (8004048 <HAL_DMA_Start_IT+0x1f4>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d04a      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a33      	ldr	r2, [pc, #204]	@ (800404c <HAL_DMA_Start_IT+0x1f8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d045      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a31      	ldr	r2, [pc, #196]	@ (8004050 <HAL_DMA_Start_IT+0x1fc>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d040      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a30      	ldr	r2, [pc, #192]	@ (8004054 <HAL_DMA_Start_IT+0x200>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d03b      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a2e      	ldr	r2, [pc, #184]	@ (8004058 <HAL_DMA_Start_IT+0x204>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d036      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a2d      	ldr	r2, [pc, #180]	@ (800405c <HAL_DMA_Start_IT+0x208>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d031      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a2b      	ldr	r2, [pc, #172]	@ (8004060 <HAL_DMA_Start_IT+0x20c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d02c      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a2a      	ldr	r2, [pc, #168]	@ (8004064 <HAL_DMA_Start_IT+0x210>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d027      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a28      	ldr	r2, [pc, #160]	@ (8004068 <HAL_DMA_Start_IT+0x214>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d022      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a27      	ldr	r2, [pc, #156]	@ (800406c <HAL_DMA_Start_IT+0x218>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d01d      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a25      	ldr	r2, [pc, #148]	@ (8004070 <HAL_DMA_Start_IT+0x21c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d018      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a24      	ldr	r2, [pc, #144]	@ (8004074 <HAL_DMA_Start_IT+0x220>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d013      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a22      	ldr	r2, [pc, #136]	@ (8004078 <HAL_DMA_Start_IT+0x224>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00e      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a21      	ldr	r2, [pc, #132]	@ (800407c <HAL_DMA_Start_IT+0x228>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d009      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1f      	ldr	r2, [pc, #124]	@ (8004080 <HAL_DMA_Start_IT+0x22c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d004      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1e      	ldr	r2, [pc, #120]	@ (8004084 <HAL_DMA_Start_IT+0x230>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d101      	bne.n	8004014 <HAL_DMA_Start_IT+0x1c0>
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <HAL_DMA_Start_IT+0x1c2>
 8004014:	2300      	movs	r3, #0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d036      	beq.n	8004088 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f023 021e 	bic.w	r2, r3, #30
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0216 	orr.w	r2, r2, #22
 800402c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	d03e      	beq.n	80040b4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 0208 	orr.w	r2, r2, #8
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	e035      	b.n	80040b4 <HAL_DMA_Start_IT+0x260>
 8004048:	40020010 	.word	0x40020010
 800404c:	40020028 	.word	0x40020028
 8004050:	40020040 	.word	0x40020040
 8004054:	40020058 	.word	0x40020058
 8004058:	40020070 	.word	0x40020070
 800405c:	40020088 	.word	0x40020088
 8004060:	400200a0 	.word	0x400200a0
 8004064:	400200b8 	.word	0x400200b8
 8004068:	40020410 	.word	0x40020410
 800406c:	40020428 	.word	0x40020428
 8004070:	40020440 	.word	0x40020440
 8004074:	40020458 	.word	0x40020458
 8004078:	40020470 	.word	0x40020470
 800407c:	40020488 	.word	0x40020488
 8004080:	400204a0 	.word	0x400204a0
 8004084:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f023 020e 	bic.w	r2, r3, #14
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 020a 	orr.w	r2, r2, #10
 800409a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d007      	beq.n	80040b4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0204 	orr.w	r2, r2, #4
 80040b2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a83      	ldr	r2, [pc, #524]	@ (80042c8 <HAL_DMA_Start_IT+0x474>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d072      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a82      	ldr	r2, [pc, #520]	@ (80042cc <HAL_DMA_Start_IT+0x478>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d06d      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a80      	ldr	r2, [pc, #512]	@ (80042d0 <HAL_DMA_Start_IT+0x47c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d068      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a7f      	ldr	r2, [pc, #508]	@ (80042d4 <HAL_DMA_Start_IT+0x480>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d063      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a7d      	ldr	r2, [pc, #500]	@ (80042d8 <HAL_DMA_Start_IT+0x484>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d05e      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a7c      	ldr	r2, [pc, #496]	@ (80042dc <HAL_DMA_Start_IT+0x488>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d059      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a7a      	ldr	r2, [pc, #488]	@ (80042e0 <HAL_DMA_Start_IT+0x48c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d054      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a79      	ldr	r2, [pc, #484]	@ (80042e4 <HAL_DMA_Start_IT+0x490>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d04f      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a77      	ldr	r2, [pc, #476]	@ (80042e8 <HAL_DMA_Start_IT+0x494>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d04a      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a76      	ldr	r2, [pc, #472]	@ (80042ec <HAL_DMA_Start_IT+0x498>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d045      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a74      	ldr	r2, [pc, #464]	@ (80042f0 <HAL_DMA_Start_IT+0x49c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d040      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a73      	ldr	r2, [pc, #460]	@ (80042f4 <HAL_DMA_Start_IT+0x4a0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d03b      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a71      	ldr	r2, [pc, #452]	@ (80042f8 <HAL_DMA_Start_IT+0x4a4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d036      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a70      	ldr	r2, [pc, #448]	@ (80042fc <HAL_DMA_Start_IT+0x4a8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d031      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a6e      	ldr	r2, [pc, #440]	@ (8004300 <HAL_DMA_Start_IT+0x4ac>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d02c      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a6d      	ldr	r2, [pc, #436]	@ (8004304 <HAL_DMA_Start_IT+0x4b0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d027      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a6b      	ldr	r2, [pc, #428]	@ (8004308 <HAL_DMA_Start_IT+0x4b4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d022      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a6a      	ldr	r2, [pc, #424]	@ (800430c <HAL_DMA_Start_IT+0x4b8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d01d      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a68      	ldr	r2, [pc, #416]	@ (8004310 <HAL_DMA_Start_IT+0x4bc>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d018      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a67      	ldr	r2, [pc, #412]	@ (8004314 <HAL_DMA_Start_IT+0x4c0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d013      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a65      	ldr	r2, [pc, #404]	@ (8004318 <HAL_DMA_Start_IT+0x4c4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00e      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a64      	ldr	r2, [pc, #400]	@ (800431c <HAL_DMA_Start_IT+0x4c8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d009      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a62      	ldr	r2, [pc, #392]	@ (8004320 <HAL_DMA_Start_IT+0x4cc>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d004      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a61      	ldr	r2, [pc, #388]	@ (8004324 <HAL_DMA_Start_IT+0x4d0>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d101      	bne.n	80041a8 <HAL_DMA_Start_IT+0x354>
 80041a4:	2301      	movs	r3, #1
 80041a6:	e000      	b.n	80041aa <HAL_DMA_Start_IT+0x356>
 80041a8:	2300      	movs	r3, #0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d01a      	beq.n	80041e4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d007      	beq.n	80041cc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041ca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d007      	beq.n	80041e4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041e2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a37      	ldr	r2, [pc, #220]	@ (80042c8 <HAL_DMA_Start_IT+0x474>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d04a      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a36      	ldr	r2, [pc, #216]	@ (80042cc <HAL_DMA_Start_IT+0x478>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d045      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a34      	ldr	r2, [pc, #208]	@ (80042d0 <HAL_DMA_Start_IT+0x47c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d040      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a33      	ldr	r2, [pc, #204]	@ (80042d4 <HAL_DMA_Start_IT+0x480>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d03b      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a31      	ldr	r2, [pc, #196]	@ (80042d8 <HAL_DMA_Start_IT+0x484>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d036      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a30      	ldr	r2, [pc, #192]	@ (80042dc <HAL_DMA_Start_IT+0x488>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d031      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a2e      	ldr	r2, [pc, #184]	@ (80042e0 <HAL_DMA_Start_IT+0x48c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d02c      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a2d      	ldr	r2, [pc, #180]	@ (80042e4 <HAL_DMA_Start_IT+0x490>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d027      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a2b      	ldr	r2, [pc, #172]	@ (80042e8 <HAL_DMA_Start_IT+0x494>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d022      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a2a      	ldr	r2, [pc, #168]	@ (80042ec <HAL_DMA_Start_IT+0x498>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d01d      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a28      	ldr	r2, [pc, #160]	@ (80042f0 <HAL_DMA_Start_IT+0x49c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d018      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a27      	ldr	r2, [pc, #156]	@ (80042f4 <HAL_DMA_Start_IT+0x4a0>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d013      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a25      	ldr	r2, [pc, #148]	@ (80042f8 <HAL_DMA_Start_IT+0x4a4>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00e      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a24      	ldr	r2, [pc, #144]	@ (80042fc <HAL_DMA_Start_IT+0x4a8>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d009      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a22      	ldr	r2, [pc, #136]	@ (8004300 <HAL_DMA_Start_IT+0x4ac>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d004      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a21      	ldr	r2, [pc, #132]	@ (8004304 <HAL_DMA_Start_IT+0x4b0>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d108      	bne.n	8004296 <HAL_DMA_Start_IT+0x442>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	e012      	b.n	80042bc <HAL_DMA_Start_IT+0x468>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0201 	orr.w	r2, r2, #1
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	e009      	b.n	80042bc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042ae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80042bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40020010 	.word	0x40020010
 80042cc:	40020028 	.word	0x40020028
 80042d0:	40020040 	.word	0x40020040
 80042d4:	40020058 	.word	0x40020058
 80042d8:	40020070 	.word	0x40020070
 80042dc:	40020088 	.word	0x40020088
 80042e0:	400200a0 	.word	0x400200a0
 80042e4:	400200b8 	.word	0x400200b8
 80042e8:	40020410 	.word	0x40020410
 80042ec:	40020428 	.word	0x40020428
 80042f0:	40020440 	.word	0x40020440
 80042f4:	40020458 	.word	0x40020458
 80042f8:	40020470 	.word	0x40020470
 80042fc:	40020488 	.word	0x40020488
 8004300:	400204a0 	.word	0x400204a0
 8004304:	400204b8 	.word	0x400204b8
 8004308:	58025408 	.word	0x58025408
 800430c:	5802541c 	.word	0x5802541c
 8004310:	58025430 	.word	0x58025430
 8004314:	58025444 	.word	0x58025444
 8004318:	58025458 	.word	0x58025458
 800431c:	5802546c 	.word	0x5802546c
 8004320:	58025480 	.word	0x58025480
 8004324:	58025494 	.word	0x58025494

08004328 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08a      	sub	sp, #40	@ 0x28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004334:	4b67      	ldr	r3, [pc, #412]	@ (80044d4 <HAL_DMA_IRQHandler+0x1ac>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a67      	ldr	r2, [pc, #412]	@ (80044d8 <HAL_DMA_IRQHandler+0x1b0>)
 800433a:	fba2 2303 	umull	r2, r3, r2, r3
 800433e:	0a9b      	lsrs	r3, r3, #10
 8004340:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004346:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a5f      	ldr	r2, [pc, #380]	@ (80044dc <HAL_DMA_IRQHandler+0x1b4>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d04a      	beq.n	80043fa <HAL_DMA_IRQHandler+0xd2>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a5d      	ldr	r2, [pc, #372]	@ (80044e0 <HAL_DMA_IRQHandler+0x1b8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d045      	beq.n	80043fa <HAL_DMA_IRQHandler+0xd2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a5c      	ldr	r2, [pc, #368]	@ (80044e4 <HAL_DMA_IRQHandler+0x1bc>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d040      	beq.n	80043fa <HAL_DMA_IRQHandler+0xd2>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a5a      	ldr	r2, [pc, #360]	@ (80044e8 <HAL_DMA_IRQHandler+0x1c0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d03b      	beq.n	80043fa <HAL_DMA_IRQHandler+0xd2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a59      	ldr	r2, [pc, #356]	@ (80044ec <HAL_DMA_IRQHandler+0x1c4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d036      	beq.n	80043fa <HAL_DMA_IRQHandler+0xd2>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a57      	ldr	r2, [pc, #348]	@ (80044f0 <HAL_DMA_IRQHandler+0x1c8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d031      	beq.n	80043fa <HAL_DMA_IRQHandler+0xd2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a56      	ldr	r2, [pc, #344]	@ (80044f4 <HAL_DMA_IRQHandler+0x1cc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d02c      	beq.n	80043fa <HAL_DMA_IRQHandler+0xd2>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a54      	ldr	r2, [pc, #336]	@ (80044f8 <HAL_DMA_IRQHandler+0x1d0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d027      	beq.n	80043fa <HAL_DMA_IRQHandler+0xd2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a53      	ldr	r2, [pc, #332]	@ (80044fc <HAL_DMA_IRQHandler+0x1d4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d022      	beq.n	80043fa <HAL_DMA_IRQHandler+0xd2>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a51      	ldr	r2, [pc, #324]	@ (8004500 <HAL_DMA_IRQHandler+0x1d8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d01d      	beq.n	80043fa <HAL_DMA_IRQHandler+0xd2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a50      	ldr	r2, [pc, #320]	@ (8004504 <HAL_DMA_IRQHandler+0x1dc>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d018      	beq.n	80043fa <HAL_DMA_IRQHandler+0xd2>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a4e      	ldr	r2, [pc, #312]	@ (8004508 <HAL_DMA_IRQHandler+0x1e0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d013      	beq.n	80043fa <HAL_DMA_IRQHandler+0xd2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a4d      	ldr	r2, [pc, #308]	@ (800450c <HAL_DMA_IRQHandler+0x1e4>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d00e      	beq.n	80043fa <HAL_DMA_IRQHandler+0xd2>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a4b      	ldr	r2, [pc, #300]	@ (8004510 <HAL_DMA_IRQHandler+0x1e8>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d009      	beq.n	80043fa <HAL_DMA_IRQHandler+0xd2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a4a      	ldr	r2, [pc, #296]	@ (8004514 <HAL_DMA_IRQHandler+0x1ec>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d004      	beq.n	80043fa <HAL_DMA_IRQHandler+0xd2>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a48      	ldr	r2, [pc, #288]	@ (8004518 <HAL_DMA_IRQHandler+0x1f0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d101      	bne.n	80043fe <HAL_DMA_IRQHandler+0xd6>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <HAL_DMA_IRQHandler+0xd8>
 80043fe:	2300      	movs	r3, #0
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 842b 	beq.w	8004c5c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800440a:	f003 031f 	and.w	r3, r3, #31
 800440e:	2208      	movs	r2, #8
 8004410:	409a      	lsls	r2, r3
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	4013      	ands	r3, r2
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 80a2 	beq.w	8004560 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a2e      	ldr	r2, [pc, #184]	@ (80044dc <HAL_DMA_IRQHandler+0x1b4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d04a      	beq.n	80044bc <HAL_DMA_IRQHandler+0x194>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a2d      	ldr	r2, [pc, #180]	@ (80044e0 <HAL_DMA_IRQHandler+0x1b8>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d045      	beq.n	80044bc <HAL_DMA_IRQHandler+0x194>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a2b      	ldr	r2, [pc, #172]	@ (80044e4 <HAL_DMA_IRQHandler+0x1bc>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d040      	beq.n	80044bc <HAL_DMA_IRQHandler+0x194>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a2a      	ldr	r2, [pc, #168]	@ (80044e8 <HAL_DMA_IRQHandler+0x1c0>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d03b      	beq.n	80044bc <HAL_DMA_IRQHandler+0x194>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a28      	ldr	r2, [pc, #160]	@ (80044ec <HAL_DMA_IRQHandler+0x1c4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d036      	beq.n	80044bc <HAL_DMA_IRQHandler+0x194>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a27      	ldr	r2, [pc, #156]	@ (80044f0 <HAL_DMA_IRQHandler+0x1c8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d031      	beq.n	80044bc <HAL_DMA_IRQHandler+0x194>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a25      	ldr	r2, [pc, #148]	@ (80044f4 <HAL_DMA_IRQHandler+0x1cc>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d02c      	beq.n	80044bc <HAL_DMA_IRQHandler+0x194>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a24      	ldr	r2, [pc, #144]	@ (80044f8 <HAL_DMA_IRQHandler+0x1d0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d027      	beq.n	80044bc <HAL_DMA_IRQHandler+0x194>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a22      	ldr	r2, [pc, #136]	@ (80044fc <HAL_DMA_IRQHandler+0x1d4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d022      	beq.n	80044bc <HAL_DMA_IRQHandler+0x194>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a21      	ldr	r2, [pc, #132]	@ (8004500 <HAL_DMA_IRQHandler+0x1d8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d01d      	beq.n	80044bc <HAL_DMA_IRQHandler+0x194>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a1f      	ldr	r2, [pc, #124]	@ (8004504 <HAL_DMA_IRQHandler+0x1dc>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d018      	beq.n	80044bc <HAL_DMA_IRQHandler+0x194>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a1e      	ldr	r2, [pc, #120]	@ (8004508 <HAL_DMA_IRQHandler+0x1e0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d013      	beq.n	80044bc <HAL_DMA_IRQHandler+0x194>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a1c      	ldr	r2, [pc, #112]	@ (800450c <HAL_DMA_IRQHandler+0x1e4>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d00e      	beq.n	80044bc <HAL_DMA_IRQHandler+0x194>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004510 <HAL_DMA_IRQHandler+0x1e8>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d009      	beq.n	80044bc <HAL_DMA_IRQHandler+0x194>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a19      	ldr	r2, [pc, #100]	@ (8004514 <HAL_DMA_IRQHandler+0x1ec>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d004      	beq.n	80044bc <HAL_DMA_IRQHandler+0x194>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a18      	ldr	r2, [pc, #96]	@ (8004518 <HAL_DMA_IRQHandler+0x1f0>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d12f      	bne.n	800451c <HAL_DMA_IRQHandler+0x1f4>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	bf14      	ite	ne
 80044ca:	2301      	movne	r3, #1
 80044cc:	2300      	moveq	r3, #0
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	e02e      	b.n	8004530 <HAL_DMA_IRQHandler+0x208>
 80044d2:	bf00      	nop
 80044d4:	24000000 	.word	0x24000000
 80044d8:	1b4e81b5 	.word	0x1b4e81b5
 80044dc:	40020010 	.word	0x40020010
 80044e0:	40020028 	.word	0x40020028
 80044e4:	40020040 	.word	0x40020040
 80044e8:	40020058 	.word	0x40020058
 80044ec:	40020070 	.word	0x40020070
 80044f0:	40020088 	.word	0x40020088
 80044f4:	400200a0 	.word	0x400200a0
 80044f8:	400200b8 	.word	0x400200b8
 80044fc:	40020410 	.word	0x40020410
 8004500:	40020428 	.word	0x40020428
 8004504:	40020440 	.word	0x40020440
 8004508:	40020458 	.word	0x40020458
 800450c:	40020470 	.word	0x40020470
 8004510:	40020488 	.word	0x40020488
 8004514:	400204a0 	.word	0x400204a0
 8004518:	400204b8 	.word	0x400204b8
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	bf14      	ite	ne
 800452a:	2301      	movne	r3, #1
 800452c:	2300      	moveq	r3, #0
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d015      	beq.n	8004560 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0204 	bic.w	r2, r2, #4
 8004542:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004548:	f003 031f 	and.w	r3, r3, #31
 800454c:	2208      	movs	r2, #8
 800454e:	409a      	lsls	r2, r3
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004558:	f043 0201 	orr.w	r2, r3, #1
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	fa22 f303 	lsr.w	r3, r2, r3
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d06e      	beq.n	8004654 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a69      	ldr	r2, [pc, #420]	@ (8004720 <HAL_DMA_IRQHandler+0x3f8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d04a      	beq.n	8004616 <HAL_DMA_IRQHandler+0x2ee>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a67      	ldr	r2, [pc, #412]	@ (8004724 <HAL_DMA_IRQHandler+0x3fc>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d045      	beq.n	8004616 <HAL_DMA_IRQHandler+0x2ee>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a66      	ldr	r2, [pc, #408]	@ (8004728 <HAL_DMA_IRQHandler+0x400>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d040      	beq.n	8004616 <HAL_DMA_IRQHandler+0x2ee>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a64      	ldr	r2, [pc, #400]	@ (800472c <HAL_DMA_IRQHandler+0x404>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d03b      	beq.n	8004616 <HAL_DMA_IRQHandler+0x2ee>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a63      	ldr	r2, [pc, #396]	@ (8004730 <HAL_DMA_IRQHandler+0x408>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d036      	beq.n	8004616 <HAL_DMA_IRQHandler+0x2ee>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a61      	ldr	r2, [pc, #388]	@ (8004734 <HAL_DMA_IRQHandler+0x40c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d031      	beq.n	8004616 <HAL_DMA_IRQHandler+0x2ee>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a60      	ldr	r2, [pc, #384]	@ (8004738 <HAL_DMA_IRQHandler+0x410>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d02c      	beq.n	8004616 <HAL_DMA_IRQHandler+0x2ee>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a5e      	ldr	r2, [pc, #376]	@ (800473c <HAL_DMA_IRQHandler+0x414>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d027      	beq.n	8004616 <HAL_DMA_IRQHandler+0x2ee>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a5d      	ldr	r2, [pc, #372]	@ (8004740 <HAL_DMA_IRQHandler+0x418>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d022      	beq.n	8004616 <HAL_DMA_IRQHandler+0x2ee>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a5b      	ldr	r2, [pc, #364]	@ (8004744 <HAL_DMA_IRQHandler+0x41c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d01d      	beq.n	8004616 <HAL_DMA_IRQHandler+0x2ee>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a5a      	ldr	r2, [pc, #360]	@ (8004748 <HAL_DMA_IRQHandler+0x420>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d018      	beq.n	8004616 <HAL_DMA_IRQHandler+0x2ee>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a58      	ldr	r2, [pc, #352]	@ (800474c <HAL_DMA_IRQHandler+0x424>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d013      	beq.n	8004616 <HAL_DMA_IRQHandler+0x2ee>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a57      	ldr	r2, [pc, #348]	@ (8004750 <HAL_DMA_IRQHandler+0x428>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00e      	beq.n	8004616 <HAL_DMA_IRQHandler+0x2ee>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a55      	ldr	r2, [pc, #340]	@ (8004754 <HAL_DMA_IRQHandler+0x42c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d009      	beq.n	8004616 <HAL_DMA_IRQHandler+0x2ee>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a54      	ldr	r2, [pc, #336]	@ (8004758 <HAL_DMA_IRQHandler+0x430>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d004      	beq.n	8004616 <HAL_DMA_IRQHandler+0x2ee>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a52      	ldr	r2, [pc, #328]	@ (800475c <HAL_DMA_IRQHandler+0x434>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d10a      	bne.n	800462c <HAL_DMA_IRQHandler+0x304>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004620:	2b00      	cmp	r3, #0
 8004622:	bf14      	ite	ne
 8004624:	2301      	movne	r3, #1
 8004626:	2300      	moveq	r3, #0
 8004628:	b2db      	uxtb	r3, r3
 800462a:	e003      	b.n	8004634 <HAL_DMA_IRQHandler+0x30c>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2300      	movs	r3, #0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00d      	beq.n	8004654 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800463c:	f003 031f 	and.w	r3, r3, #31
 8004640:	2201      	movs	r2, #1
 8004642:	409a      	lsls	r2, r3
 8004644:	6a3b      	ldr	r3, [r7, #32]
 8004646:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464c:	f043 0202 	orr.w	r2, r3, #2
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	2204      	movs	r2, #4
 800465e:	409a      	lsls	r2, r3
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	4013      	ands	r3, r2
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 808f 	beq.w	8004788 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a2c      	ldr	r2, [pc, #176]	@ (8004720 <HAL_DMA_IRQHandler+0x3f8>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d04a      	beq.n	800470a <HAL_DMA_IRQHandler+0x3e2>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a2a      	ldr	r2, [pc, #168]	@ (8004724 <HAL_DMA_IRQHandler+0x3fc>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d045      	beq.n	800470a <HAL_DMA_IRQHandler+0x3e2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a29      	ldr	r2, [pc, #164]	@ (8004728 <HAL_DMA_IRQHandler+0x400>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d040      	beq.n	800470a <HAL_DMA_IRQHandler+0x3e2>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a27      	ldr	r2, [pc, #156]	@ (800472c <HAL_DMA_IRQHandler+0x404>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d03b      	beq.n	800470a <HAL_DMA_IRQHandler+0x3e2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a26      	ldr	r2, [pc, #152]	@ (8004730 <HAL_DMA_IRQHandler+0x408>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d036      	beq.n	800470a <HAL_DMA_IRQHandler+0x3e2>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a24      	ldr	r2, [pc, #144]	@ (8004734 <HAL_DMA_IRQHandler+0x40c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d031      	beq.n	800470a <HAL_DMA_IRQHandler+0x3e2>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a23      	ldr	r2, [pc, #140]	@ (8004738 <HAL_DMA_IRQHandler+0x410>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d02c      	beq.n	800470a <HAL_DMA_IRQHandler+0x3e2>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a21      	ldr	r2, [pc, #132]	@ (800473c <HAL_DMA_IRQHandler+0x414>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d027      	beq.n	800470a <HAL_DMA_IRQHandler+0x3e2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a20      	ldr	r2, [pc, #128]	@ (8004740 <HAL_DMA_IRQHandler+0x418>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d022      	beq.n	800470a <HAL_DMA_IRQHandler+0x3e2>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004744 <HAL_DMA_IRQHandler+0x41c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d01d      	beq.n	800470a <HAL_DMA_IRQHandler+0x3e2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a1d      	ldr	r2, [pc, #116]	@ (8004748 <HAL_DMA_IRQHandler+0x420>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d018      	beq.n	800470a <HAL_DMA_IRQHandler+0x3e2>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a1b      	ldr	r2, [pc, #108]	@ (800474c <HAL_DMA_IRQHandler+0x424>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d013      	beq.n	800470a <HAL_DMA_IRQHandler+0x3e2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a1a      	ldr	r2, [pc, #104]	@ (8004750 <HAL_DMA_IRQHandler+0x428>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d00e      	beq.n	800470a <HAL_DMA_IRQHandler+0x3e2>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a18      	ldr	r2, [pc, #96]	@ (8004754 <HAL_DMA_IRQHandler+0x42c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d009      	beq.n	800470a <HAL_DMA_IRQHandler+0x3e2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a17      	ldr	r2, [pc, #92]	@ (8004758 <HAL_DMA_IRQHandler+0x430>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d004      	beq.n	800470a <HAL_DMA_IRQHandler+0x3e2>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a15      	ldr	r2, [pc, #84]	@ (800475c <HAL_DMA_IRQHandler+0x434>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d12a      	bne.n	8004760 <HAL_DMA_IRQHandler+0x438>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	bf14      	ite	ne
 8004718:	2301      	movne	r3, #1
 800471a:	2300      	moveq	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	e023      	b.n	8004768 <HAL_DMA_IRQHandler+0x440>
 8004720:	40020010 	.word	0x40020010
 8004724:	40020028 	.word	0x40020028
 8004728:	40020040 	.word	0x40020040
 800472c:	40020058 	.word	0x40020058
 8004730:	40020070 	.word	0x40020070
 8004734:	40020088 	.word	0x40020088
 8004738:	400200a0 	.word	0x400200a0
 800473c:	400200b8 	.word	0x400200b8
 8004740:	40020410 	.word	0x40020410
 8004744:	40020428 	.word	0x40020428
 8004748:	40020440 	.word	0x40020440
 800474c:	40020458 	.word	0x40020458
 8004750:	40020470 	.word	0x40020470
 8004754:	40020488 	.word	0x40020488
 8004758:	400204a0 	.word	0x400204a0
 800475c:	400204b8 	.word	0x400204b8
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2300      	movs	r3, #0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00d      	beq.n	8004788 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004770:	f003 031f 	and.w	r3, r3, #31
 8004774:	2204      	movs	r2, #4
 8004776:	409a      	lsls	r2, r3
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004780:	f043 0204 	orr.w	r2, r3, #4
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800478c:	f003 031f 	and.w	r3, r3, #31
 8004790:	2210      	movs	r2, #16
 8004792:	409a      	lsls	r2, r3
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	4013      	ands	r3, r2
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 80a6 	beq.w	80048ea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a85      	ldr	r2, [pc, #532]	@ (80049b8 <HAL_DMA_IRQHandler+0x690>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d04a      	beq.n	800483e <HAL_DMA_IRQHandler+0x516>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a83      	ldr	r2, [pc, #524]	@ (80049bc <HAL_DMA_IRQHandler+0x694>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d045      	beq.n	800483e <HAL_DMA_IRQHandler+0x516>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a82      	ldr	r2, [pc, #520]	@ (80049c0 <HAL_DMA_IRQHandler+0x698>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d040      	beq.n	800483e <HAL_DMA_IRQHandler+0x516>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a80      	ldr	r2, [pc, #512]	@ (80049c4 <HAL_DMA_IRQHandler+0x69c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d03b      	beq.n	800483e <HAL_DMA_IRQHandler+0x516>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a7f      	ldr	r2, [pc, #508]	@ (80049c8 <HAL_DMA_IRQHandler+0x6a0>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d036      	beq.n	800483e <HAL_DMA_IRQHandler+0x516>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a7d      	ldr	r2, [pc, #500]	@ (80049cc <HAL_DMA_IRQHandler+0x6a4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d031      	beq.n	800483e <HAL_DMA_IRQHandler+0x516>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a7c      	ldr	r2, [pc, #496]	@ (80049d0 <HAL_DMA_IRQHandler+0x6a8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d02c      	beq.n	800483e <HAL_DMA_IRQHandler+0x516>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a7a      	ldr	r2, [pc, #488]	@ (80049d4 <HAL_DMA_IRQHandler+0x6ac>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d027      	beq.n	800483e <HAL_DMA_IRQHandler+0x516>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a79      	ldr	r2, [pc, #484]	@ (80049d8 <HAL_DMA_IRQHandler+0x6b0>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d022      	beq.n	800483e <HAL_DMA_IRQHandler+0x516>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a77      	ldr	r2, [pc, #476]	@ (80049dc <HAL_DMA_IRQHandler+0x6b4>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d01d      	beq.n	800483e <HAL_DMA_IRQHandler+0x516>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a76      	ldr	r2, [pc, #472]	@ (80049e0 <HAL_DMA_IRQHandler+0x6b8>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d018      	beq.n	800483e <HAL_DMA_IRQHandler+0x516>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a74      	ldr	r2, [pc, #464]	@ (80049e4 <HAL_DMA_IRQHandler+0x6bc>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d013      	beq.n	800483e <HAL_DMA_IRQHandler+0x516>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a73      	ldr	r2, [pc, #460]	@ (80049e8 <HAL_DMA_IRQHandler+0x6c0>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d00e      	beq.n	800483e <HAL_DMA_IRQHandler+0x516>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a71      	ldr	r2, [pc, #452]	@ (80049ec <HAL_DMA_IRQHandler+0x6c4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d009      	beq.n	800483e <HAL_DMA_IRQHandler+0x516>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a70      	ldr	r2, [pc, #448]	@ (80049f0 <HAL_DMA_IRQHandler+0x6c8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d004      	beq.n	800483e <HAL_DMA_IRQHandler+0x516>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a6e      	ldr	r2, [pc, #440]	@ (80049f4 <HAL_DMA_IRQHandler+0x6cc>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d10a      	bne.n	8004854 <HAL_DMA_IRQHandler+0x52c>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b00      	cmp	r3, #0
 800484a:	bf14      	ite	ne
 800484c:	2301      	movne	r3, #1
 800484e:	2300      	moveq	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	e009      	b.n	8004868 <HAL_DMA_IRQHandler+0x540>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b00      	cmp	r3, #0
 8004860:	bf14      	ite	ne
 8004862:	2301      	movne	r3, #1
 8004864:	2300      	moveq	r3, #0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d03e      	beq.n	80048ea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004870:	f003 031f 	and.w	r3, r3, #31
 8004874:	2210      	movs	r2, #16
 8004876:	409a      	lsls	r2, r3
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d018      	beq.n	80048bc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d108      	bne.n	80048aa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489c:	2b00      	cmp	r3, #0
 800489e:	d024      	beq.n	80048ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	4798      	blx	r3
 80048a8:	e01f      	b.n	80048ea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d01b      	beq.n	80048ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	4798      	blx	r3
 80048ba:	e016      	b.n	80048ea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d107      	bne.n	80048da <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0208 	bic.w	r2, r2, #8
 80048d8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ee:	f003 031f 	and.w	r3, r3, #31
 80048f2:	2220      	movs	r2, #32
 80048f4:	409a      	lsls	r2, r3
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	4013      	ands	r3, r2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 8110 	beq.w	8004b20 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a2c      	ldr	r2, [pc, #176]	@ (80049b8 <HAL_DMA_IRQHandler+0x690>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d04a      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x678>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a2b      	ldr	r2, [pc, #172]	@ (80049bc <HAL_DMA_IRQHandler+0x694>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d045      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x678>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a29      	ldr	r2, [pc, #164]	@ (80049c0 <HAL_DMA_IRQHandler+0x698>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d040      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x678>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a28      	ldr	r2, [pc, #160]	@ (80049c4 <HAL_DMA_IRQHandler+0x69c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d03b      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x678>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a26      	ldr	r2, [pc, #152]	@ (80049c8 <HAL_DMA_IRQHandler+0x6a0>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d036      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x678>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a25      	ldr	r2, [pc, #148]	@ (80049cc <HAL_DMA_IRQHandler+0x6a4>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d031      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x678>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a23      	ldr	r2, [pc, #140]	@ (80049d0 <HAL_DMA_IRQHandler+0x6a8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d02c      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x678>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a22      	ldr	r2, [pc, #136]	@ (80049d4 <HAL_DMA_IRQHandler+0x6ac>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d027      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x678>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a20      	ldr	r2, [pc, #128]	@ (80049d8 <HAL_DMA_IRQHandler+0x6b0>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d022      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x678>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a1f      	ldr	r2, [pc, #124]	@ (80049dc <HAL_DMA_IRQHandler+0x6b4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d01d      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x678>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a1d      	ldr	r2, [pc, #116]	@ (80049e0 <HAL_DMA_IRQHandler+0x6b8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d018      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x678>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a1c      	ldr	r2, [pc, #112]	@ (80049e4 <HAL_DMA_IRQHandler+0x6bc>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d013      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x678>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a1a      	ldr	r2, [pc, #104]	@ (80049e8 <HAL_DMA_IRQHandler+0x6c0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00e      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x678>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a19      	ldr	r2, [pc, #100]	@ (80049ec <HAL_DMA_IRQHandler+0x6c4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d009      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x678>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a17      	ldr	r2, [pc, #92]	@ (80049f0 <HAL_DMA_IRQHandler+0x6c8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d004      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x678>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a16      	ldr	r2, [pc, #88]	@ (80049f4 <HAL_DMA_IRQHandler+0x6cc>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d12b      	bne.n	80049f8 <HAL_DMA_IRQHandler+0x6d0>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0310 	and.w	r3, r3, #16
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	bf14      	ite	ne
 80049ae:	2301      	movne	r3, #1
 80049b0:	2300      	moveq	r3, #0
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	e02a      	b.n	8004a0c <HAL_DMA_IRQHandler+0x6e4>
 80049b6:	bf00      	nop
 80049b8:	40020010 	.word	0x40020010
 80049bc:	40020028 	.word	0x40020028
 80049c0:	40020040 	.word	0x40020040
 80049c4:	40020058 	.word	0x40020058
 80049c8:	40020070 	.word	0x40020070
 80049cc:	40020088 	.word	0x40020088
 80049d0:	400200a0 	.word	0x400200a0
 80049d4:	400200b8 	.word	0x400200b8
 80049d8:	40020410 	.word	0x40020410
 80049dc:	40020428 	.word	0x40020428
 80049e0:	40020440 	.word	0x40020440
 80049e4:	40020458 	.word	0x40020458
 80049e8:	40020470 	.word	0x40020470
 80049ec:	40020488 	.word	0x40020488
 80049f0:	400204a0 	.word	0x400204a0
 80049f4:	400204b8 	.word	0x400204b8
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	bf14      	ite	ne
 8004a06:	2301      	movne	r3, #1
 8004a08:	2300      	moveq	r3, #0
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 8087 	beq.w	8004b20 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a16:	f003 031f 	and.w	r3, r3, #31
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	409a      	lsls	r2, r3
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d139      	bne.n	8004aa2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0216 	bic.w	r2, r2, #22
 8004a3c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	695a      	ldr	r2, [r3, #20]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a4c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d103      	bne.n	8004a5e <HAL_DMA_IRQHandler+0x736>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d007      	beq.n	8004a6e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0208 	bic.w	r2, r2, #8
 8004a6c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	223f      	movs	r2, #63	@ 0x3f
 8004a78:	409a      	lsls	r2, r3
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 834a 	beq.w	800512c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	4798      	blx	r3
          }
          return;
 8004aa0:	e344      	b.n	800512c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d018      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d108      	bne.n	8004ad0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d02c      	beq.n	8004b20 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	4798      	blx	r3
 8004ace:	e027      	b.n	8004b20 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d023      	beq.n	8004b20 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	4798      	blx	r3
 8004ae0:	e01e      	b.n	8004b20 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10f      	bne.n	8004b10 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0210 	bic.w	r2, r2, #16
 8004afe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 8306 	beq.w	8005136 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 8088 	beq.w	8004c48 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2204      	movs	r2, #4
 8004b3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a7a      	ldr	r2, [pc, #488]	@ (8004d30 <HAL_DMA_IRQHandler+0xa08>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d04a      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x8b8>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a79      	ldr	r2, [pc, #484]	@ (8004d34 <HAL_DMA_IRQHandler+0xa0c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d045      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x8b8>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a77      	ldr	r2, [pc, #476]	@ (8004d38 <HAL_DMA_IRQHandler+0xa10>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d040      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x8b8>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a76      	ldr	r2, [pc, #472]	@ (8004d3c <HAL_DMA_IRQHandler+0xa14>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d03b      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x8b8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a74      	ldr	r2, [pc, #464]	@ (8004d40 <HAL_DMA_IRQHandler+0xa18>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d036      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x8b8>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a73      	ldr	r2, [pc, #460]	@ (8004d44 <HAL_DMA_IRQHandler+0xa1c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d031      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x8b8>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a71      	ldr	r2, [pc, #452]	@ (8004d48 <HAL_DMA_IRQHandler+0xa20>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d02c      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x8b8>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a70      	ldr	r2, [pc, #448]	@ (8004d4c <HAL_DMA_IRQHandler+0xa24>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d027      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x8b8>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a6e      	ldr	r2, [pc, #440]	@ (8004d50 <HAL_DMA_IRQHandler+0xa28>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d022      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x8b8>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a6d      	ldr	r2, [pc, #436]	@ (8004d54 <HAL_DMA_IRQHandler+0xa2c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d01d      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x8b8>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a6b      	ldr	r2, [pc, #428]	@ (8004d58 <HAL_DMA_IRQHandler+0xa30>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d018      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x8b8>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a6a      	ldr	r2, [pc, #424]	@ (8004d5c <HAL_DMA_IRQHandler+0xa34>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d013      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x8b8>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a68      	ldr	r2, [pc, #416]	@ (8004d60 <HAL_DMA_IRQHandler+0xa38>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d00e      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x8b8>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a67      	ldr	r2, [pc, #412]	@ (8004d64 <HAL_DMA_IRQHandler+0xa3c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d009      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x8b8>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a65      	ldr	r2, [pc, #404]	@ (8004d68 <HAL_DMA_IRQHandler+0xa40>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d004      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x8b8>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a64      	ldr	r2, [pc, #400]	@ (8004d6c <HAL_DMA_IRQHandler+0xa44>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d108      	bne.n	8004bf2 <HAL_DMA_IRQHandler+0x8ca>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0201 	bic.w	r2, r2, #1
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	e007      	b.n	8004c02 <HAL_DMA_IRQHandler+0x8da>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0201 	bic.w	r2, r2, #1
 8004c00:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3301      	adds	r3, #1
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d307      	bcc.n	8004c1e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1f2      	bne.n	8004c02 <HAL_DMA_IRQHandler+0x8da>
 8004c1c:	e000      	b.n	8004c20 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004c1e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d004      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2203      	movs	r2, #3
 8004c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004c36:	e003      	b.n	8004c40 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 8272 	beq.w	8005136 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	4798      	blx	r3
 8004c5a:	e26c      	b.n	8005136 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a43      	ldr	r2, [pc, #268]	@ (8004d70 <HAL_DMA_IRQHandler+0xa48>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d022      	beq.n	8004cac <HAL_DMA_IRQHandler+0x984>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a42      	ldr	r2, [pc, #264]	@ (8004d74 <HAL_DMA_IRQHandler+0xa4c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d01d      	beq.n	8004cac <HAL_DMA_IRQHandler+0x984>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a40      	ldr	r2, [pc, #256]	@ (8004d78 <HAL_DMA_IRQHandler+0xa50>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d018      	beq.n	8004cac <HAL_DMA_IRQHandler+0x984>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a3f      	ldr	r2, [pc, #252]	@ (8004d7c <HAL_DMA_IRQHandler+0xa54>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d013      	beq.n	8004cac <HAL_DMA_IRQHandler+0x984>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a3d      	ldr	r2, [pc, #244]	@ (8004d80 <HAL_DMA_IRQHandler+0xa58>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00e      	beq.n	8004cac <HAL_DMA_IRQHandler+0x984>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a3c      	ldr	r2, [pc, #240]	@ (8004d84 <HAL_DMA_IRQHandler+0xa5c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d009      	beq.n	8004cac <HAL_DMA_IRQHandler+0x984>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a3a      	ldr	r2, [pc, #232]	@ (8004d88 <HAL_DMA_IRQHandler+0xa60>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d004      	beq.n	8004cac <HAL_DMA_IRQHandler+0x984>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a39      	ldr	r2, [pc, #228]	@ (8004d8c <HAL_DMA_IRQHandler+0xa64>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d101      	bne.n	8004cb0 <HAL_DMA_IRQHandler+0x988>
 8004cac:	2301      	movs	r3, #1
 8004cae:	e000      	b.n	8004cb2 <HAL_DMA_IRQHandler+0x98a>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 823f 	beq.w	8005136 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc4:	f003 031f 	and.w	r3, r3, #31
 8004cc8:	2204      	movs	r2, #4
 8004cca:	409a      	lsls	r2, r3
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 80cd 	beq.w	8004e70 <HAL_DMA_IRQHandler+0xb48>
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 80c7 	beq.w	8004e70 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce6:	f003 031f 	and.w	r3, r3, #31
 8004cea:	2204      	movs	r2, #4
 8004cec:	409a      	lsls	r2, r3
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d049      	beq.n	8004d90 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d109      	bne.n	8004d1a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 8210 	beq.w	8005130 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d18:	e20a      	b.n	8005130 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f000 8206 	beq.w	8005130 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d2c:	e200      	b.n	8005130 <HAL_DMA_IRQHandler+0xe08>
 8004d2e:	bf00      	nop
 8004d30:	40020010 	.word	0x40020010
 8004d34:	40020028 	.word	0x40020028
 8004d38:	40020040 	.word	0x40020040
 8004d3c:	40020058 	.word	0x40020058
 8004d40:	40020070 	.word	0x40020070
 8004d44:	40020088 	.word	0x40020088
 8004d48:	400200a0 	.word	0x400200a0
 8004d4c:	400200b8 	.word	0x400200b8
 8004d50:	40020410 	.word	0x40020410
 8004d54:	40020428 	.word	0x40020428
 8004d58:	40020440 	.word	0x40020440
 8004d5c:	40020458 	.word	0x40020458
 8004d60:	40020470 	.word	0x40020470
 8004d64:	40020488 	.word	0x40020488
 8004d68:	400204a0 	.word	0x400204a0
 8004d6c:	400204b8 	.word	0x400204b8
 8004d70:	58025408 	.word	0x58025408
 8004d74:	5802541c 	.word	0x5802541c
 8004d78:	58025430 	.word	0x58025430
 8004d7c:	58025444 	.word	0x58025444
 8004d80:	58025458 	.word	0x58025458
 8004d84:	5802546c 	.word	0x5802546c
 8004d88:	58025480 	.word	0x58025480
 8004d8c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f003 0320 	and.w	r3, r3, #32
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d160      	bne.n	8004e5c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a7f      	ldr	r2, [pc, #508]	@ (8004f9c <HAL_DMA_IRQHandler+0xc74>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d04a      	beq.n	8004e3a <HAL_DMA_IRQHandler+0xb12>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a7d      	ldr	r2, [pc, #500]	@ (8004fa0 <HAL_DMA_IRQHandler+0xc78>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d045      	beq.n	8004e3a <HAL_DMA_IRQHandler+0xb12>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a7c      	ldr	r2, [pc, #496]	@ (8004fa4 <HAL_DMA_IRQHandler+0xc7c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d040      	beq.n	8004e3a <HAL_DMA_IRQHandler+0xb12>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a7a      	ldr	r2, [pc, #488]	@ (8004fa8 <HAL_DMA_IRQHandler+0xc80>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d03b      	beq.n	8004e3a <HAL_DMA_IRQHandler+0xb12>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a79      	ldr	r2, [pc, #484]	@ (8004fac <HAL_DMA_IRQHandler+0xc84>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d036      	beq.n	8004e3a <HAL_DMA_IRQHandler+0xb12>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a77      	ldr	r2, [pc, #476]	@ (8004fb0 <HAL_DMA_IRQHandler+0xc88>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d031      	beq.n	8004e3a <HAL_DMA_IRQHandler+0xb12>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a76      	ldr	r2, [pc, #472]	@ (8004fb4 <HAL_DMA_IRQHandler+0xc8c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d02c      	beq.n	8004e3a <HAL_DMA_IRQHandler+0xb12>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a74      	ldr	r2, [pc, #464]	@ (8004fb8 <HAL_DMA_IRQHandler+0xc90>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d027      	beq.n	8004e3a <HAL_DMA_IRQHandler+0xb12>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a73      	ldr	r2, [pc, #460]	@ (8004fbc <HAL_DMA_IRQHandler+0xc94>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d022      	beq.n	8004e3a <HAL_DMA_IRQHandler+0xb12>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a71      	ldr	r2, [pc, #452]	@ (8004fc0 <HAL_DMA_IRQHandler+0xc98>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d01d      	beq.n	8004e3a <HAL_DMA_IRQHandler+0xb12>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a70      	ldr	r2, [pc, #448]	@ (8004fc4 <HAL_DMA_IRQHandler+0xc9c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d018      	beq.n	8004e3a <HAL_DMA_IRQHandler+0xb12>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a6e      	ldr	r2, [pc, #440]	@ (8004fc8 <HAL_DMA_IRQHandler+0xca0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d013      	beq.n	8004e3a <HAL_DMA_IRQHandler+0xb12>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a6d      	ldr	r2, [pc, #436]	@ (8004fcc <HAL_DMA_IRQHandler+0xca4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d00e      	beq.n	8004e3a <HAL_DMA_IRQHandler+0xb12>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a6b      	ldr	r2, [pc, #428]	@ (8004fd0 <HAL_DMA_IRQHandler+0xca8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d009      	beq.n	8004e3a <HAL_DMA_IRQHandler+0xb12>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a6a      	ldr	r2, [pc, #424]	@ (8004fd4 <HAL_DMA_IRQHandler+0xcac>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d004      	beq.n	8004e3a <HAL_DMA_IRQHandler+0xb12>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a68      	ldr	r2, [pc, #416]	@ (8004fd8 <HAL_DMA_IRQHandler+0xcb0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d108      	bne.n	8004e4c <HAL_DMA_IRQHandler+0xb24>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0208 	bic.w	r2, r2, #8
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	e007      	b.n	8004e5c <HAL_DMA_IRQHandler+0xb34>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0204 	bic.w	r2, r2, #4
 8004e5a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 8165 	beq.w	8005130 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e6e:	e15f      	b.n	8005130 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e74:	f003 031f 	and.w	r3, r3, #31
 8004e78:	2202      	movs	r2, #2
 8004e7a:	409a      	lsls	r2, r3
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 80c5 	beq.w	8005010 <HAL_DMA_IRQHandler+0xce8>
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 80bf 	beq.w	8005010 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e96:	f003 031f 	and.w	r3, r3, #31
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	409a      	lsls	r2, r3
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d018      	beq.n	8004ede <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d109      	bne.n	8004eca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 813a 	beq.w	8005134 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ec8:	e134      	b.n	8005134 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 8130 	beq.w	8005134 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004edc:	e12a      	b.n	8005134 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f003 0320 	and.w	r3, r3, #32
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f040 8089 	bne.w	8004ffc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a2b      	ldr	r2, [pc, #172]	@ (8004f9c <HAL_DMA_IRQHandler+0xc74>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d04a      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xc62>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a29      	ldr	r2, [pc, #164]	@ (8004fa0 <HAL_DMA_IRQHandler+0xc78>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d045      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xc62>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a28      	ldr	r2, [pc, #160]	@ (8004fa4 <HAL_DMA_IRQHandler+0xc7c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d040      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xc62>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a26      	ldr	r2, [pc, #152]	@ (8004fa8 <HAL_DMA_IRQHandler+0xc80>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d03b      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xc62>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a25      	ldr	r2, [pc, #148]	@ (8004fac <HAL_DMA_IRQHandler+0xc84>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d036      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xc62>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a23      	ldr	r2, [pc, #140]	@ (8004fb0 <HAL_DMA_IRQHandler+0xc88>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d031      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xc62>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a22      	ldr	r2, [pc, #136]	@ (8004fb4 <HAL_DMA_IRQHandler+0xc8c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d02c      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xc62>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a20      	ldr	r2, [pc, #128]	@ (8004fb8 <HAL_DMA_IRQHandler+0xc90>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d027      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xc62>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fbc <HAL_DMA_IRQHandler+0xc94>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d022      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xc62>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a1d      	ldr	r2, [pc, #116]	@ (8004fc0 <HAL_DMA_IRQHandler+0xc98>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d01d      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xc62>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a1c      	ldr	r2, [pc, #112]	@ (8004fc4 <HAL_DMA_IRQHandler+0xc9c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d018      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xc62>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a1a      	ldr	r2, [pc, #104]	@ (8004fc8 <HAL_DMA_IRQHandler+0xca0>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d013      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xc62>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a19      	ldr	r2, [pc, #100]	@ (8004fcc <HAL_DMA_IRQHandler+0xca4>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00e      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xc62>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a17      	ldr	r2, [pc, #92]	@ (8004fd0 <HAL_DMA_IRQHandler+0xca8>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d009      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xc62>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a16      	ldr	r2, [pc, #88]	@ (8004fd4 <HAL_DMA_IRQHandler+0xcac>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d004      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xc62>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a14      	ldr	r2, [pc, #80]	@ (8004fd8 <HAL_DMA_IRQHandler+0xcb0>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d128      	bne.n	8004fdc <HAL_DMA_IRQHandler+0xcb4>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0214 	bic.w	r2, r2, #20
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	e027      	b.n	8004fec <HAL_DMA_IRQHandler+0xcc4>
 8004f9c:	40020010 	.word	0x40020010
 8004fa0:	40020028 	.word	0x40020028
 8004fa4:	40020040 	.word	0x40020040
 8004fa8:	40020058 	.word	0x40020058
 8004fac:	40020070 	.word	0x40020070
 8004fb0:	40020088 	.word	0x40020088
 8004fb4:	400200a0 	.word	0x400200a0
 8004fb8:	400200b8 	.word	0x400200b8
 8004fbc:	40020410 	.word	0x40020410
 8004fc0:	40020428 	.word	0x40020428
 8004fc4:	40020440 	.word	0x40020440
 8004fc8:	40020458 	.word	0x40020458
 8004fcc:	40020470 	.word	0x40020470
 8004fd0:	40020488 	.word	0x40020488
 8004fd4:	400204a0 	.word	0x400204a0
 8004fd8:	400204b8 	.word	0x400204b8
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 020a 	bic.w	r2, r2, #10
 8004fea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 8097 	beq.w	8005134 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800500e:	e091      	b.n	8005134 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005014:	f003 031f 	and.w	r3, r3, #31
 8005018:	2208      	movs	r2, #8
 800501a:	409a      	lsls	r2, r3
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	4013      	ands	r3, r2
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 8088 	beq.w	8005136 <HAL_DMA_IRQHandler+0xe0e>
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 8082 	beq.w	8005136 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a41      	ldr	r2, [pc, #260]	@ (800513c <HAL_DMA_IRQHandler+0xe14>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d04a      	beq.n	80050d2 <HAL_DMA_IRQHandler+0xdaa>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a3f      	ldr	r2, [pc, #252]	@ (8005140 <HAL_DMA_IRQHandler+0xe18>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d045      	beq.n	80050d2 <HAL_DMA_IRQHandler+0xdaa>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a3e      	ldr	r2, [pc, #248]	@ (8005144 <HAL_DMA_IRQHandler+0xe1c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d040      	beq.n	80050d2 <HAL_DMA_IRQHandler+0xdaa>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a3c      	ldr	r2, [pc, #240]	@ (8005148 <HAL_DMA_IRQHandler+0xe20>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d03b      	beq.n	80050d2 <HAL_DMA_IRQHandler+0xdaa>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a3b      	ldr	r2, [pc, #236]	@ (800514c <HAL_DMA_IRQHandler+0xe24>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d036      	beq.n	80050d2 <HAL_DMA_IRQHandler+0xdaa>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a39      	ldr	r2, [pc, #228]	@ (8005150 <HAL_DMA_IRQHandler+0xe28>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d031      	beq.n	80050d2 <HAL_DMA_IRQHandler+0xdaa>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a38      	ldr	r2, [pc, #224]	@ (8005154 <HAL_DMA_IRQHandler+0xe2c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d02c      	beq.n	80050d2 <HAL_DMA_IRQHandler+0xdaa>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a36      	ldr	r2, [pc, #216]	@ (8005158 <HAL_DMA_IRQHandler+0xe30>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d027      	beq.n	80050d2 <HAL_DMA_IRQHandler+0xdaa>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a35      	ldr	r2, [pc, #212]	@ (800515c <HAL_DMA_IRQHandler+0xe34>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d022      	beq.n	80050d2 <HAL_DMA_IRQHandler+0xdaa>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a33      	ldr	r2, [pc, #204]	@ (8005160 <HAL_DMA_IRQHandler+0xe38>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d01d      	beq.n	80050d2 <HAL_DMA_IRQHandler+0xdaa>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a32      	ldr	r2, [pc, #200]	@ (8005164 <HAL_DMA_IRQHandler+0xe3c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d018      	beq.n	80050d2 <HAL_DMA_IRQHandler+0xdaa>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a30      	ldr	r2, [pc, #192]	@ (8005168 <HAL_DMA_IRQHandler+0xe40>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d013      	beq.n	80050d2 <HAL_DMA_IRQHandler+0xdaa>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a2f      	ldr	r2, [pc, #188]	@ (800516c <HAL_DMA_IRQHandler+0xe44>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d00e      	beq.n	80050d2 <HAL_DMA_IRQHandler+0xdaa>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a2d      	ldr	r2, [pc, #180]	@ (8005170 <HAL_DMA_IRQHandler+0xe48>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d009      	beq.n	80050d2 <HAL_DMA_IRQHandler+0xdaa>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005174 <HAL_DMA_IRQHandler+0xe4c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d004      	beq.n	80050d2 <HAL_DMA_IRQHandler+0xdaa>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a2a      	ldr	r2, [pc, #168]	@ (8005178 <HAL_DMA_IRQHandler+0xe50>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d108      	bne.n	80050e4 <HAL_DMA_IRQHandler+0xdbc>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 021c 	bic.w	r2, r2, #28
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	e007      	b.n	80050f4 <HAL_DMA_IRQHandler+0xdcc>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 020e 	bic.w	r2, r2, #14
 80050f2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f8:	f003 031f 	and.w	r3, r3, #31
 80050fc:	2201      	movs	r2, #1
 80050fe:	409a      	lsls	r2, r3
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800511e:	2b00      	cmp	r3, #0
 8005120:	d009      	beq.n	8005136 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	4798      	blx	r3
 800512a:	e004      	b.n	8005136 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800512c:	bf00      	nop
 800512e:	e002      	b.n	8005136 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005130:	bf00      	nop
 8005132:	e000      	b.n	8005136 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005134:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005136:	3728      	adds	r7, #40	@ 0x28
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	40020010 	.word	0x40020010
 8005140:	40020028 	.word	0x40020028
 8005144:	40020040 	.word	0x40020040
 8005148:	40020058 	.word	0x40020058
 800514c:	40020070 	.word	0x40020070
 8005150:	40020088 	.word	0x40020088
 8005154:	400200a0 	.word	0x400200a0
 8005158:	400200b8 	.word	0x400200b8
 800515c:	40020410 	.word	0x40020410
 8005160:	40020428 	.word	0x40020428
 8005164:	40020440 	.word	0x40020440
 8005168:	40020458 	.word	0x40020458
 800516c:	40020470 	.word	0x40020470
 8005170:	40020488 	.word	0x40020488
 8005174:	400204a0 	.word	0x400204a0
 8005178:	400204b8 	.word	0x400204b8

0800517c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800518e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005194:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a7f      	ldr	r2, [pc, #508]	@ (8005398 <DMA_SetConfig+0x21c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d072      	beq.n	8005286 <DMA_SetConfig+0x10a>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a7d      	ldr	r2, [pc, #500]	@ (800539c <DMA_SetConfig+0x220>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d06d      	beq.n	8005286 <DMA_SetConfig+0x10a>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a7c      	ldr	r2, [pc, #496]	@ (80053a0 <DMA_SetConfig+0x224>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d068      	beq.n	8005286 <DMA_SetConfig+0x10a>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a7a      	ldr	r2, [pc, #488]	@ (80053a4 <DMA_SetConfig+0x228>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d063      	beq.n	8005286 <DMA_SetConfig+0x10a>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a79      	ldr	r2, [pc, #484]	@ (80053a8 <DMA_SetConfig+0x22c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d05e      	beq.n	8005286 <DMA_SetConfig+0x10a>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a77      	ldr	r2, [pc, #476]	@ (80053ac <DMA_SetConfig+0x230>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d059      	beq.n	8005286 <DMA_SetConfig+0x10a>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a76      	ldr	r2, [pc, #472]	@ (80053b0 <DMA_SetConfig+0x234>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d054      	beq.n	8005286 <DMA_SetConfig+0x10a>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a74      	ldr	r2, [pc, #464]	@ (80053b4 <DMA_SetConfig+0x238>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d04f      	beq.n	8005286 <DMA_SetConfig+0x10a>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a73      	ldr	r2, [pc, #460]	@ (80053b8 <DMA_SetConfig+0x23c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d04a      	beq.n	8005286 <DMA_SetConfig+0x10a>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a71      	ldr	r2, [pc, #452]	@ (80053bc <DMA_SetConfig+0x240>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d045      	beq.n	8005286 <DMA_SetConfig+0x10a>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a70      	ldr	r2, [pc, #448]	@ (80053c0 <DMA_SetConfig+0x244>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d040      	beq.n	8005286 <DMA_SetConfig+0x10a>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a6e      	ldr	r2, [pc, #440]	@ (80053c4 <DMA_SetConfig+0x248>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d03b      	beq.n	8005286 <DMA_SetConfig+0x10a>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a6d      	ldr	r2, [pc, #436]	@ (80053c8 <DMA_SetConfig+0x24c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d036      	beq.n	8005286 <DMA_SetConfig+0x10a>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a6b      	ldr	r2, [pc, #428]	@ (80053cc <DMA_SetConfig+0x250>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d031      	beq.n	8005286 <DMA_SetConfig+0x10a>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a6a      	ldr	r2, [pc, #424]	@ (80053d0 <DMA_SetConfig+0x254>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d02c      	beq.n	8005286 <DMA_SetConfig+0x10a>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a68      	ldr	r2, [pc, #416]	@ (80053d4 <DMA_SetConfig+0x258>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d027      	beq.n	8005286 <DMA_SetConfig+0x10a>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a67      	ldr	r2, [pc, #412]	@ (80053d8 <DMA_SetConfig+0x25c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d022      	beq.n	8005286 <DMA_SetConfig+0x10a>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a65      	ldr	r2, [pc, #404]	@ (80053dc <DMA_SetConfig+0x260>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d01d      	beq.n	8005286 <DMA_SetConfig+0x10a>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a64      	ldr	r2, [pc, #400]	@ (80053e0 <DMA_SetConfig+0x264>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d018      	beq.n	8005286 <DMA_SetConfig+0x10a>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a62      	ldr	r2, [pc, #392]	@ (80053e4 <DMA_SetConfig+0x268>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d013      	beq.n	8005286 <DMA_SetConfig+0x10a>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a61      	ldr	r2, [pc, #388]	@ (80053e8 <DMA_SetConfig+0x26c>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d00e      	beq.n	8005286 <DMA_SetConfig+0x10a>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a5f      	ldr	r2, [pc, #380]	@ (80053ec <DMA_SetConfig+0x270>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d009      	beq.n	8005286 <DMA_SetConfig+0x10a>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a5e      	ldr	r2, [pc, #376]	@ (80053f0 <DMA_SetConfig+0x274>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d004      	beq.n	8005286 <DMA_SetConfig+0x10a>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a5c      	ldr	r2, [pc, #368]	@ (80053f4 <DMA_SetConfig+0x278>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d101      	bne.n	800528a <DMA_SetConfig+0x10e>
 8005286:	2301      	movs	r3, #1
 8005288:	e000      	b.n	800528c <DMA_SetConfig+0x110>
 800528a:	2300      	movs	r3, #0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00d      	beq.n	80052ac <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005298:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d004      	beq.n	80052ac <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80052aa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a39      	ldr	r2, [pc, #228]	@ (8005398 <DMA_SetConfig+0x21c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d04a      	beq.n	800534c <DMA_SetConfig+0x1d0>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a38      	ldr	r2, [pc, #224]	@ (800539c <DMA_SetConfig+0x220>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d045      	beq.n	800534c <DMA_SetConfig+0x1d0>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a36      	ldr	r2, [pc, #216]	@ (80053a0 <DMA_SetConfig+0x224>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d040      	beq.n	800534c <DMA_SetConfig+0x1d0>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a35      	ldr	r2, [pc, #212]	@ (80053a4 <DMA_SetConfig+0x228>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d03b      	beq.n	800534c <DMA_SetConfig+0x1d0>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a33      	ldr	r2, [pc, #204]	@ (80053a8 <DMA_SetConfig+0x22c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d036      	beq.n	800534c <DMA_SetConfig+0x1d0>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a32      	ldr	r2, [pc, #200]	@ (80053ac <DMA_SetConfig+0x230>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d031      	beq.n	800534c <DMA_SetConfig+0x1d0>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a30      	ldr	r2, [pc, #192]	@ (80053b0 <DMA_SetConfig+0x234>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d02c      	beq.n	800534c <DMA_SetConfig+0x1d0>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a2f      	ldr	r2, [pc, #188]	@ (80053b4 <DMA_SetConfig+0x238>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d027      	beq.n	800534c <DMA_SetConfig+0x1d0>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a2d      	ldr	r2, [pc, #180]	@ (80053b8 <DMA_SetConfig+0x23c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d022      	beq.n	800534c <DMA_SetConfig+0x1d0>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a2c      	ldr	r2, [pc, #176]	@ (80053bc <DMA_SetConfig+0x240>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d01d      	beq.n	800534c <DMA_SetConfig+0x1d0>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a2a      	ldr	r2, [pc, #168]	@ (80053c0 <DMA_SetConfig+0x244>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d018      	beq.n	800534c <DMA_SetConfig+0x1d0>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a29      	ldr	r2, [pc, #164]	@ (80053c4 <DMA_SetConfig+0x248>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d013      	beq.n	800534c <DMA_SetConfig+0x1d0>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a27      	ldr	r2, [pc, #156]	@ (80053c8 <DMA_SetConfig+0x24c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00e      	beq.n	800534c <DMA_SetConfig+0x1d0>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a26      	ldr	r2, [pc, #152]	@ (80053cc <DMA_SetConfig+0x250>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d009      	beq.n	800534c <DMA_SetConfig+0x1d0>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a24      	ldr	r2, [pc, #144]	@ (80053d0 <DMA_SetConfig+0x254>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d004      	beq.n	800534c <DMA_SetConfig+0x1d0>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a23      	ldr	r2, [pc, #140]	@ (80053d4 <DMA_SetConfig+0x258>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d101      	bne.n	8005350 <DMA_SetConfig+0x1d4>
 800534c:	2301      	movs	r3, #1
 800534e:	e000      	b.n	8005352 <DMA_SetConfig+0x1d6>
 8005350:	2300      	movs	r3, #0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d059      	beq.n	800540a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800535a:	f003 031f 	and.w	r3, r3, #31
 800535e:	223f      	movs	r2, #63	@ 0x3f
 8005360:	409a      	lsls	r2, r3
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005374:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	2b40      	cmp	r3, #64	@ 0x40
 8005384:	d138      	bne.n	80053f8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005396:	e086      	b.n	80054a6 <DMA_SetConfig+0x32a>
 8005398:	40020010 	.word	0x40020010
 800539c:	40020028 	.word	0x40020028
 80053a0:	40020040 	.word	0x40020040
 80053a4:	40020058 	.word	0x40020058
 80053a8:	40020070 	.word	0x40020070
 80053ac:	40020088 	.word	0x40020088
 80053b0:	400200a0 	.word	0x400200a0
 80053b4:	400200b8 	.word	0x400200b8
 80053b8:	40020410 	.word	0x40020410
 80053bc:	40020428 	.word	0x40020428
 80053c0:	40020440 	.word	0x40020440
 80053c4:	40020458 	.word	0x40020458
 80053c8:	40020470 	.word	0x40020470
 80053cc:	40020488 	.word	0x40020488
 80053d0:	400204a0 	.word	0x400204a0
 80053d4:	400204b8 	.word	0x400204b8
 80053d8:	58025408 	.word	0x58025408
 80053dc:	5802541c 	.word	0x5802541c
 80053e0:	58025430 	.word	0x58025430
 80053e4:	58025444 	.word	0x58025444
 80053e8:	58025458 	.word	0x58025458
 80053ec:	5802546c 	.word	0x5802546c
 80053f0:	58025480 	.word	0x58025480
 80053f4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	60da      	str	r2, [r3, #12]
}
 8005408:	e04d      	b.n	80054a6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a29      	ldr	r2, [pc, #164]	@ (80054b4 <DMA_SetConfig+0x338>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d022      	beq.n	800545a <DMA_SetConfig+0x2de>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a27      	ldr	r2, [pc, #156]	@ (80054b8 <DMA_SetConfig+0x33c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d01d      	beq.n	800545a <DMA_SetConfig+0x2de>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a26      	ldr	r2, [pc, #152]	@ (80054bc <DMA_SetConfig+0x340>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d018      	beq.n	800545a <DMA_SetConfig+0x2de>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a24      	ldr	r2, [pc, #144]	@ (80054c0 <DMA_SetConfig+0x344>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d013      	beq.n	800545a <DMA_SetConfig+0x2de>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a23      	ldr	r2, [pc, #140]	@ (80054c4 <DMA_SetConfig+0x348>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00e      	beq.n	800545a <DMA_SetConfig+0x2de>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a21      	ldr	r2, [pc, #132]	@ (80054c8 <DMA_SetConfig+0x34c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d009      	beq.n	800545a <DMA_SetConfig+0x2de>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a20      	ldr	r2, [pc, #128]	@ (80054cc <DMA_SetConfig+0x350>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d004      	beq.n	800545a <DMA_SetConfig+0x2de>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a1e      	ldr	r2, [pc, #120]	@ (80054d0 <DMA_SetConfig+0x354>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d101      	bne.n	800545e <DMA_SetConfig+0x2e2>
 800545a:	2301      	movs	r3, #1
 800545c:	e000      	b.n	8005460 <DMA_SetConfig+0x2e4>
 800545e:	2300      	movs	r3, #0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d020      	beq.n	80054a6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005468:	f003 031f 	and.w	r3, r3, #31
 800546c:	2201      	movs	r2, #1
 800546e:	409a      	lsls	r2, r3
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	2b40      	cmp	r3, #64	@ 0x40
 8005482:	d108      	bne.n	8005496 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	60da      	str	r2, [r3, #12]
}
 8005494:	e007      	b.n	80054a6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	60da      	str	r2, [r3, #12]
}
 80054a6:	bf00      	nop
 80054a8:	371c      	adds	r7, #28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	58025408 	.word	0x58025408
 80054b8:	5802541c 	.word	0x5802541c
 80054bc:	58025430 	.word	0x58025430
 80054c0:	58025444 	.word	0x58025444
 80054c4:	58025458 	.word	0x58025458
 80054c8:	5802546c 	.word	0x5802546c
 80054cc:	58025480 	.word	0x58025480
 80054d0:	58025494 	.word	0x58025494

080054d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a42      	ldr	r2, [pc, #264]	@ (80055ec <DMA_CalcBaseAndBitshift+0x118>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d04a      	beq.n	800557c <DMA_CalcBaseAndBitshift+0xa8>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a41      	ldr	r2, [pc, #260]	@ (80055f0 <DMA_CalcBaseAndBitshift+0x11c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d045      	beq.n	800557c <DMA_CalcBaseAndBitshift+0xa8>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a3f      	ldr	r2, [pc, #252]	@ (80055f4 <DMA_CalcBaseAndBitshift+0x120>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d040      	beq.n	800557c <DMA_CalcBaseAndBitshift+0xa8>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a3e      	ldr	r2, [pc, #248]	@ (80055f8 <DMA_CalcBaseAndBitshift+0x124>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d03b      	beq.n	800557c <DMA_CalcBaseAndBitshift+0xa8>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a3c      	ldr	r2, [pc, #240]	@ (80055fc <DMA_CalcBaseAndBitshift+0x128>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d036      	beq.n	800557c <DMA_CalcBaseAndBitshift+0xa8>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a3b      	ldr	r2, [pc, #236]	@ (8005600 <DMA_CalcBaseAndBitshift+0x12c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d031      	beq.n	800557c <DMA_CalcBaseAndBitshift+0xa8>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a39      	ldr	r2, [pc, #228]	@ (8005604 <DMA_CalcBaseAndBitshift+0x130>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d02c      	beq.n	800557c <DMA_CalcBaseAndBitshift+0xa8>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a38      	ldr	r2, [pc, #224]	@ (8005608 <DMA_CalcBaseAndBitshift+0x134>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d027      	beq.n	800557c <DMA_CalcBaseAndBitshift+0xa8>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a36      	ldr	r2, [pc, #216]	@ (800560c <DMA_CalcBaseAndBitshift+0x138>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d022      	beq.n	800557c <DMA_CalcBaseAndBitshift+0xa8>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a35      	ldr	r2, [pc, #212]	@ (8005610 <DMA_CalcBaseAndBitshift+0x13c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d01d      	beq.n	800557c <DMA_CalcBaseAndBitshift+0xa8>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a33      	ldr	r2, [pc, #204]	@ (8005614 <DMA_CalcBaseAndBitshift+0x140>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d018      	beq.n	800557c <DMA_CalcBaseAndBitshift+0xa8>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a32      	ldr	r2, [pc, #200]	@ (8005618 <DMA_CalcBaseAndBitshift+0x144>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d013      	beq.n	800557c <DMA_CalcBaseAndBitshift+0xa8>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a30      	ldr	r2, [pc, #192]	@ (800561c <DMA_CalcBaseAndBitshift+0x148>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d00e      	beq.n	800557c <DMA_CalcBaseAndBitshift+0xa8>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a2f      	ldr	r2, [pc, #188]	@ (8005620 <DMA_CalcBaseAndBitshift+0x14c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d009      	beq.n	800557c <DMA_CalcBaseAndBitshift+0xa8>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a2d      	ldr	r2, [pc, #180]	@ (8005624 <DMA_CalcBaseAndBitshift+0x150>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d004      	beq.n	800557c <DMA_CalcBaseAndBitshift+0xa8>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a2c      	ldr	r2, [pc, #176]	@ (8005628 <DMA_CalcBaseAndBitshift+0x154>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d101      	bne.n	8005580 <DMA_CalcBaseAndBitshift+0xac>
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <DMA_CalcBaseAndBitshift+0xae>
 8005580:	2300      	movs	r3, #0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d024      	beq.n	80055d0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	b2db      	uxtb	r3, r3
 800558c:	3b10      	subs	r3, #16
 800558e:	4a27      	ldr	r2, [pc, #156]	@ (800562c <DMA_CalcBaseAndBitshift+0x158>)
 8005590:	fba2 2303 	umull	r2, r3, r2, r3
 8005594:	091b      	lsrs	r3, r3, #4
 8005596:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f003 0307 	and.w	r3, r3, #7
 800559e:	4a24      	ldr	r2, [pc, #144]	@ (8005630 <DMA_CalcBaseAndBitshift+0x15c>)
 80055a0:	5cd3      	ldrb	r3, [r2, r3]
 80055a2:	461a      	mov	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2b03      	cmp	r3, #3
 80055ac:	d908      	bls.n	80055c0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	461a      	mov	r2, r3
 80055b4:	4b1f      	ldr	r3, [pc, #124]	@ (8005634 <DMA_CalcBaseAndBitshift+0x160>)
 80055b6:	4013      	ands	r3, r2
 80055b8:	1d1a      	adds	r2, r3, #4
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	659a      	str	r2, [r3, #88]	@ 0x58
 80055be:	e00d      	b.n	80055dc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005634 <DMA_CalcBaseAndBitshift+0x160>)
 80055c8:	4013      	ands	r3, r2
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80055ce:	e005      	b.n	80055dc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	40020010 	.word	0x40020010
 80055f0:	40020028 	.word	0x40020028
 80055f4:	40020040 	.word	0x40020040
 80055f8:	40020058 	.word	0x40020058
 80055fc:	40020070 	.word	0x40020070
 8005600:	40020088 	.word	0x40020088
 8005604:	400200a0 	.word	0x400200a0
 8005608:	400200b8 	.word	0x400200b8
 800560c:	40020410 	.word	0x40020410
 8005610:	40020428 	.word	0x40020428
 8005614:	40020440 	.word	0x40020440
 8005618:	40020458 	.word	0x40020458
 800561c:	40020470 	.word	0x40020470
 8005620:	40020488 	.word	0x40020488
 8005624:	400204a0 	.word	0x400204a0
 8005628:	400204b8 	.word	0x400204b8
 800562c:	aaaaaaab 	.word	0xaaaaaaab
 8005630:	0800ceb0 	.word	0x0800ceb0
 8005634:	fffffc00 	.word	0xfffffc00

08005638 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005640:	2300      	movs	r3, #0
 8005642:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d120      	bne.n	800568e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005650:	2b03      	cmp	r3, #3
 8005652:	d858      	bhi.n	8005706 <DMA_CheckFifoParam+0xce>
 8005654:	a201      	add	r2, pc, #4	@ (adr r2, 800565c <DMA_CheckFifoParam+0x24>)
 8005656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565a:	bf00      	nop
 800565c:	0800566d 	.word	0x0800566d
 8005660:	0800567f 	.word	0x0800567f
 8005664:	0800566d 	.word	0x0800566d
 8005668:	08005707 	.word	0x08005707
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005670:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d048      	beq.n	800570a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800567c:	e045      	b.n	800570a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005682:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005686:	d142      	bne.n	800570e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800568c:	e03f      	b.n	800570e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005696:	d123      	bne.n	80056e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800569c:	2b03      	cmp	r3, #3
 800569e:	d838      	bhi.n	8005712 <DMA_CheckFifoParam+0xda>
 80056a0:	a201      	add	r2, pc, #4	@ (adr r2, 80056a8 <DMA_CheckFifoParam+0x70>)
 80056a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a6:	bf00      	nop
 80056a8:	080056b9 	.word	0x080056b9
 80056ac:	080056bf 	.word	0x080056bf
 80056b0:	080056b9 	.word	0x080056b9
 80056b4:	080056d1 	.word	0x080056d1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	73fb      	strb	r3, [r7, #15]
        break;
 80056bc:	e030      	b.n	8005720 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d025      	beq.n	8005716 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056ce:	e022      	b.n	8005716 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80056d8:	d11f      	bne.n	800571a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056de:	e01c      	b.n	800571a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d902      	bls.n	80056ee <DMA_CheckFifoParam+0xb6>
 80056e8:	2b03      	cmp	r3, #3
 80056ea:	d003      	beq.n	80056f4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80056ec:	e018      	b.n	8005720 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	73fb      	strb	r3, [r7, #15]
        break;
 80056f2:	e015      	b.n	8005720 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00e      	beq.n	800571e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	73fb      	strb	r3, [r7, #15]
    break;
 8005704:	e00b      	b.n	800571e <DMA_CheckFifoParam+0xe6>
        break;
 8005706:	bf00      	nop
 8005708:	e00a      	b.n	8005720 <DMA_CheckFifoParam+0xe8>
        break;
 800570a:	bf00      	nop
 800570c:	e008      	b.n	8005720 <DMA_CheckFifoParam+0xe8>
        break;
 800570e:	bf00      	nop
 8005710:	e006      	b.n	8005720 <DMA_CheckFifoParam+0xe8>
        break;
 8005712:	bf00      	nop
 8005714:	e004      	b.n	8005720 <DMA_CheckFifoParam+0xe8>
        break;
 8005716:	bf00      	nop
 8005718:	e002      	b.n	8005720 <DMA_CheckFifoParam+0xe8>
        break;
 800571a:	bf00      	nop
 800571c:	e000      	b.n	8005720 <DMA_CheckFifoParam+0xe8>
    break;
 800571e:	bf00      	nop
    }
  }

  return status;
 8005720:	7bfb      	ldrb	r3, [r7, #15]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop

08005730 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a38      	ldr	r2, [pc, #224]	@ (8005824 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d022      	beq.n	800578e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a36      	ldr	r2, [pc, #216]	@ (8005828 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d01d      	beq.n	800578e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a35      	ldr	r2, [pc, #212]	@ (800582c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d018      	beq.n	800578e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a33      	ldr	r2, [pc, #204]	@ (8005830 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d013      	beq.n	800578e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a32      	ldr	r2, [pc, #200]	@ (8005834 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d00e      	beq.n	800578e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a30      	ldr	r2, [pc, #192]	@ (8005838 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d009      	beq.n	800578e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a2f      	ldr	r2, [pc, #188]	@ (800583c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d004      	beq.n	800578e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a2d      	ldr	r2, [pc, #180]	@ (8005840 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d101      	bne.n	8005792 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800578e:	2301      	movs	r3, #1
 8005790:	e000      	b.n	8005794 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005792:	2300      	movs	r3, #0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01a      	beq.n	80057ce <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	b2db      	uxtb	r3, r3
 800579e:	3b08      	subs	r3, #8
 80057a0:	4a28      	ldr	r2, [pc, #160]	@ (8005844 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80057a2:	fba2 2303 	umull	r2, r3, r2, r3
 80057a6:	091b      	lsrs	r3, r3, #4
 80057a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	4b26      	ldr	r3, [pc, #152]	@ (8005848 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80057ae:	4413      	add	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	461a      	mov	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a24      	ldr	r2, [pc, #144]	@ (800584c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80057bc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f003 031f 	and.w	r3, r3, #31
 80057c4:	2201      	movs	r2, #1
 80057c6:	409a      	lsls	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80057cc:	e024      	b.n	8005818 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	3b10      	subs	r3, #16
 80057d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005850 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80057d8:	fba2 2303 	umull	r2, r3, r2, r3
 80057dc:	091b      	lsrs	r3, r3, #4
 80057de:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4a1c      	ldr	r2, [pc, #112]	@ (8005854 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d806      	bhi.n	80057f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005858 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d902      	bls.n	80057f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3308      	adds	r3, #8
 80057f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4b18      	ldr	r3, [pc, #96]	@ (800585c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80057fa:	4413      	add	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	461a      	mov	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a16      	ldr	r2, [pc, #88]	@ (8005860 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005808:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f003 031f 	and.w	r3, r3, #31
 8005810:	2201      	movs	r2, #1
 8005812:	409a      	lsls	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005818:	bf00      	nop
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	58025408 	.word	0x58025408
 8005828:	5802541c 	.word	0x5802541c
 800582c:	58025430 	.word	0x58025430
 8005830:	58025444 	.word	0x58025444
 8005834:	58025458 	.word	0x58025458
 8005838:	5802546c 	.word	0x5802546c
 800583c:	58025480 	.word	0x58025480
 8005840:	58025494 	.word	0x58025494
 8005844:	cccccccd 	.word	0xcccccccd
 8005848:	16009600 	.word	0x16009600
 800584c:	58025880 	.word	0x58025880
 8005850:	aaaaaaab 	.word	0xaaaaaaab
 8005854:	400204b8 	.word	0x400204b8
 8005858:	4002040f 	.word	0x4002040f
 800585c:	10008200 	.word	0x10008200
 8005860:	40020880 	.word	0x40020880

08005864 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	b2db      	uxtb	r3, r3
 8005872:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d04a      	beq.n	8005910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2b08      	cmp	r3, #8
 800587e:	d847      	bhi.n	8005910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a25      	ldr	r2, [pc, #148]	@ (800591c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d022      	beq.n	80058d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a24      	ldr	r2, [pc, #144]	@ (8005920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d01d      	beq.n	80058d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a22      	ldr	r2, [pc, #136]	@ (8005924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d018      	beq.n	80058d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a21      	ldr	r2, [pc, #132]	@ (8005928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d013      	beq.n	80058d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a1f      	ldr	r2, [pc, #124]	@ (800592c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00e      	beq.n	80058d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1e      	ldr	r2, [pc, #120]	@ (8005930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d009      	beq.n	80058d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a1c      	ldr	r2, [pc, #112]	@ (8005934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d004      	beq.n	80058d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a1b      	ldr	r2, [pc, #108]	@ (8005938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d101      	bne.n	80058d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80058d0:	2301      	movs	r3, #1
 80058d2:	e000      	b.n	80058d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80058d4:	2300      	movs	r3, #0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4b17      	ldr	r3, [pc, #92]	@ (800593c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80058de:	4413      	add	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	461a      	mov	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a15      	ldr	r2, [pc, #84]	@ (8005940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80058ec:	671a      	str	r2, [r3, #112]	@ 0x70
 80058ee:	e009      	b.n	8005904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4b14      	ldr	r3, [pc, #80]	@ (8005944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80058f4:	4413      	add	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	461a      	mov	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a11      	ldr	r2, [pc, #68]	@ (8005948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005902:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	3b01      	subs	r3, #1
 8005908:	2201      	movs	r2, #1
 800590a:	409a      	lsls	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005910:	bf00      	nop
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	58025408 	.word	0x58025408
 8005920:	5802541c 	.word	0x5802541c
 8005924:	58025430 	.word	0x58025430
 8005928:	58025444 	.word	0x58025444
 800592c:	58025458 	.word	0x58025458
 8005930:	5802546c 	.word	0x5802546c
 8005934:	58025480 	.word	0x58025480
 8005938:	58025494 	.word	0x58025494
 800593c:	1600963f 	.word	0x1600963f
 8005940:	58025940 	.word	0x58025940
 8005944:	1000823f 	.word	0x1000823f
 8005948:	40020940 	.word	0x40020940

0800594c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800594c:	b480      	push	{r7}
 800594e:	b087      	sub	sp, #28
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	460b      	mov	r3, r1
 8005956:	607a      	str	r2, [r7, #4]
 8005958:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e00a      	b.n	800597e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8005968:	7afb      	ldrb	r3, [r7, #11]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d103      	bne.n	8005976 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	605a      	str	r2, [r3, #4]
      break;
 8005974:	e002      	b.n	800597c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	75fb      	strb	r3, [r7, #23]
      break;
 800597a:	bf00      	nop
  }

  return status;
 800597c:	7dfb      	ldrb	r3, [r7, #23]
}
 800597e:	4618      	mov	r0, r3
 8005980:	371c      	adds	r7, #28
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e003      	b.n	80059a6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80059a4:	2300      	movs	r3, #0
  }
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
	...

080059b4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	0c1b      	lsrs	r3, r3, #16
 80059c2:	f003 0303 	and.w	r3, r3, #3
 80059c6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 031f 	and.w	r3, r3, #31
 80059d0:	2201      	movs	r2, #1
 80059d2:	fa02 f303 	lsl.w	r3, r2, r3
 80059d6:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	011a      	lsls	r2, r3, #4
 80059dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005a10 <HAL_EXTI_IRQHandler+0x5c>)
 80059de:	4413      	add	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	4013      	ands	r3, r2
 80059ea:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d009      	beq.n	8005a06 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	4798      	blx	r3
    }
  }
}
 8005a06:	bf00      	nop
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	58000088 	.word	0x58000088

08005a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b089      	sub	sp, #36	@ 0x24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005a22:	4b89      	ldr	r3, [pc, #548]	@ (8005c48 <HAL_GPIO_Init+0x234>)
 8005a24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a26:	e194      	b.n	8005d52 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	fa01 f303 	lsl.w	r3, r1, r3
 8005a34:	4013      	ands	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 8186 	beq.w	8005d4c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f003 0303 	and.w	r3, r3, #3
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d005      	beq.n	8005a58 <HAL_GPIO_Init+0x44>
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f003 0303 	and.w	r3, r3, #3
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d130      	bne.n	8005aba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	2203      	movs	r2, #3
 8005a64:	fa02 f303 	lsl.w	r3, r2, r3
 8005a68:	43db      	mvns	r3, r3
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	68da      	ldr	r2, [r3, #12]
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a8e:	2201      	movs	r2, #1
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	fa02 f303 	lsl.w	r3, r2, r3
 8005a96:	43db      	mvns	r3, r3
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	091b      	lsrs	r3, r3, #4
 8005aa4:	f003 0201 	and.w	r2, r3, #1
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f003 0303 	and.w	r3, r3, #3
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d017      	beq.n	8005af6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	2203      	movs	r2, #3
 8005ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad6:	43db      	mvns	r3, r3
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	4013      	ands	r3, r2
 8005adc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	689a      	ldr	r2, [r3, #8]
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d123      	bne.n	8005b4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	08da      	lsrs	r2, r3, #3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	3208      	adds	r2, #8
 8005b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	220f      	movs	r2, #15
 8005b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1e:	43db      	mvns	r3, r3
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	4013      	ands	r3, r2
 8005b24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	691a      	ldr	r2, [r3, #16]
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	f003 0307 	and.w	r3, r3, #7
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	fa02 f303 	lsl.w	r3, r2, r3
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	08da      	lsrs	r2, r3, #3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3208      	adds	r2, #8
 8005b44:	69b9      	ldr	r1, [r7, #24]
 8005b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	005b      	lsls	r3, r3, #1
 8005b54:	2203      	movs	r2, #3
 8005b56:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5a:	43db      	mvns	r3, r3
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f003 0203 	and.w	r2, r3, #3
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	005b      	lsls	r3, r3, #1
 8005b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 80e0 	beq.w	8005d4c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b8c:	4b2f      	ldr	r3, [pc, #188]	@ (8005c4c <HAL_GPIO_Init+0x238>)
 8005b8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b92:	4a2e      	ldr	r2, [pc, #184]	@ (8005c4c <HAL_GPIO_Init+0x238>)
 8005b94:	f043 0302 	orr.w	r3, r3, #2
 8005b98:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8005c4c <HAL_GPIO_Init+0x238>)
 8005b9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005baa:	4a29      	ldr	r2, [pc, #164]	@ (8005c50 <HAL_GPIO_Init+0x23c>)
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	089b      	lsrs	r3, r3, #2
 8005bb0:	3302      	adds	r3, #2
 8005bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	220f      	movs	r2, #15
 8005bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc6:	43db      	mvns	r3, r3
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	4013      	ands	r3, r2
 8005bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a20      	ldr	r2, [pc, #128]	@ (8005c54 <HAL_GPIO_Init+0x240>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d052      	beq.n	8005c7c <HAL_GPIO_Init+0x268>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a1f      	ldr	r2, [pc, #124]	@ (8005c58 <HAL_GPIO_Init+0x244>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d031      	beq.n	8005c42 <HAL_GPIO_Init+0x22e>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a1e      	ldr	r2, [pc, #120]	@ (8005c5c <HAL_GPIO_Init+0x248>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d02b      	beq.n	8005c3e <HAL_GPIO_Init+0x22a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c60 <HAL_GPIO_Init+0x24c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d025      	beq.n	8005c3a <HAL_GPIO_Init+0x226>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8005c64 <HAL_GPIO_Init+0x250>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d01f      	beq.n	8005c36 <HAL_GPIO_Init+0x222>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c68 <HAL_GPIO_Init+0x254>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d019      	beq.n	8005c32 <HAL_GPIO_Init+0x21e>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a1a      	ldr	r2, [pc, #104]	@ (8005c6c <HAL_GPIO_Init+0x258>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d013      	beq.n	8005c2e <HAL_GPIO_Init+0x21a>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a19      	ldr	r2, [pc, #100]	@ (8005c70 <HAL_GPIO_Init+0x25c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00d      	beq.n	8005c2a <HAL_GPIO_Init+0x216>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a18      	ldr	r2, [pc, #96]	@ (8005c74 <HAL_GPIO_Init+0x260>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d007      	beq.n	8005c26 <HAL_GPIO_Init+0x212>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a17      	ldr	r2, [pc, #92]	@ (8005c78 <HAL_GPIO_Init+0x264>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d101      	bne.n	8005c22 <HAL_GPIO_Init+0x20e>
 8005c1e:	2309      	movs	r3, #9
 8005c20:	e02d      	b.n	8005c7e <HAL_GPIO_Init+0x26a>
 8005c22:	230a      	movs	r3, #10
 8005c24:	e02b      	b.n	8005c7e <HAL_GPIO_Init+0x26a>
 8005c26:	2308      	movs	r3, #8
 8005c28:	e029      	b.n	8005c7e <HAL_GPIO_Init+0x26a>
 8005c2a:	2307      	movs	r3, #7
 8005c2c:	e027      	b.n	8005c7e <HAL_GPIO_Init+0x26a>
 8005c2e:	2306      	movs	r3, #6
 8005c30:	e025      	b.n	8005c7e <HAL_GPIO_Init+0x26a>
 8005c32:	2305      	movs	r3, #5
 8005c34:	e023      	b.n	8005c7e <HAL_GPIO_Init+0x26a>
 8005c36:	2304      	movs	r3, #4
 8005c38:	e021      	b.n	8005c7e <HAL_GPIO_Init+0x26a>
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e01f      	b.n	8005c7e <HAL_GPIO_Init+0x26a>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e01d      	b.n	8005c7e <HAL_GPIO_Init+0x26a>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e01b      	b.n	8005c7e <HAL_GPIO_Init+0x26a>
 8005c46:	bf00      	nop
 8005c48:	58000080 	.word	0x58000080
 8005c4c:	58024400 	.word	0x58024400
 8005c50:	58000400 	.word	0x58000400
 8005c54:	58020000 	.word	0x58020000
 8005c58:	58020400 	.word	0x58020400
 8005c5c:	58020800 	.word	0x58020800
 8005c60:	58020c00 	.word	0x58020c00
 8005c64:	58021000 	.word	0x58021000
 8005c68:	58021400 	.word	0x58021400
 8005c6c:	58021800 	.word	0x58021800
 8005c70:	58021c00 	.word	0x58021c00
 8005c74:	58022000 	.word	0x58022000
 8005c78:	58022400 	.word	0x58022400
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	69fa      	ldr	r2, [r7, #28]
 8005c80:	f002 0203 	and.w	r2, r2, #3
 8005c84:	0092      	lsls	r2, r2, #2
 8005c86:	4093      	lsls	r3, r2
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c8e:	4938      	ldr	r1, [pc, #224]	@ (8005d70 <HAL_GPIO_Init+0x35c>)
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	089b      	lsrs	r3, r3, #2
 8005c94:	3302      	adds	r3, #2
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	43db      	mvns	r3, r3
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	4013      	ands	r3, r2
 8005cac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005cc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005cca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	43db      	mvns	r3, r3
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d003      	beq.n	8005cf0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005cf0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	43db      	mvns	r3, r3
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	4013      	ands	r3, r2
 8005d06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d003      	beq.n	8005d1c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	43db      	mvns	r3, r3
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	4013      	ands	r3, r2
 8005d30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005d3e:	69ba      	ldr	r2, [r7, #24]
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	fa22 f303 	lsr.w	r3, r2, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f47f ae63 	bne.w	8005a28 <HAL_GPIO_Init+0x14>
  }
}
 8005d62:	bf00      	nop
 8005d64:	bf00      	nop
 8005d66:	3724      	adds	r7, #36	@ 0x24
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	58000400 	.word	0x58000400

08005d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	807b      	strh	r3, [r7, #2]
 8005d80:	4613      	mov	r3, r2
 8005d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d84:	787b      	ldrb	r3, [r7, #1]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d8a:	887a      	ldrh	r2, [r7, #2]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005d90:	e003      	b.n	8005d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d92:	887b      	ldrh	r3, [r7, #2]
 8005d94:	041a      	lsls	r2, r3, #16
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	619a      	str	r2, [r3, #24]
}
 8005d9a:	bf00      	nop
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
	...

08005da8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005db0:	4b19      	ldr	r3, [pc, #100]	@ (8005e18 <HAL_PWREx_ConfigSupply+0x70>)
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b04      	cmp	r3, #4
 8005dba:	d00a      	beq.n	8005dd2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005dbc:	4b16      	ldr	r3, [pc, #88]	@ (8005e18 <HAL_PWREx_ConfigSupply+0x70>)
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d001      	beq.n	8005dce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e01f      	b.n	8005e0e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	e01d      	b.n	8005e0e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005dd2:	4b11      	ldr	r3, [pc, #68]	@ (8005e18 <HAL_PWREx_ConfigSupply+0x70>)
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f023 0207 	bic.w	r2, r3, #7
 8005dda:	490f      	ldr	r1, [pc, #60]	@ (8005e18 <HAL_PWREx_ConfigSupply+0x70>)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005de2:	f7fb fcd3 	bl	800178c <HAL_GetTick>
 8005de6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005de8:	e009      	b.n	8005dfe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005dea:	f7fb fccf 	bl	800178c <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005df8:	d901      	bls.n	8005dfe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e007      	b.n	8005e0e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005dfe:	4b06      	ldr	r3, [pc, #24]	@ (8005e18 <HAL_PWREx_ConfigSupply+0x70>)
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e0a:	d1ee      	bne.n	8005dea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	58024800 	.word	0x58024800

08005e1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b08c      	sub	sp, #48	@ 0x30
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d102      	bne.n	8005e30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	f000 bc48 	b.w	80066c0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 8088 	beq.w	8005f4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e3e:	4b99      	ldr	r3, [pc, #612]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e48:	4b96      	ldr	r3, [pc, #600]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e50:	2b10      	cmp	r3, #16
 8005e52:	d007      	beq.n	8005e64 <HAL_RCC_OscConfig+0x48>
 8005e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e56:	2b18      	cmp	r3, #24
 8005e58:	d111      	bne.n	8005e7e <HAL_RCC_OscConfig+0x62>
 8005e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5c:	f003 0303 	and.w	r3, r3, #3
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d10c      	bne.n	8005e7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e64:	4b8f      	ldr	r3, [pc, #572]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d06d      	beq.n	8005f4c <HAL_RCC_OscConfig+0x130>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d169      	bne.n	8005f4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	f000 bc21 	b.w	80066c0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e86:	d106      	bne.n	8005e96 <HAL_RCC_OscConfig+0x7a>
 8005e88:	4b86      	ldr	r3, [pc, #536]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a85      	ldr	r2, [pc, #532]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005e8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	e02e      	b.n	8005ef4 <HAL_RCC_OscConfig+0xd8>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10c      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x9c>
 8005e9e:	4b81      	ldr	r3, [pc, #516]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a80      	ldr	r2, [pc, #512]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005ea4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ea8:	6013      	str	r3, [r2, #0]
 8005eaa:	4b7e      	ldr	r3, [pc, #504]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a7d      	ldr	r2, [pc, #500]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005eb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	e01d      	b.n	8005ef4 <HAL_RCC_OscConfig+0xd8>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ec0:	d10c      	bne.n	8005edc <HAL_RCC_OscConfig+0xc0>
 8005ec2:	4b78      	ldr	r3, [pc, #480]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a77      	ldr	r2, [pc, #476]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005ec8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ecc:	6013      	str	r3, [r2, #0]
 8005ece:	4b75      	ldr	r3, [pc, #468]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a74      	ldr	r2, [pc, #464]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ed8:	6013      	str	r3, [r2, #0]
 8005eda:	e00b      	b.n	8005ef4 <HAL_RCC_OscConfig+0xd8>
 8005edc:	4b71      	ldr	r3, [pc, #452]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a70      	ldr	r2, [pc, #448]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005ee2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ee6:	6013      	str	r3, [r2, #0]
 8005ee8:	4b6e      	ldr	r3, [pc, #440]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a6d      	ldr	r2, [pc, #436]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005eee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d013      	beq.n	8005f24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005efc:	f7fb fc46 	bl	800178c <HAL_GetTick>
 8005f00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f02:	e008      	b.n	8005f16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f04:	f7fb fc42 	bl	800178c <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b64      	cmp	r3, #100	@ 0x64
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e3d4      	b.n	80066c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f16:	4b63      	ldr	r3, [pc, #396]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0f0      	beq.n	8005f04 <HAL_RCC_OscConfig+0xe8>
 8005f22:	e014      	b.n	8005f4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f24:	f7fb fc32 	bl	800178c <HAL_GetTick>
 8005f28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f2a:	e008      	b.n	8005f3e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f2c:	f7fb fc2e 	bl	800178c <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b64      	cmp	r3, #100	@ 0x64
 8005f38:	d901      	bls.n	8005f3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e3c0      	b.n	80066c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f3e:	4b59      	ldr	r3, [pc, #356]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1f0      	bne.n	8005f2c <HAL_RCC_OscConfig+0x110>
 8005f4a:	e000      	b.n	8005f4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 80ca 	beq.w	80060f0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f5c:	4b51      	ldr	r3, [pc, #324]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f64:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f66:	4b4f      	ldr	r3, [pc, #316]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d007      	beq.n	8005f82 <HAL_RCC_OscConfig+0x166>
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	2b18      	cmp	r3, #24
 8005f76:	d156      	bne.n	8006026 <HAL_RCC_OscConfig+0x20a>
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	f003 0303 	and.w	r3, r3, #3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d151      	bne.n	8006026 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f82:	4b48      	ldr	r3, [pc, #288]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0304 	and.w	r3, r3, #4
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <HAL_RCC_OscConfig+0x17e>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e392      	b.n	80066c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f9a:	4b42      	ldr	r3, [pc, #264]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f023 0219 	bic.w	r2, r3, #25
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	493f      	ldr	r1, [pc, #252]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fac:	f7fb fbee 	bl	800178c <HAL_GetTick>
 8005fb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fb4:	f7fb fbea 	bl	800178c <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e37c      	b.n	80066c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fc6:	4b37      	ldr	r3, [pc, #220]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0304 	and.w	r3, r3, #4
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0f0      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fd2:	f7fb fbe7 	bl	80017a4 <HAL_GetREVID>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d817      	bhi.n	8006010 <HAL_RCC_OscConfig+0x1f4>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	2b40      	cmp	r3, #64	@ 0x40
 8005fe6:	d108      	bne.n	8005ffa <HAL_RCC_OscConfig+0x1de>
 8005fe8:	4b2e      	ldr	r3, [pc, #184]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005ff0:	4a2c      	ldr	r2, [pc, #176]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005ff2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ff6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ff8:	e07a      	b.n	80060f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ffa:	4b2a      	ldr	r3, [pc, #168]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	031b      	lsls	r3, r3, #12
 8006008:	4926      	ldr	r1, [pc, #152]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 800600a:	4313      	orrs	r3, r2
 800600c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800600e:	e06f      	b.n	80060f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006010:	4b24      	ldr	r3, [pc, #144]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	061b      	lsls	r3, r3, #24
 800601e:	4921      	ldr	r1, [pc, #132]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8006020:	4313      	orrs	r3, r2
 8006022:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006024:	e064      	b.n	80060f0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d047      	beq.n	80060be <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800602e:	4b1d      	ldr	r3, [pc, #116]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f023 0219 	bic.w	r2, r3, #25
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	491a      	ldr	r1, [pc, #104]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 800603c:	4313      	orrs	r3, r2
 800603e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006040:	f7fb fba4 	bl	800178c <HAL_GetTick>
 8006044:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006046:	e008      	b.n	800605a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006048:	f7fb fba0 	bl	800178c <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e332      	b.n	80066c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800605a:	4b12      	ldr	r3, [pc, #72]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0304 	and.w	r3, r3, #4
 8006062:	2b00      	cmp	r3, #0
 8006064:	d0f0      	beq.n	8006048 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006066:	f7fb fb9d 	bl	80017a4 <HAL_GetREVID>
 800606a:	4603      	mov	r3, r0
 800606c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006070:	4293      	cmp	r3, r2
 8006072:	d819      	bhi.n	80060a8 <HAL_RCC_OscConfig+0x28c>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	2b40      	cmp	r3, #64	@ 0x40
 800607a:	d108      	bne.n	800608e <HAL_RCC_OscConfig+0x272>
 800607c:	4b09      	ldr	r3, [pc, #36]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006084:	4a07      	ldr	r2, [pc, #28]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8006086:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800608a:	6053      	str	r3, [r2, #4]
 800608c:	e030      	b.n	80060f0 <HAL_RCC_OscConfig+0x2d4>
 800608e:	4b05      	ldr	r3, [pc, #20]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	031b      	lsls	r3, r3, #12
 800609c:	4901      	ldr	r1, [pc, #4]	@ (80060a4 <HAL_RCC_OscConfig+0x288>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	604b      	str	r3, [r1, #4]
 80060a2:	e025      	b.n	80060f0 <HAL_RCC_OscConfig+0x2d4>
 80060a4:	58024400 	.word	0x58024400
 80060a8:	4b9a      	ldr	r3, [pc, #616]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	061b      	lsls	r3, r3, #24
 80060b6:	4997      	ldr	r1, [pc, #604]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	604b      	str	r3, [r1, #4]
 80060bc:	e018      	b.n	80060f0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060be:	4b95      	ldr	r3, [pc, #596]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a94      	ldr	r2, [pc, #592]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 80060c4:	f023 0301 	bic.w	r3, r3, #1
 80060c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ca:	f7fb fb5f 	bl	800178c <HAL_GetTick>
 80060ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060d0:	e008      	b.n	80060e4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060d2:	f7fb fb5b 	bl	800178c <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d901      	bls.n	80060e4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e2ed      	b.n	80066c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060e4:	4b8b      	ldr	r3, [pc, #556]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0304 	and.w	r3, r3, #4
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1f0      	bne.n	80060d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0310 	and.w	r3, r3, #16
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 80a9 	beq.w	8006250 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060fe:	4b85      	ldr	r3, [pc, #532]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006106:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006108:	4b82      	ldr	r3, [pc, #520]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 800610a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	2b08      	cmp	r3, #8
 8006112:	d007      	beq.n	8006124 <HAL_RCC_OscConfig+0x308>
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	2b18      	cmp	r3, #24
 8006118:	d13a      	bne.n	8006190 <HAL_RCC_OscConfig+0x374>
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f003 0303 	and.w	r3, r3, #3
 8006120:	2b01      	cmp	r3, #1
 8006122:	d135      	bne.n	8006190 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006124:	4b7b      	ldr	r3, [pc, #492]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800612c:	2b00      	cmp	r3, #0
 800612e:	d005      	beq.n	800613c <HAL_RCC_OscConfig+0x320>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	2b80      	cmp	r3, #128	@ 0x80
 8006136:	d001      	beq.n	800613c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e2c1      	b.n	80066c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800613c:	f7fb fb32 	bl	80017a4 <HAL_GetREVID>
 8006140:	4603      	mov	r3, r0
 8006142:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006146:	4293      	cmp	r3, r2
 8006148:	d817      	bhi.n	800617a <HAL_RCC_OscConfig+0x35e>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	2b20      	cmp	r3, #32
 8006150:	d108      	bne.n	8006164 <HAL_RCC_OscConfig+0x348>
 8006152:	4b70      	ldr	r3, [pc, #448]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800615a:	4a6e      	ldr	r2, [pc, #440]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 800615c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006160:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006162:	e075      	b.n	8006250 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006164:	4b6b      	ldr	r3, [pc, #428]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	069b      	lsls	r3, r3, #26
 8006172:	4968      	ldr	r1, [pc, #416]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 8006174:	4313      	orrs	r3, r2
 8006176:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006178:	e06a      	b.n	8006250 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800617a:	4b66      	ldr	r3, [pc, #408]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	061b      	lsls	r3, r3, #24
 8006188:	4962      	ldr	r1, [pc, #392]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 800618a:	4313      	orrs	r3, r2
 800618c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800618e:	e05f      	b.n	8006250 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d042      	beq.n	800621e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006198:	4b5e      	ldr	r3, [pc, #376]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a5d      	ldr	r2, [pc, #372]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 800619e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a4:	f7fb faf2 	bl	800178c <HAL_GetTick>
 80061a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80061ac:	f7fb faee 	bl	800178c <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e280      	b.n	80066c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061be:	4b55      	ldr	r3, [pc, #340]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d0f0      	beq.n	80061ac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061ca:	f7fb faeb 	bl	80017a4 <HAL_GetREVID>
 80061ce:	4603      	mov	r3, r0
 80061d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d817      	bhi.n	8006208 <HAL_RCC_OscConfig+0x3ec>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	2b20      	cmp	r3, #32
 80061de:	d108      	bne.n	80061f2 <HAL_RCC_OscConfig+0x3d6>
 80061e0:	4b4c      	ldr	r3, [pc, #304]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80061e8:	4a4a      	ldr	r2, [pc, #296]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 80061ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061ee:	6053      	str	r3, [r2, #4]
 80061f0:	e02e      	b.n	8006250 <HAL_RCC_OscConfig+0x434>
 80061f2:	4b48      	ldr	r3, [pc, #288]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	069b      	lsls	r3, r3, #26
 8006200:	4944      	ldr	r1, [pc, #272]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 8006202:	4313      	orrs	r3, r2
 8006204:	604b      	str	r3, [r1, #4]
 8006206:	e023      	b.n	8006250 <HAL_RCC_OscConfig+0x434>
 8006208:	4b42      	ldr	r3, [pc, #264]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	061b      	lsls	r3, r3, #24
 8006216:	493f      	ldr	r1, [pc, #252]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 8006218:	4313      	orrs	r3, r2
 800621a:	60cb      	str	r3, [r1, #12]
 800621c:	e018      	b.n	8006250 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800621e:	4b3d      	ldr	r3, [pc, #244]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a3c      	ldr	r2, [pc, #240]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 8006224:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800622a:	f7fb faaf 	bl	800178c <HAL_GetTick>
 800622e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006230:	e008      	b.n	8006244 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006232:	f7fb faab 	bl	800178c <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d901      	bls.n	8006244 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e23d      	b.n	80066c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006244:	4b33      	ldr	r3, [pc, #204]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1f0      	bne.n	8006232 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0308 	and.w	r3, r3, #8
 8006258:	2b00      	cmp	r3, #0
 800625a:	d036      	beq.n	80062ca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d019      	beq.n	8006298 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006264:	4b2b      	ldr	r3, [pc, #172]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 8006266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006268:	4a2a      	ldr	r2, [pc, #168]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 800626a:	f043 0301 	orr.w	r3, r3, #1
 800626e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006270:	f7fb fa8c 	bl	800178c <HAL_GetTick>
 8006274:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006278:	f7fb fa88 	bl	800178c <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e21a      	b.n	80066c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800628a:	4b22      	ldr	r3, [pc, #136]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 800628c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0f0      	beq.n	8006278 <HAL_RCC_OscConfig+0x45c>
 8006296:	e018      	b.n	80062ca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006298:	4b1e      	ldr	r3, [pc, #120]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 800629a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800629c:	4a1d      	ldr	r2, [pc, #116]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 800629e:	f023 0301 	bic.w	r3, r3, #1
 80062a2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a4:	f7fb fa72 	bl	800178c <HAL_GetTick>
 80062a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062aa:	e008      	b.n	80062be <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062ac:	f7fb fa6e 	bl	800178c <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e200      	b.n	80066c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062be:	4b15      	ldr	r3, [pc, #84]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 80062c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1f0      	bne.n	80062ac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0320 	and.w	r3, r3, #32
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d039      	beq.n	800634a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d01c      	beq.n	8006318 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062de:	4b0d      	ldr	r3, [pc, #52]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a0c      	ldr	r2, [pc, #48]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 80062e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80062e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80062ea:	f7fb fa4f 	bl	800178c <HAL_GetTick>
 80062ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062f0:	e008      	b.n	8006304 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062f2:	f7fb fa4b 	bl	800178c <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d901      	bls.n	8006304 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e1dd      	b.n	80066c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006304:	4b03      	ldr	r3, [pc, #12]	@ (8006314 <HAL_RCC_OscConfig+0x4f8>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0f0      	beq.n	80062f2 <HAL_RCC_OscConfig+0x4d6>
 8006310:	e01b      	b.n	800634a <HAL_RCC_OscConfig+0x52e>
 8006312:	bf00      	nop
 8006314:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006318:	4b9b      	ldr	r3, [pc, #620]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a9a      	ldr	r2, [pc, #616]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 800631e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006322:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006324:	f7fb fa32 	bl	800178c <HAL_GetTick>
 8006328:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800632a:	e008      	b.n	800633e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800632c:	f7fb fa2e 	bl	800178c <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b02      	cmp	r3, #2
 8006338:	d901      	bls.n	800633e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e1c0      	b.n	80066c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800633e:	4b92      	ldr	r3, [pc, #584]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1f0      	bne.n	800632c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0304 	and.w	r3, r3, #4
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 8081 	beq.w	800645a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006358:	4b8c      	ldr	r3, [pc, #560]	@ (800658c <HAL_RCC_OscConfig+0x770>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a8b      	ldr	r2, [pc, #556]	@ (800658c <HAL_RCC_OscConfig+0x770>)
 800635e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006362:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006364:	f7fb fa12 	bl	800178c <HAL_GetTick>
 8006368:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800636a:	e008      	b.n	800637e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800636c:	f7fb fa0e 	bl	800178c <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b64      	cmp	r3, #100	@ 0x64
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e1a0      	b.n	80066c0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800637e:	4b83      	ldr	r3, [pc, #524]	@ (800658c <HAL_RCC_OscConfig+0x770>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006386:	2b00      	cmp	r3, #0
 8006388:	d0f0      	beq.n	800636c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d106      	bne.n	80063a0 <HAL_RCC_OscConfig+0x584>
 8006392:	4b7d      	ldr	r3, [pc, #500]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 8006394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006396:	4a7c      	ldr	r2, [pc, #496]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 8006398:	f043 0301 	orr.w	r3, r3, #1
 800639c:	6713      	str	r3, [r2, #112]	@ 0x70
 800639e:	e02d      	b.n	80063fc <HAL_RCC_OscConfig+0x5e0>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10c      	bne.n	80063c2 <HAL_RCC_OscConfig+0x5a6>
 80063a8:	4b77      	ldr	r3, [pc, #476]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 80063aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ac:	4a76      	ldr	r2, [pc, #472]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 80063ae:	f023 0301 	bic.w	r3, r3, #1
 80063b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80063b4:	4b74      	ldr	r3, [pc, #464]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 80063b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063b8:	4a73      	ldr	r2, [pc, #460]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 80063ba:	f023 0304 	bic.w	r3, r3, #4
 80063be:	6713      	str	r3, [r2, #112]	@ 0x70
 80063c0:	e01c      	b.n	80063fc <HAL_RCC_OscConfig+0x5e0>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	2b05      	cmp	r3, #5
 80063c8:	d10c      	bne.n	80063e4 <HAL_RCC_OscConfig+0x5c8>
 80063ca:	4b6f      	ldr	r3, [pc, #444]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 80063cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ce:	4a6e      	ldr	r2, [pc, #440]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 80063d0:	f043 0304 	orr.w	r3, r3, #4
 80063d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80063d6:	4b6c      	ldr	r3, [pc, #432]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 80063d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063da:	4a6b      	ldr	r2, [pc, #428]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 80063dc:	f043 0301 	orr.w	r3, r3, #1
 80063e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80063e2:	e00b      	b.n	80063fc <HAL_RCC_OscConfig+0x5e0>
 80063e4:	4b68      	ldr	r3, [pc, #416]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 80063e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063e8:	4a67      	ldr	r2, [pc, #412]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 80063ea:	f023 0301 	bic.w	r3, r3, #1
 80063ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80063f0:	4b65      	ldr	r3, [pc, #404]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 80063f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063f4:	4a64      	ldr	r2, [pc, #400]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 80063f6:	f023 0304 	bic.w	r3, r3, #4
 80063fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d015      	beq.n	8006430 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006404:	f7fb f9c2 	bl	800178c <HAL_GetTick>
 8006408:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800640a:	e00a      	b.n	8006422 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800640c:	f7fb f9be 	bl	800178c <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800641a:	4293      	cmp	r3, r2
 800641c:	d901      	bls.n	8006422 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e14e      	b.n	80066c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006422:	4b59      	ldr	r3, [pc, #356]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 8006424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d0ee      	beq.n	800640c <HAL_RCC_OscConfig+0x5f0>
 800642e:	e014      	b.n	800645a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006430:	f7fb f9ac 	bl	800178c <HAL_GetTick>
 8006434:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006436:	e00a      	b.n	800644e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006438:	f7fb f9a8 	bl	800178c <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006446:	4293      	cmp	r3, r2
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e138      	b.n	80066c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800644e:	4b4e      	ldr	r3, [pc, #312]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 8006450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1ee      	bne.n	8006438 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645e:	2b00      	cmp	r3, #0
 8006460:	f000 812d 	beq.w	80066be <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006464:	4b48      	ldr	r3, [pc, #288]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800646c:	2b18      	cmp	r3, #24
 800646e:	f000 80bd 	beq.w	80065ec <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006476:	2b02      	cmp	r3, #2
 8006478:	f040 809e 	bne.w	80065b8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800647c:	4b42      	ldr	r3, [pc, #264]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a41      	ldr	r2, [pc, #260]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 8006482:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006488:	f7fb f980 	bl	800178c <HAL_GetTick>
 800648c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800648e:	e008      	b.n	80064a2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006490:	f7fb f97c 	bl	800178c <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	2b02      	cmp	r3, #2
 800649c:	d901      	bls.n	80064a2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e10e      	b.n	80066c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064a2:	4b39      	ldr	r3, [pc, #228]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1f0      	bne.n	8006490 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064ae:	4b36      	ldr	r3, [pc, #216]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 80064b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064b2:	4b37      	ldr	r3, [pc, #220]	@ (8006590 <HAL_RCC_OscConfig+0x774>)
 80064b4:	4013      	ands	r3, r2
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80064be:	0112      	lsls	r2, r2, #4
 80064c0:	430a      	orrs	r2, r1
 80064c2:	4931      	ldr	r1, [pc, #196]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064cc:	3b01      	subs	r3, #1
 80064ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064d6:	3b01      	subs	r3, #1
 80064d8:	025b      	lsls	r3, r3, #9
 80064da:	b29b      	uxth	r3, r3
 80064dc:	431a      	orrs	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e2:	3b01      	subs	r3, #1
 80064e4:	041b      	lsls	r3, r3, #16
 80064e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80064ea:	431a      	orrs	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f0:	3b01      	subs	r3, #1
 80064f2:	061b      	lsls	r3, r3, #24
 80064f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80064f8:	4923      	ldr	r1, [pc, #140]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80064fe:	4b22      	ldr	r3, [pc, #136]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 8006500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006502:	4a21      	ldr	r2, [pc, #132]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 8006504:	f023 0301 	bic.w	r3, r3, #1
 8006508:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800650a:	4b1f      	ldr	r3, [pc, #124]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 800650c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800650e:	4b21      	ldr	r3, [pc, #132]	@ (8006594 <HAL_RCC_OscConfig+0x778>)
 8006510:	4013      	ands	r3, r2
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006516:	00d2      	lsls	r2, r2, #3
 8006518:	491b      	ldr	r1, [pc, #108]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 800651a:	4313      	orrs	r3, r2
 800651c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800651e:	4b1a      	ldr	r3, [pc, #104]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 8006520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006522:	f023 020c 	bic.w	r2, r3, #12
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652a:	4917      	ldr	r1, [pc, #92]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 800652c:	4313      	orrs	r3, r2
 800652e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006530:	4b15      	ldr	r3, [pc, #84]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 8006532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006534:	f023 0202 	bic.w	r2, r3, #2
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800653c:	4912      	ldr	r1, [pc, #72]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 800653e:	4313      	orrs	r3, r2
 8006540:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006542:	4b11      	ldr	r3, [pc, #68]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 8006544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006546:	4a10      	ldr	r2, [pc, #64]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 8006548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800654c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800654e:	4b0e      	ldr	r3, [pc, #56]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 8006550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006552:	4a0d      	ldr	r2, [pc, #52]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 8006554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006558:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800655a:	4b0b      	ldr	r3, [pc, #44]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 800655c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655e:	4a0a      	ldr	r2, [pc, #40]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 8006560:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006564:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006566:	4b08      	ldr	r3, [pc, #32]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 8006568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800656a:	4a07      	ldr	r2, [pc, #28]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 800656c:	f043 0301 	orr.w	r3, r3, #1
 8006570:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006572:	4b05      	ldr	r3, [pc, #20]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a04      	ldr	r2, [pc, #16]	@ (8006588 <HAL_RCC_OscConfig+0x76c>)
 8006578:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800657c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800657e:	f7fb f905 	bl	800178c <HAL_GetTick>
 8006582:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006584:	e011      	b.n	80065aa <HAL_RCC_OscConfig+0x78e>
 8006586:	bf00      	nop
 8006588:	58024400 	.word	0x58024400
 800658c:	58024800 	.word	0x58024800
 8006590:	fffffc0c 	.word	0xfffffc0c
 8006594:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006598:	f7fb f8f8 	bl	800178c <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e08a      	b.n	80066c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065aa:	4b47      	ldr	r3, [pc, #284]	@ (80066c8 <HAL_RCC_OscConfig+0x8ac>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0f0      	beq.n	8006598 <HAL_RCC_OscConfig+0x77c>
 80065b6:	e082      	b.n	80066be <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065b8:	4b43      	ldr	r3, [pc, #268]	@ (80066c8 <HAL_RCC_OscConfig+0x8ac>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a42      	ldr	r2, [pc, #264]	@ (80066c8 <HAL_RCC_OscConfig+0x8ac>)
 80065be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c4:	f7fb f8e2 	bl	800178c <HAL_GetTick>
 80065c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065ca:	e008      	b.n	80065de <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065cc:	f7fb f8de 	bl	800178c <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d901      	bls.n	80065de <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e070      	b.n	80066c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065de:	4b3a      	ldr	r3, [pc, #232]	@ (80066c8 <HAL_RCC_OscConfig+0x8ac>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1f0      	bne.n	80065cc <HAL_RCC_OscConfig+0x7b0>
 80065ea:	e068      	b.n	80066be <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80065ec:	4b36      	ldr	r3, [pc, #216]	@ (80066c8 <HAL_RCC_OscConfig+0x8ac>)
 80065ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80065f2:	4b35      	ldr	r3, [pc, #212]	@ (80066c8 <HAL_RCC_OscConfig+0x8ac>)
 80065f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d031      	beq.n	8006664 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	f003 0203 	and.w	r2, r3, #3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800660a:	429a      	cmp	r2, r3
 800660c:	d12a      	bne.n	8006664 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	091b      	lsrs	r3, r3, #4
 8006612:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800661a:	429a      	cmp	r2, r3
 800661c:	d122      	bne.n	8006664 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006628:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800662a:	429a      	cmp	r2, r3
 800662c:	d11a      	bne.n	8006664 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	0a5b      	lsrs	r3, r3, #9
 8006632:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800663a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800663c:	429a      	cmp	r2, r3
 800663e:	d111      	bne.n	8006664 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	0c1b      	lsrs	r3, r3, #16
 8006644:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800664c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800664e:	429a      	cmp	r2, r3
 8006650:	d108      	bne.n	8006664 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	0e1b      	lsrs	r3, r3, #24
 8006656:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800665e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006660:	429a      	cmp	r2, r3
 8006662:	d001      	beq.n	8006668 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e02b      	b.n	80066c0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006668:	4b17      	ldr	r3, [pc, #92]	@ (80066c8 <HAL_RCC_OscConfig+0x8ac>)
 800666a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800666c:	08db      	lsrs	r3, r3, #3
 800666e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006672:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	429a      	cmp	r2, r3
 800667c:	d01f      	beq.n	80066be <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800667e:	4b12      	ldr	r3, [pc, #72]	@ (80066c8 <HAL_RCC_OscConfig+0x8ac>)
 8006680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006682:	4a11      	ldr	r2, [pc, #68]	@ (80066c8 <HAL_RCC_OscConfig+0x8ac>)
 8006684:	f023 0301 	bic.w	r3, r3, #1
 8006688:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800668a:	f7fb f87f 	bl	800178c <HAL_GetTick>
 800668e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006690:	bf00      	nop
 8006692:	f7fb f87b 	bl	800178c <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669a:	4293      	cmp	r3, r2
 800669c:	d0f9      	beq.n	8006692 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800669e:	4b0a      	ldr	r3, [pc, #40]	@ (80066c8 <HAL_RCC_OscConfig+0x8ac>)
 80066a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066a2:	4b0a      	ldr	r3, [pc, #40]	@ (80066cc <HAL_RCC_OscConfig+0x8b0>)
 80066a4:	4013      	ands	r3, r2
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80066aa:	00d2      	lsls	r2, r2, #3
 80066ac:	4906      	ldr	r1, [pc, #24]	@ (80066c8 <HAL_RCC_OscConfig+0x8ac>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80066b2:	4b05      	ldr	r3, [pc, #20]	@ (80066c8 <HAL_RCC_OscConfig+0x8ac>)
 80066b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b6:	4a04      	ldr	r2, [pc, #16]	@ (80066c8 <HAL_RCC_OscConfig+0x8ac>)
 80066b8:	f043 0301 	orr.w	r3, r3, #1
 80066bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3730      	adds	r7, #48	@ 0x30
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	58024400 	.word	0x58024400
 80066cc:	ffff0007 	.word	0xffff0007

080066d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e19c      	b.n	8006a1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066e4:	4b8a      	ldr	r3, [pc, #552]	@ (8006910 <HAL_RCC_ClockConfig+0x240>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 030f 	and.w	r3, r3, #15
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d910      	bls.n	8006714 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066f2:	4b87      	ldr	r3, [pc, #540]	@ (8006910 <HAL_RCC_ClockConfig+0x240>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f023 020f 	bic.w	r2, r3, #15
 80066fa:	4985      	ldr	r1, [pc, #532]	@ (8006910 <HAL_RCC_ClockConfig+0x240>)
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	4313      	orrs	r3, r2
 8006700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006702:	4b83      	ldr	r3, [pc, #524]	@ (8006910 <HAL_RCC_ClockConfig+0x240>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 030f 	and.w	r3, r3, #15
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	429a      	cmp	r2, r3
 800670e:	d001      	beq.n	8006714 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e184      	b.n	8006a1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	2b00      	cmp	r3, #0
 800671e:	d010      	beq.n	8006742 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	691a      	ldr	r2, [r3, #16]
 8006724:	4b7b      	ldr	r3, [pc, #492]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800672c:	429a      	cmp	r2, r3
 800672e:	d908      	bls.n	8006742 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006730:	4b78      	ldr	r3, [pc, #480]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	4975      	ldr	r1, [pc, #468]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 800673e:	4313      	orrs	r3, r2
 8006740:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0308 	and.w	r3, r3, #8
 800674a:	2b00      	cmp	r3, #0
 800674c:	d010      	beq.n	8006770 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	695a      	ldr	r2, [r3, #20]
 8006752:	4b70      	ldr	r3, [pc, #448]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800675a:	429a      	cmp	r2, r3
 800675c:	d908      	bls.n	8006770 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800675e:	4b6d      	ldr	r3, [pc, #436]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 8006760:	69db      	ldr	r3, [r3, #28]
 8006762:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	496a      	ldr	r1, [pc, #424]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 800676c:	4313      	orrs	r3, r2
 800676e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0310 	and.w	r3, r3, #16
 8006778:	2b00      	cmp	r3, #0
 800677a:	d010      	beq.n	800679e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	699a      	ldr	r2, [r3, #24]
 8006780:	4b64      	ldr	r3, [pc, #400]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006788:	429a      	cmp	r2, r3
 800678a:	d908      	bls.n	800679e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800678c:	4b61      	ldr	r3, [pc, #388]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 800678e:	69db      	ldr	r3, [r3, #28]
 8006790:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	495e      	ldr	r1, [pc, #376]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 800679a:	4313      	orrs	r3, r2
 800679c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0320 	and.w	r3, r3, #32
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d010      	beq.n	80067cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	69da      	ldr	r2, [r3, #28]
 80067ae:	4b59      	ldr	r3, [pc, #356]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d908      	bls.n	80067cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80067ba:	4b56      	ldr	r3, [pc, #344]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	4953      	ldr	r1, [pc, #332]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d010      	beq.n	80067fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	68da      	ldr	r2, [r3, #12]
 80067dc:	4b4d      	ldr	r3, [pc, #308]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	f003 030f 	and.w	r3, r3, #15
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d908      	bls.n	80067fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067e8:	4b4a      	ldr	r3, [pc, #296]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	f023 020f 	bic.w	r2, r3, #15
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	4947      	ldr	r1, [pc, #284]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d055      	beq.n	80068b2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006806:	4b43      	ldr	r3, [pc, #268]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	4940      	ldr	r1, [pc, #256]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 8006814:	4313      	orrs	r3, r2
 8006816:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	2b02      	cmp	r3, #2
 800681e:	d107      	bne.n	8006830 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006820:	4b3c      	ldr	r3, [pc, #240]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d121      	bne.n	8006870 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e0f6      	b.n	8006a1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	2b03      	cmp	r3, #3
 8006836:	d107      	bne.n	8006848 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006838:	4b36      	ldr	r3, [pc, #216]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d115      	bne.n	8006870 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e0ea      	b.n	8006a1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d107      	bne.n	8006860 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006850:	4b30      	ldr	r3, [pc, #192]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006858:	2b00      	cmp	r3, #0
 800685a:	d109      	bne.n	8006870 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e0de      	b.n	8006a1e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006860:	4b2c      	ldr	r3, [pc, #176]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0304 	and.w	r3, r3, #4
 8006868:	2b00      	cmp	r3, #0
 800686a:	d101      	bne.n	8006870 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e0d6      	b.n	8006a1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006870:	4b28      	ldr	r3, [pc, #160]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	f023 0207 	bic.w	r2, r3, #7
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	4925      	ldr	r1, [pc, #148]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 800687e:	4313      	orrs	r3, r2
 8006880:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006882:	f7fa ff83 	bl	800178c <HAL_GetTick>
 8006886:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006888:	e00a      	b.n	80068a0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800688a:	f7fa ff7f 	bl	800178c <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006898:	4293      	cmp	r3, r2
 800689a:	d901      	bls.n	80068a0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e0be      	b.n	8006a1e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068a0:	4b1c      	ldr	r3, [pc, #112]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	00db      	lsls	r3, r3, #3
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d1eb      	bne.n	800688a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d010      	beq.n	80068e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68da      	ldr	r2, [r3, #12]
 80068c2:	4b14      	ldr	r3, [pc, #80]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	f003 030f 	and.w	r3, r3, #15
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d208      	bcs.n	80068e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068ce:	4b11      	ldr	r3, [pc, #68]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	f023 020f 	bic.w	r2, r3, #15
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	490e      	ldr	r1, [pc, #56]	@ (8006914 <HAL_RCC_ClockConfig+0x244>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006910 <HAL_RCC_ClockConfig+0x240>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 030f 	and.w	r3, r3, #15
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d214      	bcs.n	8006918 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ee:	4b08      	ldr	r3, [pc, #32]	@ (8006910 <HAL_RCC_ClockConfig+0x240>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f023 020f 	bic.w	r2, r3, #15
 80068f6:	4906      	ldr	r1, [pc, #24]	@ (8006910 <HAL_RCC_ClockConfig+0x240>)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068fe:	4b04      	ldr	r3, [pc, #16]	@ (8006910 <HAL_RCC_ClockConfig+0x240>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 030f 	and.w	r3, r3, #15
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	429a      	cmp	r2, r3
 800690a:	d005      	beq.n	8006918 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e086      	b.n	8006a1e <HAL_RCC_ClockConfig+0x34e>
 8006910:	52002000 	.word	0x52002000
 8006914:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0304 	and.w	r3, r3, #4
 8006920:	2b00      	cmp	r3, #0
 8006922:	d010      	beq.n	8006946 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	691a      	ldr	r2, [r3, #16]
 8006928:	4b3f      	ldr	r3, [pc, #252]	@ (8006a28 <HAL_RCC_ClockConfig+0x358>)
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006930:	429a      	cmp	r2, r3
 8006932:	d208      	bcs.n	8006946 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006934:	4b3c      	ldr	r3, [pc, #240]	@ (8006a28 <HAL_RCC_ClockConfig+0x358>)
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	4939      	ldr	r1, [pc, #228]	@ (8006a28 <HAL_RCC_ClockConfig+0x358>)
 8006942:	4313      	orrs	r3, r2
 8006944:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0308 	and.w	r3, r3, #8
 800694e:	2b00      	cmp	r3, #0
 8006950:	d010      	beq.n	8006974 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	695a      	ldr	r2, [r3, #20]
 8006956:	4b34      	ldr	r3, [pc, #208]	@ (8006a28 <HAL_RCC_ClockConfig+0x358>)
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800695e:	429a      	cmp	r2, r3
 8006960:	d208      	bcs.n	8006974 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006962:	4b31      	ldr	r3, [pc, #196]	@ (8006a28 <HAL_RCC_ClockConfig+0x358>)
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	492e      	ldr	r1, [pc, #184]	@ (8006a28 <HAL_RCC_ClockConfig+0x358>)
 8006970:	4313      	orrs	r3, r2
 8006972:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0310 	and.w	r3, r3, #16
 800697c:	2b00      	cmp	r3, #0
 800697e:	d010      	beq.n	80069a2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	699a      	ldr	r2, [r3, #24]
 8006984:	4b28      	ldr	r3, [pc, #160]	@ (8006a28 <HAL_RCC_ClockConfig+0x358>)
 8006986:	69db      	ldr	r3, [r3, #28]
 8006988:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800698c:	429a      	cmp	r2, r3
 800698e:	d208      	bcs.n	80069a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006990:	4b25      	ldr	r3, [pc, #148]	@ (8006a28 <HAL_RCC_ClockConfig+0x358>)
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	4922      	ldr	r1, [pc, #136]	@ (8006a28 <HAL_RCC_ClockConfig+0x358>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0320 	and.w	r3, r3, #32
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d010      	beq.n	80069d0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	69da      	ldr	r2, [r3, #28]
 80069b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006a28 <HAL_RCC_ClockConfig+0x358>)
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d208      	bcs.n	80069d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80069be:	4b1a      	ldr	r3, [pc, #104]	@ (8006a28 <HAL_RCC_ClockConfig+0x358>)
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	4917      	ldr	r1, [pc, #92]	@ (8006a28 <HAL_RCC_ClockConfig+0x358>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80069d0:	f000 f834 	bl	8006a3c <HAL_RCC_GetSysClockFreq>
 80069d4:	4602      	mov	r2, r0
 80069d6:	4b14      	ldr	r3, [pc, #80]	@ (8006a28 <HAL_RCC_ClockConfig+0x358>)
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	0a1b      	lsrs	r3, r3, #8
 80069dc:	f003 030f 	and.w	r3, r3, #15
 80069e0:	4912      	ldr	r1, [pc, #72]	@ (8006a2c <HAL_RCC_ClockConfig+0x35c>)
 80069e2:	5ccb      	ldrb	r3, [r1, r3]
 80069e4:	f003 031f 	and.w	r3, r3, #31
 80069e8:	fa22 f303 	lsr.w	r3, r2, r3
 80069ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006a28 <HAL_RCC_ClockConfig+0x358>)
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	f003 030f 	and.w	r3, r3, #15
 80069f6:	4a0d      	ldr	r2, [pc, #52]	@ (8006a2c <HAL_RCC_ClockConfig+0x35c>)
 80069f8:	5cd3      	ldrb	r3, [r2, r3]
 80069fa:	f003 031f 	and.w	r3, r3, #31
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	fa22 f303 	lsr.w	r3, r2, r3
 8006a04:	4a0a      	ldr	r2, [pc, #40]	@ (8006a30 <HAL_RCC_ClockConfig+0x360>)
 8006a06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a08:	4a0a      	ldr	r2, [pc, #40]	@ (8006a34 <HAL_RCC_ClockConfig+0x364>)
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8006a38 <HAL_RCC_ClockConfig+0x368>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fa fe70 	bl	80016f8 <HAL_InitTick>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	58024400 	.word	0x58024400
 8006a2c:	0800ce94 	.word	0x0800ce94
 8006a30:	24000004 	.word	0x24000004
 8006a34:	24000000 	.word	0x24000000
 8006a38:	24000024 	.word	0x24000024

08006a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b089      	sub	sp, #36	@ 0x24
 8006a40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a42:	4bb3      	ldr	r3, [pc, #716]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a4a:	2b18      	cmp	r3, #24
 8006a4c:	f200 8155 	bhi.w	8006cfa <HAL_RCC_GetSysClockFreq+0x2be>
 8006a50:	a201      	add	r2, pc, #4	@ (adr r2, 8006a58 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a56:	bf00      	nop
 8006a58:	08006abd 	.word	0x08006abd
 8006a5c:	08006cfb 	.word	0x08006cfb
 8006a60:	08006cfb 	.word	0x08006cfb
 8006a64:	08006cfb 	.word	0x08006cfb
 8006a68:	08006cfb 	.word	0x08006cfb
 8006a6c:	08006cfb 	.word	0x08006cfb
 8006a70:	08006cfb 	.word	0x08006cfb
 8006a74:	08006cfb 	.word	0x08006cfb
 8006a78:	08006ae3 	.word	0x08006ae3
 8006a7c:	08006cfb 	.word	0x08006cfb
 8006a80:	08006cfb 	.word	0x08006cfb
 8006a84:	08006cfb 	.word	0x08006cfb
 8006a88:	08006cfb 	.word	0x08006cfb
 8006a8c:	08006cfb 	.word	0x08006cfb
 8006a90:	08006cfb 	.word	0x08006cfb
 8006a94:	08006cfb 	.word	0x08006cfb
 8006a98:	08006ae9 	.word	0x08006ae9
 8006a9c:	08006cfb 	.word	0x08006cfb
 8006aa0:	08006cfb 	.word	0x08006cfb
 8006aa4:	08006cfb 	.word	0x08006cfb
 8006aa8:	08006cfb 	.word	0x08006cfb
 8006aac:	08006cfb 	.word	0x08006cfb
 8006ab0:	08006cfb 	.word	0x08006cfb
 8006ab4:	08006cfb 	.word	0x08006cfb
 8006ab8:	08006aef 	.word	0x08006aef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006abc:	4b94      	ldr	r3, [pc, #592]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0320 	and.w	r3, r3, #32
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d009      	beq.n	8006adc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ac8:	4b91      	ldr	r3, [pc, #580]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	08db      	lsrs	r3, r3, #3
 8006ace:	f003 0303 	and.w	r3, r3, #3
 8006ad2:	4a90      	ldr	r2, [pc, #576]	@ (8006d14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006ada:	e111      	b.n	8006d00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006adc:	4b8d      	ldr	r3, [pc, #564]	@ (8006d14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ade:	61bb      	str	r3, [r7, #24]
      break;
 8006ae0:	e10e      	b.n	8006d00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006ae2:	4b8d      	ldr	r3, [pc, #564]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ae4:	61bb      	str	r3, [r7, #24]
      break;
 8006ae6:	e10b      	b.n	8006d00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006ae8:	4b8c      	ldr	r3, [pc, #560]	@ (8006d1c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006aea:	61bb      	str	r3, [r7, #24]
      break;
 8006aec:	e108      	b.n	8006d00 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006aee:	4b88      	ldr	r3, [pc, #544]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af2:	f003 0303 	and.w	r3, r3, #3
 8006af6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006af8:	4b85      	ldr	r3, [pc, #532]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afc:	091b      	lsrs	r3, r3, #4
 8006afe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b02:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b04:	4b82      	ldr	r3, [pc, #520]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b08:	f003 0301 	and.w	r3, r3, #1
 8006b0c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006b0e:	4b80      	ldr	r3, [pc, #512]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b12:	08db      	lsrs	r3, r3, #3
 8006b14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	fb02 f303 	mul.w	r3, r2, r3
 8006b1e:	ee07 3a90 	vmov	s15, r3
 8006b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b26:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 80e1 	beq.w	8006cf4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	f000 8083 	beq.w	8006c40 <HAL_RCC_GetSysClockFreq+0x204>
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	f200 80a1 	bhi.w	8006c84 <HAL_RCC_GetSysClockFreq+0x248>
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d003      	beq.n	8006b50 <HAL_RCC_GetSysClockFreq+0x114>
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d056      	beq.n	8006bfc <HAL_RCC_GetSysClockFreq+0x1c0>
 8006b4e:	e099      	b.n	8006c84 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b50:	4b6f      	ldr	r3, [pc, #444]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0320 	and.w	r3, r3, #32
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d02d      	beq.n	8006bb8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b5c:	4b6c      	ldr	r3, [pc, #432]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	08db      	lsrs	r3, r3, #3
 8006b62:	f003 0303 	and.w	r3, r3, #3
 8006b66:	4a6b      	ldr	r2, [pc, #428]	@ (8006d14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b68:	fa22 f303 	lsr.w	r3, r2, r3
 8006b6c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	ee07 3a90 	vmov	s15, r3
 8006b74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b86:	4b62      	ldr	r3, [pc, #392]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b8e:	ee07 3a90 	vmov	s15, r3
 8006b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b96:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b9a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006d20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006bb6:	e087      	b.n	8006cc8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	ee07 3a90 	vmov	s15, r3
 8006bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006d24 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bca:	4b51      	ldr	r3, [pc, #324]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bd2:	ee07 3a90 	vmov	s15, r3
 8006bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bda:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bde:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006d20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bf6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006bfa:	e065      	b.n	8006cc8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	ee07 3a90 	vmov	s15, r3
 8006c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c06:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006d28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c0e:	4b40      	ldr	r3, [pc, #256]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c16:	ee07 3a90 	vmov	s15, r3
 8006c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c22:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006d20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c3e:	e043      	b.n	8006cc8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	ee07 3a90 	vmov	s15, r3
 8006c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c4a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006d2c <HAL_RCC_GetSysClockFreq+0x2f0>
 8006c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c52:	4b2f      	ldr	r3, [pc, #188]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c5a:	ee07 3a90 	vmov	s15, r3
 8006c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c62:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c66:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006d20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c82:	e021      	b.n	8006cc8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	ee07 3a90 	vmov	s15, r3
 8006c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c8e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006d28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c96:	4b1e      	ldr	r3, [pc, #120]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c9e:	ee07 3a90 	vmov	s15, r3
 8006ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ca6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006caa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006d20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cc6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006cc8:	4b11      	ldr	r3, [pc, #68]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ccc:	0a5b      	lsrs	r3, r3, #9
 8006cce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	ee07 3a90 	vmov	s15, r3
 8006cdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ce0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cec:	ee17 3a90 	vmov	r3, s15
 8006cf0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006cf2:	e005      	b.n	8006d00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	61bb      	str	r3, [r7, #24]
      break;
 8006cf8:	e002      	b.n	8006d00 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006cfa:	4b07      	ldr	r3, [pc, #28]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006cfc:	61bb      	str	r3, [r7, #24]
      break;
 8006cfe:	bf00      	nop
  }

  return sysclockfreq;
 8006d00:	69bb      	ldr	r3, [r7, #24]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3724      	adds	r7, #36	@ 0x24
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	58024400 	.word	0x58024400
 8006d14:	03d09000 	.word	0x03d09000
 8006d18:	003d0900 	.word	0x003d0900
 8006d1c:	017d7840 	.word	0x017d7840
 8006d20:	46000000 	.word	0x46000000
 8006d24:	4c742400 	.word	0x4c742400
 8006d28:	4a742400 	.word	0x4a742400
 8006d2c:	4bbebc20 	.word	0x4bbebc20

08006d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d36:	f7ff fe81 	bl	8006a3c <HAL_RCC_GetSysClockFreq>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	4b10      	ldr	r3, [pc, #64]	@ (8006d80 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	0a1b      	lsrs	r3, r3, #8
 8006d42:	f003 030f 	and.w	r3, r3, #15
 8006d46:	490f      	ldr	r1, [pc, #60]	@ (8006d84 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d48:	5ccb      	ldrb	r3, [r1, r3]
 8006d4a:	f003 031f 	and.w	r3, r3, #31
 8006d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d52:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d54:	4b0a      	ldr	r3, [pc, #40]	@ (8006d80 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	f003 030f 	and.w	r3, r3, #15
 8006d5c:	4a09      	ldr	r2, [pc, #36]	@ (8006d84 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d5e:	5cd3      	ldrb	r3, [r2, r3]
 8006d60:	f003 031f 	and.w	r3, r3, #31
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	fa22 f303 	lsr.w	r3, r2, r3
 8006d6a:	4a07      	ldr	r2, [pc, #28]	@ (8006d88 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d6c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d6e:	4a07      	ldr	r2, [pc, #28]	@ (8006d8c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006d74:	4b04      	ldr	r3, [pc, #16]	@ (8006d88 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d76:	681b      	ldr	r3, [r3, #0]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	58024400 	.word	0x58024400
 8006d84:	0800ce94 	.word	0x0800ce94
 8006d88:	24000004 	.word	0x24000004
 8006d8c:	24000000 	.word	0x24000000

08006d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006d94:	f7ff ffcc 	bl	8006d30 <HAL_RCC_GetHCLKFreq>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	4b06      	ldr	r3, [pc, #24]	@ (8006db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	091b      	lsrs	r3, r3, #4
 8006da0:	f003 0307 	and.w	r3, r3, #7
 8006da4:	4904      	ldr	r1, [pc, #16]	@ (8006db8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006da6:	5ccb      	ldrb	r3, [r1, r3]
 8006da8:	f003 031f 	and.w	r3, r3, #31
 8006dac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	58024400 	.word	0x58024400
 8006db8:	0800ce94 	.word	0x0800ce94

08006dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006dc0:	f7ff ffb6 	bl	8006d30 <HAL_RCC_GetHCLKFreq>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	4b06      	ldr	r3, [pc, #24]	@ (8006de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	0a1b      	lsrs	r3, r3, #8
 8006dcc:	f003 0307 	and.w	r3, r3, #7
 8006dd0:	4904      	ldr	r1, [pc, #16]	@ (8006de4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006dd2:	5ccb      	ldrb	r3, [r1, r3]
 8006dd4:	f003 031f 	and.w	r3, r3, #31
 8006dd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	58024400 	.word	0x58024400
 8006de4:	0800ce94 	.word	0x0800ce94

08006de8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dec:	b0ca      	sub	sp, #296	@ 0x128
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006df4:	2300      	movs	r3, #0
 8006df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e08:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006e0c:	2500      	movs	r5, #0
 8006e0e:	ea54 0305 	orrs.w	r3, r4, r5
 8006e12:	d049      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e1a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e1e:	d02f      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006e20:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e24:	d828      	bhi.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e2a:	d01a      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006e2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e30:	d822      	bhi.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d003      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006e36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e3a:	d007      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e3c:	e01c      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e3e:	4bb8      	ldr	r3, [pc, #736]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e42:	4ab7      	ldr	r2, [pc, #732]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e4a:	e01a      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e50:	3308      	adds	r3, #8
 8006e52:	2102      	movs	r1, #2
 8006e54:	4618      	mov	r0, r3
 8006e56:	f002 fb61 	bl	800951c <RCCEx_PLL2_Config>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e60:	e00f      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e66:	3328      	adds	r3, #40	@ 0x28
 8006e68:	2102      	movs	r1, #2
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f002 fc08 	bl	8009680 <RCCEx_PLL3_Config>
 8006e70:	4603      	mov	r3, r0
 8006e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e76:	e004      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e7e:	e000      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10a      	bne.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006e8a:	4ba5      	ldr	r3, [pc, #660]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e8e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e98:	4aa1      	ldr	r2, [pc, #644]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e9a:	430b      	orrs	r3, r1
 8006e9c:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e9e:	e003      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ea4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006eb4:	f04f 0900 	mov.w	r9, #0
 8006eb8:	ea58 0309 	orrs.w	r3, r8, r9
 8006ebc:	d047      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ec4:	2b04      	cmp	r3, #4
 8006ec6:	d82a      	bhi.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ece:	bf00      	nop
 8006ed0:	08006ee5 	.word	0x08006ee5
 8006ed4:	08006ef3 	.word	0x08006ef3
 8006ed8:	08006f09 	.word	0x08006f09
 8006edc:	08006f27 	.word	0x08006f27
 8006ee0:	08006f27 	.word	0x08006f27
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ee4:	4b8e      	ldr	r3, [pc, #568]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee8:	4a8d      	ldr	r2, [pc, #564]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006eea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006eee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ef0:	e01a      	b.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef6:	3308      	adds	r3, #8
 8006ef8:	2100      	movs	r1, #0
 8006efa:	4618      	mov	r0, r3
 8006efc:	f002 fb0e 	bl	800951c <RCCEx_PLL2_Config>
 8006f00:	4603      	mov	r3, r0
 8006f02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f06:	e00f      	b.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f0c:	3328      	adds	r3, #40	@ 0x28
 8006f0e:	2100      	movs	r1, #0
 8006f10:	4618      	mov	r0, r3
 8006f12:	f002 fbb5 	bl	8009680 <RCCEx_PLL3_Config>
 8006f16:	4603      	mov	r3, r0
 8006f18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f1c:	e004      	b.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f24:	e000      	b.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006f26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10a      	bne.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f30:	4b7b      	ldr	r3, [pc, #492]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f34:	f023 0107 	bic.w	r1, r3, #7
 8006f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f3e:	4a78      	ldr	r2, [pc, #480]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f40:	430b      	orrs	r3, r1
 8006f42:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f44:	e003      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f56:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006f5a:	f04f 0b00 	mov.w	fp, #0
 8006f5e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006f62:	d04c      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f6e:	d030      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006f70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f74:	d829      	bhi.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f76:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f78:	d02d      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006f7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f7c:	d825      	bhi.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f7e:	2b80      	cmp	r3, #128	@ 0x80
 8006f80:	d018      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006f82:	2b80      	cmp	r3, #128	@ 0x80
 8006f84:	d821      	bhi.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d002      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006f8a:	2b40      	cmp	r3, #64	@ 0x40
 8006f8c:	d007      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006f8e:	e01c      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f90:	4b63      	ldr	r3, [pc, #396]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f94:	4a62      	ldr	r2, [pc, #392]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006f9c:	e01c      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa2:	3308      	adds	r3, #8
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f002 fab8 	bl	800951c <RCCEx_PLL2_Config>
 8006fac:	4603      	mov	r3, r0
 8006fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006fb2:	e011      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb8:	3328      	adds	r3, #40	@ 0x28
 8006fba:	2100      	movs	r1, #0
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f002 fb5f 	bl	8009680 <RCCEx_PLL3_Config>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006fc8:	e006      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fd0:	e002      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006fd2:	bf00      	nop
 8006fd4:	e000      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006fd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10a      	bne.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006fe0:	4b4f      	ldr	r3, [pc, #316]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fe4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fee:	4a4c      	ldr	r2, [pc, #304]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ff0:	430b      	orrs	r3, r1
 8006ff2:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ff4:	e003      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ffa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007006:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800700a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800700e:	2300      	movs	r3, #0
 8007010:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007014:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007018:	460b      	mov	r3, r1
 800701a:	4313      	orrs	r3, r2
 800701c:	d053      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800701e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007022:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007026:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800702a:	d035      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800702c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007030:	d82e      	bhi.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007032:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007036:	d031      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007038:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800703c:	d828      	bhi.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800703e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007042:	d01a      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007044:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007048:	d822      	bhi.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800704a:	2b00      	cmp	r3, #0
 800704c:	d003      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800704e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007052:	d007      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007054:	e01c      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007056:	4b32      	ldr	r3, [pc, #200]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800705a:	4a31      	ldr	r2, [pc, #196]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800705c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007060:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007062:	e01c      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007068:	3308      	adds	r3, #8
 800706a:	2100      	movs	r1, #0
 800706c:	4618      	mov	r0, r3
 800706e:	f002 fa55 	bl	800951c <RCCEx_PLL2_Config>
 8007072:	4603      	mov	r3, r0
 8007074:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007078:	e011      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800707a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707e:	3328      	adds	r3, #40	@ 0x28
 8007080:	2100      	movs	r1, #0
 8007082:	4618      	mov	r0, r3
 8007084:	f002 fafc 	bl	8009680 <RCCEx_PLL3_Config>
 8007088:	4603      	mov	r3, r0
 800708a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800708e:	e006      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007096:	e002      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007098:	bf00      	nop
 800709a:	e000      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800709c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800709e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10b      	bne.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80070a6:	4b1e      	ldr	r3, [pc, #120]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070aa:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80070ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80070b6:	4a1a      	ldr	r2, [pc, #104]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070b8:	430b      	orrs	r3, r1
 80070ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80070bc:	e003      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80070c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ce:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80070d2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80070d6:	2300      	movs	r3, #0
 80070d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80070dc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80070e0:	460b      	mov	r3, r1
 80070e2:	4313      	orrs	r3, r2
 80070e4:	d056      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80070e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80070ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80070f2:	d038      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80070f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80070f8:	d831      	bhi.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80070fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80070fe:	d034      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007100:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007104:	d82b      	bhi.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007106:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800710a:	d01d      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800710c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007110:	d825      	bhi.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007112:	2b00      	cmp	r3, #0
 8007114:	d006      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007116:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800711a:	d00a      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800711c:	e01f      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800711e:	bf00      	nop
 8007120:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007124:	4ba2      	ldr	r3, [pc, #648]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007128:	4aa1      	ldr	r2, [pc, #644]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800712a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800712e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007130:	e01c      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007136:	3308      	adds	r3, #8
 8007138:	2100      	movs	r1, #0
 800713a:	4618      	mov	r0, r3
 800713c:	f002 f9ee 	bl	800951c <RCCEx_PLL2_Config>
 8007140:	4603      	mov	r3, r0
 8007142:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007146:	e011      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800714c:	3328      	adds	r3, #40	@ 0x28
 800714e:	2100      	movs	r1, #0
 8007150:	4618      	mov	r0, r3
 8007152:	f002 fa95 	bl	8009680 <RCCEx_PLL3_Config>
 8007156:	4603      	mov	r3, r0
 8007158:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800715c:	e006      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007164:	e002      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007166:	bf00      	nop
 8007168:	e000      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800716a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800716c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10b      	bne.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007174:	4b8e      	ldr	r3, [pc, #568]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007178:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800717c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007180:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007184:	4a8a      	ldr	r2, [pc, #552]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007186:	430b      	orrs	r3, r1
 8007188:	6593      	str	r3, [r2, #88]	@ 0x58
 800718a:	e003      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800718c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007190:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80071a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80071a4:	2300      	movs	r3, #0
 80071a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80071aa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80071ae:	460b      	mov	r3, r1
 80071b0:	4313      	orrs	r3, r2
 80071b2:	d03a      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80071b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071ba:	2b30      	cmp	r3, #48	@ 0x30
 80071bc:	d01f      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x416>
 80071be:	2b30      	cmp	r3, #48	@ 0x30
 80071c0:	d819      	bhi.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80071c2:	2b20      	cmp	r3, #32
 80071c4:	d00c      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80071c6:	2b20      	cmp	r3, #32
 80071c8:	d815      	bhi.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d019      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80071ce:	2b10      	cmp	r3, #16
 80071d0:	d111      	bne.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071d2:	4b77      	ldr	r3, [pc, #476]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d6:	4a76      	ldr	r2, [pc, #472]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80071de:	e011      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e4:	3308      	adds	r3, #8
 80071e6:	2102      	movs	r1, #2
 80071e8:	4618      	mov	r0, r3
 80071ea:	f002 f997 	bl	800951c <RCCEx_PLL2_Config>
 80071ee:	4603      	mov	r3, r0
 80071f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80071f4:	e006      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071fc:	e002      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80071fe:	bf00      	nop
 8007200:	e000      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007202:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007204:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10a      	bne.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800720c:	4b68      	ldr	r3, [pc, #416]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800720e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007210:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800721a:	4a65      	ldr	r2, [pc, #404]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800721c:	430b      	orrs	r3, r1
 800721e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007220:	e003      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007222:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007226:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800722a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800722e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007232:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007236:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800723a:	2300      	movs	r3, #0
 800723c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007240:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007244:	460b      	mov	r3, r1
 8007246:	4313      	orrs	r3, r2
 8007248:	d051      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800724a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800724e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007250:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007254:	d035      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007256:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800725a:	d82e      	bhi.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800725c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007260:	d031      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007262:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007266:	d828      	bhi.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007268:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800726c:	d01a      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800726e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007272:	d822      	bhi.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007274:	2b00      	cmp	r3, #0
 8007276:	d003      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007278:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800727c:	d007      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800727e:	e01c      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007280:	4b4b      	ldr	r3, [pc, #300]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007284:	4a4a      	ldr	r2, [pc, #296]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007286:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800728a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800728c:	e01c      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800728e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007292:	3308      	adds	r3, #8
 8007294:	2100      	movs	r1, #0
 8007296:	4618      	mov	r0, r3
 8007298:	f002 f940 	bl	800951c <RCCEx_PLL2_Config>
 800729c:	4603      	mov	r3, r0
 800729e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80072a2:	e011      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a8:	3328      	adds	r3, #40	@ 0x28
 80072aa:	2100      	movs	r1, #0
 80072ac:	4618      	mov	r0, r3
 80072ae:	f002 f9e7 	bl	8009680 <RCCEx_PLL3_Config>
 80072b2:	4603      	mov	r3, r0
 80072b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80072b8:	e006      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072c0:	e002      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80072c2:	bf00      	nop
 80072c4:	e000      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80072c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10a      	bne.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80072d0:	4b37      	ldr	r3, [pc, #220]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072d4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80072d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072de:	4a34      	ldr	r2, [pc, #208]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072e0:	430b      	orrs	r3, r1
 80072e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80072e4:	e003      	b.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80072ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80072fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80072fe:	2300      	movs	r3, #0
 8007300:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007304:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007308:	460b      	mov	r3, r1
 800730a:	4313      	orrs	r3, r2
 800730c:	d056      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800730e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007312:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007314:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007318:	d033      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800731a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800731e:	d82c      	bhi.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007320:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007324:	d02f      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007326:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800732a:	d826      	bhi.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800732c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007330:	d02b      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007332:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007336:	d820      	bhi.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007338:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800733c:	d012      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800733e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007342:	d81a      	bhi.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007344:	2b00      	cmp	r3, #0
 8007346:	d022      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800734c:	d115      	bne.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800734e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007352:	3308      	adds	r3, #8
 8007354:	2101      	movs	r1, #1
 8007356:	4618      	mov	r0, r3
 8007358:	f002 f8e0 	bl	800951c <RCCEx_PLL2_Config>
 800735c:	4603      	mov	r3, r0
 800735e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007362:	e015      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007368:	3328      	adds	r3, #40	@ 0x28
 800736a:	2101      	movs	r1, #1
 800736c:	4618      	mov	r0, r3
 800736e:	f002 f987 	bl	8009680 <RCCEx_PLL3_Config>
 8007372:	4603      	mov	r3, r0
 8007374:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007378:	e00a      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007380:	e006      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007382:	bf00      	nop
 8007384:	e004      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007386:	bf00      	nop
 8007388:	e002      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800738a:	bf00      	nop
 800738c:	e000      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800738e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007390:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10d      	bne.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007398:	4b05      	ldr	r3, [pc, #20]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800739a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800739c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80073a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073a6:	4a02      	ldr	r2, [pc, #8]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073a8:	430b      	orrs	r3, r1
 80073aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80073ac:	e006      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80073ae:	bf00      	nop
 80073b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80073bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80073c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80073cc:	2300      	movs	r3, #0
 80073ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80073d2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80073d6:	460b      	mov	r3, r1
 80073d8:	4313      	orrs	r3, r2
 80073da:	d055      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80073dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80073e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073e8:	d033      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80073ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073ee:	d82c      	bhi.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80073f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073f4:	d02f      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80073f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073fa:	d826      	bhi.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80073fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007400:	d02b      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007402:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007406:	d820      	bhi.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007408:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800740c:	d012      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800740e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007412:	d81a      	bhi.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007414:	2b00      	cmp	r3, #0
 8007416:	d022      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007418:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800741c:	d115      	bne.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800741e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007422:	3308      	adds	r3, #8
 8007424:	2101      	movs	r1, #1
 8007426:	4618      	mov	r0, r3
 8007428:	f002 f878 	bl	800951c <RCCEx_PLL2_Config>
 800742c:	4603      	mov	r3, r0
 800742e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007432:	e015      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007438:	3328      	adds	r3, #40	@ 0x28
 800743a:	2101      	movs	r1, #1
 800743c:	4618      	mov	r0, r3
 800743e:	f002 f91f 	bl	8009680 <RCCEx_PLL3_Config>
 8007442:	4603      	mov	r3, r0
 8007444:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007448:	e00a      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007450:	e006      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007452:	bf00      	nop
 8007454:	e004      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007456:	bf00      	nop
 8007458:	e002      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800745a:	bf00      	nop
 800745c:	e000      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800745e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007460:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10b      	bne.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007468:	4ba3      	ldr	r3, [pc, #652]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800746a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800746c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007474:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007478:	4a9f      	ldr	r2, [pc, #636]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800747a:	430b      	orrs	r3, r1
 800747c:	6593      	str	r3, [r2, #88]	@ 0x58
 800747e:	e003      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007480:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007484:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007494:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007498:	2300      	movs	r3, #0
 800749a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800749e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80074a2:	460b      	mov	r3, r1
 80074a4:	4313      	orrs	r3, r2
 80074a6:	d037      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80074a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074b2:	d00e      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80074b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074b8:	d816      	bhi.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d018      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80074be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074c2:	d111      	bne.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074c4:	4b8c      	ldr	r3, [pc, #560]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c8:	4a8b      	ldr	r2, [pc, #556]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074d0:	e00f      	b.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074d6:	3308      	adds	r3, #8
 80074d8:	2101      	movs	r1, #1
 80074da:	4618      	mov	r0, r3
 80074dc:	f002 f81e 	bl	800951c <RCCEx_PLL2_Config>
 80074e0:	4603      	mov	r3, r0
 80074e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074e6:	e004      	b.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074ee:	e000      	b.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80074f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10a      	bne.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80074fa:	4b7f      	ldr	r3, [pc, #508]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074fe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007508:	4a7b      	ldr	r2, [pc, #492]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800750a:	430b      	orrs	r3, r1
 800750c:	6513      	str	r3, [r2, #80]	@ 0x50
 800750e:	e003      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007510:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007514:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800751c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007520:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007524:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007528:	2300      	movs	r3, #0
 800752a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800752e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007532:	460b      	mov	r3, r1
 8007534:	4313      	orrs	r3, r2
 8007536:	d039      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800753c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800753e:	2b03      	cmp	r3, #3
 8007540:	d81c      	bhi.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007542:	a201      	add	r2, pc, #4	@ (adr r2, 8007548 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007548:	08007585 	.word	0x08007585
 800754c:	08007559 	.word	0x08007559
 8007550:	08007567 	.word	0x08007567
 8007554:	08007585 	.word	0x08007585
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007558:	4b67      	ldr	r3, [pc, #412]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800755a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755c:	4a66      	ldr	r2, [pc, #408]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800755e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007562:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007564:	e00f      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800756a:	3308      	adds	r3, #8
 800756c:	2102      	movs	r1, #2
 800756e:	4618      	mov	r0, r3
 8007570:	f001 ffd4 	bl	800951c <RCCEx_PLL2_Config>
 8007574:	4603      	mov	r3, r0
 8007576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800757a:	e004      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007582:	e000      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10a      	bne.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800758e:	4b5a      	ldr	r3, [pc, #360]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007592:	f023 0103 	bic.w	r1, r3, #3
 8007596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800759a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800759c:	4a56      	ldr	r2, [pc, #344]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800759e:	430b      	orrs	r3, r1
 80075a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80075a2:	e003      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80075b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80075bc:	2300      	movs	r3, #0
 80075be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80075c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80075c6:	460b      	mov	r3, r1
 80075c8:	4313      	orrs	r3, r2
 80075ca:	f000 809f 	beq.w	800770c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075ce:	4b4b      	ldr	r3, [pc, #300]	@ (80076fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a4a      	ldr	r2, [pc, #296]	@ (80076fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80075d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075da:	f7fa f8d7 	bl	800178c <HAL_GetTick>
 80075de:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075e2:	e00b      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075e4:	f7fa f8d2 	bl	800178c <HAL_GetTick>
 80075e8:	4602      	mov	r2, r0
 80075ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	2b64      	cmp	r3, #100	@ 0x64
 80075f2:	d903      	bls.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075fa:	e005      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075fc:	4b3f      	ldr	r3, [pc, #252]	@ (80076fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007604:	2b00      	cmp	r3, #0
 8007606:	d0ed      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007608:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800760c:	2b00      	cmp	r3, #0
 800760e:	d179      	bne.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007610:	4b39      	ldr	r3, [pc, #228]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007612:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007618:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800761c:	4053      	eors	r3, r2
 800761e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007622:	2b00      	cmp	r3, #0
 8007624:	d015      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007626:	4b34      	ldr	r3, [pc, #208]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800762a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800762e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007632:	4b31      	ldr	r3, [pc, #196]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007636:	4a30      	ldr	r2, [pc, #192]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800763c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800763e:	4b2e      	ldr	r3, [pc, #184]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007642:	4a2d      	ldr	r2, [pc, #180]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007644:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007648:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800764a:	4a2b      	ldr	r2, [pc, #172]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800764c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007650:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007656:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800765a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800765e:	d118      	bne.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007660:	f7fa f894 	bl	800178c <HAL_GetTick>
 8007664:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007668:	e00d      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800766a:	f7fa f88f 	bl	800178c <HAL_GetTick>
 800766e:	4602      	mov	r2, r0
 8007670:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007674:	1ad2      	subs	r2, r2, r3
 8007676:	f241 3388 	movw	r3, #5000	@ 0x1388
 800767a:	429a      	cmp	r2, r3
 800767c:	d903      	bls.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007684:	e005      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007686:	4b1c      	ldr	r3, [pc, #112]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800768a:	f003 0302 	and.w	r3, r3, #2
 800768e:	2b00      	cmp	r3, #0
 8007690:	d0eb      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007692:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007696:	2b00      	cmp	r3, #0
 8007698:	d129      	bne.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800769a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800769e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80076a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076aa:	d10e      	bne.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80076ac:	4b12      	ldr	r3, [pc, #72]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80076b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80076bc:	091a      	lsrs	r2, r3, #4
 80076be:	4b10      	ldr	r3, [pc, #64]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80076c0:	4013      	ands	r3, r2
 80076c2:	4a0d      	ldr	r2, [pc, #52]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076c4:	430b      	orrs	r3, r1
 80076c6:	6113      	str	r3, [r2, #16]
 80076c8:	e005      	b.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80076ca:	4b0b      	ldr	r3, [pc, #44]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	4a0a      	ldr	r2, [pc, #40]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80076d4:	6113      	str	r3, [r2, #16]
 80076d6:	4b08      	ldr	r3, [pc, #32]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076d8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80076da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80076e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076e6:	4a04      	ldr	r2, [pc, #16]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076e8:	430b      	orrs	r3, r1
 80076ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80076ec:	e00e      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80076f6:	e009      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x924>
 80076f8:	58024400 	.word	0x58024400
 80076fc:	58024800 	.word	0x58024800
 8007700:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007704:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007708:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800770c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007714:	f002 0301 	and.w	r3, r2, #1
 8007718:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800771c:	2300      	movs	r3, #0
 800771e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007722:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007726:	460b      	mov	r3, r1
 8007728:	4313      	orrs	r3, r2
 800772a:	f000 8089 	beq.w	8007840 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800772e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007732:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007734:	2b28      	cmp	r3, #40	@ 0x28
 8007736:	d86b      	bhi.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007738:	a201      	add	r2, pc, #4	@ (adr r2, 8007740 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800773a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773e:	bf00      	nop
 8007740:	08007819 	.word	0x08007819
 8007744:	08007811 	.word	0x08007811
 8007748:	08007811 	.word	0x08007811
 800774c:	08007811 	.word	0x08007811
 8007750:	08007811 	.word	0x08007811
 8007754:	08007811 	.word	0x08007811
 8007758:	08007811 	.word	0x08007811
 800775c:	08007811 	.word	0x08007811
 8007760:	080077e5 	.word	0x080077e5
 8007764:	08007811 	.word	0x08007811
 8007768:	08007811 	.word	0x08007811
 800776c:	08007811 	.word	0x08007811
 8007770:	08007811 	.word	0x08007811
 8007774:	08007811 	.word	0x08007811
 8007778:	08007811 	.word	0x08007811
 800777c:	08007811 	.word	0x08007811
 8007780:	080077fb 	.word	0x080077fb
 8007784:	08007811 	.word	0x08007811
 8007788:	08007811 	.word	0x08007811
 800778c:	08007811 	.word	0x08007811
 8007790:	08007811 	.word	0x08007811
 8007794:	08007811 	.word	0x08007811
 8007798:	08007811 	.word	0x08007811
 800779c:	08007811 	.word	0x08007811
 80077a0:	08007819 	.word	0x08007819
 80077a4:	08007811 	.word	0x08007811
 80077a8:	08007811 	.word	0x08007811
 80077ac:	08007811 	.word	0x08007811
 80077b0:	08007811 	.word	0x08007811
 80077b4:	08007811 	.word	0x08007811
 80077b8:	08007811 	.word	0x08007811
 80077bc:	08007811 	.word	0x08007811
 80077c0:	08007819 	.word	0x08007819
 80077c4:	08007811 	.word	0x08007811
 80077c8:	08007811 	.word	0x08007811
 80077cc:	08007811 	.word	0x08007811
 80077d0:	08007811 	.word	0x08007811
 80077d4:	08007811 	.word	0x08007811
 80077d8:	08007811 	.word	0x08007811
 80077dc:	08007811 	.word	0x08007811
 80077e0:	08007819 	.word	0x08007819
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e8:	3308      	adds	r3, #8
 80077ea:	2101      	movs	r1, #1
 80077ec:	4618      	mov	r0, r3
 80077ee:	f001 fe95 	bl	800951c <RCCEx_PLL2_Config>
 80077f2:	4603      	mov	r3, r0
 80077f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80077f8:	e00f      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077fe:	3328      	adds	r3, #40	@ 0x28
 8007800:	2101      	movs	r1, #1
 8007802:	4618      	mov	r0, r3
 8007804:	f001 ff3c 	bl	8009680 <RCCEx_PLL3_Config>
 8007808:	4603      	mov	r3, r0
 800780a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800780e:	e004      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007816:	e000      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800781a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10a      	bne.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007822:	4bbf      	ldr	r3, [pc, #764]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007826:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800782a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800782e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007830:	4abb      	ldr	r2, [pc, #748]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007832:	430b      	orrs	r3, r1
 8007834:	6553      	str	r3, [r2, #84]	@ 0x54
 8007836:	e003      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007838:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800783c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007848:	f002 0302 	and.w	r3, r2, #2
 800784c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007850:	2300      	movs	r3, #0
 8007852:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007856:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800785a:	460b      	mov	r3, r1
 800785c:	4313      	orrs	r3, r2
 800785e:	d041      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007864:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007866:	2b05      	cmp	r3, #5
 8007868:	d824      	bhi.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800786a:	a201      	add	r2, pc, #4	@ (adr r2, 8007870 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800786c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007870:	080078bd 	.word	0x080078bd
 8007874:	08007889 	.word	0x08007889
 8007878:	0800789f 	.word	0x0800789f
 800787c:	080078bd 	.word	0x080078bd
 8007880:	080078bd 	.word	0x080078bd
 8007884:	080078bd 	.word	0x080078bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800788c:	3308      	adds	r3, #8
 800788e:	2101      	movs	r1, #1
 8007890:	4618      	mov	r0, r3
 8007892:	f001 fe43 	bl	800951c <RCCEx_PLL2_Config>
 8007896:	4603      	mov	r3, r0
 8007898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800789c:	e00f      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800789e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a2:	3328      	adds	r3, #40	@ 0x28
 80078a4:	2101      	movs	r1, #1
 80078a6:	4618      	mov	r0, r3
 80078a8:	f001 feea 	bl	8009680 <RCCEx_PLL3_Config>
 80078ac:	4603      	mov	r3, r0
 80078ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80078b2:	e004      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078ba:	e000      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80078bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10a      	bne.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80078c6:	4b96      	ldr	r3, [pc, #600]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ca:	f023 0107 	bic.w	r1, r3, #7
 80078ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078d4:	4a92      	ldr	r2, [pc, #584]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078d6:	430b      	orrs	r3, r1
 80078d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80078da:	e003      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ec:	f002 0304 	and.w	r3, r2, #4
 80078f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80078f4:	2300      	movs	r3, #0
 80078f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80078fa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80078fe:	460b      	mov	r3, r1
 8007900:	4313      	orrs	r3, r2
 8007902:	d044      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007908:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800790c:	2b05      	cmp	r3, #5
 800790e:	d825      	bhi.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007910:	a201      	add	r2, pc, #4	@ (adr r2, 8007918 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007916:	bf00      	nop
 8007918:	08007965 	.word	0x08007965
 800791c:	08007931 	.word	0x08007931
 8007920:	08007947 	.word	0x08007947
 8007924:	08007965 	.word	0x08007965
 8007928:	08007965 	.word	0x08007965
 800792c:	08007965 	.word	0x08007965
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007934:	3308      	adds	r3, #8
 8007936:	2101      	movs	r1, #1
 8007938:	4618      	mov	r0, r3
 800793a:	f001 fdef 	bl	800951c <RCCEx_PLL2_Config>
 800793e:	4603      	mov	r3, r0
 8007940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007944:	e00f      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800794a:	3328      	adds	r3, #40	@ 0x28
 800794c:	2101      	movs	r1, #1
 800794e:	4618      	mov	r0, r3
 8007950:	f001 fe96 	bl	8009680 <RCCEx_PLL3_Config>
 8007954:	4603      	mov	r3, r0
 8007956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800795a:	e004      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007962:	e000      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10b      	bne.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800796e:	4b6c      	ldr	r3, [pc, #432]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007972:	f023 0107 	bic.w	r1, r3, #7
 8007976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800797a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800797e:	4a68      	ldr	r2, [pc, #416]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007980:	430b      	orrs	r3, r1
 8007982:	6593      	str	r3, [r2, #88]	@ 0x58
 8007984:	e003      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800798a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800798e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007996:	f002 0320 	and.w	r3, r2, #32
 800799a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800799e:	2300      	movs	r3, #0
 80079a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80079a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80079a8:	460b      	mov	r3, r1
 80079aa:	4313      	orrs	r3, r2
 80079ac:	d055      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80079ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079ba:	d033      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80079bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079c0:	d82c      	bhi.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079c6:	d02f      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80079c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079cc:	d826      	bhi.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079d2:	d02b      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80079d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079d8:	d820      	bhi.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079de:	d012      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80079e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079e4:	d81a      	bhi.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d022      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80079ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079ee:	d115      	bne.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f4:	3308      	adds	r3, #8
 80079f6:	2100      	movs	r1, #0
 80079f8:	4618      	mov	r0, r3
 80079fa:	f001 fd8f 	bl	800951c <RCCEx_PLL2_Config>
 80079fe:	4603      	mov	r3, r0
 8007a00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a04:	e015      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a0a:	3328      	adds	r3, #40	@ 0x28
 8007a0c:	2102      	movs	r1, #2
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f001 fe36 	bl	8009680 <RCCEx_PLL3_Config>
 8007a14:	4603      	mov	r3, r0
 8007a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a1a:	e00a      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a22:	e006      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a24:	bf00      	nop
 8007a26:	e004      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a28:	bf00      	nop
 8007a2a:	e002      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a2c:	bf00      	nop
 8007a2e:	e000      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10b      	bne.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a3a:	4b39      	ldr	r3, [pc, #228]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a3e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a4a:	4a35      	ldr	r2, [pc, #212]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a4c:	430b      	orrs	r3, r1
 8007a4e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a50:	e003      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a62:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007a66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007a70:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007a74:	460b      	mov	r3, r1
 8007a76:	4313      	orrs	r3, r2
 8007a78:	d058      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a82:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007a86:	d033      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007a88:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007a8c:	d82c      	bhi.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a92:	d02f      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007a94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a98:	d826      	bhi.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a9e:	d02b      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007aa0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007aa4:	d820      	bhi.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007aa6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007aaa:	d012      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007aac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ab0:	d81a      	bhi.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d022      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aba:	d115      	bne.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac0:	3308      	adds	r3, #8
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f001 fd29 	bl	800951c <RCCEx_PLL2_Config>
 8007aca:	4603      	mov	r3, r0
 8007acc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ad0:	e015      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad6:	3328      	adds	r3, #40	@ 0x28
 8007ad8:	2102      	movs	r1, #2
 8007ada:	4618      	mov	r0, r3
 8007adc:	f001 fdd0 	bl	8009680 <RCCEx_PLL3_Config>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ae6:	e00a      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007aee:	e006      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007af0:	bf00      	nop
 8007af2:	e004      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007af4:	bf00      	nop
 8007af6:	e002      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007af8:	bf00      	nop
 8007afa:	e000      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007afe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d10e      	bne.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b06:	4b06      	ldr	r3, [pc, #24]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b0a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b16:	4a02      	ldr	r2, [pc, #8]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b18:	430b      	orrs	r3, r1
 8007b1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b1c:	e006      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007b1e:	bf00      	nop
 8007b20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b34:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007b38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b42:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007b46:	460b      	mov	r3, r1
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	d055      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b54:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007b58:	d033      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007b5a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007b5e:	d82c      	bhi.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b64:	d02f      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007b66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b6a:	d826      	bhi.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b6c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007b70:	d02b      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007b72:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007b76:	d820      	bhi.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b7c:	d012      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007b7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b82:	d81a      	bhi.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d022      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007b88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b8c:	d115      	bne.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b92:	3308      	adds	r3, #8
 8007b94:	2100      	movs	r1, #0
 8007b96:	4618      	mov	r0, r3
 8007b98:	f001 fcc0 	bl	800951c <RCCEx_PLL2_Config>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007ba2:	e015      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba8:	3328      	adds	r3, #40	@ 0x28
 8007baa:	2102      	movs	r1, #2
 8007bac:	4618      	mov	r0, r3
 8007bae:	f001 fd67 	bl	8009680 <RCCEx_PLL3_Config>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007bb8:	e00a      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bc0:	e006      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bc2:	bf00      	nop
 8007bc4:	e004      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bc6:	bf00      	nop
 8007bc8:	e002      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bca:	bf00      	nop
 8007bcc:	e000      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10b      	bne.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007bd8:	4ba1      	ldr	r3, [pc, #644]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bdc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007be8:	4a9d      	ldr	r2, [pc, #628]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bea:	430b      	orrs	r3, r1
 8007bec:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bee:	e003      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	f002 0308 	and.w	r3, r2, #8
 8007c04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c08:	2300      	movs	r3, #0
 8007c0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007c0e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007c12:	460b      	mov	r3, r1
 8007c14:	4313      	orrs	r3, r2
 8007c16:	d01e      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c24:	d10c      	bne.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c2a:	3328      	adds	r3, #40	@ 0x28
 8007c2c:	2102      	movs	r1, #2
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f001 fd26 	bl	8009680 <RCCEx_PLL3_Config>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d002      	beq.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007c40:	4b87      	ldr	r3, [pc, #540]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c44:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c50:	4a83      	ldr	r2, [pc, #524]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c52:	430b      	orrs	r3, r1
 8007c54:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5e:	f002 0310 	and.w	r3, r2, #16
 8007c62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c66:	2300      	movs	r3, #0
 8007c68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007c6c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007c70:	460b      	mov	r3, r1
 8007c72:	4313      	orrs	r3, r2
 8007c74:	d01e      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c82:	d10c      	bne.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c88:	3328      	adds	r3, #40	@ 0x28
 8007c8a:	2102      	movs	r1, #2
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f001 fcf7 	bl	8009680 <RCCEx_PLL3_Config>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c9e:	4b70      	ldr	r3, [pc, #448]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ca2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007caa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007cae:	4a6c      	ldr	r2, [pc, #432]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cb0:	430b      	orrs	r3, r1
 8007cb2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007cc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007cca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007cce:	460b      	mov	r3, r1
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	d03e      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007cdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ce0:	d022      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007ce2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ce6:	d81b      	bhi.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d003      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cf0:	d00b      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007cf2:	e015      	b.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf8:	3308      	adds	r3, #8
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f001 fc0d 	bl	800951c <RCCEx_PLL2_Config>
 8007d02:	4603      	mov	r3, r0
 8007d04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d08:	e00f      	b.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d0e:	3328      	adds	r3, #40	@ 0x28
 8007d10:	2102      	movs	r1, #2
 8007d12:	4618      	mov	r0, r3
 8007d14:	f001 fcb4 	bl	8009680 <RCCEx_PLL3_Config>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d1e:	e004      	b.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d26:	e000      	b.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10b      	bne.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d32:	4b4b      	ldr	r3, [pc, #300]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d36:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d42:	4a47      	ldr	r2, [pc, #284]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d44:	430b      	orrs	r3, r1
 8007d46:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d48:	e003      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007d5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007d60:	2300      	movs	r3, #0
 8007d62:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d64:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007d68:	460b      	mov	r3, r1
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	d03b      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d76:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d7a:	d01f      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007d7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d80:	d818      	bhi.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007d82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d86:	d003      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007d88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d8c:	d007      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007d8e:	e011      	b.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d90:	4b33      	ldr	r3, [pc, #204]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d94:	4a32      	ldr	r2, [pc, #200]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007d9c:	e00f      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da2:	3328      	adds	r3, #40	@ 0x28
 8007da4:	2101      	movs	r1, #1
 8007da6:	4618      	mov	r0, r3
 8007da8:	f001 fc6a 	bl	8009680 <RCCEx_PLL3_Config>
 8007dac:	4603      	mov	r3, r0
 8007dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007db2:	e004      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dba:	e000      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10b      	bne.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007dc6:	4b26      	ldr	r3, [pc, #152]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dd6:	4a22      	ldr	r2, [pc, #136]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dd8:	430b      	orrs	r3, r1
 8007dda:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ddc:	e003      	b.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007de2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dee:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007df2:	673b      	str	r3, [r7, #112]	@ 0x70
 8007df4:	2300      	movs	r3, #0
 8007df6:	677b      	str	r3, [r7, #116]	@ 0x74
 8007df8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	d034      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d003      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e10:	d007      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007e12:	e011      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e14:	4b12      	ldr	r3, [pc, #72]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e18:	4a11      	ldr	r2, [pc, #68]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e20:	e00e      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e26:	3308      	adds	r3, #8
 8007e28:	2102      	movs	r1, #2
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f001 fb76 	bl	800951c <RCCEx_PLL2_Config>
 8007e30:	4603      	mov	r3, r0
 8007e32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e36:	e003      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10d      	bne.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e48:	4b05      	ldr	r3, [pc, #20]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e4c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e56:	4a02      	ldr	r2, [pc, #8]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e58:	430b      	orrs	r3, r1
 8007e5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007e5c:	e006      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007e5e:	bf00      	nop
 8007e60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e74:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007e78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e7e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007e82:	460b      	mov	r3, r1
 8007e84:	4313      	orrs	r3, r2
 8007e86:	d00c      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e8c:	3328      	adds	r3, #40	@ 0x28
 8007e8e:	2102      	movs	r1, #2
 8007e90:	4618      	mov	r0, r3
 8007e92:	f001 fbf5 	bl	8009680 <RCCEx_PLL3_Config>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d002      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eaa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007eae:	663b      	str	r3, [r7, #96]	@ 0x60
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	667b      	str	r3, [r7, #100]	@ 0x64
 8007eb4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007eb8:	460b      	mov	r3, r1
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	d038      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ec6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007eca:	d018      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007ecc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ed0:	d811      	bhi.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007ed2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ed6:	d014      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007ed8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007edc:	d80b      	bhi.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d011      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007ee2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ee6:	d106      	bne.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ee8:	4bc3      	ldr	r3, [pc, #780]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eec:	4ac2      	ldr	r2, [pc, #776]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ef2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007ef4:	e008      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007efc:	e004      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007efe:	bf00      	nop
 8007f00:	e002      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007f02:	bf00      	nop
 8007f04:	e000      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10b      	bne.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f10:	4bb9      	ldr	r3, [pc, #740]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f14:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f20:	4ab5      	ldr	r2, [pc, #724]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f22:	430b      	orrs	r3, r1
 8007f24:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f26:	e003      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007f3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f3e:	2300      	movs	r3, #0
 8007f40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f42:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007f46:	460b      	mov	r3, r1
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	d009      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f4c:	4baa      	ldr	r3, [pc, #680]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f50:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f5a:	4aa7      	ldr	r2, [pc, #668]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f5c:	430b      	orrs	r3, r1
 8007f5e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f68:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007f6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f6e:	2300      	movs	r3, #0
 8007f70:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f72:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007f76:	460b      	mov	r3, r1
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	d00a      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007f7c:	4b9e      	ldr	r3, [pc, #632]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f88:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007f8c:	4a9a      	ldr	r2, [pc, #616]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f8e:	430b      	orrs	r3, r1
 8007f90:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fa4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007fa8:	460b      	mov	r3, r1
 8007faa:	4313      	orrs	r3, r2
 8007fac:	d009      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007fae:	4b92      	ldr	r3, [pc, #584]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fb2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fbc:	4a8e      	ldr	r2, [pc, #568]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fbe:	430b      	orrs	r3, r1
 8007fc0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fca:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007fce:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fd4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007fd8:	460b      	mov	r3, r1
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	d00e      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007fde:	4b86      	ldr	r3, [pc, #536]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	4a85      	ldr	r2, [pc, #532]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fe4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007fe8:	6113      	str	r3, [r2, #16]
 8007fea:	4b83      	ldr	r3, [pc, #524]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fec:	6919      	ldr	r1, [r3, #16]
 8007fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ff2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007ff6:	4a80      	ldr	r2, [pc, #512]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ff8:	430b      	orrs	r3, r1
 8007ffa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008004:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008008:	63bb      	str	r3, [r7, #56]	@ 0x38
 800800a:	2300      	movs	r3, #0
 800800c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800800e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008012:	460b      	mov	r3, r1
 8008014:	4313      	orrs	r3, r2
 8008016:	d009      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008018:	4b77      	ldr	r3, [pc, #476]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800801a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800801c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008026:	4a74      	ldr	r2, [pc, #464]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008028:	430b      	orrs	r3, r1
 800802a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800802c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008034:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008038:	633b      	str	r3, [r7, #48]	@ 0x30
 800803a:	2300      	movs	r3, #0
 800803c:	637b      	str	r3, [r7, #52]	@ 0x34
 800803e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008042:	460b      	mov	r3, r1
 8008044:	4313      	orrs	r3, r2
 8008046:	d00a      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008048:	4b6b      	ldr	r3, [pc, #428]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800804a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800804c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008054:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008058:	4a67      	ldr	r2, [pc, #412]	@ (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800805a:	430b      	orrs	r3, r1
 800805c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800805e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008066:	2100      	movs	r1, #0
 8008068:	62b9      	str	r1, [r7, #40]	@ 0x28
 800806a:	f003 0301 	and.w	r3, r3, #1
 800806e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008070:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008074:	460b      	mov	r3, r1
 8008076:	4313      	orrs	r3, r2
 8008078:	d011      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800807a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800807e:	3308      	adds	r3, #8
 8008080:	2100      	movs	r1, #0
 8008082:	4618      	mov	r0, r3
 8008084:	f001 fa4a 	bl	800951c <RCCEx_PLL2_Config>
 8008088:	4603      	mov	r3, r0
 800808a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800808e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008092:	2b00      	cmp	r3, #0
 8008094:	d003      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800809a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800809e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a6:	2100      	movs	r1, #0
 80080a8:	6239      	str	r1, [r7, #32]
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80080b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80080b4:	460b      	mov	r3, r1
 80080b6:	4313      	orrs	r3, r2
 80080b8:	d011      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080be:	3308      	adds	r3, #8
 80080c0:	2101      	movs	r1, #1
 80080c2:	4618      	mov	r0, r3
 80080c4:	f001 fa2a 	bl	800951c <RCCEx_PLL2_Config>
 80080c8:	4603      	mov	r3, r0
 80080ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80080ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d003      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80080de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e6:	2100      	movs	r1, #0
 80080e8:	61b9      	str	r1, [r7, #24]
 80080ea:	f003 0304 	and.w	r3, r3, #4
 80080ee:	61fb      	str	r3, [r7, #28]
 80080f0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80080f4:	460b      	mov	r3, r1
 80080f6:	4313      	orrs	r3, r2
 80080f8:	d011      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080fe:	3308      	adds	r3, #8
 8008100:	2102      	movs	r1, #2
 8008102:	4618      	mov	r0, r3
 8008104:	f001 fa0a 	bl	800951c <RCCEx_PLL2_Config>
 8008108:	4603      	mov	r3, r0
 800810a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800810e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008112:	2b00      	cmp	r3, #0
 8008114:	d003      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800811a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800811e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008126:	2100      	movs	r1, #0
 8008128:	6139      	str	r1, [r7, #16]
 800812a:	f003 0308 	and.w	r3, r3, #8
 800812e:	617b      	str	r3, [r7, #20]
 8008130:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008134:	460b      	mov	r3, r1
 8008136:	4313      	orrs	r3, r2
 8008138:	d011      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800813a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800813e:	3328      	adds	r3, #40	@ 0x28
 8008140:	2100      	movs	r1, #0
 8008142:	4618      	mov	r0, r3
 8008144:	f001 fa9c 	bl	8009680 <RCCEx_PLL3_Config>
 8008148:	4603      	mov	r3, r0
 800814a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800814e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008152:	2b00      	cmp	r3, #0
 8008154:	d003      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800815a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800815e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008166:	2100      	movs	r1, #0
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	f003 0310 	and.w	r3, r3, #16
 800816e:	60fb      	str	r3, [r7, #12]
 8008170:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008174:	460b      	mov	r3, r1
 8008176:	4313      	orrs	r3, r2
 8008178:	d011      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800817a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800817e:	3328      	adds	r3, #40	@ 0x28
 8008180:	2101      	movs	r1, #1
 8008182:	4618      	mov	r0, r3
 8008184:	f001 fa7c 	bl	8009680 <RCCEx_PLL3_Config>
 8008188:	4603      	mov	r3, r0
 800818a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800818e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008192:	2b00      	cmp	r3, #0
 8008194:	d003      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800819a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800819e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a6:	2100      	movs	r1, #0
 80081a8:	6039      	str	r1, [r7, #0]
 80081aa:	f003 0320 	and.w	r3, r3, #32
 80081ae:	607b      	str	r3, [r7, #4]
 80081b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80081b4:	460b      	mov	r3, r1
 80081b6:	4313      	orrs	r3, r2
 80081b8:	d011      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081be:	3328      	adds	r3, #40	@ 0x28
 80081c0:	2102      	movs	r1, #2
 80081c2:	4618      	mov	r0, r3
 80081c4:	f001 fa5c 	bl	8009680 <RCCEx_PLL3_Config>
 80081c8:	4603      	mov	r3, r0
 80081ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80081ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d003      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80081de:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d101      	bne.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	e000      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80081f2:	46bd      	mov	sp, r7
 80081f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081f8:	58024400 	.word	0x58024400

080081fc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b090      	sub	sp, #64	@ 0x40
 8008200:	af00      	add	r7, sp, #0
 8008202:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008206:	e9d7 2300 	ldrd	r2, r3, [r7]
 800820a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800820e:	430b      	orrs	r3, r1
 8008210:	f040 8094 	bne.w	800833c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008214:	4b9e      	ldr	r3, [pc, #632]	@ (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008218:	f003 0307 	and.w	r3, r3, #7
 800821c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800821e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008220:	2b04      	cmp	r3, #4
 8008222:	f200 8087 	bhi.w	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008226:	a201      	add	r2, pc, #4	@ (adr r2, 800822c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822c:	08008241 	.word	0x08008241
 8008230:	08008269 	.word	0x08008269
 8008234:	08008291 	.word	0x08008291
 8008238:	0800832d 	.word	0x0800832d
 800823c:	080082b9 	.word	0x080082b9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008240:	4b93      	ldr	r3, [pc, #588]	@ (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008248:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800824c:	d108      	bne.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800824e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008252:	4618      	mov	r0, r3
 8008254:	f001 f810 	bl	8009278 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800825a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800825c:	f000 bd45 	b.w	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008260:	2300      	movs	r3, #0
 8008262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008264:	f000 bd41 	b.w	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008268:	4b89      	ldr	r3, [pc, #548]	@ (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008270:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008274:	d108      	bne.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008276:	f107 0318 	add.w	r3, r7, #24
 800827a:	4618      	mov	r0, r3
 800827c:	f000 fd54 	bl	8008d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008284:	f000 bd31 	b.w	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008288:	2300      	movs	r3, #0
 800828a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800828c:	f000 bd2d 	b.w	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008290:	4b7f      	ldr	r3, [pc, #508]	@ (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008298:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800829c:	d108      	bne.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800829e:	f107 030c 	add.w	r3, r7, #12
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 fe94 	bl	8008fd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082ac:	f000 bd1d 	b.w	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082b0:	2300      	movs	r3, #0
 80082b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082b4:	f000 bd19 	b.w	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082b8:	4b75      	ldr	r3, [pc, #468]	@ (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80082c0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082c2:	4b73      	ldr	r3, [pc, #460]	@ (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 0304 	and.w	r3, r3, #4
 80082ca:	2b04      	cmp	r3, #4
 80082cc:	d10c      	bne.n	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80082ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d109      	bne.n	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082d4:	4b6e      	ldr	r3, [pc, #440]	@ (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	08db      	lsrs	r3, r3, #3
 80082da:	f003 0303 	and.w	r3, r3, #3
 80082de:	4a6d      	ldr	r2, [pc, #436]	@ (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80082e0:	fa22 f303 	lsr.w	r3, r2, r3
 80082e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082e6:	e01f      	b.n	8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082e8:	4b69      	ldr	r3, [pc, #420]	@ (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082f4:	d106      	bne.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80082f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082fc:	d102      	bne.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80082fe:	4b66      	ldr	r3, [pc, #408]	@ (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008300:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008302:	e011      	b.n	8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008304:	4b62      	ldr	r3, [pc, #392]	@ (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800830c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008310:	d106      	bne.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008314:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008318:	d102      	bne.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800831a:	4b60      	ldr	r3, [pc, #384]	@ (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800831c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800831e:	e003      	b.n	8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008320:	2300      	movs	r3, #0
 8008322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008324:	f000 bce1 	b.w	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008328:	f000 bcdf 	b.w	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800832c:	4b5c      	ldr	r3, [pc, #368]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800832e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008330:	f000 bcdb 	b.w	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008334:	2300      	movs	r3, #0
 8008336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008338:	f000 bcd7 	b.w	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800833c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008340:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008344:	430b      	orrs	r3, r1
 8008346:	f040 80ad 	bne.w	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800834a:	4b51      	ldr	r3, [pc, #324]	@ (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800834c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800834e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008352:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008356:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800835a:	d056      	beq.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800835c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008362:	f200 8090 	bhi.w	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008368:	2bc0      	cmp	r3, #192	@ 0xc0
 800836a:	f000 8088 	beq.w	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800836e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008370:	2bc0      	cmp	r3, #192	@ 0xc0
 8008372:	f200 8088 	bhi.w	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008378:	2b80      	cmp	r3, #128	@ 0x80
 800837a:	d032      	beq.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800837c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800837e:	2b80      	cmp	r3, #128	@ 0x80
 8008380:	f200 8081 	bhi.w	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008386:	2b00      	cmp	r3, #0
 8008388:	d003      	beq.n	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800838a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838c:	2b40      	cmp	r3, #64	@ 0x40
 800838e:	d014      	beq.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008390:	e079      	b.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008392:	4b3f      	ldr	r3, [pc, #252]	@ (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800839a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800839e:	d108      	bne.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083a4:	4618      	mov	r0, r3
 80083a6:	f000 ff67 	bl	8009278 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083ae:	f000 bc9c 	b.w	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083b2:	2300      	movs	r3, #0
 80083b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083b6:	f000 bc98 	b.w	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083ba:	4b35      	ldr	r3, [pc, #212]	@ (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083c6:	d108      	bne.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083c8:	f107 0318 	add.w	r3, r7, #24
 80083cc:	4618      	mov	r0, r3
 80083ce:	f000 fcab 	bl	8008d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083d6:	f000 bc88 	b.w	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083de:	f000 bc84 	b.w	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083e2:	4b2b      	ldr	r3, [pc, #172]	@ (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083ee:	d108      	bne.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083f0:	f107 030c 	add.w	r3, r7, #12
 80083f4:	4618      	mov	r0, r3
 80083f6:	f000 fdeb 	bl	8008fd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083fe:	f000 bc74 	b.w	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008402:	2300      	movs	r3, #0
 8008404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008406:	f000 bc70 	b.w	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800840a:	4b21      	ldr	r3, [pc, #132]	@ (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800840c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800840e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008412:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008414:	4b1e      	ldr	r3, [pc, #120]	@ (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 0304 	and.w	r3, r3, #4
 800841c:	2b04      	cmp	r3, #4
 800841e:	d10c      	bne.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008422:	2b00      	cmp	r3, #0
 8008424:	d109      	bne.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008426:	4b1a      	ldr	r3, [pc, #104]	@ (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	08db      	lsrs	r3, r3, #3
 800842c:	f003 0303 	and.w	r3, r3, #3
 8008430:	4a18      	ldr	r2, [pc, #96]	@ (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008432:	fa22 f303 	lsr.w	r3, r2, r3
 8008436:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008438:	e01f      	b.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800843a:	4b15      	ldr	r3, [pc, #84]	@ (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008446:	d106      	bne.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800844a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800844e:	d102      	bne.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008450:	4b11      	ldr	r3, [pc, #68]	@ (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008454:	e011      	b.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008456:	4b0e      	ldr	r3, [pc, #56]	@ (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800845e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008462:	d106      	bne.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008466:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800846a:	d102      	bne.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800846c:	4b0b      	ldr	r3, [pc, #44]	@ (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800846e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008470:	e003      	b.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008472:	2300      	movs	r3, #0
 8008474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008476:	f000 bc38 	b.w	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800847a:	f000 bc36 	b.w	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800847e:	4b08      	ldr	r3, [pc, #32]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008482:	f000 bc32 	b.w	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800848a:	f000 bc2e 	b.w	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800848e:	bf00      	nop
 8008490:	58024400 	.word	0x58024400
 8008494:	03d09000 	.word	0x03d09000
 8008498:	003d0900 	.word	0x003d0900
 800849c:	017d7840 	.word	0x017d7840
 80084a0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80084a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084a8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80084ac:	430b      	orrs	r3, r1
 80084ae:	f040 809c 	bne.w	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80084b2:	4b9e      	ldr	r3, [pc, #632]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084b6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80084ba:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80084bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80084c2:	d054      	beq.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80084c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80084ca:	f200 808b 	bhi.w	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80084ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80084d4:	f000 8083 	beq.w	80085de <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80084d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084da:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80084de:	f200 8081 	bhi.w	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80084e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084e8:	d02f      	beq.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80084ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084f0:	d878      	bhi.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80084f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d004      	beq.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80084f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084fe:	d012      	beq.n	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008500:	e070      	b.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008502:	4b8a      	ldr	r3, [pc, #552]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800850a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800850e:	d107      	bne.n	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008510:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008514:	4618      	mov	r0, r3
 8008516:	f000 feaf 	bl	8009278 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800851a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800851c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800851e:	e3e4      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008520:	2300      	movs	r3, #0
 8008522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008524:	e3e1      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008526:	4b81      	ldr	r3, [pc, #516]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800852e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008532:	d107      	bne.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008534:	f107 0318 	add.w	r3, r7, #24
 8008538:	4618      	mov	r0, r3
 800853a:	f000 fbf5 	bl	8008d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008542:	e3d2      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008544:	2300      	movs	r3, #0
 8008546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008548:	e3cf      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800854a:	4b78      	ldr	r3, [pc, #480]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008552:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008556:	d107      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008558:	f107 030c 	add.w	r3, r7, #12
 800855c:	4618      	mov	r0, r3
 800855e:	f000 fd37 	bl	8008fd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008566:	e3c0      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008568:	2300      	movs	r3, #0
 800856a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800856c:	e3bd      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800856e:	4b6f      	ldr	r3, [pc, #444]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008572:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008576:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008578:	4b6c      	ldr	r3, [pc, #432]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0304 	and.w	r3, r3, #4
 8008580:	2b04      	cmp	r3, #4
 8008582:	d10c      	bne.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008586:	2b00      	cmp	r3, #0
 8008588:	d109      	bne.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800858a:	4b68      	ldr	r3, [pc, #416]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	08db      	lsrs	r3, r3, #3
 8008590:	f003 0303 	and.w	r3, r3, #3
 8008594:	4a66      	ldr	r2, [pc, #408]	@ (8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008596:	fa22 f303 	lsr.w	r3, r2, r3
 800859a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800859c:	e01e      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800859e:	4b63      	ldr	r3, [pc, #396]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085aa:	d106      	bne.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80085ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085b2:	d102      	bne.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085b4:	4b5f      	ldr	r3, [pc, #380]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80085b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085b8:	e010      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085ba:	4b5c      	ldr	r3, [pc, #368]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085c6:	d106      	bne.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80085c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085ce:	d102      	bne.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085d0:	4b59      	ldr	r3, [pc, #356]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80085d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085d4:	e002      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085d6:	2300      	movs	r3, #0
 80085d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80085da:	e386      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085dc:	e385      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80085de:	4b57      	ldr	r3, [pc, #348]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80085e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085e2:	e382      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80085e4:	2300      	movs	r3, #0
 80085e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085e8:	e37f      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80085ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085ee:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80085f2:	430b      	orrs	r3, r1
 80085f4:	f040 80a7 	bne.w	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80085f8:	4b4c      	ldr	r3, [pc, #304]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085fc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008600:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008604:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008608:	d055      	beq.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800860a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008610:	f200 8096 	bhi.w	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008616:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800861a:	f000 8084 	beq.w	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800861e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008620:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008624:	f200 808c 	bhi.w	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800862e:	d030      	beq.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008632:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008636:	f200 8083 	bhi.w	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800863a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863c:	2b00      	cmp	r3, #0
 800863e:	d004      	beq.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008642:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008646:	d012      	beq.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008648:	e07a      	b.n	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800864a:	4b38      	ldr	r3, [pc, #224]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008652:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008656:	d107      	bne.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008658:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800865c:	4618      	mov	r0, r3
 800865e:	f000 fe0b 	bl	8009278 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008666:	e340      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008668:	2300      	movs	r3, #0
 800866a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800866c:	e33d      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800866e:	4b2f      	ldr	r3, [pc, #188]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008676:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800867a:	d107      	bne.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800867c:	f107 0318 	add.w	r3, r7, #24
 8008680:	4618      	mov	r0, r3
 8008682:	f000 fb51 	bl	8008d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800868a:	e32e      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800868c:	2300      	movs	r3, #0
 800868e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008690:	e32b      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008692:	4b26      	ldr	r3, [pc, #152]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800869a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800869e:	d107      	bne.n	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086a0:	f107 030c 	add.w	r3, r7, #12
 80086a4:	4618      	mov	r0, r3
 80086a6:	f000 fc93 	bl	8008fd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ae:	e31c      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086b0:	2300      	movs	r3, #0
 80086b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086b4:	e319      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086b6:	4b1d      	ldr	r3, [pc, #116]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80086be:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086c0:	4b1a      	ldr	r3, [pc, #104]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 0304 	and.w	r3, r3, #4
 80086c8:	2b04      	cmp	r3, #4
 80086ca:	d10c      	bne.n	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80086cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d109      	bne.n	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086d2:	4b16      	ldr	r3, [pc, #88]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	08db      	lsrs	r3, r3, #3
 80086d8:	f003 0303 	and.w	r3, r3, #3
 80086dc:	4a14      	ldr	r2, [pc, #80]	@ (8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80086de:	fa22 f303 	lsr.w	r3, r2, r3
 80086e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086e4:	e01e      	b.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086e6:	4b11      	ldr	r3, [pc, #68]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086f2:	d106      	bne.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80086f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086fa:	d102      	bne.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80086fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80086fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008700:	e010      	b.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008702:	4b0a      	ldr	r3, [pc, #40]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800870a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800870e:	d106      	bne.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008712:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008716:	d102      	bne.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008718:	4b07      	ldr	r3, [pc, #28]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800871a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800871c:	e002      	b.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800871e:	2300      	movs	r3, #0
 8008720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008722:	e2e2      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008724:	e2e1      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008726:	4b05      	ldr	r3, [pc, #20]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800872a:	e2de      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800872c:	58024400 	.word	0x58024400
 8008730:	03d09000 	.word	0x03d09000
 8008734:	003d0900 	.word	0x003d0900
 8008738:	017d7840 	.word	0x017d7840
 800873c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008740:	2300      	movs	r3, #0
 8008742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008744:	e2d1      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800874a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800874e:	430b      	orrs	r3, r1
 8008750:	f040 809c 	bne.w	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008754:	4b93      	ldr	r3, [pc, #588]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008758:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800875c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800875e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008760:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008764:	d054      	beq.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008768:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800876c:	f200 808b 	bhi.w	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008772:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008776:	f000 8083 	beq.w	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800877a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008780:	f200 8081 	bhi.w	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800878a:	d02f      	beq.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800878c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800878e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008792:	d878      	bhi.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008796:	2b00      	cmp	r3, #0
 8008798:	d004      	beq.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800879a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087a0:	d012      	beq.n	80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80087a2:	e070      	b.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087a4:	4b7f      	ldr	r3, [pc, #508]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087b0:	d107      	bne.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 fd5e 	bl	8009278 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087c0:	e293      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087c2:	2300      	movs	r3, #0
 80087c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087c6:	e290      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087c8:	4b76      	ldr	r3, [pc, #472]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087d4:	d107      	bne.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087d6:	f107 0318 	add.w	r3, r7, #24
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 faa4 	bl	8008d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087e4:	e281      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087e6:	2300      	movs	r3, #0
 80087e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087ea:	e27e      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087ec:	4b6d      	ldr	r3, [pc, #436]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087f8:	d107      	bne.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087fa:	f107 030c 	add.w	r3, r7, #12
 80087fe:	4618      	mov	r0, r3
 8008800:	f000 fbe6 	bl	8008fd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008808:	e26f      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800880a:	2300      	movs	r3, #0
 800880c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800880e:	e26c      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008810:	4b64      	ldr	r3, [pc, #400]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008814:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008818:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800881a:	4b62      	ldr	r3, [pc, #392]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0304 	and.w	r3, r3, #4
 8008822:	2b04      	cmp	r3, #4
 8008824:	d10c      	bne.n	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008828:	2b00      	cmp	r3, #0
 800882a:	d109      	bne.n	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800882c:	4b5d      	ldr	r3, [pc, #372]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	08db      	lsrs	r3, r3, #3
 8008832:	f003 0303 	and.w	r3, r3, #3
 8008836:	4a5c      	ldr	r2, [pc, #368]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008838:	fa22 f303 	lsr.w	r3, r2, r3
 800883c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800883e:	e01e      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008840:	4b58      	ldr	r3, [pc, #352]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008848:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800884c:	d106      	bne.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800884e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008850:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008854:	d102      	bne.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008856:	4b55      	ldr	r3, [pc, #340]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008858:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800885a:	e010      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800885c:	4b51      	ldr	r3, [pc, #324]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008864:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008868:	d106      	bne.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800886a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800886c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008870:	d102      	bne.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008872:	4b4f      	ldr	r3, [pc, #316]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008874:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008876:	e002      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008878:	2300      	movs	r3, #0
 800887a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800887c:	e235      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800887e:	e234      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008880:	4b4c      	ldr	r3, [pc, #304]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008884:	e231      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008886:	2300      	movs	r3, #0
 8008888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800888a:	e22e      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800888c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008890:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008894:	430b      	orrs	r3, r1
 8008896:	f040 808f 	bne.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800889a:	4b42      	ldr	r3, [pc, #264]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800889c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800889e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80088a2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80088a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80088aa:	d06b      	beq.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80088ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80088b2:	d874      	bhi.n	800899e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80088ba:	d056      	beq.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80088bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80088c2:	d86c      	bhi.n	800899e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80088ca:	d03b      	beq.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80088cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80088d2:	d864      	bhi.n	800899e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088da:	d021      	beq.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80088dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088e2:	d85c      	bhi.n	800899e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d004      	beq.n	80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80088ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088f0:	d004      	beq.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80088f2:	e054      	b.n	800899e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80088f4:	f7fe fa4c 	bl	8006d90 <HAL_RCC_GetPCLK1Freq>
 80088f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80088fa:	e1f6      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088fc:	4b29      	ldr	r3, [pc, #164]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008904:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008908:	d107      	bne.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800890a:	f107 0318 	add.w	r3, r7, #24
 800890e:	4618      	mov	r0, r3
 8008910:	f000 fa0a 	bl	8008d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008918:	e1e7      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800891a:	2300      	movs	r3, #0
 800891c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800891e:	e1e4      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008920:	4b20      	ldr	r3, [pc, #128]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008928:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800892c:	d107      	bne.n	800893e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800892e:	f107 030c 	add.w	r3, r7, #12
 8008932:	4618      	mov	r0, r3
 8008934:	f000 fb4c 	bl	8008fd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800893c:	e1d5      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800893e:	2300      	movs	r3, #0
 8008940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008942:	e1d2      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008944:	4b17      	ldr	r3, [pc, #92]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 0304 	and.w	r3, r3, #4
 800894c:	2b04      	cmp	r3, #4
 800894e:	d109      	bne.n	8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008950:	4b14      	ldr	r3, [pc, #80]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	08db      	lsrs	r3, r3, #3
 8008956:	f003 0303 	and.w	r3, r3, #3
 800895a:	4a13      	ldr	r2, [pc, #76]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800895c:	fa22 f303 	lsr.w	r3, r2, r3
 8008960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008962:	e1c2      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008964:	2300      	movs	r3, #0
 8008966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008968:	e1bf      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800896a:	4b0e      	ldr	r3, [pc, #56]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008976:	d102      	bne.n	800897e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008978:	4b0c      	ldr	r3, [pc, #48]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800897a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800897c:	e1b5      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800897e:	2300      	movs	r3, #0
 8008980:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008982:	e1b2      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008984:	4b07      	ldr	r3, [pc, #28]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800898c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008990:	d102      	bne.n	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008992:	4b07      	ldr	r3, [pc, #28]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008996:	e1a8      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008998:	2300      	movs	r3, #0
 800899a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800899c:	e1a5      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800899e:	2300      	movs	r3, #0
 80089a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089a2:	e1a2      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089a4:	58024400 	.word	0x58024400
 80089a8:	03d09000 	.word	0x03d09000
 80089ac:	003d0900 	.word	0x003d0900
 80089b0:	017d7840 	.word	0x017d7840
 80089b4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80089b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089bc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80089c0:	430b      	orrs	r3, r1
 80089c2:	d173      	bne.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80089c4:	4b9c      	ldr	r3, [pc, #624]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80089cc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80089ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089d4:	d02f      	beq.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80089d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089dc:	d863      	bhi.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80089de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d004      	beq.n	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80089e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089ea:	d012      	beq.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80089ec:	e05b      	b.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089ee:	4b92      	ldr	r3, [pc, #584]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089fa:	d107      	bne.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089fc:	f107 0318 	add.w	r3, r7, #24
 8008a00:	4618      	mov	r0, r3
 8008a02:	f000 f991 	bl	8008d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a0a:	e16e      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a10:	e16b      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a12:	4b89      	ldr	r3, [pc, #548]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a1e:	d107      	bne.n	8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a20:	f107 030c 	add.w	r3, r7, #12
 8008a24:	4618      	mov	r0, r3
 8008a26:	f000 fad3 	bl	8008fd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a2e:	e15c      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a30:	2300      	movs	r3, #0
 8008a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a34:	e159      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a36:	4b80      	ldr	r3, [pc, #512]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008a3e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a40:	4b7d      	ldr	r3, [pc, #500]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 0304 	and.w	r3, r3, #4
 8008a48:	2b04      	cmp	r3, #4
 8008a4a:	d10c      	bne.n	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d109      	bne.n	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a52:	4b79      	ldr	r3, [pc, #484]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	08db      	lsrs	r3, r3, #3
 8008a58:	f003 0303 	and.w	r3, r3, #3
 8008a5c:	4a77      	ldr	r2, [pc, #476]	@ (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a64:	e01e      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a66:	4b74      	ldr	r3, [pc, #464]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a72:	d106      	bne.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a7a:	d102      	bne.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008a7c:	4b70      	ldr	r3, [pc, #448]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a80:	e010      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a82:	4b6d      	ldr	r3, [pc, #436]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a8e:	d106      	bne.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a96:	d102      	bne.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008a98:	4b6a      	ldr	r3, [pc, #424]	@ (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a9c:	e002      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008aa2:	e122      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008aa4:	e121      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aaa:	e11e      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008aac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ab0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008ab4:	430b      	orrs	r3, r1
 8008ab6:	d133      	bne.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008ab8:	4b5f      	ldr	r3, [pc, #380]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008abc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ac0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d004      	beq.n	8008ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ace:	d012      	beq.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008ad0:	e023      	b.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ad2:	4b59      	ldr	r3, [pc, #356]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ada:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ade:	d107      	bne.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ae0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f000 fbc7 	bl	8009278 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aee:	e0fc      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008af0:	2300      	movs	r3, #0
 8008af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008af4:	e0f9      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008af6:	4b50      	ldr	r3, [pc, #320]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008afe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b02:	d107      	bne.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b04:	f107 0318 	add.w	r3, r7, #24
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f000 f90d 	bl	8008d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008b0e:	6a3b      	ldr	r3, [r7, #32]
 8008b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b12:	e0ea      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b14:	2300      	movs	r3, #0
 8008b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b18:	e0e7      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b1e:	e0e4      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008b20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b24:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008b28:	430b      	orrs	r3, r1
 8008b2a:	f040 808d 	bne.w	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008b2e:	4b42      	ldr	r3, [pc, #264]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b32:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008b36:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b3e:	d06b      	beq.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b46:	d874      	bhi.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b4e:	d056      	beq.n	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b56:	d86c      	bhi.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b5e:	d03b      	beq.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b66:	d864      	bhi.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b6e:	d021      	beq.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b76:	d85c      	bhi.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d004      	beq.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b84:	d004      	beq.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008b86:	e054      	b.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008b88:	f000 f8b8 	bl	8008cfc <HAL_RCCEx_GetD3PCLK1Freq>
 8008b8c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008b8e:	e0ac      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b90:	4b29      	ldr	r3, [pc, #164]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b9c:	d107      	bne.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b9e:	f107 0318 	add.w	r3, r7, #24
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 f8c0 	bl	8008d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bac:	e09d      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bb2:	e09a      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bb4:	4b20      	ldr	r3, [pc, #128]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bc0:	d107      	bne.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bc2:	f107 030c 	add.w	r3, r7, #12
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f000 fa02 	bl	8008fd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bd0:	e08b      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bd6:	e088      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008bd8:	4b17      	ldr	r3, [pc, #92]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f003 0304 	and.w	r3, r3, #4
 8008be0:	2b04      	cmp	r3, #4
 8008be2:	d109      	bne.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008be4:	4b14      	ldr	r3, [pc, #80]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	08db      	lsrs	r3, r3, #3
 8008bea:	f003 0303 	and.w	r3, r3, #3
 8008bee:	4a13      	ldr	r2, [pc, #76]	@ (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8008bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bf6:	e078      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bfc:	e075      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c0a:	d102      	bne.n	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c10:	e06b      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c12:	2300      	movs	r3, #0
 8008c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c16:	e068      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c18:	4b07      	ldr	r3, [pc, #28]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c24:	d102      	bne.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008c26:	4b07      	ldr	r3, [pc, #28]	@ (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c2a:	e05e      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c30:	e05b      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008c32:	2300      	movs	r3, #0
 8008c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c36:	e058      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c38:	58024400 	.word	0x58024400
 8008c3c:	03d09000 	.word	0x03d09000
 8008c40:	003d0900 	.word	0x003d0900
 8008c44:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008c48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c4c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008c50:	430b      	orrs	r3, r1
 8008c52:	d148      	bne.n	8008ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008c54:	4b27      	ldr	r3, [pc, #156]	@ (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c58:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008c5c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c64:	d02a      	beq.n	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c6c:	d838      	bhi.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d004      	beq.n	8008c7e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c7a:	d00d      	beq.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008c7c:	e030      	b.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c8a:	d102      	bne.n	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c90:	e02b      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c92:	2300      	movs	r3, #0
 8008c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c96:	e028      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c98:	4b16      	ldr	r3, [pc, #88]	@ (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ca0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ca4:	d107      	bne.n	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ca6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008caa:	4618      	mov	r0, r3
 8008cac:	f000 fae4 	bl	8009278 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cb4:	e019      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cba:	e016      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cc8:	d107      	bne.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cca:	f107 0318 	add.w	r3, r7, #24
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f000 f82a 	bl	8008d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cd8:	e007      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cde:	e004      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ce4:	e001      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3740      	adds	r7, #64	@ 0x40
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	58024400 	.word	0x58024400
 8008cf8:	017d7840 	.word	0x017d7840

08008cfc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008d00:	f7fe f816 	bl	8006d30 <HAL_RCC_GetHCLKFreq>
 8008d04:	4602      	mov	r2, r0
 8008d06:	4b06      	ldr	r3, [pc, #24]	@ (8008d20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008d08:	6a1b      	ldr	r3, [r3, #32]
 8008d0a:	091b      	lsrs	r3, r3, #4
 8008d0c:	f003 0307 	and.w	r3, r3, #7
 8008d10:	4904      	ldr	r1, [pc, #16]	@ (8008d24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008d12:	5ccb      	ldrb	r3, [r1, r3]
 8008d14:	f003 031f 	and.w	r3, r3, #31
 8008d18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	58024400 	.word	0x58024400
 8008d24:	0800ce94 	.word	0x0800ce94

08008d28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b089      	sub	sp, #36	@ 0x24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d30:	4ba1      	ldr	r3, [pc, #644]	@ (8008fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d34:	f003 0303 	and.w	r3, r3, #3
 8008d38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008d3a:	4b9f      	ldr	r3, [pc, #636]	@ (8008fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d3e:	0b1b      	lsrs	r3, r3, #12
 8008d40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008d46:	4b9c      	ldr	r3, [pc, #624]	@ (8008fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d4a:	091b      	lsrs	r3, r3, #4
 8008d4c:	f003 0301 	and.w	r3, r3, #1
 8008d50:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008d52:	4b99      	ldr	r3, [pc, #612]	@ (8008fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d56:	08db      	lsrs	r3, r3, #3
 8008d58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d5c:	693a      	ldr	r2, [r7, #16]
 8008d5e:	fb02 f303 	mul.w	r3, r2, r3
 8008d62:	ee07 3a90 	vmov	s15, r3
 8008d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f000 8111 	beq.w	8008f98 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	f000 8083 	beq.w	8008e84 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	f200 80a1 	bhi.w	8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d003      	beq.n	8008d94 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d056      	beq.n	8008e40 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008d92:	e099      	b.n	8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d94:	4b88      	ldr	r3, [pc, #544]	@ (8008fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 0320 	and.w	r3, r3, #32
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d02d      	beq.n	8008dfc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008da0:	4b85      	ldr	r3, [pc, #532]	@ (8008fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	08db      	lsrs	r3, r3, #3
 8008da6:	f003 0303 	and.w	r3, r3, #3
 8008daa:	4a84      	ldr	r2, [pc, #528]	@ (8008fbc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008dac:	fa22 f303 	lsr.w	r3, r2, r3
 8008db0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	ee07 3a90 	vmov	s15, r3
 8008db8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	ee07 3a90 	vmov	s15, r3
 8008dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dca:	4b7b      	ldr	r3, [pc, #492]	@ (8008fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dd2:	ee07 3a90 	vmov	s15, r3
 8008dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dde:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008df6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008dfa:	e087      	b.n	8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	ee07 3a90 	vmov	s15, r3
 8008e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e06:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e0e:	4b6a      	ldr	r3, [pc, #424]	@ (8008fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e16:	ee07 3a90 	vmov	s15, r3
 8008e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e22:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e3e:	e065      	b.n	8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	ee07 3a90 	vmov	s15, r3
 8008e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e4a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e52:	4b59      	ldr	r3, [pc, #356]	@ (8008fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e5a:	ee07 3a90 	vmov	s15, r3
 8008e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e66:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e82:	e043      	b.n	8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	ee07 3a90 	vmov	s15, r3
 8008e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e8e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e96:	4b48      	ldr	r3, [pc, #288]	@ (8008fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e9e:	ee07 3a90 	vmov	s15, r3
 8008ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eaa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ec2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ec6:	e021      	b.n	8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	ee07 3a90 	vmov	s15, r3
 8008ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ed2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eda:	4b37      	ldr	r3, [pc, #220]	@ (8008fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ee2:	ee07 3a90 	vmov	s15, r3
 8008ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008efa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f0a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008f0c:	4b2a      	ldr	r3, [pc, #168]	@ (8008fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f10:	0a5b      	lsrs	r3, r3, #9
 8008f12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f16:	ee07 3a90 	vmov	s15, r3
 8008f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f26:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f32:	ee17 2a90 	vmov	r2, s15
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8008fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f3e:	0c1b      	lsrs	r3, r3, #16
 8008f40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f44:	ee07 3a90 	vmov	s15, r3
 8008f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f54:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f60:	ee17 2a90 	vmov	r2, s15
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008f68:	4b13      	ldr	r3, [pc, #76]	@ (8008fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f6c:	0e1b      	lsrs	r3, r3, #24
 8008f6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f72:	ee07 3a90 	vmov	s15, r3
 8008f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f82:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f8e:	ee17 2a90 	vmov	r2, s15
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008f96:	e008      	b.n	8008faa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	609a      	str	r2, [r3, #8]
}
 8008faa:	bf00      	nop
 8008fac:	3724      	adds	r7, #36	@ 0x24
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	58024400 	.word	0x58024400
 8008fbc:	03d09000 	.word	0x03d09000
 8008fc0:	46000000 	.word	0x46000000
 8008fc4:	4c742400 	.word	0x4c742400
 8008fc8:	4a742400 	.word	0x4a742400
 8008fcc:	4bbebc20 	.word	0x4bbebc20

08008fd0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b089      	sub	sp, #36	@ 0x24
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fd8:	4ba1      	ldr	r3, [pc, #644]	@ (8009260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fdc:	f003 0303 	and.w	r3, r3, #3
 8008fe0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008fe2:	4b9f      	ldr	r3, [pc, #636]	@ (8009260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe6:	0d1b      	lsrs	r3, r3, #20
 8008fe8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008fec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008fee:	4b9c      	ldr	r3, [pc, #624]	@ (8009260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ff2:	0a1b      	lsrs	r3, r3, #8
 8008ff4:	f003 0301 	and.w	r3, r3, #1
 8008ff8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008ffa:	4b99      	ldr	r3, [pc, #612]	@ (8009260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ffe:	08db      	lsrs	r3, r3, #3
 8009000:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009004:	693a      	ldr	r2, [r7, #16]
 8009006:	fb02 f303 	mul.w	r3, r2, r3
 800900a:	ee07 3a90 	vmov	s15, r3
 800900e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009012:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	2b00      	cmp	r3, #0
 800901a:	f000 8111 	beq.w	8009240 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	2b02      	cmp	r3, #2
 8009022:	f000 8083 	beq.w	800912c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	2b02      	cmp	r3, #2
 800902a:	f200 80a1 	bhi.w	8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d003      	beq.n	800903c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d056      	beq.n	80090e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800903a:	e099      	b.n	8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800903c:	4b88      	ldr	r3, [pc, #544]	@ (8009260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 0320 	and.w	r3, r3, #32
 8009044:	2b00      	cmp	r3, #0
 8009046:	d02d      	beq.n	80090a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009048:	4b85      	ldr	r3, [pc, #532]	@ (8009260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	08db      	lsrs	r3, r3, #3
 800904e:	f003 0303 	and.w	r3, r3, #3
 8009052:	4a84      	ldr	r2, [pc, #528]	@ (8009264 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009054:	fa22 f303 	lsr.w	r3, r2, r3
 8009058:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	ee07 3a90 	vmov	s15, r3
 8009060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	ee07 3a90 	vmov	s15, r3
 800906a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800906e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009072:	4b7b      	ldr	r3, [pc, #492]	@ (8009260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800907a:	ee07 3a90 	vmov	s15, r3
 800907e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009082:	ed97 6a03 	vldr	s12, [r7, #12]
 8009086:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800908a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800908e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800909a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800909e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80090a2:	e087      	b.n	80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	ee07 3a90 	vmov	s15, r3
 80090aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800926c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80090b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090b6:	4b6a      	ldr	r3, [pc, #424]	@ (8009260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090be:	ee07 3a90 	vmov	s15, r3
 80090c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80090ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090e6:	e065      	b.n	80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	ee07 3a90 	vmov	s15, r3
 80090ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80090f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090fa:	4b59      	ldr	r3, [pc, #356]	@ (8009260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009102:	ee07 3a90 	vmov	s15, r3
 8009106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800910a:	ed97 6a03 	vldr	s12, [r7, #12]
 800910e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800911a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800911e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800912a:	e043      	b.n	80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	ee07 3a90 	vmov	s15, r3
 8009132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009136:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009274 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800913a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800913e:	4b48      	ldr	r3, [pc, #288]	@ (8009260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009146:	ee07 3a90 	vmov	s15, r3
 800914a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800914e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009152:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800915a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800915e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800916a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800916e:	e021      	b.n	80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	ee07 3a90 	vmov	s15, r3
 8009176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800917a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800917e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009182:	4b37      	ldr	r3, [pc, #220]	@ (8009260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800918a:	ee07 3a90 	vmov	s15, r3
 800918e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009192:	ed97 6a03 	vldr	s12, [r7, #12]
 8009196:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800919a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800919e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80091b4:	4b2a      	ldr	r3, [pc, #168]	@ (8009260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091b8:	0a5b      	lsrs	r3, r3, #9
 80091ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091be:	ee07 3a90 	vmov	s15, r3
 80091c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80091d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091da:	ee17 2a90 	vmov	r2, s15
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80091e2:	4b1f      	ldr	r3, [pc, #124]	@ (8009260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091e6:	0c1b      	lsrs	r3, r3, #16
 80091e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091ec:	ee07 3a90 	vmov	s15, r3
 80091f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009208:	ee17 2a90 	vmov	r2, s15
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009210:	4b13      	ldr	r3, [pc, #76]	@ (8009260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009214:	0e1b      	lsrs	r3, r3, #24
 8009216:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800921a:	ee07 3a90 	vmov	s15, r3
 800921e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009222:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009226:	ee37 7a87 	vadd.f32	s14, s15, s14
 800922a:	edd7 6a07 	vldr	s13, [r7, #28]
 800922e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009236:	ee17 2a90 	vmov	r2, s15
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800923e:	e008      	b.n	8009252 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	609a      	str	r2, [r3, #8]
}
 8009252:	bf00      	nop
 8009254:	3724      	adds	r7, #36	@ 0x24
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	58024400 	.word	0x58024400
 8009264:	03d09000 	.word	0x03d09000
 8009268:	46000000 	.word	0x46000000
 800926c:	4c742400 	.word	0x4c742400
 8009270:	4a742400 	.word	0x4a742400
 8009274:	4bbebc20 	.word	0x4bbebc20

08009278 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009278:	b480      	push	{r7}
 800927a:	b089      	sub	sp, #36	@ 0x24
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009280:	4ba0      	ldr	r3, [pc, #640]	@ (8009504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009284:	f003 0303 	and.w	r3, r3, #3
 8009288:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800928a:	4b9e      	ldr	r3, [pc, #632]	@ (8009504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800928c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800928e:	091b      	lsrs	r3, r3, #4
 8009290:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009294:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009296:	4b9b      	ldr	r3, [pc, #620]	@ (8009504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800929a:	f003 0301 	and.w	r3, r3, #1
 800929e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80092a0:	4b98      	ldr	r3, [pc, #608]	@ (8009504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092a4:	08db      	lsrs	r3, r3, #3
 80092a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092aa:	693a      	ldr	r2, [r7, #16]
 80092ac:	fb02 f303 	mul.w	r3, r2, r3
 80092b0:	ee07 3a90 	vmov	s15, r3
 80092b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f000 8111 	beq.w	80094e6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	f000 8083 	beq.w	80093d2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	f200 80a1 	bhi.w	8009416 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d003      	beq.n	80092e2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d056      	beq.n	800938e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80092e0:	e099      	b.n	8009416 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092e2:	4b88      	ldr	r3, [pc, #544]	@ (8009504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 0320 	and.w	r3, r3, #32
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d02d      	beq.n	800934a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092ee:	4b85      	ldr	r3, [pc, #532]	@ (8009504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	08db      	lsrs	r3, r3, #3
 80092f4:	f003 0303 	and.w	r3, r3, #3
 80092f8:	4a83      	ldr	r2, [pc, #524]	@ (8009508 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80092fa:	fa22 f303 	lsr.w	r3, r2, r3
 80092fe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	ee07 3a90 	vmov	s15, r3
 8009306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	ee07 3a90 	vmov	s15, r3
 8009310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009314:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009318:	4b7a      	ldr	r3, [pc, #488]	@ (8009504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800931a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800931c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009320:	ee07 3a90 	vmov	s15, r3
 8009324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009328:	ed97 6a03 	vldr	s12, [r7, #12]
 800932c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800950c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009330:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009334:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009338:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800933c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009344:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009348:	e087      	b.n	800945a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	ee07 3a90 	vmov	s15, r3
 8009350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009354:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009510 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009358:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800935c:	4b69      	ldr	r3, [pc, #420]	@ (8009504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800935e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009364:	ee07 3a90 	vmov	s15, r3
 8009368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800936c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009370:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800950c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009374:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009378:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800937c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009380:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009388:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800938c:	e065      	b.n	800945a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	ee07 3a90 	vmov	s15, r3
 8009394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009398:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009514 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800939c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093a0:	4b58      	ldr	r3, [pc, #352]	@ (8009504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093a8:	ee07 3a90 	vmov	s15, r3
 80093ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80093b4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800950c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093d0:	e043      	b.n	800945a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	ee07 3a90 	vmov	s15, r3
 80093d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093dc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009518 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80093e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093e4:	4b47      	ldr	r3, [pc, #284]	@ (8009504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ec:	ee07 3a90 	vmov	s15, r3
 80093f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80093f8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800950c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009400:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009404:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009408:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800940c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009410:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009414:	e021      	b.n	800945a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	ee07 3a90 	vmov	s15, r3
 800941c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009420:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009510 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009424:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009428:	4b36      	ldr	r3, [pc, #216]	@ (8009504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800942a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800942c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009430:	ee07 3a90 	vmov	s15, r3
 8009434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009438:	ed97 6a03 	vldr	s12, [r7, #12]
 800943c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800950c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009440:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009444:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009448:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800944c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009454:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009458:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800945a:	4b2a      	ldr	r3, [pc, #168]	@ (8009504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800945c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800945e:	0a5b      	lsrs	r3, r3, #9
 8009460:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009464:	ee07 3a90 	vmov	s15, r3
 8009468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800946c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009470:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009474:	edd7 6a07 	vldr	s13, [r7, #28]
 8009478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800947c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009480:	ee17 2a90 	vmov	r2, s15
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009488:	4b1e      	ldr	r3, [pc, #120]	@ (8009504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800948a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800948c:	0c1b      	lsrs	r3, r3, #16
 800948e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009492:	ee07 3a90 	vmov	s15, r3
 8009496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800949a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800949e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80094a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094ae:	ee17 2a90 	vmov	r2, s15
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80094b6:	4b13      	ldr	r3, [pc, #76]	@ (8009504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094ba:	0e1b      	lsrs	r3, r3, #24
 80094bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094c0:	ee07 3a90 	vmov	s15, r3
 80094c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80094d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094dc:	ee17 2a90 	vmov	r2, s15
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80094e4:	e008      	b.n	80094f8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	609a      	str	r2, [r3, #8]
}
 80094f8:	bf00      	nop
 80094fa:	3724      	adds	r7, #36	@ 0x24
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr
 8009504:	58024400 	.word	0x58024400
 8009508:	03d09000 	.word	0x03d09000
 800950c:	46000000 	.word	0x46000000
 8009510:	4c742400 	.word	0x4c742400
 8009514:	4a742400 	.word	0x4a742400
 8009518:	4bbebc20 	.word	0x4bbebc20

0800951c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800952a:	4b53      	ldr	r3, [pc, #332]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 800952c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800952e:	f003 0303 	and.w	r3, r3, #3
 8009532:	2b03      	cmp	r3, #3
 8009534:	d101      	bne.n	800953a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	e099      	b.n	800966e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800953a:	4b4f      	ldr	r3, [pc, #316]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a4e      	ldr	r2, [pc, #312]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 8009540:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009546:	f7f8 f921 	bl	800178c <HAL_GetTick>
 800954a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800954c:	e008      	b.n	8009560 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800954e:	f7f8 f91d 	bl	800178c <HAL_GetTick>
 8009552:	4602      	mov	r2, r0
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	1ad3      	subs	r3, r2, r3
 8009558:	2b02      	cmp	r3, #2
 800955a:	d901      	bls.n	8009560 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800955c:	2303      	movs	r3, #3
 800955e:	e086      	b.n	800966e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009560:	4b45      	ldr	r3, [pc, #276]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1f0      	bne.n	800954e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800956c:	4b42      	ldr	r3, [pc, #264]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 800956e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009570:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	031b      	lsls	r3, r3, #12
 800957a:	493f      	ldr	r1, [pc, #252]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 800957c:	4313      	orrs	r3, r2
 800957e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	3b01      	subs	r3, #1
 8009586:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	3b01      	subs	r3, #1
 8009590:	025b      	lsls	r3, r3, #9
 8009592:	b29b      	uxth	r3, r3
 8009594:	431a      	orrs	r2, r3
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	3b01      	subs	r3, #1
 800959c:	041b      	lsls	r3, r3, #16
 800959e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80095a2:	431a      	orrs	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	3b01      	subs	r3, #1
 80095aa:	061b      	lsls	r3, r3, #24
 80095ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80095b0:	4931      	ldr	r1, [pc, #196]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 80095b2:	4313      	orrs	r3, r2
 80095b4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80095b6:	4b30      	ldr	r3, [pc, #192]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 80095b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	695b      	ldr	r3, [r3, #20]
 80095c2:	492d      	ldr	r1, [pc, #180]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 80095c4:	4313      	orrs	r3, r2
 80095c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80095c8:	4b2b      	ldr	r3, [pc, #172]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 80095ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095cc:	f023 0220 	bic.w	r2, r3, #32
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	4928      	ldr	r1, [pc, #160]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 80095d6:	4313      	orrs	r3, r2
 80095d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80095da:	4b27      	ldr	r3, [pc, #156]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 80095dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095de:	4a26      	ldr	r2, [pc, #152]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 80095e0:	f023 0310 	bic.w	r3, r3, #16
 80095e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80095e6:	4b24      	ldr	r3, [pc, #144]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 80095e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095ea:	4b24      	ldr	r3, [pc, #144]	@ (800967c <RCCEx_PLL2_Config+0x160>)
 80095ec:	4013      	ands	r3, r2
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	69d2      	ldr	r2, [r2, #28]
 80095f2:	00d2      	lsls	r2, r2, #3
 80095f4:	4920      	ldr	r1, [pc, #128]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 80095f6:	4313      	orrs	r3, r2
 80095f8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80095fa:	4b1f      	ldr	r3, [pc, #124]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 80095fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095fe:	4a1e      	ldr	r2, [pc, #120]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 8009600:	f043 0310 	orr.w	r3, r3, #16
 8009604:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d106      	bne.n	800961a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800960c:	4b1a      	ldr	r3, [pc, #104]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 800960e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009610:	4a19      	ldr	r2, [pc, #100]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 8009612:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009616:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009618:	e00f      	b.n	800963a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	2b01      	cmp	r3, #1
 800961e:	d106      	bne.n	800962e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009620:	4b15      	ldr	r3, [pc, #84]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 8009622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009624:	4a14      	ldr	r2, [pc, #80]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 8009626:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800962a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800962c:	e005      	b.n	800963a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800962e:	4b12      	ldr	r3, [pc, #72]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 8009630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009632:	4a11      	ldr	r2, [pc, #68]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 8009634:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009638:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800963a:	4b0f      	ldr	r3, [pc, #60]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a0e      	ldr	r2, [pc, #56]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 8009640:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009644:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009646:	f7f8 f8a1 	bl	800178c <HAL_GetTick>
 800964a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800964c:	e008      	b.n	8009660 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800964e:	f7f8 f89d 	bl	800178c <HAL_GetTick>
 8009652:	4602      	mov	r2, r0
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	1ad3      	subs	r3, r2, r3
 8009658:	2b02      	cmp	r3, #2
 800965a:	d901      	bls.n	8009660 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800965c:	2303      	movs	r3, #3
 800965e:	e006      	b.n	800966e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009660:	4b05      	ldr	r3, [pc, #20]	@ (8009678 <RCCEx_PLL2_Config+0x15c>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009668:	2b00      	cmp	r3, #0
 800966a:	d0f0      	beq.n	800964e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800966c:	7bfb      	ldrb	r3, [r7, #15]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	58024400 	.word	0x58024400
 800967c:	ffff0007 	.word	0xffff0007

08009680 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800968e:	4b53      	ldr	r3, [pc, #332]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 8009690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009692:	f003 0303 	and.w	r3, r3, #3
 8009696:	2b03      	cmp	r3, #3
 8009698:	d101      	bne.n	800969e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	e099      	b.n	80097d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800969e:	4b4f      	ldr	r3, [pc, #316]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a4e      	ldr	r2, [pc, #312]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 80096a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096aa:	f7f8 f86f 	bl	800178c <HAL_GetTick>
 80096ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80096b0:	e008      	b.n	80096c4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80096b2:	f7f8 f86b 	bl	800178c <HAL_GetTick>
 80096b6:	4602      	mov	r2, r0
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	2b02      	cmp	r3, #2
 80096be:	d901      	bls.n	80096c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80096c0:	2303      	movs	r3, #3
 80096c2:	e086      	b.n	80097d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80096c4:	4b45      	ldr	r3, [pc, #276]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d1f0      	bne.n	80096b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80096d0:	4b42      	ldr	r3, [pc, #264]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 80096d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096d4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	051b      	lsls	r3, r3, #20
 80096de:	493f      	ldr	r1, [pc, #252]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 80096e0:	4313      	orrs	r3, r2
 80096e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	3b01      	subs	r3, #1
 80096ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	3b01      	subs	r3, #1
 80096f4:	025b      	lsls	r3, r3, #9
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	431a      	orrs	r2, r3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	3b01      	subs	r3, #1
 8009700:	041b      	lsls	r3, r3, #16
 8009702:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009706:	431a      	orrs	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	3b01      	subs	r3, #1
 800970e:	061b      	lsls	r3, r3, #24
 8009710:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009714:	4931      	ldr	r1, [pc, #196]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 8009716:	4313      	orrs	r3, r2
 8009718:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800971a:	4b30      	ldr	r3, [pc, #192]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 800971c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800971e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	492d      	ldr	r1, [pc, #180]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 8009728:	4313      	orrs	r3, r2
 800972a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800972c:	4b2b      	ldr	r3, [pc, #172]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 800972e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009730:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	699b      	ldr	r3, [r3, #24]
 8009738:	4928      	ldr	r1, [pc, #160]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 800973a:	4313      	orrs	r3, r2
 800973c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800973e:	4b27      	ldr	r3, [pc, #156]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 8009740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009742:	4a26      	ldr	r2, [pc, #152]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 8009744:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009748:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800974a:	4b24      	ldr	r3, [pc, #144]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 800974c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800974e:	4b24      	ldr	r3, [pc, #144]	@ (80097e0 <RCCEx_PLL3_Config+0x160>)
 8009750:	4013      	ands	r3, r2
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	69d2      	ldr	r2, [r2, #28]
 8009756:	00d2      	lsls	r2, r2, #3
 8009758:	4920      	ldr	r1, [pc, #128]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 800975a:	4313      	orrs	r3, r2
 800975c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800975e:	4b1f      	ldr	r3, [pc, #124]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 8009760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009762:	4a1e      	ldr	r2, [pc, #120]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 8009764:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009768:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d106      	bne.n	800977e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009770:	4b1a      	ldr	r3, [pc, #104]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 8009772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009774:	4a19      	ldr	r2, [pc, #100]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 8009776:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800977a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800977c:	e00f      	b.n	800979e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	2b01      	cmp	r3, #1
 8009782:	d106      	bne.n	8009792 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009784:	4b15      	ldr	r3, [pc, #84]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 8009786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009788:	4a14      	ldr	r2, [pc, #80]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 800978a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800978e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009790:	e005      	b.n	800979e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009792:	4b12      	ldr	r3, [pc, #72]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 8009794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009796:	4a11      	ldr	r2, [pc, #68]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 8009798:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800979c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800979e:	4b0f      	ldr	r3, [pc, #60]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a0e      	ldr	r2, [pc, #56]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 80097a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80097a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097aa:	f7f7 ffef 	bl	800178c <HAL_GetTick>
 80097ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80097b0:	e008      	b.n	80097c4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80097b2:	f7f7 ffeb 	bl	800178c <HAL_GetTick>
 80097b6:	4602      	mov	r2, r0
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	1ad3      	subs	r3, r2, r3
 80097bc:	2b02      	cmp	r3, #2
 80097be:	d901      	bls.n	80097c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80097c0:	2303      	movs	r3, #3
 80097c2:	e006      	b.n	80097d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80097c4:	4b05      	ldr	r3, [pc, #20]	@ (80097dc <RCCEx_PLL3_Config+0x15c>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d0f0      	beq.n	80097b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80097d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	58024400 	.word	0x58024400
 80097e0:	ffff0007 	.word	0xffff0007

080097e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d101      	bne.n	80097f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e049      	b.n	800988a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d106      	bne.n	8009810 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f7f7 fb60 	bl	8000ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2202      	movs	r2, #2
 8009814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	3304      	adds	r3, #4
 8009820:	4619      	mov	r1, r3
 8009822:	4610      	mov	r0, r2
 8009824:	f000 f99e 	bl	8009b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2201      	movs	r2, #1
 800983c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
	...

08009894 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d001      	beq.n	80098ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	e04c      	b.n	8009946 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2202      	movs	r2, #2
 80098b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a26      	ldr	r2, [pc, #152]	@ (8009954 <HAL_TIM_Base_Start+0xc0>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d022      	beq.n	8009904 <HAL_TIM_Base_Start+0x70>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098c6:	d01d      	beq.n	8009904 <HAL_TIM_Base_Start+0x70>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a22      	ldr	r2, [pc, #136]	@ (8009958 <HAL_TIM_Base_Start+0xc4>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d018      	beq.n	8009904 <HAL_TIM_Base_Start+0x70>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a21      	ldr	r2, [pc, #132]	@ (800995c <HAL_TIM_Base_Start+0xc8>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d013      	beq.n	8009904 <HAL_TIM_Base_Start+0x70>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a1f      	ldr	r2, [pc, #124]	@ (8009960 <HAL_TIM_Base_Start+0xcc>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d00e      	beq.n	8009904 <HAL_TIM_Base_Start+0x70>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a1e      	ldr	r2, [pc, #120]	@ (8009964 <HAL_TIM_Base_Start+0xd0>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d009      	beq.n	8009904 <HAL_TIM_Base_Start+0x70>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a1c      	ldr	r2, [pc, #112]	@ (8009968 <HAL_TIM_Base_Start+0xd4>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d004      	beq.n	8009904 <HAL_TIM_Base_Start+0x70>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a1b      	ldr	r2, [pc, #108]	@ (800996c <HAL_TIM_Base_Start+0xd8>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d115      	bne.n	8009930 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	689a      	ldr	r2, [r3, #8]
 800990a:	4b19      	ldr	r3, [pc, #100]	@ (8009970 <HAL_TIM_Base_Start+0xdc>)
 800990c:	4013      	ands	r3, r2
 800990e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2b06      	cmp	r3, #6
 8009914:	d015      	beq.n	8009942 <HAL_TIM_Base_Start+0xae>
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800991c:	d011      	beq.n	8009942 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f042 0201 	orr.w	r2, r2, #1
 800992c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800992e:	e008      	b.n	8009942 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f042 0201 	orr.w	r2, r2, #1
 800993e:	601a      	str	r2, [r3, #0]
 8009940:	e000      	b.n	8009944 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009942:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	3714      	adds	r7, #20
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	40010000 	.word	0x40010000
 8009958:	40000400 	.word	0x40000400
 800995c:	40000800 	.word	0x40000800
 8009960:	40000c00 	.word	0x40000c00
 8009964:	40010400 	.word	0x40010400
 8009968:	40001800 	.word	0x40001800
 800996c:	40014000 	.word	0x40014000
 8009970:	00010007 	.word	0x00010007

08009974 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800997e:	2300      	movs	r3, #0
 8009980:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009988:	2b01      	cmp	r3, #1
 800998a:	d101      	bne.n	8009990 <HAL_TIM_ConfigClockSource+0x1c>
 800998c:	2302      	movs	r3, #2
 800998e:	e0dc      	b.n	8009b4a <HAL_TIM_ConfigClockSource+0x1d6>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2202      	movs	r2, #2
 800999c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	4b6a      	ldr	r3, [pc, #424]	@ (8009b54 <HAL_TIM_ConfigClockSource+0x1e0>)
 80099ac:	4013      	ands	r3, r2
 80099ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80099b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	68ba      	ldr	r2, [r7, #8]
 80099be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a64      	ldr	r2, [pc, #400]	@ (8009b58 <HAL_TIM_ConfigClockSource+0x1e4>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	f000 80a9 	beq.w	8009b1e <HAL_TIM_ConfigClockSource+0x1aa>
 80099cc:	4a62      	ldr	r2, [pc, #392]	@ (8009b58 <HAL_TIM_ConfigClockSource+0x1e4>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	f200 80ae 	bhi.w	8009b30 <HAL_TIM_ConfigClockSource+0x1bc>
 80099d4:	4a61      	ldr	r2, [pc, #388]	@ (8009b5c <HAL_TIM_ConfigClockSource+0x1e8>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	f000 80a1 	beq.w	8009b1e <HAL_TIM_ConfigClockSource+0x1aa>
 80099dc:	4a5f      	ldr	r2, [pc, #380]	@ (8009b5c <HAL_TIM_ConfigClockSource+0x1e8>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	f200 80a6 	bhi.w	8009b30 <HAL_TIM_ConfigClockSource+0x1bc>
 80099e4:	4a5e      	ldr	r2, [pc, #376]	@ (8009b60 <HAL_TIM_ConfigClockSource+0x1ec>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	f000 8099 	beq.w	8009b1e <HAL_TIM_ConfigClockSource+0x1aa>
 80099ec:	4a5c      	ldr	r2, [pc, #368]	@ (8009b60 <HAL_TIM_ConfigClockSource+0x1ec>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	f200 809e 	bhi.w	8009b30 <HAL_TIM_ConfigClockSource+0x1bc>
 80099f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80099f8:	f000 8091 	beq.w	8009b1e <HAL_TIM_ConfigClockSource+0x1aa>
 80099fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009a00:	f200 8096 	bhi.w	8009b30 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a08:	f000 8089 	beq.w	8009b1e <HAL_TIM_ConfigClockSource+0x1aa>
 8009a0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a10:	f200 808e 	bhi.w	8009b30 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a18:	d03e      	beq.n	8009a98 <HAL_TIM_ConfigClockSource+0x124>
 8009a1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a1e:	f200 8087 	bhi.w	8009b30 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a26:	f000 8086 	beq.w	8009b36 <HAL_TIM_ConfigClockSource+0x1c2>
 8009a2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a2e:	d87f      	bhi.n	8009b30 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a30:	2b70      	cmp	r3, #112	@ 0x70
 8009a32:	d01a      	beq.n	8009a6a <HAL_TIM_ConfigClockSource+0xf6>
 8009a34:	2b70      	cmp	r3, #112	@ 0x70
 8009a36:	d87b      	bhi.n	8009b30 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a38:	2b60      	cmp	r3, #96	@ 0x60
 8009a3a:	d050      	beq.n	8009ade <HAL_TIM_ConfigClockSource+0x16a>
 8009a3c:	2b60      	cmp	r3, #96	@ 0x60
 8009a3e:	d877      	bhi.n	8009b30 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a40:	2b50      	cmp	r3, #80	@ 0x50
 8009a42:	d03c      	beq.n	8009abe <HAL_TIM_ConfigClockSource+0x14a>
 8009a44:	2b50      	cmp	r3, #80	@ 0x50
 8009a46:	d873      	bhi.n	8009b30 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a48:	2b40      	cmp	r3, #64	@ 0x40
 8009a4a:	d058      	beq.n	8009afe <HAL_TIM_ConfigClockSource+0x18a>
 8009a4c:	2b40      	cmp	r3, #64	@ 0x40
 8009a4e:	d86f      	bhi.n	8009b30 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a50:	2b30      	cmp	r3, #48	@ 0x30
 8009a52:	d064      	beq.n	8009b1e <HAL_TIM_ConfigClockSource+0x1aa>
 8009a54:	2b30      	cmp	r3, #48	@ 0x30
 8009a56:	d86b      	bhi.n	8009b30 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a58:	2b20      	cmp	r3, #32
 8009a5a:	d060      	beq.n	8009b1e <HAL_TIM_ConfigClockSource+0x1aa>
 8009a5c:	2b20      	cmp	r3, #32
 8009a5e:	d867      	bhi.n	8009b30 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d05c      	beq.n	8009b1e <HAL_TIM_ConfigClockSource+0x1aa>
 8009a64:	2b10      	cmp	r3, #16
 8009a66:	d05a      	beq.n	8009b1e <HAL_TIM_ConfigClockSource+0x1aa>
 8009a68:	e062      	b.n	8009b30 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a7a:	f000 f991 	bl	8009da0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009a8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	609a      	str	r2, [r3, #8]
      break;
 8009a96:	e04f      	b.n	8009b38 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009aa8:	f000 f97a 	bl	8009da0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	689a      	ldr	r2, [r3, #8]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009aba:	609a      	str	r2, [r3, #8]
      break;
 8009abc:	e03c      	b.n	8009b38 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009aca:	461a      	mov	r2, r3
 8009acc:	f000 f8ea 	bl	8009ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2150      	movs	r1, #80	@ 0x50
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f000 f944 	bl	8009d64 <TIM_ITRx_SetConfig>
      break;
 8009adc:	e02c      	b.n	8009b38 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009aea:	461a      	mov	r2, r3
 8009aec:	f000 f909 	bl	8009d02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2160      	movs	r1, #96	@ 0x60
 8009af6:	4618      	mov	r0, r3
 8009af8:	f000 f934 	bl	8009d64 <TIM_ITRx_SetConfig>
      break;
 8009afc:	e01c      	b.n	8009b38 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	f000 f8ca 	bl	8009ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2140      	movs	r1, #64	@ 0x40
 8009b16:	4618      	mov	r0, r3
 8009b18:	f000 f924 	bl	8009d64 <TIM_ITRx_SetConfig>
      break;
 8009b1c:	e00c      	b.n	8009b38 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4619      	mov	r1, r3
 8009b28:	4610      	mov	r0, r2
 8009b2a:	f000 f91b 	bl	8009d64 <TIM_ITRx_SetConfig>
      break;
 8009b2e:	e003      	b.n	8009b38 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	73fb      	strb	r3, [r7, #15]
      break;
 8009b34:	e000      	b.n	8009b38 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009b36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	ffceff88 	.word	0xffceff88
 8009b58:	00100040 	.word	0x00100040
 8009b5c:	00100030 	.word	0x00100030
 8009b60:	00100020 	.word	0x00100020

08009b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b085      	sub	sp, #20
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4a43      	ldr	r2, [pc, #268]	@ (8009c84 <TIM_Base_SetConfig+0x120>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d013      	beq.n	8009ba4 <TIM_Base_SetConfig+0x40>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b82:	d00f      	beq.n	8009ba4 <TIM_Base_SetConfig+0x40>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a40      	ldr	r2, [pc, #256]	@ (8009c88 <TIM_Base_SetConfig+0x124>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d00b      	beq.n	8009ba4 <TIM_Base_SetConfig+0x40>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a3f      	ldr	r2, [pc, #252]	@ (8009c8c <TIM_Base_SetConfig+0x128>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d007      	beq.n	8009ba4 <TIM_Base_SetConfig+0x40>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	4a3e      	ldr	r2, [pc, #248]	@ (8009c90 <TIM_Base_SetConfig+0x12c>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d003      	beq.n	8009ba4 <TIM_Base_SetConfig+0x40>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4a3d      	ldr	r2, [pc, #244]	@ (8009c94 <TIM_Base_SetConfig+0x130>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d108      	bne.n	8009bb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4a32      	ldr	r2, [pc, #200]	@ (8009c84 <TIM_Base_SetConfig+0x120>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d01f      	beq.n	8009bfe <TIM_Base_SetConfig+0x9a>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bc4:	d01b      	beq.n	8009bfe <TIM_Base_SetConfig+0x9a>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4a2f      	ldr	r2, [pc, #188]	@ (8009c88 <TIM_Base_SetConfig+0x124>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d017      	beq.n	8009bfe <TIM_Base_SetConfig+0x9a>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4a2e      	ldr	r2, [pc, #184]	@ (8009c8c <TIM_Base_SetConfig+0x128>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d013      	beq.n	8009bfe <TIM_Base_SetConfig+0x9a>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4a2d      	ldr	r2, [pc, #180]	@ (8009c90 <TIM_Base_SetConfig+0x12c>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d00f      	beq.n	8009bfe <TIM_Base_SetConfig+0x9a>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	4a2c      	ldr	r2, [pc, #176]	@ (8009c94 <TIM_Base_SetConfig+0x130>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d00b      	beq.n	8009bfe <TIM_Base_SetConfig+0x9a>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	4a2b      	ldr	r2, [pc, #172]	@ (8009c98 <TIM_Base_SetConfig+0x134>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d007      	beq.n	8009bfe <TIM_Base_SetConfig+0x9a>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4a2a      	ldr	r2, [pc, #168]	@ (8009c9c <TIM_Base_SetConfig+0x138>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d003      	beq.n	8009bfe <TIM_Base_SetConfig+0x9a>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4a29      	ldr	r2, [pc, #164]	@ (8009ca0 <TIM_Base_SetConfig+0x13c>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d108      	bne.n	8009c10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	695b      	ldr	r3, [r3, #20]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	689a      	ldr	r2, [r3, #8]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a14      	ldr	r2, [pc, #80]	@ (8009c84 <TIM_Base_SetConfig+0x120>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d00f      	beq.n	8009c56 <TIM_Base_SetConfig+0xf2>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4a16      	ldr	r2, [pc, #88]	@ (8009c94 <TIM_Base_SetConfig+0x130>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d00b      	beq.n	8009c56 <TIM_Base_SetConfig+0xf2>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a15      	ldr	r2, [pc, #84]	@ (8009c98 <TIM_Base_SetConfig+0x134>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d007      	beq.n	8009c56 <TIM_Base_SetConfig+0xf2>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a14      	ldr	r2, [pc, #80]	@ (8009c9c <TIM_Base_SetConfig+0x138>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d003      	beq.n	8009c56 <TIM_Base_SetConfig+0xf2>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a13      	ldr	r2, [pc, #76]	@ (8009ca0 <TIM_Base_SetConfig+0x13c>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d103      	bne.n	8009c5e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	691a      	ldr	r2, [r3, #16]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f043 0204 	orr.w	r2, r3, #4
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	601a      	str	r2, [r3, #0]
}
 8009c76:	bf00      	nop
 8009c78:	3714      	adds	r7, #20
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr
 8009c82:	bf00      	nop
 8009c84:	40010000 	.word	0x40010000
 8009c88:	40000400 	.word	0x40000400
 8009c8c:	40000800 	.word	0x40000800
 8009c90:	40000c00 	.word	0x40000c00
 8009c94:	40010400 	.word	0x40010400
 8009c98:	40014000 	.word	0x40014000
 8009c9c:	40014400 	.word	0x40014400
 8009ca0:	40014800 	.word	0x40014800

08009ca4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b087      	sub	sp, #28
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6a1b      	ldr	r3, [r3, #32]
 8009cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6a1b      	ldr	r3, [r3, #32]
 8009cba:	f023 0201 	bic.w	r2, r3, #1
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	011b      	lsls	r3, r3, #4
 8009cd4:	693a      	ldr	r2, [r7, #16]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	f023 030a 	bic.w	r3, r3, #10
 8009ce0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ce2:	697a      	ldr	r2, [r7, #20]
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	693a      	ldr	r2, [r7, #16]
 8009cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	697a      	ldr	r2, [r7, #20]
 8009cf4:	621a      	str	r2, [r3, #32]
}
 8009cf6:	bf00      	nop
 8009cf8:	371c      	adds	r7, #28
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr

08009d02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d02:	b480      	push	{r7}
 8009d04:	b087      	sub	sp, #28
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	60f8      	str	r0, [r7, #12]
 8009d0a:	60b9      	str	r1, [r7, #8]
 8009d0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6a1b      	ldr	r3, [r3, #32]
 8009d12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6a1b      	ldr	r3, [r3, #32]
 8009d18:	f023 0210 	bic.w	r2, r3, #16
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	699b      	ldr	r3, [r3, #24]
 8009d24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009d2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	031b      	lsls	r3, r3, #12
 8009d32:	693a      	ldr	r2, [r7, #16]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009d3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	011b      	lsls	r3, r3, #4
 8009d44:	697a      	ldr	r2, [r7, #20]
 8009d46:	4313      	orrs	r3, r2
 8009d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	693a      	ldr	r2, [r7, #16]
 8009d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	697a      	ldr	r2, [r7, #20]
 8009d54:	621a      	str	r2, [r3, #32]
}
 8009d56:	bf00      	nop
 8009d58:	371c      	adds	r7, #28
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
	...

08009d64 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	4b09      	ldr	r3, [pc, #36]	@ (8009d9c <TIM_ITRx_SetConfig+0x38>)
 8009d78:	4013      	ands	r3, r2
 8009d7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d7c:	683a      	ldr	r2, [r7, #0]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	4313      	orrs	r3, r2
 8009d82:	f043 0307 	orr.w	r3, r3, #7
 8009d86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	68fa      	ldr	r2, [r7, #12]
 8009d8c:	609a      	str	r2, [r3, #8]
}
 8009d8e:	bf00      	nop
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	ffcfff8f 	.word	0xffcfff8f

08009da0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b087      	sub	sp, #28
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	607a      	str	r2, [r7, #4]
 8009dac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009dba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	021a      	lsls	r2, r3, #8
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	431a      	orrs	r2, r3
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	697a      	ldr	r2, [r7, #20]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	697a      	ldr	r2, [r7, #20]
 8009dd2:	609a      	str	r2, [r3, #8]
}
 8009dd4:	bf00      	nop
 8009dd6:	371c      	adds	r7, #28
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d101      	bne.n	8009df8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009df4:	2302      	movs	r3, #2
 8009df6:	e06d      	b.n	8009ed4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2202      	movs	r2, #2
 8009e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a30      	ldr	r2, [pc, #192]	@ (8009ee0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d004      	beq.n	8009e2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a2f      	ldr	r2, [pc, #188]	@ (8009ee4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d108      	bne.n	8009e3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009e32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a20      	ldr	r2, [pc, #128]	@ (8009ee0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d022      	beq.n	8009ea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e6a:	d01d      	beq.n	8009ea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a1d      	ldr	r2, [pc, #116]	@ (8009ee8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d018      	beq.n	8009ea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8009eec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d013      	beq.n	8009ea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a1a      	ldr	r2, [pc, #104]	@ (8009ef0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d00e      	beq.n	8009ea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a15      	ldr	r2, [pc, #84]	@ (8009ee4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d009      	beq.n	8009ea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a16      	ldr	r2, [pc, #88]	@ (8009ef4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d004      	beq.n	8009ea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a15      	ldr	r2, [pc, #84]	@ (8009ef8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d10c      	bne.n	8009ec2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009eae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	68ba      	ldr	r2, [r7, #8]
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68ba      	ldr	r2, [r7, #8]
 8009ec0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009ed2:	2300      	movs	r3, #0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3714      	adds	r7, #20
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr
 8009ee0:	40010000 	.word	0x40010000
 8009ee4:	40010400 	.word	0x40010400
 8009ee8:	40000400 	.word	0x40000400
 8009eec:	40000800 	.word	0x40000800
 8009ef0:	40000c00 	.word	0x40000c00
 8009ef4:	40001800 	.word	0x40001800
 8009ef8:	40014000 	.word	0x40014000

08009efc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d101      	bne.n	8009f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e042      	b.n	8009f94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d106      	bne.n	8009f26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 f83b 	bl	8009f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2224      	movs	r2, #36	@ 0x24
 8009f2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f022 0201 	bic.w	r2, r2, #1
 8009f3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d002      	beq.n	8009f4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fe28 	bl	800ab9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 f8bd 	bl	800a0cc <UART_SetConfig>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d101      	bne.n	8009f5c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e01b      	b.n	8009f94 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	685a      	ldr	r2, [r3, #4]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009f6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	689a      	ldr	r2, [r3, #8]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009f7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f042 0201 	orr.w	r2, r2, #1
 8009f8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 fea7 	bl	800ace0 <UART_CheckIdleState>
 8009f92:	4603      	mov	r3, r0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8009fa4:	bf00      	nop
 8009fa6:	370c      	adds	r7, #12
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b08a      	sub	sp, #40	@ 0x28
 8009fb4:	af02      	add	r7, sp, #8
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	603b      	str	r3, [r7, #0]
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fc6:	2b20      	cmp	r3, #32
 8009fc8:	d17b      	bne.n	800a0c2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d002      	beq.n	8009fd6 <HAL_UART_Transmit+0x26>
 8009fd0:	88fb      	ldrh	r3, [r7, #6]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d101      	bne.n	8009fda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e074      	b.n	800a0c4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2221      	movs	r2, #33	@ 0x21
 8009fe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009fea:	f7f7 fbcf 	bl	800178c <HAL_GetTick>
 8009fee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	88fa      	ldrh	r2, [r7, #6]
 8009ff4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	88fa      	ldrh	r2, [r7, #6]
 8009ffc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a008:	d108      	bne.n	800a01c <HAL_UART_Transmit+0x6c>
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	691b      	ldr	r3, [r3, #16]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d104      	bne.n	800a01c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a012:	2300      	movs	r3, #0
 800a014:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	61bb      	str	r3, [r7, #24]
 800a01a:	e003      	b.n	800a024 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a020:	2300      	movs	r3, #0
 800a022:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a024:	e030      	b.n	800a088 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	9300      	str	r3, [sp, #0]
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	2200      	movs	r2, #0
 800a02e:	2180      	movs	r1, #128	@ 0x80
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f000 feff 	bl	800ae34 <UART_WaitOnFlagUntilTimeout>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d005      	beq.n	800a048 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2220      	movs	r2, #32
 800a040:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a044:	2303      	movs	r3, #3
 800a046:	e03d      	b.n	800a0c4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10b      	bne.n	800a066 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	881b      	ldrh	r3, [r3, #0]
 800a052:	461a      	mov	r2, r3
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a05c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	3302      	adds	r3, #2
 800a062:	61bb      	str	r3, [r7, #24]
 800a064:	e007      	b.n	800a076 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	781a      	ldrb	r2, [r3, #0]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	3301      	adds	r3, #1
 800a074:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	3b01      	subs	r3, #1
 800a080:	b29a      	uxth	r2, r3
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a08e:	b29b      	uxth	r3, r3
 800a090:	2b00      	cmp	r3, #0
 800a092:	d1c8      	bne.n	800a026 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	9300      	str	r3, [sp, #0]
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	2200      	movs	r2, #0
 800a09c:	2140      	movs	r1, #64	@ 0x40
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f000 fec8 	bl	800ae34 <UART_WaitOnFlagUntilTimeout>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d005      	beq.n	800a0b6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2220      	movs	r2, #32
 800a0ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a0b2:	2303      	movs	r3, #3
 800a0b4:	e006      	b.n	800a0c4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2220      	movs	r2, #32
 800a0ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	e000      	b.n	800a0c4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a0c2:	2302      	movs	r3, #2
  }
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3720      	adds	r7, #32
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0d0:	b092      	sub	sp, #72	@ 0x48
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	689a      	ldr	r2, [r3, #8]
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	691b      	ldr	r3, [r3, #16]
 800a0e4:	431a      	orrs	r2, r3
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	695b      	ldr	r3, [r3, #20]
 800a0ea:	431a      	orrs	r2, r3
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	69db      	ldr	r3, [r3, #28]
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	4bbe      	ldr	r3, [pc, #760]	@ (800a3f4 <UART_SetConfig+0x328>)
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	697a      	ldr	r2, [r7, #20]
 800a100:	6812      	ldr	r2, [r2, #0]
 800a102:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a104:	430b      	orrs	r3, r1
 800a106:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	68da      	ldr	r2, [r3, #12]
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	430a      	orrs	r2, r1
 800a11c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	699b      	ldr	r3, [r3, #24]
 800a122:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4ab3      	ldr	r2, [pc, #716]	@ (800a3f8 <UART_SetConfig+0x32c>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d004      	beq.n	800a138 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	6a1b      	ldr	r3, [r3, #32]
 800a132:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a134:	4313      	orrs	r3, r2
 800a136:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	689a      	ldr	r2, [r3, #8]
 800a13e:	4baf      	ldr	r3, [pc, #700]	@ (800a3fc <UART_SetConfig+0x330>)
 800a140:	4013      	ands	r3, r2
 800a142:	697a      	ldr	r2, [r7, #20]
 800a144:	6812      	ldr	r2, [r2, #0]
 800a146:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a148:	430b      	orrs	r3, r1
 800a14a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a152:	f023 010f 	bic.w	r1, r3, #15
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	430a      	orrs	r2, r1
 800a160:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4aa6      	ldr	r2, [pc, #664]	@ (800a400 <UART_SetConfig+0x334>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d177      	bne.n	800a25c <UART_SetConfig+0x190>
 800a16c:	4ba5      	ldr	r3, [pc, #660]	@ (800a404 <UART_SetConfig+0x338>)
 800a16e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a170:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a174:	2b28      	cmp	r3, #40	@ 0x28
 800a176:	d86d      	bhi.n	800a254 <UART_SetConfig+0x188>
 800a178:	a201      	add	r2, pc, #4	@ (adr r2, 800a180 <UART_SetConfig+0xb4>)
 800a17a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17e:	bf00      	nop
 800a180:	0800a225 	.word	0x0800a225
 800a184:	0800a255 	.word	0x0800a255
 800a188:	0800a255 	.word	0x0800a255
 800a18c:	0800a255 	.word	0x0800a255
 800a190:	0800a255 	.word	0x0800a255
 800a194:	0800a255 	.word	0x0800a255
 800a198:	0800a255 	.word	0x0800a255
 800a19c:	0800a255 	.word	0x0800a255
 800a1a0:	0800a22d 	.word	0x0800a22d
 800a1a4:	0800a255 	.word	0x0800a255
 800a1a8:	0800a255 	.word	0x0800a255
 800a1ac:	0800a255 	.word	0x0800a255
 800a1b0:	0800a255 	.word	0x0800a255
 800a1b4:	0800a255 	.word	0x0800a255
 800a1b8:	0800a255 	.word	0x0800a255
 800a1bc:	0800a255 	.word	0x0800a255
 800a1c0:	0800a235 	.word	0x0800a235
 800a1c4:	0800a255 	.word	0x0800a255
 800a1c8:	0800a255 	.word	0x0800a255
 800a1cc:	0800a255 	.word	0x0800a255
 800a1d0:	0800a255 	.word	0x0800a255
 800a1d4:	0800a255 	.word	0x0800a255
 800a1d8:	0800a255 	.word	0x0800a255
 800a1dc:	0800a255 	.word	0x0800a255
 800a1e0:	0800a23d 	.word	0x0800a23d
 800a1e4:	0800a255 	.word	0x0800a255
 800a1e8:	0800a255 	.word	0x0800a255
 800a1ec:	0800a255 	.word	0x0800a255
 800a1f0:	0800a255 	.word	0x0800a255
 800a1f4:	0800a255 	.word	0x0800a255
 800a1f8:	0800a255 	.word	0x0800a255
 800a1fc:	0800a255 	.word	0x0800a255
 800a200:	0800a245 	.word	0x0800a245
 800a204:	0800a255 	.word	0x0800a255
 800a208:	0800a255 	.word	0x0800a255
 800a20c:	0800a255 	.word	0x0800a255
 800a210:	0800a255 	.word	0x0800a255
 800a214:	0800a255 	.word	0x0800a255
 800a218:	0800a255 	.word	0x0800a255
 800a21c:	0800a255 	.word	0x0800a255
 800a220:	0800a24d 	.word	0x0800a24d
 800a224:	2301      	movs	r3, #1
 800a226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a22a:	e222      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a22c:	2304      	movs	r3, #4
 800a22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a232:	e21e      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a234:	2308      	movs	r3, #8
 800a236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a23a:	e21a      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a23c:	2310      	movs	r3, #16
 800a23e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a242:	e216      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a244:	2320      	movs	r3, #32
 800a246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a24a:	e212      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a24c:	2340      	movs	r3, #64	@ 0x40
 800a24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a252:	e20e      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a254:	2380      	movs	r3, #128	@ 0x80
 800a256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a25a:	e20a      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a69      	ldr	r2, [pc, #420]	@ (800a408 <UART_SetConfig+0x33c>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d130      	bne.n	800a2c8 <UART_SetConfig+0x1fc>
 800a266:	4b67      	ldr	r3, [pc, #412]	@ (800a404 <UART_SetConfig+0x338>)
 800a268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a26a:	f003 0307 	and.w	r3, r3, #7
 800a26e:	2b05      	cmp	r3, #5
 800a270:	d826      	bhi.n	800a2c0 <UART_SetConfig+0x1f4>
 800a272:	a201      	add	r2, pc, #4	@ (adr r2, 800a278 <UART_SetConfig+0x1ac>)
 800a274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a278:	0800a291 	.word	0x0800a291
 800a27c:	0800a299 	.word	0x0800a299
 800a280:	0800a2a1 	.word	0x0800a2a1
 800a284:	0800a2a9 	.word	0x0800a2a9
 800a288:	0800a2b1 	.word	0x0800a2b1
 800a28c:	0800a2b9 	.word	0x0800a2b9
 800a290:	2300      	movs	r3, #0
 800a292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a296:	e1ec      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a298:	2304      	movs	r3, #4
 800a29a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a29e:	e1e8      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a2a0:	2308      	movs	r3, #8
 800a2a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2a6:	e1e4      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a2a8:	2310      	movs	r3, #16
 800a2aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ae:	e1e0      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a2b0:	2320      	movs	r3, #32
 800a2b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2b6:	e1dc      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a2b8:	2340      	movs	r3, #64	@ 0x40
 800a2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2be:	e1d8      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a2c0:	2380      	movs	r3, #128	@ 0x80
 800a2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2c6:	e1d4      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a4f      	ldr	r2, [pc, #316]	@ (800a40c <UART_SetConfig+0x340>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d130      	bne.n	800a334 <UART_SetConfig+0x268>
 800a2d2:	4b4c      	ldr	r3, [pc, #304]	@ (800a404 <UART_SetConfig+0x338>)
 800a2d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2d6:	f003 0307 	and.w	r3, r3, #7
 800a2da:	2b05      	cmp	r3, #5
 800a2dc:	d826      	bhi.n	800a32c <UART_SetConfig+0x260>
 800a2de:	a201      	add	r2, pc, #4	@ (adr r2, 800a2e4 <UART_SetConfig+0x218>)
 800a2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e4:	0800a2fd 	.word	0x0800a2fd
 800a2e8:	0800a305 	.word	0x0800a305
 800a2ec:	0800a30d 	.word	0x0800a30d
 800a2f0:	0800a315 	.word	0x0800a315
 800a2f4:	0800a31d 	.word	0x0800a31d
 800a2f8:	0800a325 	.word	0x0800a325
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a302:	e1b6      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a304:	2304      	movs	r3, #4
 800a306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a30a:	e1b2      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a30c:	2308      	movs	r3, #8
 800a30e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a312:	e1ae      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a314:	2310      	movs	r3, #16
 800a316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a31a:	e1aa      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a31c:	2320      	movs	r3, #32
 800a31e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a322:	e1a6      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a324:	2340      	movs	r3, #64	@ 0x40
 800a326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a32a:	e1a2      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a32c:	2380      	movs	r3, #128	@ 0x80
 800a32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a332:	e19e      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a35      	ldr	r2, [pc, #212]	@ (800a410 <UART_SetConfig+0x344>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d130      	bne.n	800a3a0 <UART_SetConfig+0x2d4>
 800a33e:	4b31      	ldr	r3, [pc, #196]	@ (800a404 <UART_SetConfig+0x338>)
 800a340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a342:	f003 0307 	and.w	r3, r3, #7
 800a346:	2b05      	cmp	r3, #5
 800a348:	d826      	bhi.n	800a398 <UART_SetConfig+0x2cc>
 800a34a:	a201      	add	r2, pc, #4	@ (adr r2, 800a350 <UART_SetConfig+0x284>)
 800a34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a350:	0800a369 	.word	0x0800a369
 800a354:	0800a371 	.word	0x0800a371
 800a358:	0800a379 	.word	0x0800a379
 800a35c:	0800a381 	.word	0x0800a381
 800a360:	0800a389 	.word	0x0800a389
 800a364:	0800a391 	.word	0x0800a391
 800a368:	2300      	movs	r3, #0
 800a36a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a36e:	e180      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a370:	2304      	movs	r3, #4
 800a372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a376:	e17c      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a378:	2308      	movs	r3, #8
 800a37a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a37e:	e178      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a380:	2310      	movs	r3, #16
 800a382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a386:	e174      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a388:	2320      	movs	r3, #32
 800a38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a38e:	e170      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a390:	2340      	movs	r3, #64	@ 0x40
 800a392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a396:	e16c      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a398:	2380      	movs	r3, #128	@ 0x80
 800a39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a39e:	e168      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a1b      	ldr	r2, [pc, #108]	@ (800a414 <UART_SetConfig+0x348>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d142      	bne.n	800a430 <UART_SetConfig+0x364>
 800a3aa:	4b16      	ldr	r3, [pc, #88]	@ (800a404 <UART_SetConfig+0x338>)
 800a3ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3ae:	f003 0307 	and.w	r3, r3, #7
 800a3b2:	2b05      	cmp	r3, #5
 800a3b4:	d838      	bhi.n	800a428 <UART_SetConfig+0x35c>
 800a3b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a3bc <UART_SetConfig+0x2f0>)
 800a3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3bc:	0800a3d5 	.word	0x0800a3d5
 800a3c0:	0800a3dd 	.word	0x0800a3dd
 800a3c4:	0800a3e5 	.word	0x0800a3e5
 800a3c8:	0800a3ed 	.word	0x0800a3ed
 800a3cc:	0800a419 	.word	0x0800a419
 800a3d0:	0800a421 	.word	0x0800a421
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3da:	e14a      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a3dc:	2304      	movs	r3, #4
 800a3de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3e2:	e146      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a3e4:	2308      	movs	r3, #8
 800a3e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ea:	e142      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a3ec:	2310      	movs	r3, #16
 800a3ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3f2:	e13e      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a3f4:	cfff69f3 	.word	0xcfff69f3
 800a3f8:	58000c00 	.word	0x58000c00
 800a3fc:	11fff4ff 	.word	0x11fff4ff
 800a400:	40011000 	.word	0x40011000
 800a404:	58024400 	.word	0x58024400
 800a408:	40004400 	.word	0x40004400
 800a40c:	40004800 	.word	0x40004800
 800a410:	40004c00 	.word	0x40004c00
 800a414:	40005000 	.word	0x40005000
 800a418:	2320      	movs	r3, #32
 800a41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a41e:	e128      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a420:	2340      	movs	r3, #64	@ 0x40
 800a422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a426:	e124      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a428:	2380      	movs	r3, #128	@ 0x80
 800a42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a42e:	e120      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4acb      	ldr	r2, [pc, #812]	@ (800a764 <UART_SetConfig+0x698>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d176      	bne.n	800a528 <UART_SetConfig+0x45c>
 800a43a:	4bcb      	ldr	r3, [pc, #812]	@ (800a768 <UART_SetConfig+0x69c>)
 800a43c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a43e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a442:	2b28      	cmp	r3, #40	@ 0x28
 800a444:	d86c      	bhi.n	800a520 <UART_SetConfig+0x454>
 800a446:	a201      	add	r2, pc, #4	@ (adr r2, 800a44c <UART_SetConfig+0x380>)
 800a448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44c:	0800a4f1 	.word	0x0800a4f1
 800a450:	0800a521 	.word	0x0800a521
 800a454:	0800a521 	.word	0x0800a521
 800a458:	0800a521 	.word	0x0800a521
 800a45c:	0800a521 	.word	0x0800a521
 800a460:	0800a521 	.word	0x0800a521
 800a464:	0800a521 	.word	0x0800a521
 800a468:	0800a521 	.word	0x0800a521
 800a46c:	0800a4f9 	.word	0x0800a4f9
 800a470:	0800a521 	.word	0x0800a521
 800a474:	0800a521 	.word	0x0800a521
 800a478:	0800a521 	.word	0x0800a521
 800a47c:	0800a521 	.word	0x0800a521
 800a480:	0800a521 	.word	0x0800a521
 800a484:	0800a521 	.word	0x0800a521
 800a488:	0800a521 	.word	0x0800a521
 800a48c:	0800a501 	.word	0x0800a501
 800a490:	0800a521 	.word	0x0800a521
 800a494:	0800a521 	.word	0x0800a521
 800a498:	0800a521 	.word	0x0800a521
 800a49c:	0800a521 	.word	0x0800a521
 800a4a0:	0800a521 	.word	0x0800a521
 800a4a4:	0800a521 	.word	0x0800a521
 800a4a8:	0800a521 	.word	0x0800a521
 800a4ac:	0800a509 	.word	0x0800a509
 800a4b0:	0800a521 	.word	0x0800a521
 800a4b4:	0800a521 	.word	0x0800a521
 800a4b8:	0800a521 	.word	0x0800a521
 800a4bc:	0800a521 	.word	0x0800a521
 800a4c0:	0800a521 	.word	0x0800a521
 800a4c4:	0800a521 	.word	0x0800a521
 800a4c8:	0800a521 	.word	0x0800a521
 800a4cc:	0800a511 	.word	0x0800a511
 800a4d0:	0800a521 	.word	0x0800a521
 800a4d4:	0800a521 	.word	0x0800a521
 800a4d8:	0800a521 	.word	0x0800a521
 800a4dc:	0800a521 	.word	0x0800a521
 800a4e0:	0800a521 	.word	0x0800a521
 800a4e4:	0800a521 	.word	0x0800a521
 800a4e8:	0800a521 	.word	0x0800a521
 800a4ec:	0800a519 	.word	0x0800a519
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4f6:	e0bc      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a4f8:	2304      	movs	r3, #4
 800a4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4fe:	e0b8      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a500:	2308      	movs	r3, #8
 800a502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a506:	e0b4      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a508:	2310      	movs	r3, #16
 800a50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a50e:	e0b0      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a510:	2320      	movs	r3, #32
 800a512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a516:	e0ac      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a518:	2340      	movs	r3, #64	@ 0x40
 800a51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a51e:	e0a8      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a520:	2380      	movs	r3, #128	@ 0x80
 800a522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a526:	e0a4      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a8f      	ldr	r2, [pc, #572]	@ (800a76c <UART_SetConfig+0x6a0>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d130      	bne.n	800a594 <UART_SetConfig+0x4c8>
 800a532:	4b8d      	ldr	r3, [pc, #564]	@ (800a768 <UART_SetConfig+0x69c>)
 800a534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a536:	f003 0307 	and.w	r3, r3, #7
 800a53a:	2b05      	cmp	r3, #5
 800a53c:	d826      	bhi.n	800a58c <UART_SetConfig+0x4c0>
 800a53e:	a201      	add	r2, pc, #4	@ (adr r2, 800a544 <UART_SetConfig+0x478>)
 800a540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a544:	0800a55d 	.word	0x0800a55d
 800a548:	0800a565 	.word	0x0800a565
 800a54c:	0800a56d 	.word	0x0800a56d
 800a550:	0800a575 	.word	0x0800a575
 800a554:	0800a57d 	.word	0x0800a57d
 800a558:	0800a585 	.word	0x0800a585
 800a55c:	2300      	movs	r3, #0
 800a55e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a562:	e086      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a564:	2304      	movs	r3, #4
 800a566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a56a:	e082      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a56c:	2308      	movs	r3, #8
 800a56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a572:	e07e      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a574:	2310      	movs	r3, #16
 800a576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a57a:	e07a      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a57c:	2320      	movs	r3, #32
 800a57e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a582:	e076      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a584:	2340      	movs	r3, #64	@ 0x40
 800a586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a58a:	e072      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a58c:	2380      	movs	r3, #128	@ 0x80
 800a58e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a592:	e06e      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a75      	ldr	r2, [pc, #468]	@ (800a770 <UART_SetConfig+0x6a4>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d130      	bne.n	800a600 <UART_SetConfig+0x534>
 800a59e:	4b72      	ldr	r3, [pc, #456]	@ (800a768 <UART_SetConfig+0x69c>)
 800a5a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5a2:	f003 0307 	and.w	r3, r3, #7
 800a5a6:	2b05      	cmp	r3, #5
 800a5a8:	d826      	bhi.n	800a5f8 <UART_SetConfig+0x52c>
 800a5aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a5b0 <UART_SetConfig+0x4e4>)
 800a5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b0:	0800a5c9 	.word	0x0800a5c9
 800a5b4:	0800a5d1 	.word	0x0800a5d1
 800a5b8:	0800a5d9 	.word	0x0800a5d9
 800a5bc:	0800a5e1 	.word	0x0800a5e1
 800a5c0:	0800a5e9 	.word	0x0800a5e9
 800a5c4:	0800a5f1 	.word	0x0800a5f1
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ce:	e050      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a5d0:	2304      	movs	r3, #4
 800a5d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5d6:	e04c      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a5d8:	2308      	movs	r3, #8
 800a5da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5de:	e048      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a5e0:	2310      	movs	r3, #16
 800a5e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5e6:	e044      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a5e8:	2320      	movs	r3, #32
 800a5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ee:	e040      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a5f0:	2340      	movs	r3, #64	@ 0x40
 800a5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5f6:	e03c      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a5f8:	2380      	movs	r3, #128	@ 0x80
 800a5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5fe:	e038      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a5b      	ldr	r2, [pc, #364]	@ (800a774 <UART_SetConfig+0x6a8>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d130      	bne.n	800a66c <UART_SetConfig+0x5a0>
 800a60a:	4b57      	ldr	r3, [pc, #348]	@ (800a768 <UART_SetConfig+0x69c>)
 800a60c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a60e:	f003 0307 	and.w	r3, r3, #7
 800a612:	2b05      	cmp	r3, #5
 800a614:	d826      	bhi.n	800a664 <UART_SetConfig+0x598>
 800a616:	a201      	add	r2, pc, #4	@ (adr r2, 800a61c <UART_SetConfig+0x550>)
 800a618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61c:	0800a635 	.word	0x0800a635
 800a620:	0800a63d 	.word	0x0800a63d
 800a624:	0800a645 	.word	0x0800a645
 800a628:	0800a64d 	.word	0x0800a64d
 800a62c:	0800a655 	.word	0x0800a655
 800a630:	0800a65d 	.word	0x0800a65d
 800a634:	2302      	movs	r3, #2
 800a636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a63a:	e01a      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a63c:	2304      	movs	r3, #4
 800a63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a642:	e016      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a644:	2308      	movs	r3, #8
 800a646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a64a:	e012      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a64c:	2310      	movs	r3, #16
 800a64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a652:	e00e      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a654:	2320      	movs	r3, #32
 800a656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a65a:	e00a      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a65c:	2340      	movs	r3, #64	@ 0x40
 800a65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a662:	e006      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a664:	2380      	movs	r3, #128	@ 0x80
 800a666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a66a:	e002      	b.n	800a672 <UART_SetConfig+0x5a6>
 800a66c:	2380      	movs	r3, #128	@ 0x80
 800a66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a3f      	ldr	r2, [pc, #252]	@ (800a774 <UART_SetConfig+0x6a8>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	f040 80f8 	bne.w	800a86e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a67e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a682:	2b20      	cmp	r3, #32
 800a684:	dc46      	bgt.n	800a714 <UART_SetConfig+0x648>
 800a686:	2b02      	cmp	r3, #2
 800a688:	f2c0 8082 	blt.w	800a790 <UART_SetConfig+0x6c4>
 800a68c:	3b02      	subs	r3, #2
 800a68e:	2b1e      	cmp	r3, #30
 800a690:	d87e      	bhi.n	800a790 <UART_SetConfig+0x6c4>
 800a692:	a201      	add	r2, pc, #4	@ (adr r2, 800a698 <UART_SetConfig+0x5cc>)
 800a694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a698:	0800a71b 	.word	0x0800a71b
 800a69c:	0800a791 	.word	0x0800a791
 800a6a0:	0800a723 	.word	0x0800a723
 800a6a4:	0800a791 	.word	0x0800a791
 800a6a8:	0800a791 	.word	0x0800a791
 800a6ac:	0800a791 	.word	0x0800a791
 800a6b0:	0800a733 	.word	0x0800a733
 800a6b4:	0800a791 	.word	0x0800a791
 800a6b8:	0800a791 	.word	0x0800a791
 800a6bc:	0800a791 	.word	0x0800a791
 800a6c0:	0800a791 	.word	0x0800a791
 800a6c4:	0800a791 	.word	0x0800a791
 800a6c8:	0800a791 	.word	0x0800a791
 800a6cc:	0800a791 	.word	0x0800a791
 800a6d0:	0800a743 	.word	0x0800a743
 800a6d4:	0800a791 	.word	0x0800a791
 800a6d8:	0800a791 	.word	0x0800a791
 800a6dc:	0800a791 	.word	0x0800a791
 800a6e0:	0800a791 	.word	0x0800a791
 800a6e4:	0800a791 	.word	0x0800a791
 800a6e8:	0800a791 	.word	0x0800a791
 800a6ec:	0800a791 	.word	0x0800a791
 800a6f0:	0800a791 	.word	0x0800a791
 800a6f4:	0800a791 	.word	0x0800a791
 800a6f8:	0800a791 	.word	0x0800a791
 800a6fc:	0800a791 	.word	0x0800a791
 800a700:	0800a791 	.word	0x0800a791
 800a704:	0800a791 	.word	0x0800a791
 800a708:	0800a791 	.word	0x0800a791
 800a70c:	0800a791 	.word	0x0800a791
 800a710:	0800a783 	.word	0x0800a783
 800a714:	2b40      	cmp	r3, #64	@ 0x40
 800a716:	d037      	beq.n	800a788 <UART_SetConfig+0x6bc>
 800a718:	e03a      	b.n	800a790 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a71a:	f7fe faef 	bl	8008cfc <HAL_RCCEx_GetD3PCLK1Freq>
 800a71e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a720:	e03c      	b.n	800a79c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a726:	4618      	mov	r0, r3
 800a728:	f7fe fafe 	bl	8008d28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a72c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a730:	e034      	b.n	800a79c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a732:	f107 0318 	add.w	r3, r7, #24
 800a736:	4618      	mov	r0, r3
 800a738:	f7fe fc4a 	bl	8008fd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a740:	e02c      	b.n	800a79c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a742:	4b09      	ldr	r3, [pc, #36]	@ (800a768 <UART_SetConfig+0x69c>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f003 0320 	and.w	r3, r3, #32
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d016      	beq.n	800a77c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a74e:	4b06      	ldr	r3, [pc, #24]	@ (800a768 <UART_SetConfig+0x69c>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	08db      	lsrs	r3, r3, #3
 800a754:	f003 0303 	and.w	r3, r3, #3
 800a758:	4a07      	ldr	r2, [pc, #28]	@ (800a778 <UART_SetConfig+0x6ac>)
 800a75a:	fa22 f303 	lsr.w	r3, r2, r3
 800a75e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a760:	e01c      	b.n	800a79c <UART_SetConfig+0x6d0>
 800a762:	bf00      	nop
 800a764:	40011400 	.word	0x40011400
 800a768:	58024400 	.word	0x58024400
 800a76c:	40007800 	.word	0x40007800
 800a770:	40007c00 	.word	0x40007c00
 800a774:	58000c00 	.word	0x58000c00
 800a778:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a77c:	4b9d      	ldr	r3, [pc, #628]	@ (800a9f4 <UART_SetConfig+0x928>)
 800a77e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a780:	e00c      	b.n	800a79c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a782:	4b9d      	ldr	r3, [pc, #628]	@ (800a9f8 <UART_SetConfig+0x92c>)
 800a784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a786:	e009      	b.n	800a79c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a788:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a78c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a78e:	e005      	b.n	800a79c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a790:	2300      	movs	r3, #0
 800a792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a79a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a79c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	f000 81de 	beq.w	800ab60 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7a8:	4a94      	ldr	r2, [pc, #592]	@ (800a9fc <UART_SetConfig+0x930>)
 800a7aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7b6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	685a      	ldr	r2, [r3, #4]
 800a7bc:	4613      	mov	r3, r2
 800a7be:	005b      	lsls	r3, r3, #1
 800a7c0:	4413      	add	r3, r2
 800a7c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d305      	bcc.n	800a7d4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a7ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d903      	bls.n	800a7dc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a7da:	e1c1      	b.n	800ab60 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7de:	2200      	movs	r2, #0
 800a7e0:	60bb      	str	r3, [r7, #8]
 800a7e2:	60fa      	str	r2, [r7, #12]
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7e8:	4a84      	ldr	r2, [pc, #528]	@ (800a9fc <UART_SetConfig+0x930>)
 800a7ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	603b      	str	r3, [r7, #0]
 800a7f4:	607a      	str	r2, [r7, #4]
 800a7f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a7fe:	f7f5 fe1f 	bl	8000440 <__aeabi_uldivmod>
 800a802:	4602      	mov	r2, r0
 800a804:	460b      	mov	r3, r1
 800a806:	4610      	mov	r0, r2
 800a808:	4619      	mov	r1, r3
 800a80a:	f04f 0200 	mov.w	r2, #0
 800a80e:	f04f 0300 	mov.w	r3, #0
 800a812:	020b      	lsls	r3, r1, #8
 800a814:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a818:	0202      	lsls	r2, r0, #8
 800a81a:	6979      	ldr	r1, [r7, #20]
 800a81c:	6849      	ldr	r1, [r1, #4]
 800a81e:	0849      	lsrs	r1, r1, #1
 800a820:	2000      	movs	r0, #0
 800a822:	460c      	mov	r4, r1
 800a824:	4605      	mov	r5, r0
 800a826:	eb12 0804 	adds.w	r8, r2, r4
 800a82a:	eb43 0905 	adc.w	r9, r3, r5
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	469a      	mov	sl, r3
 800a836:	4693      	mov	fp, r2
 800a838:	4652      	mov	r2, sl
 800a83a:	465b      	mov	r3, fp
 800a83c:	4640      	mov	r0, r8
 800a83e:	4649      	mov	r1, r9
 800a840:	f7f5 fdfe 	bl	8000440 <__aeabi_uldivmod>
 800a844:	4602      	mov	r2, r0
 800a846:	460b      	mov	r3, r1
 800a848:	4613      	mov	r3, r2
 800a84a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a84c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a84e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a852:	d308      	bcc.n	800a866 <UART_SetConfig+0x79a>
 800a854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a856:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a85a:	d204      	bcs.n	800a866 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a862:	60da      	str	r2, [r3, #12]
 800a864:	e17c      	b.n	800ab60 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a86c:	e178      	b.n	800ab60 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	69db      	ldr	r3, [r3, #28]
 800a872:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a876:	f040 80c5 	bne.w	800aa04 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a87a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a87e:	2b20      	cmp	r3, #32
 800a880:	dc48      	bgt.n	800a914 <UART_SetConfig+0x848>
 800a882:	2b00      	cmp	r3, #0
 800a884:	db7b      	blt.n	800a97e <UART_SetConfig+0x8b2>
 800a886:	2b20      	cmp	r3, #32
 800a888:	d879      	bhi.n	800a97e <UART_SetConfig+0x8b2>
 800a88a:	a201      	add	r2, pc, #4	@ (adr r2, 800a890 <UART_SetConfig+0x7c4>)
 800a88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a890:	0800a91b 	.word	0x0800a91b
 800a894:	0800a923 	.word	0x0800a923
 800a898:	0800a97f 	.word	0x0800a97f
 800a89c:	0800a97f 	.word	0x0800a97f
 800a8a0:	0800a92b 	.word	0x0800a92b
 800a8a4:	0800a97f 	.word	0x0800a97f
 800a8a8:	0800a97f 	.word	0x0800a97f
 800a8ac:	0800a97f 	.word	0x0800a97f
 800a8b0:	0800a93b 	.word	0x0800a93b
 800a8b4:	0800a97f 	.word	0x0800a97f
 800a8b8:	0800a97f 	.word	0x0800a97f
 800a8bc:	0800a97f 	.word	0x0800a97f
 800a8c0:	0800a97f 	.word	0x0800a97f
 800a8c4:	0800a97f 	.word	0x0800a97f
 800a8c8:	0800a97f 	.word	0x0800a97f
 800a8cc:	0800a97f 	.word	0x0800a97f
 800a8d0:	0800a94b 	.word	0x0800a94b
 800a8d4:	0800a97f 	.word	0x0800a97f
 800a8d8:	0800a97f 	.word	0x0800a97f
 800a8dc:	0800a97f 	.word	0x0800a97f
 800a8e0:	0800a97f 	.word	0x0800a97f
 800a8e4:	0800a97f 	.word	0x0800a97f
 800a8e8:	0800a97f 	.word	0x0800a97f
 800a8ec:	0800a97f 	.word	0x0800a97f
 800a8f0:	0800a97f 	.word	0x0800a97f
 800a8f4:	0800a97f 	.word	0x0800a97f
 800a8f8:	0800a97f 	.word	0x0800a97f
 800a8fc:	0800a97f 	.word	0x0800a97f
 800a900:	0800a97f 	.word	0x0800a97f
 800a904:	0800a97f 	.word	0x0800a97f
 800a908:	0800a97f 	.word	0x0800a97f
 800a90c:	0800a97f 	.word	0x0800a97f
 800a910:	0800a971 	.word	0x0800a971
 800a914:	2b40      	cmp	r3, #64	@ 0x40
 800a916:	d02e      	beq.n	800a976 <UART_SetConfig+0x8aa>
 800a918:	e031      	b.n	800a97e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a91a:	f7fc fa39 	bl	8006d90 <HAL_RCC_GetPCLK1Freq>
 800a91e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a920:	e033      	b.n	800a98a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a922:	f7fc fa4b 	bl	8006dbc <HAL_RCC_GetPCLK2Freq>
 800a926:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a928:	e02f      	b.n	800a98a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a92a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a92e:	4618      	mov	r0, r3
 800a930:	f7fe f9fa 	bl	8008d28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a938:	e027      	b.n	800a98a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a93a:	f107 0318 	add.w	r3, r7, #24
 800a93e:	4618      	mov	r0, r3
 800a940:	f7fe fb46 	bl	8008fd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a948:	e01f      	b.n	800a98a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a94a:	4b2d      	ldr	r3, [pc, #180]	@ (800aa00 <UART_SetConfig+0x934>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f003 0320 	and.w	r3, r3, #32
 800a952:	2b00      	cmp	r3, #0
 800a954:	d009      	beq.n	800a96a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a956:	4b2a      	ldr	r3, [pc, #168]	@ (800aa00 <UART_SetConfig+0x934>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	08db      	lsrs	r3, r3, #3
 800a95c:	f003 0303 	and.w	r3, r3, #3
 800a960:	4a24      	ldr	r2, [pc, #144]	@ (800a9f4 <UART_SetConfig+0x928>)
 800a962:	fa22 f303 	lsr.w	r3, r2, r3
 800a966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a968:	e00f      	b.n	800a98a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a96a:	4b22      	ldr	r3, [pc, #136]	@ (800a9f4 <UART_SetConfig+0x928>)
 800a96c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a96e:	e00c      	b.n	800a98a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a970:	4b21      	ldr	r3, [pc, #132]	@ (800a9f8 <UART_SetConfig+0x92c>)
 800a972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a974:	e009      	b.n	800a98a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a976:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a97a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a97c:	e005      	b.n	800a98a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a97e:	2300      	movs	r3, #0
 800a980:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a988:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a98a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f000 80e7 	beq.w	800ab60 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a996:	4a19      	ldr	r2, [pc, #100]	@ (800a9fc <UART_SetConfig+0x930>)
 800a998:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a99c:	461a      	mov	r2, r3
 800a99e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9a4:	005a      	lsls	r2, r3, #1
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	085b      	lsrs	r3, r3, #1
 800a9ac:	441a      	add	r2, r3
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ba:	2b0f      	cmp	r3, #15
 800a9bc:	d916      	bls.n	800a9ec <UART_SetConfig+0x920>
 800a9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9c4:	d212      	bcs.n	800a9ec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a9c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	f023 030f 	bic.w	r3, r3, #15
 800a9ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a9d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d2:	085b      	lsrs	r3, r3, #1
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	f003 0307 	and.w	r3, r3, #7
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a9e8:	60da      	str	r2, [r3, #12]
 800a9ea:	e0b9      	b.n	800ab60 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a9f2:	e0b5      	b.n	800ab60 <UART_SetConfig+0xa94>
 800a9f4:	03d09000 	.word	0x03d09000
 800a9f8:	003d0900 	.word	0x003d0900
 800a9fc:	0800ceb8 	.word	0x0800ceb8
 800aa00:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800aa04:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aa08:	2b20      	cmp	r3, #32
 800aa0a:	dc49      	bgt.n	800aaa0 <UART_SetConfig+0x9d4>
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	db7c      	blt.n	800ab0a <UART_SetConfig+0xa3e>
 800aa10:	2b20      	cmp	r3, #32
 800aa12:	d87a      	bhi.n	800ab0a <UART_SetConfig+0xa3e>
 800aa14:	a201      	add	r2, pc, #4	@ (adr r2, 800aa1c <UART_SetConfig+0x950>)
 800aa16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa1a:	bf00      	nop
 800aa1c:	0800aaa7 	.word	0x0800aaa7
 800aa20:	0800aaaf 	.word	0x0800aaaf
 800aa24:	0800ab0b 	.word	0x0800ab0b
 800aa28:	0800ab0b 	.word	0x0800ab0b
 800aa2c:	0800aab7 	.word	0x0800aab7
 800aa30:	0800ab0b 	.word	0x0800ab0b
 800aa34:	0800ab0b 	.word	0x0800ab0b
 800aa38:	0800ab0b 	.word	0x0800ab0b
 800aa3c:	0800aac7 	.word	0x0800aac7
 800aa40:	0800ab0b 	.word	0x0800ab0b
 800aa44:	0800ab0b 	.word	0x0800ab0b
 800aa48:	0800ab0b 	.word	0x0800ab0b
 800aa4c:	0800ab0b 	.word	0x0800ab0b
 800aa50:	0800ab0b 	.word	0x0800ab0b
 800aa54:	0800ab0b 	.word	0x0800ab0b
 800aa58:	0800ab0b 	.word	0x0800ab0b
 800aa5c:	0800aad7 	.word	0x0800aad7
 800aa60:	0800ab0b 	.word	0x0800ab0b
 800aa64:	0800ab0b 	.word	0x0800ab0b
 800aa68:	0800ab0b 	.word	0x0800ab0b
 800aa6c:	0800ab0b 	.word	0x0800ab0b
 800aa70:	0800ab0b 	.word	0x0800ab0b
 800aa74:	0800ab0b 	.word	0x0800ab0b
 800aa78:	0800ab0b 	.word	0x0800ab0b
 800aa7c:	0800ab0b 	.word	0x0800ab0b
 800aa80:	0800ab0b 	.word	0x0800ab0b
 800aa84:	0800ab0b 	.word	0x0800ab0b
 800aa88:	0800ab0b 	.word	0x0800ab0b
 800aa8c:	0800ab0b 	.word	0x0800ab0b
 800aa90:	0800ab0b 	.word	0x0800ab0b
 800aa94:	0800ab0b 	.word	0x0800ab0b
 800aa98:	0800ab0b 	.word	0x0800ab0b
 800aa9c:	0800aafd 	.word	0x0800aafd
 800aaa0:	2b40      	cmp	r3, #64	@ 0x40
 800aaa2:	d02e      	beq.n	800ab02 <UART_SetConfig+0xa36>
 800aaa4:	e031      	b.n	800ab0a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aaa6:	f7fc f973 	bl	8006d90 <HAL_RCC_GetPCLK1Freq>
 800aaaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aaac:	e033      	b.n	800ab16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aaae:	f7fc f985 	bl	8006dbc <HAL_RCC_GetPCLK2Freq>
 800aab2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aab4:	e02f      	b.n	800ab16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aab6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aaba:	4618      	mov	r0, r3
 800aabc:	f7fe f934 	bl	8008d28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aac4:	e027      	b.n	800ab16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aac6:	f107 0318 	add.w	r3, r7, #24
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7fe fa80 	bl	8008fd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aad4:	e01f      	b.n	800ab16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aad6:	4b2d      	ldr	r3, [pc, #180]	@ (800ab8c <UART_SetConfig+0xac0>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f003 0320 	and.w	r3, r3, #32
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d009      	beq.n	800aaf6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aae2:	4b2a      	ldr	r3, [pc, #168]	@ (800ab8c <UART_SetConfig+0xac0>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	08db      	lsrs	r3, r3, #3
 800aae8:	f003 0303 	and.w	r3, r3, #3
 800aaec:	4a28      	ldr	r2, [pc, #160]	@ (800ab90 <UART_SetConfig+0xac4>)
 800aaee:	fa22 f303 	lsr.w	r3, r2, r3
 800aaf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aaf4:	e00f      	b.n	800ab16 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800aaf6:	4b26      	ldr	r3, [pc, #152]	@ (800ab90 <UART_SetConfig+0xac4>)
 800aaf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aafa:	e00c      	b.n	800ab16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aafc:	4b25      	ldr	r3, [pc, #148]	@ (800ab94 <UART_SetConfig+0xac8>)
 800aafe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab00:	e009      	b.n	800ab16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab08:	e005      	b.n	800ab16 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ab14:	bf00      	nop
    }

    if (pclk != 0U)
 800ab16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d021      	beq.n	800ab60 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab20:	4a1d      	ldr	r2, [pc, #116]	@ (800ab98 <UART_SetConfig+0xacc>)
 800ab22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab26:	461a      	mov	r2, r3
 800ab28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab2a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	085b      	lsrs	r3, r3, #1
 800ab34:	441a      	add	r2, r3
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab42:	2b0f      	cmp	r3, #15
 800ab44:	d909      	bls.n	800ab5a <UART_SetConfig+0xa8e>
 800ab46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab4c:	d205      	bcs.n	800ab5a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab50:	b29a      	uxth	r2, r3
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	60da      	str	r2, [r3, #12]
 800ab58:	e002      	b.n	800ab60 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	2200      	movs	r2, #0
 800ab74:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ab7c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3748      	adds	r7, #72	@ 0x48
 800ab84:	46bd      	mov	sp, r7
 800ab86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab8a:	bf00      	nop
 800ab8c:	58024400 	.word	0x58024400
 800ab90:	03d09000 	.word	0x03d09000
 800ab94:	003d0900 	.word	0x003d0900
 800ab98:	0800ceb8 	.word	0x0800ceb8

0800ab9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aba8:	f003 0308 	and.w	r3, r3, #8
 800abac:	2b00      	cmp	r3, #0
 800abae:	d00a      	beq.n	800abc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	430a      	orrs	r2, r1
 800abc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abca:	f003 0301 	and.w	r3, r3, #1
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d00a      	beq.n	800abe8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	430a      	orrs	r2, r1
 800abe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abec:	f003 0302 	and.w	r3, r3, #2
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d00a      	beq.n	800ac0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	430a      	orrs	r2, r1
 800ac08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac0e:	f003 0304 	and.w	r3, r3, #4
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d00a      	beq.n	800ac2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	430a      	orrs	r2, r1
 800ac2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac30:	f003 0310 	and.w	r3, r3, #16
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d00a      	beq.n	800ac4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	430a      	orrs	r2, r1
 800ac4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac52:	f003 0320 	and.w	r3, r3, #32
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00a      	beq.n	800ac70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	430a      	orrs	r2, r1
 800ac6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d01a      	beq.n	800acb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	430a      	orrs	r2, r1
 800ac90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac9a:	d10a      	bne.n	800acb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	430a      	orrs	r2, r1
 800acb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00a      	beq.n	800acd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	430a      	orrs	r2, r1
 800acd2:	605a      	str	r2, [r3, #4]
  }
}
 800acd4:	bf00      	nop
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b098      	sub	sp, #96	@ 0x60
 800ace4:	af02      	add	r7, sp, #8
 800ace6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800acf0:	f7f6 fd4c 	bl	800178c <HAL_GetTick>
 800acf4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f003 0308 	and.w	r3, r3, #8
 800ad00:	2b08      	cmp	r3, #8
 800ad02:	d12f      	bne.n	800ad64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ad08:	9300      	str	r3, [sp, #0]
 800ad0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 f88e 	bl	800ae34 <UART_WaitOnFlagUntilTimeout>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d022      	beq.n	800ad64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad26:	e853 3f00 	ldrex	r3, [r3]
 800ad2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ad2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad32:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	461a      	mov	r2, r3
 800ad3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad3c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad3e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad44:	e841 2300 	strex	r3, r2, [r1]
 800ad48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d1e6      	bne.n	800ad1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2220      	movs	r2, #32
 800ad54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad60:	2303      	movs	r3, #3
 800ad62:	e063      	b.n	800ae2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f003 0304 	and.w	r3, r3, #4
 800ad6e:	2b04      	cmp	r3, #4
 800ad70:	d149      	bne.n	800ae06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad72:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f857 	bl	800ae34 <UART_WaitOnFlagUntilTimeout>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d03c      	beq.n	800ae06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad94:	e853 3f00 	ldrex	r3, [r3]
 800ad98:	623b      	str	r3, [r7, #32]
   return(result);
 800ad9a:	6a3b      	ldr	r3, [r7, #32]
 800ad9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ada0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	461a      	mov	r2, r3
 800ada8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adaa:	633b      	str	r3, [r7, #48]	@ 0x30
 800adac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800adb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adb2:	e841 2300 	strex	r3, r2, [r1]
 800adb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800adb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d1e6      	bne.n	800ad8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	3308      	adds	r3, #8
 800adc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	e853 3f00 	ldrex	r3, [r3]
 800adcc:	60fb      	str	r3, [r7, #12]
   return(result);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f023 0301 	bic.w	r3, r3, #1
 800add4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	3308      	adds	r3, #8
 800addc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800adde:	61fa      	str	r2, [r7, #28]
 800ade0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade2:	69b9      	ldr	r1, [r7, #24]
 800ade4:	69fa      	ldr	r2, [r7, #28]
 800ade6:	e841 2300 	strex	r3, r2, [r1]
 800adea:	617b      	str	r3, [r7, #20]
   return(result);
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d1e5      	bne.n	800adbe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2220      	movs	r2, #32
 800adf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2200      	movs	r2, #0
 800adfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae02:	2303      	movs	r3, #3
 800ae04:	e012      	b.n	800ae2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2220      	movs	r2, #32
 800ae0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2220      	movs	r2, #32
 800ae12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2200      	movs	r2, #0
 800ae26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae2a:	2300      	movs	r3, #0
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3758      	adds	r7, #88	@ 0x58
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	603b      	str	r3, [r7, #0]
 800ae40:	4613      	mov	r3, r2
 800ae42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae44:	e04f      	b.n	800aee6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae4c:	d04b      	beq.n	800aee6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae4e:	f7f6 fc9d 	bl	800178c <HAL_GetTick>
 800ae52:	4602      	mov	r2, r0
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	1ad3      	subs	r3, r2, r3
 800ae58:	69ba      	ldr	r2, [r7, #24]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d302      	bcc.n	800ae64 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae5e:	69bb      	ldr	r3, [r7, #24]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d101      	bne.n	800ae68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ae64:	2303      	movs	r3, #3
 800ae66:	e04e      	b.n	800af06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f003 0304 	and.w	r3, r3, #4
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d037      	beq.n	800aee6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	2b80      	cmp	r3, #128	@ 0x80
 800ae7a:	d034      	beq.n	800aee6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	2b40      	cmp	r3, #64	@ 0x40
 800ae80:	d031      	beq.n	800aee6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	69db      	ldr	r3, [r3, #28]
 800ae88:	f003 0308 	and.w	r3, r3, #8
 800ae8c:	2b08      	cmp	r3, #8
 800ae8e:	d110      	bne.n	800aeb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	2208      	movs	r2, #8
 800ae96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	f000 f839 	bl	800af10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2208      	movs	r2, #8
 800aea2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e029      	b.n	800af06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	69db      	ldr	r3, [r3, #28]
 800aeb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aebc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aec0:	d111      	bne.n	800aee6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aeca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f000 f81f 	bl	800af10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2220      	movs	r2, #32
 800aed6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2200      	movs	r2, #0
 800aede:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800aee2:	2303      	movs	r3, #3
 800aee4:	e00f      	b.n	800af06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	69da      	ldr	r2, [r3, #28]
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	4013      	ands	r3, r2
 800aef0:	68ba      	ldr	r2, [r7, #8]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	bf0c      	ite	eq
 800aef6:	2301      	moveq	r3, #1
 800aef8:	2300      	movne	r3, #0
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	461a      	mov	r2, r3
 800aefe:	79fb      	ldrb	r3, [r7, #7]
 800af00:	429a      	cmp	r2, r3
 800af02:	d0a0      	beq.n	800ae46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
	...

0800af10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af10:	b480      	push	{r7}
 800af12:	b095      	sub	sp, #84	@ 0x54
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af20:	e853 3f00 	ldrex	r3, [r3]
 800af24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800af26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	461a      	mov	r2, r3
 800af34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af36:	643b      	str	r3, [r7, #64]	@ 0x40
 800af38:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800af3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800af3e:	e841 2300 	strex	r3, r2, [r1]
 800af42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800af44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af46:	2b00      	cmp	r3, #0
 800af48:	d1e6      	bne.n	800af18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	3308      	adds	r3, #8
 800af50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af52:	6a3b      	ldr	r3, [r7, #32]
 800af54:	e853 3f00 	ldrex	r3, [r3]
 800af58:	61fb      	str	r3, [r7, #28]
   return(result);
 800af5a:	69fa      	ldr	r2, [r7, #28]
 800af5c:	4b1e      	ldr	r3, [pc, #120]	@ (800afd8 <UART_EndRxTransfer+0xc8>)
 800af5e:	4013      	ands	r3, r2
 800af60:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	3308      	adds	r3, #8
 800af68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800af6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af72:	e841 2300 	strex	r3, r2, [r1]
 800af76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d1e5      	bne.n	800af4a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af82:	2b01      	cmp	r3, #1
 800af84:	d118      	bne.n	800afb8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	e853 3f00 	ldrex	r3, [r3]
 800af92:	60bb      	str	r3, [r7, #8]
   return(result);
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	f023 0310 	bic.w	r3, r3, #16
 800af9a:	647b      	str	r3, [r7, #68]	@ 0x44
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	461a      	mov	r2, r3
 800afa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800afa4:	61bb      	str	r3, [r7, #24]
 800afa6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa8:	6979      	ldr	r1, [r7, #20]
 800afaa:	69ba      	ldr	r2, [r7, #24]
 800afac:	e841 2300 	strex	r3, r2, [r1]
 800afb0:	613b      	str	r3, [r7, #16]
   return(result);
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d1e6      	bne.n	800af86 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2220      	movs	r2, #32
 800afbc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2200      	movs	r2, #0
 800afca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800afcc:	bf00      	nop
 800afce:	3754      	adds	r7, #84	@ 0x54
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr
 800afd8:	effffffe 	.word	0xeffffffe

0800afdc <arm_rfft_fast_init_f32>:
 800afdc:	084b      	lsrs	r3, r1, #1
 800afde:	2b80      	cmp	r3, #128	@ 0x80
 800afe0:	b430      	push	{r4, r5}
 800afe2:	8201      	strh	r1, [r0, #16]
 800afe4:	8003      	strh	r3, [r0, #0]
 800afe6:	d06f      	beq.n	800b0c8 <arm_rfft_fast_init_f32+0xec>
 800afe8:	d916      	bls.n	800b018 <arm_rfft_fast_init_f32+0x3c>
 800afea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afee:	d05e      	beq.n	800b0ae <arm_rfft_fast_init_f32+0xd2>
 800aff0:	d935      	bls.n	800b05e <arm_rfft_fast_init_f32+0x82>
 800aff2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aff6:	d025      	beq.n	800b044 <arm_rfft_fast_init_f32+0x68>
 800aff8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800affc:	d112      	bne.n	800b024 <arm_rfft_fast_init_f32+0x48>
 800affe:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 800b002:	4c37      	ldr	r4, [pc, #220]	@ (800b0e0 <arm_rfft_fast_init_f32+0x104>)
 800b004:	4937      	ldr	r1, [pc, #220]	@ (800b0e4 <arm_rfft_fast_init_f32+0x108>)
 800b006:	2300      	movs	r3, #0
 800b008:	4a37      	ldr	r2, [pc, #220]	@ (800b0e8 <arm_rfft_fast_init_f32+0x10c>)
 800b00a:	8185      	strh	r5, [r0, #12]
 800b00c:	6084      	str	r4, [r0, #8]
 800b00e:	6041      	str	r1, [r0, #4]
 800b010:	6142      	str	r2, [r0, #20]
 800b012:	b258      	sxtb	r0, r3
 800b014:	bc30      	pop	{r4, r5}
 800b016:	4770      	bx	lr
 800b018:	2b20      	cmp	r3, #32
 800b01a:	d030      	beq.n	800b07e <arm_rfft_fast_init_f32+0xa2>
 800b01c:	2b40      	cmp	r3, #64	@ 0x40
 800b01e:	d005      	beq.n	800b02c <arm_rfft_fast_init_f32+0x50>
 800b020:	2b10      	cmp	r3, #16
 800b022:	d038      	beq.n	800b096 <arm_rfft_fast_init_f32+0xba>
 800b024:	23ff      	movs	r3, #255	@ 0xff
 800b026:	bc30      	pop	{r4, r5}
 800b028:	b258      	sxtb	r0, r3
 800b02a:	4770      	bx	lr
 800b02c:	2538      	movs	r5, #56	@ 0x38
 800b02e:	4c2f      	ldr	r4, [pc, #188]	@ (800b0ec <arm_rfft_fast_init_f32+0x110>)
 800b030:	492f      	ldr	r1, [pc, #188]	@ (800b0f0 <arm_rfft_fast_init_f32+0x114>)
 800b032:	2300      	movs	r3, #0
 800b034:	4a2f      	ldr	r2, [pc, #188]	@ (800b0f4 <arm_rfft_fast_init_f32+0x118>)
 800b036:	8185      	strh	r5, [r0, #12]
 800b038:	6084      	str	r4, [r0, #8]
 800b03a:	6041      	str	r1, [r0, #4]
 800b03c:	6142      	str	r2, [r0, #20]
 800b03e:	b258      	sxtb	r0, r3
 800b040:	bc30      	pop	{r4, r5}
 800b042:	4770      	bx	lr
 800b044:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 800b048:	4c2b      	ldr	r4, [pc, #172]	@ (800b0f8 <arm_rfft_fast_init_f32+0x11c>)
 800b04a:	492c      	ldr	r1, [pc, #176]	@ (800b0fc <arm_rfft_fast_init_f32+0x120>)
 800b04c:	2300      	movs	r3, #0
 800b04e:	4a2c      	ldr	r2, [pc, #176]	@ (800b100 <arm_rfft_fast_init_f32+0x124>)
 800b050:	8185      	strh	r5, [r0, #12]
 800b052:	6084      	str	r4, [r0, #8]
 800b054:	6041      	str	r1, [r0, #4]
 800b056:	6142      	str	r2, [r0, #20]
 800b058:	b258      	sxtb	r0, r3
 800b05a:	bc30      	pop	{r4, r5}
 800b05c:	4770      	bx	lr
 800b05e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b062:	d1df      	bne.n	800b024 <arm_rfft_fast_init_f32+0x48>
 800b064:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 800b068:	4c26      	ldr	r4, [pc, #152]	@ (800b104 <arm_rfft_fast_init_f32+0x128>)
 800b06a:	4927      	ldr	r1, [pc, #156]	@ (800b108 <arm_rfft_fast_init_f32+0x12c>)
 800b06c:	2300      	movs	r3, #0
 800b06e:	4a27      	ldr	r2, [pc, #156]	@ (800b10c <arm_rfft_fast_init_f32+0x130>)
 800b070:	8185      	strh	r5, [r0, #12]
 800b072:	6084      	str	r4, [r0, #8]
 800b074:	6041      	str	r1, [r0, #4]
 800b076:	6142      	str	r2, [r0, #20]
 800b078:	b258      	sxtb	r0, r3
 800b07a:	bc30      	pop	{r4, r5}
 800b07c:	4770      	bx	lr
 800b07e:	2530      	movs	r5, #48	@ 0x30
 800b080:	4c23      	ldr	r4, [pc, #140]	@ (800b110 <arm_rfft_fast_init_f32+0x134>)
 800b082:	4924      	ldr	r1, [pc, #144]	@ (800b114 <arm_rfft_fast_init_f32+0x138>)
 800b084:	2300      	movs	r3, #0
 800b086:	4a24      	ldr	r2, [pc, #144]	@ (800b118 <arm_rfft_fast_init_f32+0x13c>)
 800b088:	8185      	strh	r5, [r0, #12]
 800b08a:	6084      	str	r4, [r0, #8]
 800b08c:	6041      	str	r1, [r0, #4]
 800b08e:	6142      	str	r2, [r0, #20]
 800b090:	b258      	sxtb	r0, r3
 800b092:	bc30      	pop	{r4, r5}
 800b094:	4770      	bx	lr
 800b096:	2514      	movs	r5, #20
 800b098:	4c20      	ldr	r4, [pc, #128]	@ (800b11c <arm_rfft_fast_init_f32+0x140>)
 800b09a:	4921      	ldr	r1, [pc, #132]	@ (800b120 <arm_rfft_fast_init_f32+0x144>)
 800b09c:	2300      	movs	r3, #0
 800b09e:	4a21      	ldr	r2, [pc, #132]	@ (800b124 <arm_rfft_fast_init_f32+0x148>)
 800b0a0:	8185      	strh	r5, [r0, #12]
 800b0a2:	6084      	str	r4, [r0, #8]
 800b0a4:	6041      	str	r1, [r0, #4]
 800b0a6:	6142      	str	r2, [r0, #20]
 800b0a8:	b258      	sxtb	r0, r3
 800b0aa:	bc30      	pop	{r4, r5}
 800b0ac:	4770      	bx	lr
 800b0ae:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 800b0b2:	4c1d      	ldr	r4, [pc, #116]	@ (800b128 <arm_rfft_fast_init_f32+0x14c>)
 800b0b4:	491d      	ldr	r1, [pc, #116]	@ (800b12c <arm_rfft_fast_init_f32+0x150>)
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	4a1d      	ldr	r2, [pc, #116]	@ (800b130 <arm_rfft_fast_init_f32+0x154>)
 800b0ba:	8185      	strh	r5, [r0, #12]
 800b0bc:	6084      	str	r4, [r0, #8]
 800b0be:	6041      	str	r1, [r0, #4]
 800b0c0:	6142      	str	r2, [r0, #20]
 800b0c2:	b258      	sxtb	r0, r3
 800b0c4:	bc30      	pop	{r4, r5}
 800b0c6:	4770      	bx	lr
 800b0c8:	25d0      	movs	r5, #208	@ 0xd0
 800b0ca:	4c1a      	ldr	r4, [pc, #104]	@ (800b134 <arm_rfft_fast_init_f32+0x158>)
 800b0cc:	491a      	ldr	r1, [pc, #104]	@ (800b138 <arm_rfft_fast_init_f32+0x15c>)
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	4a1a      	ldr	r2, [pc, #104]	@ (800b13c <arm_rfft_fast_init_f32+0x160>)
 800b0d2:	8185      	strh	r5, [r0, #12]
 800b0d4:	6084      	str	r4, [r0, #8]
 800b0d6:	6041      	str	r1, [r0, #4]
 800b0d8:	6142      	str	r2, [r0, #20]
 800b0da:	b258      	sxtb	r0, r3
 800b0dc:	bc30      	pop	{r4, r5}
 800b0de:	4770      	bx	lr
 800b0e0:	0801bcd8 	.word	0x0801bcd8
 800b0e4:	0800ced0 	.word	0x0800ced0
 800b0e8:	08013040 	.word	0x08013040
 800b0ec:	08010fd0 	.word	0x08010fd0
 800b0f0:	0801da98 	.word	0x0801da98
 800b0f4:	0801ff88 	.word	0x0801ff88
 800b0f8:	080199c0 	.word	0x080199c0
 800b0fc:	080178c0 	.word	0x080178c0
 800b100:	08011040 	.word	0x08011040
 800b104:	0801fc18 	.word	0x0801fc18
 800b108:	08017040 	.word	0x08017040
 800b10c:	0801dc98 	.word	0x0801dc98
 800b110:	0801a878 	.word	0x0801a878
 800b114:	080198c0 	.word	0x080198c0
 800b118:	08010ed0 	.word	0x08010ed0
 800b11c:	0801a7d0 	.word	0x0801a7d0
 800b120:	08017840 	.word	0x08017840
 800b124:	0801a7f8 	.word	0x0801a7f8
 800b128:	0801e498 	.word	0x0801e498
 800b12c:	0801acd8 	.word	0x0801acd8
 800b130:	0801e818 	.word	0x0801e818
 800b134:	08020188 	.word	0x08020188
 800b138:	0801a8d8 	.word	0x0801a8d8
 800b13c:	0801f818 	.word	0x0801f818

0800b140 <arm_rfft_fast_f32>:
 800b140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b144:	8a05      	ldrh	r5, [r0, #16]
 800b146:	4606      	mov	r6, r0
 800b148:	4690      	mov	r8, r2
 800b14a:	460c      	mov	r4, r1
 800b14c:	086d      	lsrs	r5, r5, #1
 800b14e:	8005      	strh	r5, [r0, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d15e      	bne.n	800b212 <arm_rfft_fast_f32+0xd2>
 800b154:	461a      	mov	r2, r3
 800b156:	2301      	movs	r3, #1
 800b158:	f000 fbe0 	bl	800b91c <arm_cfft_f32>
 800b15c:	edd4 7a00 	vldr	s15, [r4]
 800b160:	ed94 7a01 	vldr	s14, [r4, #4]
 800b164:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b168:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b16c:	8837      	ldrh	r7, [r6, #0]
 800b16e:	ee37 7a07 	vadd.f32	s14, s14, s14
 800b172:	6975      	ldr	r5, [r6, #20]
 800b174:	3f01      	subs	r7, #1
 800b176:	eef0 3a46 	vmov.f32	s7, s12
 800b17a:	3510      	adds	r5, #16
 800b17c:	f108 0610 	add.w	r6, r8, #16
 800b180:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b184:	eb04 00c7 	add.w	r0, r4, r7, lsl #3
 800b188:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b18c:	f104 0310 	add.w	r3, r4, #16
 800b190:	3808      	subs	r0, #8
 800b192:	ee26 7a86 	vmul.f32	s14, s13, s12
 800b196:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b19a:	ed88 7a00 	vstr	s14, [r8]
 800b19e:	edc8 7a01 	vstr	s15, [r8, #4]
 800b1a2:	edd0 6a02 	vldr	s13, [r0, #8]
 800b1a6:	3f01      	subs	r7, #1
 800b1a8:	ed13 5a02 	vldr	s10, [r3, #-8]
 800b1ac:	f1a0 0008 	sub.w	r0, r0, #8
 800b1b0:	ed13 7a01 	vldr	s14, [r3, #-4]
 800b1b4:	f105 0508 	add.w	r5, r5, #8
 800b1b8:	ee76 7ac5 	vsub.f32	s15, s13, s10
 800b1bc:	ed15 6a04 	vldr	s12, [r5, #-16]
 800b1c0:	edd0 5a05 	vldr	s11, [r0, #20]
 800b1c4:	ee36 5a85 	vadd.f32	s10, s13, s10
 800b1c8:	ed55 6a03 	vldr	s13, [r5, #-12]
 800b1cc:	f103 0308 	add.w	r3, r3, #8
 800b1d0:	ee35 4a87 	vadd.f32	s8, s11, s14
 800b1d4:	f106 0608 	add.w	r6, r6, #8
 800b1d8:	ee66 4a27 	vmul.f32	s9, s12, s15
 800b1dc:	ee77 5a65 	vsub.f32	s11, s14, s11
 800b1e0:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800b1e4:	ee34 5a85 	vadd.f32	s10, s9, s10
 800b1e8:	ee26 6a04 	vmul.f32	s12, s12, s8
 800b1ec:	ee66 6a84 	vmul.f32	s13, s13, s8
 800b1f0:	ee77 7a25 	vadd.f32	s15, s14, s11
 800b1f4:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b1f8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b1fc:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800b200:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800b204:	ed46 6a04 	vstr	s13, [r6, #-16]
 800b208:	ed46 7a03 	vstr	s15, [r6, #-12]
 800b20c:	d1c9      	bne.n	800b1a2 <arm_rfft_fast_f32+0x62>
 800b20e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b212:	edd1 7a00 	vldr	s15, [r1]
 800b216:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800b21a:	edd1 6a01 	vldr	s13, [r1, #4]
 800b21e:	1e68      	subs	r0, r5, #1
 800b220:	6975      	ldr	r5, [r6, #20]
 800b222:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b226:	00c1      	lsls	r1, r0, #3
 800b228:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b22c:	ee27 7a23 	vmul.f32	s14, s14, s7
 800b230:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800b234:	ed82 7a00 	vstr	s14, [r2]
 800b238:	edc2 7a01 	vstr	s15, [r2, #4]
 800b23c:	b3e0      	cbz	r0, 800b2b8 <arm_rfft_fast_f32+0x178>
 800b23e:	3908      	subs	r1, #8
 800b240:	f104 0210 	add.w	r2, r4, #16
 800b244:	3510      	adds	r5, #16
 800b246:	440c      	add	r4, r1
 800b248:	f108 0110 	add.w	r1, r8, #16
 800b24c:	ed94 7a02 	vldr	s14, [r4, #8]
 800b250:	3801      	subs	r0, #1
 800b252:	ed52 6a02 	vldr	s13, [r2, #-8]
 800b256:	f1a4 0408 	sub.w	r4, r4, #8
 800b25a:	ed15 6a02 	vldr	s12, [r5, #-8]
 800b25e:	f102 0208 	add.w	r2, r2, #8
 800b262:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800b266:	ed94 4a05 	vldr	s8, [r4, #20]
 800b26a:	ed12 5a03 	vldr	s10, [r2, #-12]
 800b26e:	ee77 6a26 	vadd.f32	s13, s14, s13
 800b272:	ed55 5a01 	vldr	s11, [r5, #-4]
 800b276:	f101 0108 	add.w	r1, r1, #8
 800b27a:	ee26 3a27 	vmul.f32	s6, s12, s15
 800b27e:	f105 0508 	add.w	r5, r5, #8
 800b282:	ee74 4a05 	vadd.f32	s9, s8, s10
 800b286:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800b28a:	ee35 5a44 	vsub.f32	s10, s10, s8
 800b28e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800b292:	ee26 6a24 	vmul.f32	s12, s12, s9
 800b296:	ee77 7a05 	vadd.f32	s15, s14, s10
 800b29a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800b29e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b2a2:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800b2a6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800b2aa:	ee27 7a23 	vmul.f32	s14, s14, s7
 800b2ae:	ed41 7a03 	vstr	s15, [r1, #-12]
 800b2b2:	ed01 7a04 	vstr	s14, [r1, #-16]
 800b2b6:	d1c9      	bne.n	800b24c <arm_rfft_fast_f32+0x10c>
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	4641      	mov	r1, r8
 800b2bc:	461a      	mov	r2, r3
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2c4:	f000 bb2a 	b.w	800b91c <arm_cfft_f32>

0800b2c8 <arm_cfft_radix8by2_f32>:
 800b2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2cc:	ed2d 8b06 	vpush	{d8-d10}
 800b2d0:	f8b0 e000 	ldrh.w	lr, [r0]
 800b2d4:	4607      	mov	r7, r0
 800b2d6:	6842      	ldr	r2, [r0, #4]
 800b2d8:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 800b2dc:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 800b2e0:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800b2e4:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800b2e8:	f000 80af 	beq.w	800b44a <arm_cfft_radix8by2_f32+0x182>
 800b2ec:	3310      	adds	r3, #16
 800b2ee:	3210      	adds	r2, #16
 800b2f0:	f101 0610 	add.w	r6, r1, #16
 800b2f4:	f108 0510 	add.w	r5, r8, #16
 800b2f8:	18cc      	adds	r4, r1, r3
 800b2fa:	4443      	add	r3, r8
 800b2fc:	ed55 6a04 	vldr	s13, [r5, #-16]
 800b300:	f1be 0e01 	subs.w	lr, lr, #1
 800b304:	ed56 4a04 	vldr	s9, [r6, #-16]
 800b308:	f104 0410 	add.w	r4, r4, #16
 800b30c:	ed55 7a02 	vldr	s15, [r5, #-8]
 800b310:	f106 0610 	add.w	r6, r6, #16
 800b314:	ee74 9aa6 	vadd.f32	s19, s9, s13
 800b318:	ed53 0a04 	vldr	s1, [r3, #-16]
 800b31c:	ed13 5a03 	vldr	s10, [r3, #-12]
 800b320:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800b324:	ed13 3a02 	vldr	s6, [r3, #-8]
 800b328:	f102 0210 	add.w	r2, r2, #16
 800b32c:	ed15 7a03 	vldr	s14, [r5, #-12]
 800b330:	f103 0310 	add.w	r3, r3, #16
 800b334:	ed55 2a01 	vldr	s5, [r5, #-4]
 800b338:	f105 0510 	add.w	r5, r5, #16
 800b33c:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 800b340:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 800b344:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 800b348:	ee33 8a83 	vadd.f32	s16, s7, s6
 800b34c:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 800b350:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 800b354:	ee34 0a06 	vadd.f32	s0, s8, s12
 800b358:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 800b35c:	ee76 aa87 	vadd.f32	s21, s13, s14
 800b360:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 800b364:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b368:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 800b36c:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800b370:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 800b374:	ee71 8a05 	vadd.f32	s17, s2, s10
 800b378:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800b37c:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 800b380:	ee72 9a22 	vadd.f32	s19, s4, s5
 800b384:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800b388:	ee35 5a41 	vsub.f32	s10, s10, s2
 800b38c:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 800b390:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 800b394:	ee36 6a44 	vsub.f32	s12, s12, s8
 800b398:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 800b39c:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800b3a0:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 800b3a4:	ee72 7a62 	vsub.f32	s15, s4, s5
 800b3a8:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 800b3ac:	ee73 2a63 	vsub.f32	s5, s6, s7
 800b3b0:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 800b3b4:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 800b3b8:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 800b3bc:	ee24 3a84 	vmul.f32	s6, s9, s8
 800b3c0:	ee27 2a26 	vmul.f32	s4, s14, s13
 800b3c4:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800b3c8:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800b3cc:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b3d0:	ee65 5a84 	vmul.f32	s11, s11, s8
 800b3d4:	ee65 6a26 	vmul.f32	s13, s10, s13
 800b3d8:	ee25 5a04 	vmul.f32	s10, s10, s8
 800b3dc:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b3e0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800b3e4:	ee33 4a02 	vadd.f32	s8, s6, s4
 800b3e8:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800b3ec:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 800b3f0:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 800b3f4:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 800b3f8:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 800b3fc:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 800b400:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 800b404:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800b408:	ee27 4a87 	vmul.f32	s8, s15, s14
 800b40c:	ee61 5a87 	vmul.f32	s11, s3, s14
 800b410:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b414:	ee22 5a87 	vmul.f32	s10, s5, s14
 800b418:	ee26 7a07 	vmul.f32	s14, s12, s14
 800b41c:	ee26 6a26 	vmul.f32	s12, s12, s13
 800b420:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800b424:	ee74 4a84 	vadd.f32	s9, s9, s8
 800b428:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b42c:	ee35 6a46 	vsub.f32	s12, s10, s12
 800b430:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b434:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 800b438:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 800b43c:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 800b440:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 800b444:	f47f af5a 	bne.w	800b2fc <arm_cfft_radix8by2_f32+0x34>
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	fa1f f48c 	uxth.w	r4, ip
 800b44e:	4608      	mov	r0, r1
 800b450:	2302      	movs	r3, #2
 800b452:	4621      	mov	r1, r4
 800b454:	f000 fada 	bl	800ba0c <arm_radix8_butterfly_f32>
 800b458:	4640      	mov	r0, r8
 800b45a:	4621      	mov	r1, r4
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	2302      	movs	r3, #2
 800b460:	ecbd 8b06 	vpop	{d8-d10}
 800b464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b468:	f000 bad0 	b.w	800ba0c <arm_radix8_butterfly_f32>

0800b46c <arm_cfft_radix8by4_f32>:
 800b46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b470:	ed2d 8b06 	vpush	{d8-d10}
 800b474:	8804      	ldrh	r4, [r0, #0]
 800b476:	b08f      	sub	sp, #60	@ 0x3c
 800b478:	ed91 6a00 	vldr	s12, [r1]
 800b47c:	460a      	mov	r2, r1
 800b47e:	0864      	lsrs	r4, r4, #1
 800b480:	ed91 7a01 	vldr	s14, [r1, #4]
 800b484:	9101      	str	r1, [sp, #4]
 800b486:	00a3      	lsls	r3, r4, #2
 800b488:	9104      	str	r1, [sp, #16]
 800b48a:	0864      	lsrs	r4, r4, #1
 800b48c:	6841      	ldr	r1, [r0, #4]
 800b48e:	900c      	str	r0, [sp, #48]	@ 0x30
 800b490:	4625      	mov	r5, r4
 800b492:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b494:	f101 0408 	add.w	r4, r1, #8
 800b498:	f101 0610 	add.w	r6, r1, #16
 800b49c:	9406      	str	r4, [sp, #24]
 800b49e:	18d4      	adds	r4, r2, r3
 800b4a0:	1eaa      	subs	r2, r5, #2
 800b4a2:	f101 0518 	add.w	r5, r1, #24
 800b4a6:	18e0      	adds	r0, r4, r3
 800b4a8:	ed94 4a00 	vldr	s8, [r4]
 800b4ac:	edd4 3a01 	vldr	s7, [r4, #4]
 800b4b0:	46a6      	mov	lr, r4
 800b4b2:	edd0 6a00 	vldr	s13, [r0]
 800b4b6:	18c7      	adds	r7, r0, r3
 800b4b8:	edd0 7a01 	vldr	s15, [r0, #4]
 800b4bc:	46a0      	mov	r8, r4
 800b4be:	ee76 5a26 	vadd.f32	s11, s12, s13
 800b4c2:	edd7 4a00 	vldr	s9, [r7]
 800b4c6:	9402      	str	r4, [sp, #8]
 800b4c8:	4604      	mov	r4, r0
 800b4ca:	9507      	str	r5, [sp, #28]
 800b4cc:	4605      	mov	r5, r0
 800b4ce:	ee75 2a84 	vadd.f32	s5, s11, s8
 800b4d2:	900a      	str	r0, [sp, #40]	@ 0x28
 800b4d4:	9801      	ldr	r0, [sp, #4]
 800b4d6:	ee76 6a66 	vsub.f32	s13, s12, s13
 800b4da:	ee37 6a27 	vadd.f32	s12, s14, s15
 800b4de:	ed97 5a01 	vldr	s10, [r7, #4]
 800b4e2:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800b4e6:	46bc      	mov	ip, r7
 800b4e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4ec:	9605      	str	r6, [sp, #20]
 800b4ee:	ee36 7a63 	vsub.f32	s14, s12, s7
 800b4f2:	9703      	str	r7, [sp, #12]
 800b4f4:	ee12 9a90 	vmov	r9, s5
 800b4f8:	ee33 3aa6 	vadd.f32	s6, s7, s13
 800b4fc:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800b500:	1f3e      	subs	r6, r7, #4
 800b502:	f840 9b08 	str.w	r9, [r0], #8
 800b506:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800b50a:	edde 2a01 	vldr	s5, [lr, #4]
 800b50e:	ee77 3ac4 	vsub.f32	s7, s15, s8
 800b512:	ee77 7a84 	vadd.f32	s15, s15, s8
 800b516:	ed9c 4a01 	vldr	s8, [ip, #4]
 800b51a:	ee36 6a22 	vadd.f32	s12, s12, s5
 800b51e:	9001      	str	r0, [sp, #4]
 800b520:	ee37 7a45 	vsub.f32	s14, s14, s10
 800b524:	9804      	ldr	r0, [sp, #16]
 800b526:	ee75 6a26 	vadd.f32	s13, s10, s13
 800b52a:	f1ae 0704 	sub.w	r7, lr, #4
 800b52e:	ee36 6a04 	vadd.f32	s12, s12, s8
 800b532:	ee33 4a45 	vsub.f32	s8, s6, s10
 800b536:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800b53a:	ee33 5aa4 	vadd.f32	s10, s7, s9
 800b53e:	ed80 6a01 	vstr	s12, [r0, #4]
 800b542:	ee14 9a10 	vmov	r9, s8
 800b546:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800b54a:	f848 9b08 	str.w	r9, [r8], #8
 800b54e:	ed8e 5a01 	vstr	s10, [lr, #4]
 800b552:	ee15 ea90 	vmov	lr, s11
 800b556:	f844 eb08 	str.w	lr, [r4], #8
 800b55a:	ee16 ea90 	vmov	lr, s13
 800b55e:	9408      	str	r4, [sp, #32]
 800b560:	462c      	mov	r4, r5
 800b562:	ed85 7a01 	vstr	s14, [r5, #4]
 800b566:	9d03      	ldr	r5, [sp, #12]
 800b568:	f84c eb08 	str.w	lr, [ip], #8
 800b56c:	edc5 7a01 	vstr	s15, [r5, #4]
 800b570:	0855      	lsrs	r5, r2, #1
 800b572:	9509      	str	r5, [sp, #36]	@ 0x24
 800b574:	f000 8130 	beq.w	800b7d8 <arm_cfft_radix8by4_f32+0x36c>
 800b578:	9804      	ldr	r0, [sp, #16]
 800b57a:	3b08      	subs	r3, #8
 800b57c:	46ab      	mov	fp, r5
 800b57e:	f1a4 020c 	sub.w	r2, r4, #12
 800b582:	f100 0510 	add.w	r5, r0, #16
 800b586:	f101 0920 	add.w	r9, r1, #32
 800b58a:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 800b58e:	f8dd a014 	ldr.w	sl, [sp, #20]
 800b592:	4433      	add	r3, r6
 800b594:	3410      	adds	r4, #16
 800b596:	4660      	mov	r0, ip
 800b598:	4641      	mov	r1, r8
 800b59a:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 800b59e:	ed54 6a02 	vldr	s13, [r4, #-8]
 800b5a2:	f1bb 0b01 	subs.w	fp, fp, #1
 800b5a6:	ed55 5a02 	vldr	s11, [r5, #-8]
 800b5aa:	f10a 0a08 	add.w	sl, sl, #8
 800b5ae:	edd1 7a00 	vldr	s15, [r1]
 800b5b2:	f105 0508 	add.w	r5, r5, #8
 800b5b6:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800b5ba:	edd0 2a00 	vldr	s5, [r0]
 800b5be:	ed14 7a01 	vldr	s14, [r4, #-4]
 800b5c2:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800b5c6:	ed55 6a03 	vldr	s13, [r5, #-12]
 800b5ca:	f1a2 0208 	sub.w	r2, r2, #8
 800b5ce:	ee73 4aa7 	vadd.f32	s9, s7, s15
 800b5d2:	ed90 2a01 	vldr	s4, [r0, #4]
 800b5d6:	ee36 5a87 	vadd.f32	s10, s13, s14
 800b5da:	ed91 6a01 	vldr	s12, [r1, #4]
 800b5de:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b5e2:	f109 0910 	add.w	r9, r9, #16
 800b5e6:	ee72 6aa4 	vadd.f32	s13, s5, s9
 800b5ea:	f104 0408 	add.w	r4, r4, #8
 800b5ee:	ee73 3ae7 	vsub.f32	s7, s7, s15
 800b5f2:	f10e 0e18 	add.w	lr, lr, #24
 800b5f6:	ee37 3a67 	vsub.f32	s6, s14, s15
 800b5fa:	f1a3 0308 	sub.w	r3, r3, #8
 800b5fe:	ed45 6a04 	vstr	s13, [r5, #-16]
 800b602:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b606:	edd1 6a01 	vldr	s13, [r1, #4]
 800b60a:	ee76 1a25 	vadd.f32	s3, s12, s11
 800b60e:	edd0 4a01 	vldr	s9, [r0, #4]
 800b612:	ee33 3a22 	vadd.f32	s6, s6, s5
 800b616:	ee75 6a26 	vadd.f32	s13, s10, s13
 800b61a:	ee35 5a46 	vsub.f32	s10, s10, s12
 800b61e:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800b622:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b626:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800b62a:	ee35 5a42 	vsub.f32	s10, s10, s4
 800b62e:	ed45 6a03 	vstr	s13, [r5, #-12]
 800b632:	ee32 2a06 	vadd.f32	s4, s4, s12
 800b636:	edd6 7a00 	vldr	s15, [r6]
 800b63a:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800b63e:	ed97 1a00 	vldr	s2, [r7]
 800b642:	ee77 2a62 	vsub.f32	s5, s14, s5
 800b646:	ed92 8a04 	vldr	s16, [r2, #16]
 800b64a:	ee71 8a27 	vadd.f32	s17, s2, s15
 800b64e:	ed93 aa04 	vldr	s20, [r3, #16]
 800b652:	ed16 7a01 	vldr	s14, [r6, #-4]
 800b656:	ee71 7a67 	vsub.f32	s15, s2, s15
 800b65a:	ed57 0a01 	vldr	s1, [r7, #-4]
 800b65e:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800b662:	ee38 6a88 	vadd.f32	s12, s17, s16
 800b666:	edd3 9a03 	vldr	s19, [r3, #12]
 800b66a:	ee30 0a87 	vadd.f32	s0, s1, s14
 800b66e:	ed92 9a03 	vldr	s18, [r2, #12]
 800b672:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800b676:	ee3a 6a06 	vadd.f32	s12, s20, s12
 800b67a:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800b67e:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800b682:	ee16 ca10 	vmov	ip, s12
 800b686:	ee30 6a49 	vsub.f32	s12, s0, s18
 800b68a:	ee71 4a07 	vadd.f32	s9, s2, s14
 800b68e:	f847 c908 	str.w	ip, [r7], #-8
 800b692:	ee34 4a29 	vadd.f32	s8, s8, s19
 800b696:	edd2 8a03 	vldr	s17, [r2, #12]
 800b69a:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800b69e:	ed93 8a03 	vldr	s16, [r3, #12]
 800b6a2:	ee71 0a47 	vsub.f32	s1, s2, s14
 800b6a6:	ee30 0a28 	vadd.f32	s0, s0, s17
 800b6aa:	ee39 1a67 	vsub.f32	s2, s18, s15
 800b6ae:	ee36 6a69 	vsub.f32	s12, s12, s19
 800b6b2:	ee30 0a08 	vadd.f32	s0, s0, s16
 800b6b6:	ee75 5aca 	vsub.f32	s11, s11, s20
 800b6ba:	ed87 0a01 	vstr	s0, [r7, #4]
 800b6be:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800b6c2:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800b6c6:	ee21 8a80 	vmul.f32	s16, s3, s0
 800b6ca:	ee23 7a26 	vmul.f32	s14, s6, s13
 800b6ce:	ee64 7a26 	vmul.f32	s15, s8, s13
 800b6d2:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800b6d6:	ee24 4a00 	vmul.f32	s8, s8, s0
 800b6da:	ee23 3a00 	vmul.f32	s6, s6, s0
 800b6de:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800b6e2:	ee24 0a80 	vmul.f32	s0, s9, s0
 800b6e6:	ee38 7a07 	vadd.f32	s14, s16, s14
 800b6ea:	ee76 6a84 	vadd.f32	s13, s13, s8
 800b6ee:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b6f2:	ee33 3a61 	vsub.f32	s6, s6, s3
 800b6f6:	ee17 ca10 	vmov	ip, s14
 800b6fa:	f841 cb08 	str.w	ip, [r1], #8
 800b6fe:	ed01 3a01 	vstr	s6, [r1, #-4]
 800b702:	ed82 0a04 	vstr	s0, [r2, #16]
 800b706:	edc2 6a03 	vstr	s13, [r2, #12]
 800b70a:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 800b70e:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 800b712:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800b716:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800b71a:	ee65 4a27 	vmul.f32	s9, s10, s15
 800b71e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800b722:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800b726:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b72a:	ee25 5a26 	vmul.f32	s10, s10, s13
 800b72e:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b732:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b736:	ee34 6a24 	vadd.f32	s12, s8, s9
 800b73a:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800b73e:	ee35 5a63 	vsub.f32	s10, s10, s7
 800b742:	ee17 ca90 	vmov	ip, s15
 800b746:	ed04 6a04 	vstr	s12, [r4, #-16]
 800b74a:	ed04 5a03 	vstr	s10, [r4, #-12]
 800b74e:	f846 c908 	str.w	ip, [r6], #-8
 800b752:	edc6 6a01 	vstr	s13, [r6, #4]
 800b756:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 800b75a:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 800b75e:	ee62 5a27 	vmul.f32	s11, s4, s15
 800b762:	ee22 6a87 	vmul.f32	s12, s5, s14
 800b766:	ee22 2a07 	vmul.f32	s4, s4, s14
 800b76a:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800b76e:	ee61 6a07 	vmul.f32	s13, s2, s14
 800b772:	ee20 7a87 	vmul.f32	s14, s1, s14
 800b776:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800b77a:	ee61 7a27 	vmul.f32	s15, s2, s15
 800b77e:	ee35 6a86 	vadd.f32	s12, s11, s12
 800b782:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800b786:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800b78a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b78e:	ee16 ca10 	vmov	ip, s12
 800b792:	f840 cb08 	str.w	ip, [r0], #8
 800b796:	ed40 2a01 	vstr	s5, [r0, #-4]
 800b79a:	edc3 0a04 	vstr	s1, [r3, #16]
 800b79e:	edc3 7a03 	vstr	s15, [r3, #12]
 800b7a2:	f47f aefc 	bne.w	800b59e <arm_cfft_radix8by4_f32+0x132>
 800b7a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b7a8:	9805      	ldr	r0, [sp, #20]
 800b7aa:	00cb      	lsls	r3, r1, #3
 800b7ac:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 800b7b0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800b7b4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800b7b8:	4498      	add	r8, r3
 800b7ba:	449c      	add	ip, r3
 800b7bc:	9105      	str	r1, [sp, #20]
 800b7be:	9901      	ldr	r1, [sp, #4]
 800b7c0:	4419      	add	r1, r3
 800b7c2:	9101      	str	r1, [sp, #4]
 800b7c4:	9906      	ldr	r1, [sp, #24]
 800b7c6:	4419      	add	r1, r3
 800b7c8:	9106      	str	r1, [sp, #24]
 800b7ca:	9908      	ldr	r1, [sp, #32]
 800b7cc:	4419      	add	r1, r3
 800b7ce:	9b07      	ldr	r3, [sp, #28]
 800b7d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7d4:	9108      	str	r1, [sp, #32]
 800b7d6:	9307      	str	r3, [sp, #28]
 800b7d8:	9a01      	ldr	r2, [sp, #4]
 800b7da:	2304      	movs	r3, #4
 800b7dc:	9e08      	ldr	r6, [sp, #32]
 800b7de:	edd2 6a00 	vldr	s13, [r2]
 800b7e2:	ed96 4a00 	vldr	s8, [r6]
 800b7e6:	edd8 7a00 	vldr	s15, [r8]
 800b7ea:	ee36 6a84 	vadd.f32	s12, s13, s8
 800b7ee:	eddc 2a00 	vldr	s5, [ip]
 800b7f2:	ed96 7a01 	vldr	s14, [r6, #4]
 800b7f6:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800b7fa:	edd2 6a01 	vldr	s13, [r2, #4]
 800b7fe:	ee76 4a27 	vadd.f32	s9, s12, s15
 800b802:	ed98 2a01 	vldr	s4, [r8, #4]
 800b806:	ee76 5a87 	vadd.f32	s11, s13, s14
 800b80a:	ed9c 5a01 	vldr	s10, [ip, #4]
 800b80e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b812:	9d05      	ldr	r5, [sp, #20]
 800b814:	ee72 6aa4 	vadd.f32	s13, s5, s9
 800b818:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 800b81c:	ee72 3a04 	vadd.f32	s7, s4, s8
 800b820:	9804      	ldr	r0, [sp, #16]
 800b822:	ee77 4a67 	vsub.f32	s9, s14, s15
 800b826:	4621      	mov	r1, r4
 800b828:	edc2 6a00 	vstr	s13, [r2]
 800b82c:	ee76 6a67 	vsub.f32	s13, s12, s15
 800b830:	ed98 3a01 	vldr	s6, [r8, #4]
 800b834:	ee35 6ac2 	vsub.f32	s12, s11, s4
 800b838:	eddc 1a01 	vldr	s3, [ip, #4]
 800b83c:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800b840:	ee35 3a83 	vadd.f32	s6, s11, s6
 800b844:	ee34 4a42 	vsub.f32	s8, s8, s4
 800b848:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800b84c:	ee73 5a21 	vadd.f32	s11, s6, s3
 800b850:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b854:	ee36 6a45 	vsub.f32	s12, s12, s10
 800b858:	edc2 5a01 	vstr	s11, [r2, #4]
 800b85c:	ee35 5a04 	vadd.f32	s10, s10, s8
 800b860:	9a06      	ldr	r2, [sp, #24]
 800b862:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800b866:	edd2 7a00 	vldr	s15, [r2]
 800b86a:	edd2 5a01 	vldr	s11, [r2, #4]
 800b86e:	ee23 4aa7 	vmul.f32	s8, s7, s15
 800b872:	ee63 3aa5 	vmul.f32	s7, s7, s11
 800b876:	ee64 5aa5 	vmul.f32	s11, s9, s11
 800b87a:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800b87e:	ee77 7a62 	vsub.f32	s15, s14, s5
 800b882:	ee74 5a25 	vadd.f32	s11, s8, s11
 800b886:	ee74 4ae3 	vsub.f32	s9, s9, s7
 800b88a:	edc8 5a00 	vstr	s11, [r8]
 800b88e:	edc8 4a01 	vstr	s9, [r8, #4]
 800b892:	edd5 4a01 	vldr	s9, [r5, #4]
 800b896:	ed95 7a00 	vldr	s14, [r5]
 800b89a:	9d07      	ldr	r5, [sp, #28]
 800b89c:	ee66 5a87 	vmul.f32	s11, s13, s14
 800b8a0:	ee66 6aa4 	vmul.f32	s13, s13, s9
 800b8a4:	ee26 7a07 	vmul.f32	s14, s12, s14
 800b8a8:	ee26 6a24 	vmul.f32	s12, s12, s9
 800b8ac:	ee77 6a66 	vsub.f32	s13, s14, s13
 800b8b0:	ee35 6a86 	vadd.f32	s12, s11, s12
 800b8b4:	edc6 6a01 	vstr	s13, [r6, #4]
 800b8b8:	ed86 6a00 	vstr	s12, [r6]
 800b8bc:	ed95 6a01 	vldr	s12, [r5, #4]
 800b8c0:	ed95 7a00 	vldr	s14, [r5]
 800b8c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b8c6:	ee65 6a07 	vmul.f32	s13, s10, s14
 800b8ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b8ce:	ee25 5a06 	vmul.f32	s10, s10, s12
 800b8d2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b8d6:	ee37 5a45 	vsub.f32	s10, s14, s10
 800b8da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8de:	ed8c 5a01 	vstr	s10, [ip, #4]
 800b8e2:	edcc 7a00 	vstr	s15, [ip]
 800b8e6:	6872      	ldr	r2, [r6, #4]
 800b8e8:	f000 f890 	bl	800ba0c <arm_radix8_butterfly_f32>
 800b8ec:	9802      	ldr	r0, [sp, #8]
 800b8ee:	4621      	mov	r1, r4
 800b8f0:	6872      	ldr	r2, [r6, #4]
 800b8f2:	2304      	movs	r3, #4
 800b8f4:	f000 f88a 	bl	800ba0c <arm_radix8_butterfly_f32>
 800b8f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b8fa:	4621      	mov	r1, r4
 800b8fc:	6872      	ldr	r2, [r6, #4]
 800b8fe:	2304      	movs	r3, #4
 800b900:	f000 f884 	bl	800ba0c <arm_radix8_butterfly_f32>
 800b904:	9803      	ldr	r0, [sp, #12]
 800b906:	4621      	mov	r1, r4
 800b908:	6872      	ldr	r2, [r6, #4]
 800b90a:	2304      	movs	r3, #4
 800b90c:	b00f      	add	sp, #60	@ 0x3c
 800b90e:	ecbd 8b06 	vpop	{d8-d10}
 800b912:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b916:	f000 b879 	b.w	800ba0c <arm_radix8_butterfly_f32>
 800b91a:	bf00      	nop

0800b91c <arm_cfft_f32>:
 800b91c:	2a01      	cmp	r2, #1
 800b91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b922:	4606      	mov	r6, r0
 800b924:	4617      	mov	r7, r2
 800b926:	460c      	mov	r4, r1
 800b928:	4698      	mov	r8, r3
 800b92a:	8805      	ldrh	r5, [r0, #0]
 800b92c:	d053      	beq.n	800b9d6 <arm_cfft_f32+0xba>
 800b92e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800b932:	d04b      	beq.n	800b9cc <arm_cfft_f32+0xb0>
 800b934:	d916      	bls.n	800b964 <arm_cfft_f32+0x48>
 800b936:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800b93a:	d01a      	beq.n	800b972 <arm_cfft_f32+0x56>
 800b93c:	d95a      	bls.n	800b9f4 <arm_cfft_f32+0xd8>
 800b93e:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800b942:	d043      	beq.n	800b9cc <arm_cfft_f32+0xb0>
 800b944:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800b948:	d105      	bne.n	800b956 <arm_cfft_f32+0x3a>
 800b94a:	4620      	mov	r0, r4
 800b94c:	4629      	mov	r1, r5
 800b94e:	6872      	ldr	r2, [r6, #4]
 800b950:	2301      	movs	r3, #1
 800b952:	f000 f85b 	bl	800ba0c <arm_radix8_butterfly_f32>
 800b956:	f1b8 0f00 	cmp.w	r8, #0
 800b95a:	d111      	bne.n	800b980 <arm_cfft_f32+0x64>
 800b95c:	2f01      	cmp	r7, #1
 800b95e:	d016      	beq.n	800b98e <arm_cfft_f32+0x72>
 800b960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b964:	2d20      	cmp	r5, #32
 800b966:	d031      	beq.n	800b9cc <arm_cfft_f32+0xb0>
 800b968:	d948      	bls.n	800b9fc <arm_cfft_f32+0xe0>
 800b96a:	2d40      	cmp	r5, #64	@ 0x40
 800b96c:	d0ed      	beq.n	800b94a <arm_cfft_f32+0x2e>
 800b96e:	2d80      	cmp	r5, #128	@ 0x80
 800b970:	d1f1      	bne.n	800b956 <arm_cfft_f32+0x3a>
 800b972:	4630      	mov	r0, r6
 800b974:	4621      	mov	r1, r4
 800b976:	f7ff fca7 	bl	800b2c8 <arm_cfft_radix8by2_f32>
 800b97a:	f1b8 0f00 	cmp.w	r8, #0
 800b97e:	d0ed      	beq.n	800b95c <arm_cfft_f32+0x40>
 800b980:	4620      	mov	r0, r4
 800b982:	89b1      	ldrh	r1, [r6, #12]
 800b984:	68b2      	ldr	r2, [r6, #8]
 800b986:	f7f4 fcab 	bl	80002e0 <arm_bitreversal_32>
 800b98a:	2f01      	cmp	r7, #1
 800b98c:	d1e8      	bne.n	800b960 <arm_cfft_f32+0x44>
 800b98e:	ee07 5a90 	vmov	s15, r5
 800b992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b996:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b99a:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800b99e:	2d00      	cmp	r5, #0
 800b9a0:	d0de      	beq.n	800b960 <arm_cfft_f32+0x44>
 800b9a2:	f104 0108 	add.w	r1, r4, #8
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	ed11 7a02 	vldr	s14, [r1, #-8]
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b9b2:	3108      	adds	r1, #8
 800b9b4:	429d      	cmp	r5, r3
 800b9b6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b9ba:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b9be:	ed01 7a04 	vstr	s14, [r1, #-16]
 800b9c2:	ed41 7a03 	vstr	s15, [r1, #-12]
 800b9c6:	d1ef      	bne.n	800b9a8 <arm_cfft_f32+0x8c>
 800b9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9cc:	4630      	mov	r0, r6
 800b9ce:	4621      	mov	r1, r4
 800b9d0:	f7ff fd4c 	bl	800b46c <arm_cfft_radix8by4_f32>
 800b9d4:	e7bf      	b.n	800b956 <arm_cfft_f32+0x3a>
 800b9d6:	b1a5      	cbz	r5, 800ba02 <arm_cfft_f32+0xe6>
 800b9d8:	f101 030c 	add.w	r3, r1, #12
 800b9dc:	2200      	movs	r2, #0
 800b9de:	ed53 7a02 	vldr	s15, [r3, #-8]
 800b9e2:	3201      	adds	r2, #1
 800b9e4:	3308      	adds	r3, #8
 800b9e6:	eef1 7a67 	vneg.f32	s15, s15
 800b9ea:	4295      	cmp	r5, r2
 800b9ec:	ed43 7a04 	vstr	s15, [r3, #-16]
 800b9f0:	d1f5      	bne.n	800b9de <arm_cfft_f32+0xc2>
 800b9f2:	e79c      	b.n	800b92e <arm_cfft_f32+0x12>
 800b9f4:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800b9f8:	d0a7      	beq.n	800b94a <arm_cfft_f32+0x2e>
 800b9fa:	e7ac      	b.n	800b956 <arm_cfft_f32+0x3a>
 800b9fc:	2d10      	cmp	r5, #16
 800b9fe:	d0b8      	beq.n	800b972 <arm_cfft_f32+0x56>
 800ba00:	e7a9      	b.n	800b956 <arm_cfft_f32+0x3a>
 800ba02:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800ba06:	d896      	bhi.n	800b936 <arm_cfft_f32+0x1a>
 800ba08:	e7ac      	b.n	800b964 <arm_cfft_f32+0x48>
 800ba0a:	bf00      	nop

0800ba0c <arm_radix8_butterfly_f32>:
 800ba0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba10:	469e      	mov	lr, r3
 800ba12:	1d03      	adds	r3, r0, #4
 800ba14:	4683      	mov	fp, r0
 800ba16:	468a      	mov	sl, r1
 800ba18:	4688      	mov	r8, r1
 800ba1a:	469c      	mov	ip, r3
 800ba1c:	ed2d 8b10 	vpush	{d8-d15}
 800ba20:	ed9f 9ac4 	vldr	s18, [pc, #784]	@ 800bd34 <arm_radix8_butterfly_f32+0x328>
 800ba24:	b09f      	sub	sp, #124	@ 0x7c
 800ba26:	921c      	str	r2, [sp, #112]	@ 0x70
 800ba28:	931d      	str	r3, [sp, #116]	@ 0x74
 800ba2a:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 800ba2e:	f04f 0900 	mov.w	r9, #0
 800ba32:	461a      	mov	r2, r3
 800ba34:	930e      	str	r3, [sp, #56]	@ 0x38
 800ba36:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800ba3a:	0051      	lsls	r1, r2, #1
 800ba3c:	4608      	mov	r0, r1
 800ba3e:	9103      	str	r1, [sp, #12]
 800ba40:	00d1      	lsls	r1, r2, #3
 800ba42:	1885      	adds	r5, r0, r2
 800ba44:	0110      	lsls	r0, r2, #4
 800ba46:	eb0b 0601 	add.w	r6, fp, r1
 800ba4a:	9101      	str	r1, [sp, #4]
 800ba4c:	18ac      	adds	r4, r5, r2
 800ba4e:	9002      	str	r0, [sp, #8]
 800ba50:	1877      	adds	r7, r6, r1
 800ba52:	4611      	mov	r1, r2
 800ba54:	4422      	add	r2, r4
 800ba56:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800ba5a:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800ba5e:	1850      	adds	r0, r2, r1
 800ba60:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 800ba64:	4401      	add	r1, r0
 800ba66:	3204      	adds	r2, #4
 800ba68:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 800ba6c:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 800ba70:	3104      	adds	r1, #4
 800ba72:	ed1c 7a01 	vldr	s14, [ip, #-4]
 800ba76:	44c1      	add	r9, r8
 800ba78:	edd4 6a00 	vldr	s13, [r4]
 800ba7c:	ed97 6a00 	vldr	s12, [r7]
 800ba80:	45ca      	cmp	sl, r9
 800ba82:	edd0 7a00 	vldr	s15, [r0]
 800ba86:	ee37 5a66 	vsub.f32	s10, s14, s13
 800ba8a:	edd6 5a00 	vldr	s11, [r6]
 800ba8e:	ee37 2a26 	vadd.f32	s4, s14, s13
 800ba92:	ee76 2a67 	vsub.f32	s5, s12, s15
 800ba96:	edd5 6a00 	vldr	s13, [r5]
 800ba9a:	ed12 7a01 	vldr	s14, [r2, #-4]
 800ba9e:	ee76 4a27 	vadd.f32	s9, s12, s15
 800baa2:	ed11 6a01 	vldr	s12, [r1, #-4]
 800baa6:	ee75 1a87 	vadd.f32	s3, s11, s14
 800baaa:	ee36 4a86 	vadd.f32	s8, s13, s12
 800baae:	ee72 7a24 	vadd.f32	s15, s4, s9
 800bab2:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800bab6:	ee76 5ac6 	vsub.f32	s11, s13, s12
 800baba:	ee31 6a84 	vadd.f32	s12, s3, s8
 800babe:	ee32 2a64 	vsub.f32	s4, s4, s9
 800bac2:	ee77 6a65 	vsub.f32	s13, s14, s11
 800bac6:	ee77 4a86 	vadd.f32	s9, s15, s12
 800baca:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800bace:	ee37 7a25 	vadd.f32	s14, s14, s11
 800bad2:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800bad6:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800bada:	edc4 7a00 	vstr	s15, [r4]
 800bade:	ee66 6a89 	vmul.f32	s13, s13, s18
 800bae2:	edd6 5a01 	vldr	s11, [r6, #4]
 800bae6:	ee27 6a09 	vmul.f32	s12, s14, s18
 800baea:	edd5 3a01 	vldr	s7, [r5, #4]
 800baee:	ed92 4a00 	vldr	s8, [r2]
 800baf2:	ee35 1a26 	vadd.f32	s2, s10, s13
 800baf6:	edd1 4a00 	vldr	s9, [r1]
 800bafa:	ee75 6a66 	vsub.f32	s13, s10, s13
 800bafe:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800bb02:	ed94 0a01 	vldr	s0, [r4, #4]
 800bb06:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800bb0a:	ed9c 7a00 	vldr	s14, [ip]
 800bb0e:	edd0 0a01 	vldr	s1, [r0, #4]
 800bb12:	ee35 4a84 	vadd.f32	s8, s11, s8
 800bb16:	ed97 5a01 	vldr	s10, [r7, #4]
 800bb1a:	ee73 4aa4 	vadd.f32	s9, s7, s9
 800bb1e:	ee73 5a27 	vadd.f32	s11, s6, s15
 800bb22:	ee77 3a00 	vadd.f32	s7, s14, s0
 800bb26:	ee33 3a67 	vsub.f32	s6, s6, s15
 800bb2a:	ee37 7a40 	vsub.f32	s14, s14, s0
 800bb2e:	ee35 0a20 	vadd.f32	s0, s10, s1
 800bb32:	ee63 7a09 	vmul.f32	s15, s6, s18
 800bb36:	ee35 5a60 	vsub.f32	s10, s10, s1
 800bb3a:	ee33 3a80 	vadd.f32	s6, s7, s0
 800bb3e:	ee74 0a24 	vadd.f32	s1, s8, s9
 800bb42:	ee65 5a89 	vmul.f32	s11, s11, s18
 800bb46:	ee74 4a64 	vsub.f32	s9, s8, s9
 800bb4a:	ee33 4ac0 	vsub.f32	s8, s7, s0
 800bb4e:	ee75 3a25 	vadd.f32	s7, s10, s11
 800bb52:	ee75 5a65 	vsub.f32	s11, s10, s11
 800bb56:	ee37 5a27 	vadd.f32	s10, s14, s15
 800bb5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb5e:	ee32 7a86 	vadd.f32	s14, s5, s12
 800bb62:	ee32 6ac6 	vsub.f32	s12, s5, s12
 800bb66:	ee73 2a20 	vadd.f32	s5, s6, s1
 800bb6a:	ee33 3a60 	vsub.f32	s6, s6, s1
 800bb6e:	ee72 0a24 	vadd.f32	s1, s4, s9
 800bb72:	edcc 2a00 	vstr	s5, [ip]
 800bb76:	ee72 4a64 	vsub.f32	s9, s4, s9
 800bb7a:	ed84 3a01 	vstr	s6, [r4, #4]
 800bb7e:	ee74 2a61 	vsub.f32	s5, s8, s3
 800bb82:	ee31 3a23 	vadd.f32	s6, s2, s7
 800bb86:	edc7 0a00 	vstr	s1, [r7]
 800bb8a:	ee31 1a63 	vsub.f32	s2, s2, s7
 800bb8e:	edc0 4a00 	vstr	s9, [r0]
 800bb92:	ee76 3aa5 	vadd.f32	s7, s13, s11
 800bb96:	edc7 2a01 	vstr	s5, [r7, #4]
 800bb9a:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800bb9e:	441c      	add	r4, r3
 800bba0:	ee75 5a47 	vsub.f32	s11, s10, s14
 800bba4:	449c      	add	ip, r3
 800bba6:	ee35 5a07 	vadd.f32	s10, s10, s14
 800bbaa:	441f      	add	r7, r3
 800bbac:	ee37 7ac6 	vsub.f32	s14, s15, s12
 800bbb0:	ee34 4a21 	vadd.f32	s8, s8, s3
 800bbb4:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bbb8:	ed80 4a01 	vstr	s8, [r0, #4]
 800bbbc:	4418      	add	r0, r3
 800bbbe:	ed86 3a00 	vstr	s6, [r6]
 800bbc2:	ed01 1a01 	vstr	s2, [r1, #-4]
 800bbc6:	ed42 3a01 	vstr	s7, [r2, #-4]
 800bbca:	edc5 6a00 	vstr	s13, [r5]
 800bbce:	edc6 5a01 	vstr	s11, [r6, #4]
 800bbd2:	441e      	add	r6, r3
 800bbd4:	ed81 5a00 	vstr	s10, [r1]
 800bbd8:	4419      	add	r1, r3
 800bbda:	ed82 7a00 	vstr	s14, [r2]
 800bbde:	441a      	add	r2, r3
 800bbe0:	edc5 7a01 	vstr	s15, [r5, #4]
 800bbe4:	441d      	add	r5, r3
 800bbe6:	f63f af44 	bhi.w	800ba72 <arm_radix8_butterfly_f32+0x66>
 800bbea:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800bbec:	2f07      	cmp	r7, #7
 800bbee:	f240 81e8 	bls.w	800bfc2 <arm_radix8_butterfly_f32+0x5b6>
 800bbf2:	9903      	ldr	r1, [sp, #12]
 800bbf4:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 800bbf8:	9e01      	ldr	r6, [sp, #4]
 800bbfa:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 800bbfe:	19ca      	adds	r2, r1, r7
 800bc00:	1c4c      	adds	r4, r1, #1
 800bc02:	eb05 010e 	add.w	r1, r5, lr
 800bc06:	00ed      	lsls	r5, r5, #3
 800bc08:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800bc0c:	3608      	adds	r6, #8
 800bc0e:	950f      	str	r5, [sp, #60]	@ 0x3c
 800bc10:	eb01 050e 	add.w	r5, r1, lr
 800bc14:	00c9      	lsls	r1, r1, #3
 800bc16:	443c      	add	r4, r7
 800bc18:	9618      	str	r6, [sp, #96]	@ 0x60
 800bc1a:	00ee      	lsls	r6, r5, #3
 800bc1c:	460f      	mov	r7, r1
 800bc1e:	9114      	str	r1, [sp, #80]	@ 0x50
 800bc20:	9902      	ldr	r1, [sp, #8]
 800bc22:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800bc26:	9611      	str	r6, [sp, #68]	@ 0x44
 800bc28:	00c0      	lsls	r0, r0, #3
 800bc2a:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800bc2c:	3108      	adds	r1, #8
 800bc2e:	3404      	adds	r4, #4
 800bc30:	f04f 0901 	mov.w	r9, #1
 800bc34:	9119      	str	r1, [sp, #100]	@ 0x64
 800bc36:	eb05 010e 	add.w	r1, r5, lr
 800bc3a:	4635      	mov	r5, r6
 800bc3c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bc3e:	9301      	str	r3, [sp, #4]
 800bc40:	443d      	add	r5, r7
 800bc42:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800bc44:	9507      	str	r5, [sp, #28]
 800bc46:	eb01 050e 	add.w	r5, r1, lr
 800bc4a:	00c9      	lsls	r1, r1, #3
 800bc4c:	19f7      	adds	r7, r6, r7
 800bc4e:	00ed      	lsls	r5, r5, #3
 800bc50:	9110      	str	r1, [sp, #64]	@ 0x40
 800bc52:	00d1      	lsls	r1, r2, #3
 800bc54:	970a      	str	r7, [sp, #40]	@ 0x28
 800bc56:	462f      	mov	r7, r5
 800bc58:	9515      	str	r5, [sp, #84]	@ 0x54
 800bc5a:	0112      	lsls	r2, r2, #4
 800bc5c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800bc5e:	19f4      	adds	r4, r6, r7
 800bc60:	320c      	adds	r2, #12
 800bc62:	3108      	adds	r1, #8
 800bc64:	1975      	adds	r5, r6, r5
 800bc66:	9408      	str	r4, [sp, #32]
 800bc68:	9217      	str	r2, [sp, #92]	@ 0x5c
 800bc6a:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800bc6e:	9509      	str	r5, [sp, #36]	@ 0x24
 800bc70:	f100 020c 	add.w	r2, r0, #12
 800bc74:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800bc76:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800bc78:	1975      	adds	r5, r6, r5
 800bc7a:	9216      	str	r2, [sp, #88]	@ 0x58
 800bc7c:	1932      	adds	r2, r6, r4
 800bc7e:	911b      	str	r1, [sp, #108]	@ 0x6c
 800bc80:	9505      	str	r5, [sp, #20]
 800bc82:	ea4f 150e 	mov.w	r5, lr, lsl #4
 800bc86:	0179      	lsls	r1, r7, #5
 800bc88:	9204      	str	r2, [sp, #16]
 800bc8a:	1972      	adds	r2, r6, r5
 800bc8c:	9412      	str	r4, [sp, #72]	@ 0x48
 800bc8e:	9513      	str	r5, [sp, #76]	@ 0x4c
 800bc90:	9206      	str	r2, [sp, #24]
 800bc92:	f101 0208 	add.w	r2, r1, #8
 800bc96:	921a      	str	r2, [sp, #104]	@ 0x68
 800bc98:	2200      	movs	r2, #0
 800bc9a:	f102 0108 	add.w	r1, r2, #8
 800bc9e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bca0:	46cc      	mov	ip, r9
 800bca2:	460f      	mov	r7, r1
 800bca4:	910c      	str	r1, [sp, #48]	@ 0x30
 800bca6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bca8:	eb0b 0e07 	add.w	lr, fp, r7
 800bcac:	9f04      	ldr	r7, [sp, #16]
 800bcae:	188e      	adds	r6, r1, r2
 800bcb0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800bcb2:	edd7 fa00 	vldr	s31, [r7]
 800bcb6:	9f06      	ldr	r7, [sp, #24]
 800bcb8:	188d      	adds	r5, r1, r2
 800bcba:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800bcbc:	445e      	add	r6, fp
 800bcbe:	ed97 fa00 	vldr	s30, [r7]
 800bcc2:	445d      	add	r5, fp
 800bcc4:	9f05      	ldr	r7, [sp, #20]
 800bcc6:	188c      	adds	r4, r1, r2
 800bcc8:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800bcca:	edd7 ea00 	vldr	s29, [r7]
 800bcce:	445c      	add	r4, fp
 800bcd0:	9f07      	ldr	r7, [sp, #28]
 800bcd2:	1888      	adds	r0, r1, r2
 800bcd4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800bcd6:	ed97 ea00 	vldr	s28, [r7]
 800bcda:	4458      	add	r0, fp
 800bcdc:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800bcde:	4411      	add	r1, r2
 800bce0:	441a      	add	r2, r3
 800bce2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bce4:	edd7 da00 	vldr	s27, [r7]
 800bce8:	4459      	add	r1, fp
 800bcea:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800bcec:	445a      	add	r2, fp
 800bcee:	930d      	str	r3, [sp, #52]	@ 0x34
 800bcf0:	ed97 da00 	vldr	s26, [r7]
 800bcf4:	9f08      	ldr	r7, [sp, #32]
 800bcf6:	edd7 ca00 	vldr	s25, [r7]
 800bcfa:	9f04      	ldr	r7, [sp, #16]
 800bcfc:	ed97 ca01 	vldr	s24, [r7, #4]
 800bd00:	9f06      	ldr	r7, [sp, #24]
 800bd02:	edd7 ba01 	vldr	s23, [r7, #4]
 800bd06:	9f05      	ldr	r7, [sp, #20]
 800bd08:	ed97 ba01 	vldr	s22, [r7, #4]
 800bd0c:	9f07      	ldr	r7, [sp, #28]
 800bd0e:	edd7 aa01 	vldr	s21, [r7, #4]
 800bd12:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800bd14:	ed97 aa01 	vldr	s20, [r7, #4]
 800bd18:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800bd1a:	9b01      	ldr	r3, [sp, #4]
 800bd1c:	edd7 7a01 	vldr	s15, [r7, #4]
 800bd20:	9f08      	ldr	r7, [sp, #32]
 800bd22:	edcd 7a02 	vstr	s15, [sp, #8]
 800bd26:	edd7 7a01 	vldr	s15, [r7, #4]
 800bd2a:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 800bd2c:	edcd 7a03 	vstr	s15, [sp, #12]
 800bd30:	e002      	b.n	800bd38 <arm_radix8_butterfly_f32+0x32c>
 800bd32:	bf00      	nop
 800bd34:	3f3504f3 	.word	0x3f3504f3
 800bd38:	ed90 2a00 	vldr	s4, [r0]
 800bd3c:	44c4      	add	ip, r8
 800bd3e:	ed96 7a00 	vldr	s14, [r6]
 800bd42:	ed94 8a00 	vldr	s16, [r4]
 800bd46:	45e2      	cmp	sl, ip
 800bd48:	ed52 7a01 	vldr	s15, [r2, #-4]
 800bd4c:	ed95 5a00 	vldr	s10, [r5]
 800bd50:	ed51 5a01 	vldr	s11, [r1, #-4]
 800bd54:	ee38 6a27 	vadd.f32	s12, s16, s15
 800bd58:	ed9e 1a00 	vldr	s2, [lr]
 800bd5c:	ee78 2a67 	vsub.f32	s5, s16, s15
 800bd60:	ed17 4a01 	vldr	s8, [r7, #-4]
 800bd64:	ee75 3a25 	vadd.f32	s7, s10, s11
 800bd68:	ee31 3a07 	vadd.f32	s6, s2, s14
 800bd6c:	edde 4a01 	vldr	s9, [lr, #4]
 800bd70:	ee72 6a04 	vadd.f32	s13, s4, s8
 800bd74:	ee75 5a65 	vsub.f32	s11, s10, s11
 800bd78:	ee73 1a06 	vadd.f32	s3, s6, s12
 800bd7c:	ee33 5aa6 	vadd.f32	s10, s7, s13
 800bd80:	ee32 4a44 	vsub.f32	s8, s4, s8
 800bd84:	ee31 1a47 	vsub.f32	s2, s2, s14
 800bd88:	ee31 7a85 	vadd.f32	s14, s3, s10
 800bd8c:	ee75 7a84 	vadd.f32	s15, s11, s8
 800bd90:	ee33 3a46 	vsub.f32	s6, s6, s12
 800bd94:	ed8e 7a00 	vstr	s14, [lr]
 800bd98:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800bd9c:	ee67 7a89 	vmul.f32	s15, s15, s18
 800bda0:	ed90 2a01 	vldr	s4, [r0, #4]
 800bda4:	ed95 7a01 	vldr	s14, [r5, #4]
 800bda8:	ee35 4ac4 	vsub.f32	s8, s11, s8
 800bdac:	ed91 6a00 	vldr	s12, [r1]
 800bdb0:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800bdb4:	edd7 8a00 	vldr	s17, [r7]
 800bdb8:	ee32 8ae7 	vsub.f32	s16, s5, s15
 800bdbc:	ee72 5aa7 	vadd.f32	s11, s5, s15
 800bdc0:	edd2 0a00 	vldr	s1, [r2]
 800bdc4:	ee72 6a68 	vsub.f32	s13, s4, s17
 800bdc8:	edd6 7a01 	vldr	s15, [r6, #4]
 800bdcc:	ee77 2a46 	vsub.f32	s5, s14, s12
 800bdd0:	ee37 0a06 	vadd.f32	s0, s14, s12
 800bdd4:	ed94 7a01 	vldr	s14, [r4, #4]
 800bdd8:	ee32 6a28 	vadd.f32	s12, s4, s17
 800bddc:	ee72 9ae6 	vsub.f32	s19, s5, s13
 800bde0:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800bde4:	ee72 2aa6 	vadd.f32	s5, s5, s13
 800bde8:	ee77 6a20 	vadd.f32	s13, s14, s1
 800bdec:	ee74 4ae7 	vsub.f32	s9, s9, s15
 800bdf0:	ee37 7a60 	vsub.f32	s14, s14, s1
 800bdf4:	ee24 4a09 	vmul.f32	s8, s8, s18
 800bdf8:	ee70 0a06 	vadd.f32	s1, s0, s12
 800bdfc:	ee69 7a89 	vmul.f32	s15, s19, s18
 800be00:	ee62 2a89 	vmul.f32	s5, s5, s18
 800be04:	ee30 6a46 	vsub.f32	s12, s0, s12
 800be08:	ee32 0a26 	vadd.f32	s0, s4, s13
 800be0c:	ee72 6a66 	vsub.f32	s13, s4, s13
 800be10:	ee77 8a62 	vsub.f32	s17, s14, s5
 800be14:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800be18:	ee74 7ae7 	vsub.f32	s15, s9, s15
 800be1c:	ee77 4a22 	vadd.f32	s9, s14, s5
 800be20:	ee71 2a04 	vadd.f32	s5, s2, s8
 800be24:	ee31 7a44 	vsub.f32	s14, s2, s8
 800be28:	ee30 1a60 	vsub.f32	s2, s0, s1
 800be2c:	ee73 1a06 	vadd.f32	s3, s6, s12
 800be30:	ee33 6a46 	vsub.f32	s12, s6, s12
 800be34:	ee36 3ae3 	vsub.f32	s6, s13, s7
 800be38:	ee37 4ac8 	vsub.f32	s8, s15, s16
 800be3c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800be40:	ee77 7a88 	vadd.f32	s15, s15, s16
 800be44:	ee72 3a65 	vsub.f32	s7, s4, s11
 800be48:	ee2a 8a81 	vmul.f32	s16, s21, s2
 800be4c:	ee72 5a25 	vadd.f32	s11, s4, s11
 800be50:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800be54:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800be58:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800be5c:	ee77 2a28 	vadd.f32	s5, s14, s17
 800be60:	ee37 7a68 	vsub.f32	s14, s14, s17
 800be64:	ee6e 8a05 	vmul.f32	s17, s28, s10
 800be68:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800be6c:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800be70:	ee70 0a20 	vadd.f32	s1, s0, s1
 800be74:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800be78:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800be7c:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800be80:	edce 0a01 	vstr	s1, [lr, #4]
 800be84:	ee38 8a88 	vadd.f32	s16, s17, s16
 800be88:	449e      	add	lr, r3
 800be8a:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800be8e:	ee31 5a45 	vsub.f32	s10, s2, s10
 800be92:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800be96:	ed86 8a00 	vstr	s16, [r6]
 800be9a:	ee39 0a80 	vadd.f32	s0, s19, s0
 800be9e:	ee33 3a61 	vsub.f32	s6, s6, s3
 800bea2:	ed86 5a01 	vstr	s10, [r6, #4]
 800bea6:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800beaa:	edcd 3a01 	vstr	s7, [sp, #4]
 800beae:	ed9d 5a03 	vldr	s10, [sp, #12]
 800beb2:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800beb6:	eddd 3a02 	vldr	s7, [sp, #8]
 800beba:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800bebe:	ed84 0a00 	vstr	s0, [r4]
 800bec2:	ee65 4a24 	vmul.f32	s9, s10, s9
 800bec6:	ed84 3a01 	vstr	s6, [r4, #4]
 800beca:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800bece:	ee23 6a86 	vmul.f32	s12, s7, s12
 800bed2:	eddd 3a01 	vldr	s7, [sp, #4]
 800bed6:	ee25 5a25 	vmul.f32	s10, s10, s11
 800beda:	441e      	add	r6, r3
 800bedc:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800bee0:	441c      	add	r4, r3
 800bee2:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800bee6:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800beea:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800beee:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800bef2:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800bef6:	ee6d 6a26 	vmul.f32	s13, s26, s13
 800befa:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800befe:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800bf02:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800bf06:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800bf0a:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800bf0e:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800bf12:	ee38 8a01 	vadd.f32	s16, s16, s2
 800bf16:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800bf1a:	ee39 5a85 	vadd.f32	s10, s19, s10
 800bf1e:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800bf22:	ed02 8a01 	vstr	s16, [r2, #-4]
 800bf26:	ee30 0a21 	vadd.f32	s0, s0, s3
 800bf2a:	ed82 6a00 	vstr	s12, [r2]
 800bf2e:	ee74 2a62 	vsub.f32	s5, s8, s5
 800bf32:	edc5 0a00 	vstr	s1, [r5]
 800bf36:	ee33 3a28 	vadd.f32	s6, s6, s17
 800bf3a:	edc5 3a01 	vstr	s7, [r5, #4]
 800bf3e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800bf42:	ed07 5a01 	vstr	s10, [r7, #-4]
 800bf46:	edc7 4a00 	vstr	s9, [r7]
 800bf4a:	441d      	add	r5, r3
 800bf4c:	ed01 0a01 	vstr	s0, [r1, #-4]
 800bf50:	441a      	add	r2, r3
 800bf52:	edc1 2a00 	vstr	s5, [r1]
 800bf56:	441f      	add	r7, r3
 800bf58:	ed80 3a00 	vstr	s6, [r0]
 800bf5c:	4419      	add	r1, r3
 800bf5e:	ed80 7a01 	vstr	s14, [r0, #4]
 800bf62:	4418      	add	r0, r3
 800bf64:	f63f aee8 	bhi.w	800bd38 <arm_radix8_butterfly_f32+0x32c>
 800bf68:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bf6a:	f109 0901 	add.w	r9, r9, #1
 800bf6e:	9301      	str	r3, [sp, #4]
 800bf70:	9b04      	ldr	r3, [sp, #16]
 800bf72:	4413      	add	r3, r2
 800bf74:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bf76:	9304      	str	r3, [sp, #16]
 800bf78:	9b06      	ldr	r3, [sp, #24]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bf7e:	9306      	str	r3, [sp, #24]
 800bf80:	9b05      	ldr	r3, [sp, #20]
 800bf82:	4413      	add	r3, r2
 800bf84:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bf86:	9305      	str	r3, [sp, #20]
 800bf88:	9b07      	ldr	r3, [sp, #28]
 800bf8a:	4413      	add	r3, r2
 800bf8c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf8e:	9307      	str	r3, [sp, #28]
 800bf90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf92:	4413      	add	r3, r2
 800bf94:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800bf96:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf9a:	4413      	add	r3, r2
 800bf9c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800bf9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfa0:	9b08      	ldr	r3, [sp, #32]
 800bfa2:	4413      	add	r3, r2
 800bfa4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bfa6:	9308      	str	r3, [sp, #32]
 800bfa8:	3208      	adds	r2, #8
 800bfaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfac:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bfae:	4599      	cmp	r9, r3
 800bfb0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bfb2:	f47f ae72 	bne.w	800bc9a <arm_radix8_butterfly_f32+0x28e>
 800bfb6:	f8bd e048 	ldrh.w	lr, [sp, #72]	@ 0x48
 800bfba:	46c8      	mov	r8, r9
 800bfbc:	f8dd c074 	ldr.w	ip, [sp, #116]	@ 0x74
 800bfc0:	e533      	b.n	800ba2a <arm_radix8_butterfly_f32+0x1e>
 800bfc2:	b01f      	add	sp, #124	@ 0x7c
 800bfc4:	ecbd 8b10 	vpop	{d8-d15}
 800bfc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bfcc <std>:
 800bfcc:	2300      	movs	r3, #0
 800bfce:	b510      	push	{r4, lr}
 800bfd0:	4604      	mov	r4, r0
 800bfd2:	e9c0 3300 	strd	r3, r3, [r0]
 800bfd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bfda:	6083      	str	r3, [r0, #8]
 800bfdc:	8181      	strh	r1, [r0, #12]
 800bfde:	6643      	str	r3, [r0, #100]	@ 0x64
 800bfe0:	81c2      	strh	r2, [r0, #14]
 800bfe2:	6183      	str	r3, [r0, #24]
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	2208      	movs	r2, #8
 800bfe8:	305c      	adds	r0, #92	@ 0x5c
 800bfea:	f000 f8c3 	bl	800c174 <memset>
 800bfee:	4b0d      	ldr	r3, [pc, #52]	@ (800c024 <std+0x58>)
 800bff0:	6263      	str	r3, [r4, #36]	@ 0x24
 800bff2:	4b0d      	ldr	r3, [pc, #52]	@ (800c028 <std+0x5c>)
 800bff4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bff6:	4b0d      	ldr	r3, [pc, #52]	@ (800c02c <std+0x60>)
 800bff8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bffa:	4b0d      	ldr	r3, [pc, #52]	@ (800c030 <std+0x64>)
 800bffc:	6323      	str	r3, [r4, #48]	@ 0x30
 800bffe:	4b0d      	ldr	r3, [pc, #52]	@ (800c034 <std+0x68>)
 800c000:	6224      	str	r4, [r4, #32]
 800c002:	429c      	cmp	r4, r3
 800c004:	d006      	beq.n	800c014 <std+0x48>
 800c006:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c00a:	4294      	cmp	r4, r2
 800c00c:	d002      	beq.n	800c014 <std+0x48>
 800c00e:	33d0      	adds	r3, #208	@ 0xd0
 800c010:	429c      	cmp	r4, r3
 800c012:	d105      	bne.n	800c020 <std+0x54>
 800c014:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c01c:	f000 b8dc 	b.w	800c1d8 <__retarget_lock_init_recursive>
 800c020:	bd10      	pop	{r4, pc}
 800c022:	bf00      	nop
 800c024:	0800ca31 	.word	0x0800ca31
 800c028:	0800ca53 	.word	0x0800ca53
 800c02c:	0800ca8b 	.word	0x0800ca8b
 800c030:	0800caaf 	.word	0x0800caaf
 800c034:	240044a8 	.word	0x240044a8

0800c038 <stdio_exit_handler>:
 800c038:	4a02      	ldr	r2, [pc, #8]	@ (800c044 <stdio_exit_handler+0xc>)
 800c03a:	4903      	ldr	r1, [pc, #12]	@ (800c048 <stdio_exit_handler+0x10>)
 800c03c:	4803      	ldr	r0, [pc, #12]	@ (800c04c <stdio_exit_handler+0x14>)
 800c03e:	f000 b869 	b.w	800c114 <_fwalk_sglue>
 800c042:	bf00      	nop
 800c044:	2400002c 	.word	0x2400002c
 800c048:	0800c9c9 	.word	0x0800c9c9
 800c04c:	2400003c 	.word	0x2400003c

0800c050 <cleanup_stdio>:
 800c050:	6841      	ldr	r1, [r0, #4]
 800c052:	4b0c      	ldr	r3, [pc, #48]	@ (800c084 <cleanup_stdio+0x34>)
 800c054:	4299      	cmp	r1, r3
 800c056:	b510      	push	{r4, lr}
 800c058:	4604      	mov	r4, r0
 800c05a:	d001      	beq.n	800c060 <cleanup_stdio+0x10>
 800c05c:	f000 fcb4 	bl	800c9c8 <_fflush_r>
 800c060:	68a1      	ldr	r1, [r4, #8]
 800c062:	4b09      	ldr	r3, [pc, #36]	@ (800c088 <cleanup_stdio+0x38>)
 800c064:	4299      	cmp	r1, r3
 800c066:	d002      	beq.n	800c06e <cleanup_stdio+0x1e>
 800c068:	4620      	mov	r0, r4
 800c06a:	f000 fcad 	bl	800c9c8 <_fflush_r>
 800c06e:	68e1      	ldr	r1, [r4, #12]
 800c070:	4b06      	ldr	r3, [pc, #24]	@ (800c08c <cleanup_stdio+0x3c>)
 800c072:	4299      	cmp	r1, r3
 800c074:	d004      	beq.n	800c080 <cleanup_stdio+0x30>
 800c076:	4620      	mov	r0, r4
 800c078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c07c:	f000 bca4 	b.w	800c9c8 <_fflush_r>
 800c080:	bd10      	pop	{r4, pc}
 800c082:	bf00      	nop
 800c084:	240044a8 	.word	0x240044a8
 800c088:	24004510 	.word	0x24004510
 800c08c:	24004578 	.word	0x24004578

0800c090 <global_stdio_init.part.0>:
 800c090:	b510      	push	{r4, lr}
 800c092:	4b0b      	ldr	r3, [pc, #44]	@ (800c0c0 <global_stdio_init.part.0+0x30>)
 800c094:	4c0b      	ldr	r4, [pc, #44]	@ (800c0c4 <global_stdio_init.part.0+0x34>)
 800c096:	4a0c      	ldr	r2, [pc, #48]	@ (800c0c8 <global_stdio_init.part.0+0x38>)
 800c098:	601a      	str	r2, [r3, #0]
 800c09a:	4620      	mov	r0, r4
 800c09c:	2200      	movs	r2, #0
 800c09e:	2104      	movs	r1, #4
 800c0a0:	f7ff ff94 	bl	800bfcc <std>
 800c0a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	2109      	movs	r1, #9
 800c0ac:	f7ff ff8e 	bl	800bfcc <std>
 800c0b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c0b4:	2202      	movs	r2, #2
 800c0b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0ba:	2112      	movs	r1, #18
 800c0bc:	f7ff bf86 	b.w	800bfcc <std>
 800c0c0:	240045e0 	.word	0x240045e0
 800c0c4:	240044a8 	.word	0x240044a8
 800c0c8:	0800c039 	.word	0x0800c039

0800c0cc <__sfp_lock_acquire>:
 800c0cc:	4801      	ldr	r0, [pc, #4]	@ (800c0d4 <__sfp_lock_acquire+0x8>)
 800c0ce:	f000 b884 	b.w	800c1da <__retarget_lock_acquire_recursive>
 800c0d2:	bf00      	nop
 800c0d4:	240045e5 	.word	0x240045e5

0800c0d8 <__sfp_lock_release>:
 800c0d8:	4801      	ldr	r0, [pc, #4]	@ (800c0e0 <__sfp_lock_release+0x8>)
 800c0da:	f000 b87f 	b.w	800c1dc <__retarget_lock_release_recursive>
 800c0de:	bf00      	nop
 800c0e0:	240045e5 	.word	0x240045e5

0800c0e4 <__sinit>:
 800c0e4:	b510      	push	{r4, lr}
 800c0e6:	4604      	mov	r4, r0
 800c0e8:	f7ff fff0 	bl	800c0cc <__sfp_lock_acquire>
 800c0ec:	6a23      	ldr	r3, [r4, #32]
 800c0ee:	b11b      	cbz	r3, 800c0f8 <__sinit+0x14>
 800c0f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0f4:	f7ff bff0 	b.w	800c0d8 <__sfp_lock_release>
 800c0f8:	4b04      	ldr	r3, [pc, #16]	@ (800c10c <__sinit+0x28>)
 800c0fa:	6223      	str	r3, [r4, #32]
 800c0fc:	4b04      	ldr	r3, [pc, #16]	@ (800c110 <__sinit+0x2c>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d1f5      	bne.n	800c0f0 <__sinit+0xc>
 800c104:	f7ff ffc4 	bl	800c090 <global_stdio_init.part.0>
 800c108:	e7f2      	b.n	800c0f0 <__sinit+0xc>
 800c10a:	bf00      	nop
 800c10c:	0800c051 	.word	0x0800c051
 800c110:	240045e0 	.word	0x240045e0

0800c114 <_fwalk_sglue>:
 800c114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c118:	4607      	mov	r7, r0
 800c11a:	4688      	mov	r8, r1
 800c11c:	4614      	mov	r4, r2
 800c11e:	2600      	movs	r6, #0
 800c120:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c124:	f1b9 0901 	subs.w	r9, r9, #1
 800c128:	d505      	bpl.n	800c136 <_fwalk_sglue+0x22>
 800c12a:	6824      	ldr	r4, [r4, #0]
 800c12c:	2c00      	cmp	r4, #0
 800c12e:	d1f7      	bne.n	800c120 <_fwalk_sglue+0xc>
 800c130:	4630      	mov	r0, r6
 800c132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c136:	89ab      	ldrh	r3, [r5, #12]
 800c138:	2b01      	cmp	r3, #1
 800c13a:	d907      	bls.n	800c14c <_fwalk_sglue+0x38>
 800c13c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c140:	3301      	adds	r3, #1
 800c142:	d003      	beq.n	800c14c <_fwalk_sglue+0x38>
 800c144:	4629      	mov	r1, r5
 800c146:	4638      	mov	r0, r7
 800c148:	47c0      	blx	r8
 800c14a:	4306      	orrs	r6, r0
 800c14c:	3568      	adds	r5, #104	@ 0x68
 800c14e:	e7e9      	b.n	800c124 <_fwalk_sglue+0x10>

0800c150 <iprintf>:
 800c150:	b40f      	push	{r0, r1, r2, r3}
 800c152:	b507      	push	{r0, r1, r2, lr}
 800c154:	4906      	ldr	r1, [pc, #24]	@ (800c170 <iprintf+0x20>)
 800c156:	ab04      	add	r3, sp, #16
 800c158:	6808      	ldr	r0, [r1, #0]
 800c15a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c15e:	6881      	ldr	r1, [r0, #8]
 800c160:	9301      	str	r3, [sp, #4]
 800c162:	f000 f865 	bl	800c230 <_vfiprintf_r>
 800c166:	b003      	add	sp, #12
 800c168:	f85d eb04 	ldr.w	lr, [sp], #4
 800c16c:	b004      	add	sp, #16
 800c16e:	4770      	bx	lr
 800c170:	24000038 	.word	0x24000038

0800c174 <memset>:
 800c174:	4402      	add	r2, r0
 800c176:	4603      	mov	r3, r0
 800c178:	4293      	cmp	r3, r2
 800c17a:	d100      	bne.n	800c17e <memset+0xa>
 800c17c:	4770      	bx	lr
 800c17e:	f803 1b01 	strb.w	r1, [r3], #1
 800c182:	e7f9      	b.n	800c178 <memset+0x4>

0800c184 <__errno>:
 800c184:	4b01      	ldr	r3, [pc, #4]	@ (800c18c <__errno+0x8>)
 800c186:	6818      	ldr	r0, [r3, #0]
 800c188:	4770      	bx	lr
 800c18a:	bf00      	nop
 800c18c:	24000038 	.word	0x24000038

0800c190 <__libc_init_array>:
 800c190:	b570      	push	{r4, r5, r6, lr}
 800c192:	4d0d      	ldr	r5, [pc, #52]	@ (800c1c8 <__libc_init_array+0x38>)
 800c194:	4c0d      	ldr	r4, [pc, #52]	@ (800c1cc <__libc_init_array+0x3c>)
 800c196:	1b64      	subs	r4, r4, r5
 800c198:	10a4      	asrs	r4, r4, #2
 800c19a:	2600      	movs	r6, #0
 800c19c:	42a6      	cmp	r6, r4
 800c19e:	d109      	bne.n	800c1b4 <__libc_init_array+0x24>
 800c1a0:	4d0b      	ldr	r5, [pc, #44]	@ (800c1d0 <__libc_init_array+0x40>)
 800c1a2:	4c0c      	ldr	r4, [pc, #48]	@ (800c1d4 <__libc_init_array+0x44>)
 800c1a4:	f000 fe62 	bl	800ce6c <_init>
 800c1a8:	1b64      	subs	r4, r4, r5
 800c1aa:	10a4      	asrs	r4, r4, #2
 800c1ac:	2600      	movs	r6, #0
 800c1ae:	42a6      	cmp	r6, r4
 800c1b0:	d105      	bne.n	800c1be <__libc_init_array+0x2e>
 800c1b2:	bd70      	pop	{r4, r5, r6, pc}
 800c1b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1b8:	4798      	blx	r3
 800c1ba:	3601      	adds	r6, #1
 800c1bc:	e7ee      	b.n	800c19c <__libc_init_array+0xc>
 800c1be:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1c2:	4798      	blx	r3
 800c1c4:	3601      	adds	r6, #1
 800c1c6:	e7f2      	b.n	800c1ae <__libc_init_array+0x1e>
 800c1c8:	08020364 	.word	0x08020364
 800c1cc:	08020364 	.word	0x08020364
 800c1d0:	08020364 	.word	0x08020364
 800c1d4:	08020368 	.word	0x08020368

0800c1d8 <__retarget_lock_init_recursive>:
 800c1d8:	4770      	bx	lr

0800c1da <__retarget_lock_acquire_recursive>:
 800c1da:	4770      	bx	lr

0800c1dc <__retarget_lock_release_recursive>:
 800c1dc:	4770      	bx	lr

0800c1de <__sfputc_r>:
 800c1de:	6893      	ldr	r3, [r2, #8]
 800c1e0:	3b01      	subs	r3, #1
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	b410      	push	{r4}
 800c1e6:	6093      	str	r3, [r2, #8]
 800c1e8:	da08      	bge.n	800c1fc <__sfputc_r+0x1e>
 800c1ea:	6994      	ldr	r4, [r2, #24]
 800c1ec:	42a3      	cmp	r3, r4
 800c1ee:	db01      	blt.n	800c1f4 <__sfputc_r+0x16>
 800c1f0:	290a      	cmp	r1, #10
 800c1f2:	d103      	bne.n	800c1fc <__sfputc_r+0x1e>
 800c1f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1f8:	f000 bc5d 	b.w	800cab6 <__swbuf_r>
 800c1fc:	6813      	ldr	r3, [r2, #0]
 800c1fe:	1c58      	adds	r0, r3, #1
 800c200:	6010      	str	r0, [r2, #0]
 800c202:	7019      	strb	r1, [r3, #0]
 800c204:	4608      	mov	r0, r1
 800c206:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c20a:	4770      	bx	lr

0800c20c <__sfputs_r>:
 800c20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c20e:	4606      	mov	r6, r0
 800c210:	460f      	mov	r7, r1
 800c212:	4614      	mov	r4, r2
 800c214:	18d5      	adds	r5, r2, r3
 800c216:	42ac      	cmp	r4, r5
 800c218:	d101      	bne.n	800c21e <__sfputs_r+0x12>
 800c21a:	2000      	movs	r0, #0
 800c21c:	e007      	b.n	800c22e <__sfputs_r+0x22>
 800c21e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c222:	463a      	mov	r2, r7
 800c224:	4630      	mov	r0, r6
 800c226:	f7ff ffda 	bl	800c1de <__sfputc_r>
 800c22a:	1c43      	adds	r3, r0, #1
 800c22c:	d1f3      	bne.n	800c216 <__sfputs_r+0xa>
 800c22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c230 <_vfiprintf_r>:
 800c230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c234:	460d      	mov	r5, r1
 800c236:	b09d      	sub	sp, #116	@ 0x74
 800c238:	4614      	mov	r4, r2
 800c23a:	4698      	mov	r8, r3
 800c23c:	4606      	mov	r6, r0
 800c23e:	b118      	cbz	r0, 800c248 <_vfiprintf_r+0x18>
 800c240:	6a03      	ldr	r3, [r0, #32]
 800c242:	b90b      	cbnz	r3, 800c248 <_vfiprintf_r+0x18>
 800c244:	f7ff ff4e 	bl	800c0e4 <__sinit>
 800c248:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c24a:	07d9      	lsls	r1, r3, #31
 800c24c:	d405      	bmi.n	800c25a <_vfiprintf_r+0x2a>
 800c24e:	89ab      	ldrh	r3, [r5, #12]
 800c250:	059a      	lsls	r2, r3, #22
 800c252:	d402      	bmi.n	800c25a <_vfiprintf_r+0x2a>
 800c254:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c256:	f7ff ffc0 	bl	800c1da <__retarget_lock_acquire_recursive>
 800c25a:	89ab      	ldrh	r3, [r5, #12]
 800c25c:	071b      	lsls	r3, r3, #28
 800c25e:	d501      	bpl.n	800c264 <_vfiprintf_r+0x34>
 800c260:	692b      	ldr	r3, [r5, #16]
 800c262:	b99b      	cbnz	r3, 800c28c <_vfiprintf_r+0x5c>
 800c264:	4629      	mov	r1, r5
 800c266:	4630      	mov	r0, r6
 800c268:	f000 fc64 	bl	800cb34 <__swsetup_r>
 800c26c:	b170      	cbz	r0, 800c28c <_vfiprintf_r+0x5c>
 800c26e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c270:	07dc      	lsls	r4, r3, #31
 800c272:	d504      	bpl.n	800c27e <_vfiprintf_r+0x4e>
 800c274:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c278:	b01d      	add	sp, #116	@ 0x74
 800c27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c27e:	89ab      	ldrh	r3, [r5, #12]
 800c280:	0598      	lsls	r0, r3, #22
 800c282:	d4f7      	bmi.n	800c274 <_vfiprintf_r+0x44>
 800c284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c286:	f7ff ffa9 	bl	800c1dc <__retarget_lock_release_recursive>
 800c28a:	e7f3      	b.n	800c274 <_vfiprintf_r+0x44>
 800c28c:	2300      	movs	r3, #0
 800c28e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c290:	2320      	movs	r3, #32
 800c292:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c296:	f8cd 800c 	str.w	r8, [sp, #12]
 800c29a:	2330      	movs	r3, #48	@ 0x30
 800c29c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c44c <_vfiprintf_r+0x21c>
 800c2a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2a4:	f04f 0901 	mov.w	r9, #1
 800c2a8:	4623      	mov	r3, r4
 800c2aa:	469a      	mov	sl, r3
 800c2ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2b0:	b10a      	cbz	r2, 800c2b6 <_vfiprintf_r+0x86>
 800c2b2:	2a25      	cmp	r2, #37	@ 0x25
 800c2b4:	d1f9      	bne.n	800c2aa <_vfiprintf_r+0x7a>
 800c2b6:	ebba 0b04 	subs.w	fp, sl, r4
 800c2ba:	d00b      	beq.n	800c2d4 <_vfiprintf_r+0xa4>
 800c2bc:	465b      	mov	r3, fp
 800c2be:	4622      	mov	r2, r4
 800c2c0:	4629      	mov	r1, r5
 800c2c2:	4630      	mov	r0, r6
 800c2c4:	f7ff ffa2 	bl	800c20c <__sfputs_r>
 800c2c8:	3001      	adds	r0, #1
 800c2ca:	f000 80a7 	beq.w	800c41c <_vfiprintf_r+0x1ec>
 800c2ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2d0:	445a      	add	r2, fp
 800c2d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800c2d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	f000 809f 	beq.w	800c41c <_vfiprintf_r+0x1ec>
 800c2de:	2300      	movs	r3, #0
 800c2e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c2e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2e8:	f10a 0a01 	add.w	sl, sl, #1
 800c2ec:	9304      	str	r3, [sp, #16]
 800c2ee:	9307      	str	r3, [sp, #28]
 800c2f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c2f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800c2f6:	4654      	mov	r4, sl
 800c2f8:	2205      	movs	r2, #5
 800c2fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2fe:	4853      	ldr	r0, [pc, #332]	@ (800c44c <_vfiprintf_r+0x21c>)
 800c300:	f7f4 f84e 	bl	80003a0 <memchr>
 800c304:	9a04      	ldr	r2, [sp, #16]
 800c306:	b9d8      	cbnz	r0, 800c340 <_vfiprintf_r+0x110>
 800c308:	06d1      	lsls	r1, r2, #27
 800c30a:	bf44      	itt	mi
 800c30c:	2320      	movmi	r3, #32
 800c30e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c312:	0713      	lsls	r3, r2, #28
 800c314:	bf44      	itt	mi
 800c316:	232b      	movmi	r3, #43	@ 0x2b
 800c318:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c31c:	f89a 3000 	ldrb.w	r3, [sl]
 800c320:	2b2a      	cmp	r3, #42	@ 0x2a
 800c322:	d015      	beq.n	800c350 <_vfiprintf_r+0x120>
 800c324:	9a07      	ldr	r2, [sp, #28]
 800c326:	4654      	mov	r4, sl
 800c328:	2000      	movs	r0, #0
 800c32a:	f04f 0c0a 	mov.w	ip, #10
 800c32e:	4621      	mov	r1, r4
 800c330:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c334:	3b30      	subs	r3, #48	@ 0x30
 800c336:	2b09      	cmp	r3, #9
 800c338:	d94b      	bls.n	800c3d2 <_vfiprintf_r+0x1a2>
 800c33a:	b1b0      	cbz	r0, 800c36a <_vfiprintf_r+0x13a>
 800c33c:	9207      	str	r2, [sp, #28]
 800c33e:	e014      	b.n	800c36a <_vfiprintf_r+0x13a>
 800c340:	eba0 0308 	sub.w	r3, r0, r8
 800c344:	fa09 f303 	lsl.w	r3, r9, r3
 800c348:	4313      	orrs	r3, r2
 800c34a:	9304      	str	r3, [sp, #16]
 800c34c:	46a2      	mov	sl, r4
 800c34e:	e7d2      	b.n	800c2f6 <_vfiprintf_r+0xc6>
 800c350:	9b03      	ldr	r3, [sp, #12]
 800c352:	1d19      	adds	r1, r3, #4
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	9103      	str	r1, [sp, #12]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	bfbb      	ittet	lt
 800c35c:	425b      	neglt	r3, r3
 800c35e:	f042 0202 	orrlt.w	r2, r2, #2
 800c362:	9307      	strge	r3, [sp, #28]
 800c364:	9307      	strlt	r3, [sp, #28]
 800c366:	bfb8      	it	lt
 800c368:	9204      	strlt	r2, [sp, #16]
 800c36a:	7823      	ldrb	r3, [r4, #0]
 800c36c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c36e:	d10a      	bne.n	800c386 <_vfiprintf_r+0x156>
 800c370:	7863      	ldrb	r3, [r4, #1]
 800c372:	2b2a      	cmp	r3, #42	@ 0x2a
 800c374:	d132      	bne.n	800c3dc <_vfiprintf_r+0x1ac>
 800c376:	9b03      	ldr	r3, [sp, #12]
 800c378:	1d1a      	adds	r2, r3, #4
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	9203      	str	r2, [sp, #12]
 800c37e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c382:	3402      	adds	r4, #2
 800c384:	9305      	str	r3, [sp, #20]
 800c386:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c45c <_vfiprintf_r+0x22c>
 800c38a:	7821      	ldrb	r1, [r4, #0]
 800c38c:	2203      	movs	r2, #3
 800c38e:	4650      	mov	r0, sl
 800c390:	f7f4 f806 	bl	80003a0 <memchr>
 800c394:	b138      	cbz	r0, 800c3a6 <_vfiprintf_r+0x176>
 800c396:	9b04      	ldr	r3, [sp, #16]
 800c398:	eba0 000a 	sub.w	r0, r0, sl
 800c39c:	2240      	movs	r2, #64	@ 0x40
 800c39e:	4082      	lsls	r2, r0
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	3401      	adds	r4, #1
 800c3a4:	9304      	str	r3, [sp, #16]
 800c3a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3aa:	4829      	ldr	r0, [pc, #164]	@ (800c450 <_vfiprintf_r+0x220>)
 800c3ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c3b0:	2206      	movs	r2, #6
 800c3b2:	f7f3 fff5 	bl	80003a0 <memchr>
 800c3b6:	2800      	cmp	r0, #0
 800c3b8:	d03f      	beq.n	800c43a <_vfiprintf_r+0x20a>
 800c3ba:	4b26      	ldr	r3, [pc, #152]	@ (800c454 <_vfiprintf_r+0x224>)
 800c3bc:	bb1b      	cbnz	r3, 800c406 <_vfiprintf_r+0x1d6>
 800c3be:	9b03      	ldr	r3, [sp, #12]
 800c3c0:	3307      	adds	r3, #7
 800c3c2:	f023 0307 	bic.w	r3, r3, #7
 800c3c6:	3308      	adds	r3, #8
 800c3c8:	9303      	str	r3, [sp, #12]
 800c3ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3cc:	443b      	add	r3, r7
 800c3ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3d0:	e76a      	b.n	800c2a8 <_vfiprintf_r+0x78>
 800c3d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	2001      	movs	r0, #1
 800c3da:	e7a8      	b.n	800c32e <_vfiprintf_r+0xfe>
 800c3dc:	2300      	movs	r3, #0
 800c3de:	3401      	adds	r4, #1
 800c3e0:	9305      	str	r3, [sp, #20]
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	f04f 0c0a 	mov.w	ip, #10
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3ee:	3a30      	subs	r2, #48	@ 0x30
 800c3f0:	2a09      	cmp	r2, #9
 800c3f2:	d903      	bls.n	800c3fc <_vfiprintf_r+0x1cc>
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d0c6      	beq.n	800c386 <_vfiprintf_r+0x156>
 800c3f8:	9105      	str	r1, [sp, #20]
 800c3fa:	e7c4      	b.n	800c386 <_vfiprintf_r+0x156>
 800c3fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c400:	4604      	mov	r4, r0
 800c402:	2301      	movs	r3, #1
 800c404:	e7f0      	b.n	800c3e8 <_vfiprintf_r+0x1b8>
 800c406:	ab03      	add	r3, sp, #12
 800c408:	9300      	str	r3, [sp, #0]
 800c40a:	462a      	mov	r2, r5
 800c40c:	4b12      	ldr	r3, [pc, #72]	@ (800c458 <_vfiprintf_r+0x228>)
 800c40e:	a904      	add	r1, sp, #16
 800c410:	4630      	mov	r0, r6
 800c412:	f3af 8000 	nop.w
 800c416:	4607      	mov	r7, r0
 800c418:	1c78      	adds	r0, r7, #1
 800c41a:	d1d6      	bne.n	800c3ca <_vfiprintf_r+0x19a>
 800c41c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c41e:	07d9      	lsls	r1, r3, #31
 800c420:	d405      	bmi.n	800c42e <_vfiprintf_r+0x1fe>
 800c422:	89ab      	ldrh	r3, [r5, #12]
 800c424:	059a      	lsls	r2, r3, #22
 800c426:	d402      	bmi.n	800c42e <_vfiprintf_r+0x1fe>
 800c428:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c42a:	f7ff fed7 	bl	800c1dc <__retarget_lock_release_recursive>
 800c42e:	89ab      	ldrh	r3, [r5, #12]
 800c430:	065b      	lsls	r3, r3, #25
 800c432:	f53f af1f 	bmi.w	800c274 <_vfiprintf_r+0x44>
 800c436:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c438:	e71e      	b.n	800c278 <_vfiprintf_r+0x48>
 800c43a:	ab03      	add	r3, sp, #12
 800c43c:	9300      	str	r3, [sp, #0]
 800c43e:	462a      	mov	r2, r5
 800c440:	4b05      	ldr	r3, [pc, #20]	@ (800c458 <_vfiprintf_r+0x228>)
 800c442:	a904      	add	r1, sp, #16
 800c444:	4630      	mov	r0, r6
 800c446:	f000 f91b 	bl	800c680 <_printf_i>
 800c44a:	e7e4      	b.n	800c416 <_vfiprintf_r+0x1e6>
 800c44c:	08020328 	.word	0x08020328
 800c450:	08020332 	.word	0x08020332
 800c454:	00000000 	.word	0x00000000
 800c458:	0800c20d 	.word	0x0800c20d
 800c45c:	0802032e 	.word	0x0802032e

0800c460 <sbrk_aligned>:
 800c460:	b570      	push	{r4, r5, r6, lr}
 800c462:	4e0f      	ldr	r6, [pc, #60]	@ (800c4a0 <sbrk_aligned+0x40>)
 800c464:	460c      	mov	r4, r1
 800c466:	6831      	ldr	r1, [r6, #0]
 800c468:	4605      	mov	r5, r0
 800c46a:	b911      	cbnz	r1, 800c472 <sbrk_aligned+0x12>
 800c46c:	f000 fc70 	bl	800cd50 <_sbrk_r>
 800c470:	6030      	str	r0, [r6, #0]
 800c472:	4621      	mov	r1, r4
 800c474:	4628      	mov	r0, r5
 800c476:	f000 fc6b 	bl	800cd50 <_sbrk_r>
 800c47a:	1c43      	adds	r3, r0, #1
 800c47c:	d103      	bne.n	800c486 <sbrk_aligned+0x26>
 800c47e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c482:	4620      	mov	r0, r4
 800c484:	bd70      	pop	{r4, r5, r6, pc}
 800c486:	1cc4      	adds	r4, r0, #3
 800c488:	f024 0403 	bic.w	r4, r4, #3
 800c48c:	42a0      	cmp	r0, r4
 800c48e:	d0f8      	beq.n	800c482 <sbrk_aligned+0x22>
 800c490:	1a21      	subs	r1, r4, r0
 800c492:	4628      	mov	r0, r5
 800c494:	f000 fc5c 	bl	800cd50 <_sbrk_r>
 800c498:	3001      	adds	r0, #1
 800c49a:	d1f2      	bne.n	800c482 <sbrk_aligned+0x22>
 800c49c:	e7ef      	b.n	800c47e <sbrk_aligned+0x1e>
 800c49e:	bf00      	nop
 800c4a0:	240045e8 	.word	0x240045e8

0800c4a4 <_malloc_r>:
 800c4a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4a8:	1ccd      	adds	r5, r1, #3
 800c4aa:	f025 0503 	bic.w	r5, r5, #3
 800c4ae:	3508      	adds	r5, #8
 800c4b0:	2d0c      	cmp	r5, #12
 800c4b2:	bf38      	it	cc
 800c4b4:	250c      	movcc	r5, #12
 800c4b6:	2d00      	cmp	r5, #0
 800c4b8:	4606      	mov	r6, r0
 800c4ba:	db01      	blt.n	800c4c0 <_malloc_r+0x1c>
 800c4bc:	42a9      	cmp	r1, r5
 800c4be:	d904      	bls.n	800c4ca <_malloc_r+0x26>
 800c4c0:	230c      	movs	r3, #12
 800c4c2:	6033      	str	r3, [r6, #0]
 800c4c4:	2000      	movs	r0, #0
 800c4c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c5a0 <_malloc_r+0xfc>
 800c4ce:	f000 faa3 	bl	800ca18 <__malloc_lock>
 800c4d2:	f8d8 3000 	ldr.w	r3, [r8]
 800c4d6:	461c      	mov	r4, r3
 800c4d8:	bb44      	cbnz	r4, 800c52c <_malloc_r+0x88>
 800c4da:	4629      	mov	r1, r5
 800c4dc:	4630      	mov	r0, r6
 800c4de:	f7ff ffbf 	bl	800c460 <sbrk_aligned>
 800c4e2:	1c43      	adds	r3, r0, #1
 800c4e4:	4604      	mov	r4, r0
 800c4e6:	d158      	bne.n	800c59a <_malloc_r+0xf6>
 800c4e8:	f8d8 4000 	ldr.w	r4, [r8]
 800c4ec:	4627      	mov	r7, r4
 800c4ee:	2f00      	cmp	r7, #0
 800c4f0:	d143      	bne.n	800c57a <_malloc_r+0xd6>
 800c4f2:	2c00      	cmp	r4, #0
 800c4f4:	d04b      	beq.n	800c58e <_malloc_r+0xea>
 800c4f6:	6823      	ldr	r3, [r4, #0]
 800c4f8:	4639      	mov	r1, r7
 800c4fa:	4630      	mov	r0, r6
 800c4fc:	eb04 0903 	add.w	r9, r4, r3
 800c500:	f000 fc26 	bl	800cd50 <_sbrk_r>
 800c504:	4581      	cmp	r9, r0
 800c506:	d142      	bne.n	800c58e <_malloc_r+0xea>
 800c508:	6821      	ldr	r1, [r4, #0]
 800c50a:	1a6d      	subs	r5, r5, r1
 800c50c:	4629      	mov	r1, r5
 800c50e:	4630      	mov	r0, r6
 800c510:	f7ff ffa6 	bl	800c460 <sbrk_aligned>
 800c514:	3001      	adds	r0, #1
 800c516:	d03a      	beq.n	800c58e <_malloc_r+0xea>
 800c518:	6823      	ldr	r3, [r4, #0]
 800c51a:	442b      	add	r3, r5
 800c51c:	6023      	str	r3, [r4, #0]
 800c51e:	f8d8 3000 	ldr.w	r3, [r8]
 800c522:	685a      	ldr	r2, [r3, #4]
 800c524:	bb62      	cbnz	r2, 800c580 <_malloc_r+0xdc>
 800c526:	f8c8 7000 	str.w	r7, [r8]
 800c52a:	e00f      	b.n	800c54c <_malloc_r+0xa8>
 800c52c:	6822      	ldr	r2, [r4, #0]
 800c52e:	1b52      	subs	r2, r2, r5
 800c530:	d420      	bmi.n	800c574 <_malloc_r+0xd0>
 800c532:	2a0b      	cmp	r2, #11
 800c534:	d917      	bls.n	800c566 <_malloc_r+0xc2>
 800c536:	1961      	adds	r1, r4, r5
 800c538:	42a3      	cmp	r3, r4
 800c53a:	6025      	str	r5, [r4, #0]
 800c53c:	bf18      	it	ne
 800c53e:	6059      	strne	r1, [r3, #4]
 800c540:	6863      	ldr	r3, [r4, #4]
 800c542:	bf08      	it	eq
 800c544:	f8c8 1000 	streq.w	r1, [r8]
 800c548:	5162      	str	r2, [r4, r5]
 800c54a:	604b      	str	r3, [r1, #4]
 800c54c:	4630      	mov	r0, r6
 800c54e:	f000 fa69 	bl	800ca24 <__malloc_unlock>
 800c552:	f104 000b 	add.w	r0, r4, #11
 800c556:	1d23      	adds	r3, r4, #4
 800c558:	f020 0007 	bic.w	r0, r0, #7
 800c55c:	1ac2      	subs	r2, r0, r3
 800c55e:	bf1c      	itt	ne
 800c560:	1a1b      	subne	r3, r3, r0
 800c562:	50a3      	strne	r3, [r4, r2]
 800c564:	e7af      	b.n	800c4c6 <_malloc_r+0x22>
 800c566:	6862      	ldr	r2, [r4, #4]
 800c568:	42a3      	cmp	r3, r4
 800c56a:	bf0c      	ite	eq
 800c56c:	f8c8 2000 	streq.w	r2, [r8]
 800c570:	605a      	strne	r2, [r3, #4]
 800c572:	e7eb      	b.n	800c54c <_malloc_r+0xa8>
 800c574:	4623      	mov	r3, r4
 800c576:	6864      	ldr	r4, [r4, #4]
 800c578:	e7ae      	b.n	800c4d8 <_malloc_r+0x34>
 800c57a:	463c      	mov	r4, r7
 800c57c:	687f      	ldr	r7, [r7, #4]
 800c57e:	e7b6      	b.n	800c4ee <_malloc_r+0x4a>
 800c580:	461a      	mov	r2, r3
 800c582:	685b      	ldr	r3, [r3, #4]
 800c584:	42a3      	cmp	r3, r4
 800c586:	d1fb      	bne.n	800c580 <_malloc_r+0xdc>
 800c588:	2300      	movs	r3, #0
 800c58a:	6053      	str	r3, [r2, #4]
 800c58c:	e7de      	b.n	800c54c <_malloc_r+0xa8>
 800c58e:	230c      	movs	r3, #12
 800c590:	6033      	str	r3, [r6, #0]
 800c592:	4630      	mov	r0, r6
 800c594:	f000 fa46 	bl	800ca24 <__malloc_unlock>
 800c598:	e794      	b.n	800c4c4 <_malloc_r+0x20>
 800c59a:	6005      	str	r5, [r0, #0]
 800c59c:	e7d6      	b.n	800c54c <_malloc_r+0xa8>
 800c59e:	bf00      	nop
 800c5a0:	240045ec 	.word	0x240045ec

0800c5a4 <_printf_common>:
 800c5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5a8:	4616      	mov	r6, r2
 800c5aa:	4698      	mov	r8, r3
 800c5ac:	688a      	ldr	r2, [r1, #8]
 800c5ae:	690b      	ldr	r3, [r1, #16]
 800c5b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	bfb8      	it	lt
 800c5b8:	4613      	movlt	r3, r2
 800c5ba:	6033      	str	r3, [r6, #0]
 800c5bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c5c0:	4607      	mov	r7, r0
 800c5c2:	460c      	mov	r4, r1
 800c5c4:	b10a      	cbz	r2, 800c5ca <_printf_common+0x26>
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	6033      	str	r3, [r6, #0]
 800c5ca:	6823      	ldr	r3, [r4, #0]
 800c5cc:	0699      	lsls	r1, r3, #26
 800c5ce:	bf42      	ittt	mi
 800c5d0:	6833      	ldrmi	r3, [r6, #0]
 800c5d2:	3302      	addmi	r3, #2
 800c5d4:	6033      	strmi	r3, [r6, #0]
 800c5d6:	6825      	ldr	r5, [r4, #0]
 800c5d8:	f015 0506 	ands.w	r5, r5, #6
 800c5dc:	d106      	bne.n	800c5ec <_printf_common+0x48>
 800c5de:	f104 0a19 	add.w	sl, r4, #25
 800c5e2:	68e3      	ldr	r3, [r4, #12]
 800c5e4:	6832      	ldr	r2, [r6, #0]
 800c5e6:	1a9b      	subs	r3, r3, r2
 800c5e8:	42ab      	cmp	r3, r5
 800c5ea:	dc26      	bgt.n	800c63a <_printf_common+0x96>
 800c5ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c5f0:	6822      	ldr	r2, [r4, #0]
 800c5f2:	3b00      	subs	r3, #0
 800c5f4:	bf18      	it	ne
 800c5f6:	2301      	movne	r3, #1
 800c5f8:	0692      	lsls	r2, r2, #26
 800c5fa:	d42b      	bmi.n	800c654 <_printf_common+0xb0>
 800c5fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c600:	4641      	mov	r1, r8
 800c602:	4638      	mov	r0, r7
 800c604:	47c8      	blx	r9
 800c606:	3001      	adds	r0, #1
 800c608:	d01e      	beq.n	800c648 <_printf_common+0xa4>
 800c60a:	6823      	ldr	r3, [r4, #0]
 800c60c:	6922      	ldr	r2, [r4, #16]
 800c60e:	f003 0306 	and.w	r3, r3, #6
 800c612:	2b04      	cmp	r3, #4
 800c614:	bf02      	ittt	eq
 800c616:	68e5      	ldreq	r5, [r4, #12]
 800c618:	6833      	ldreq	r3, [r6, #0]
 800c61a:	1aed      	subeq	r5, r5, r3
 800c61c:	68a3      	ldr	r3, [r4, #8]
 800c61e:	bf0c      	ite	eq
 800c620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c624:	2500      	movne	r5, #0
 800c626:	4293      	cmp	r3, r2
 800c628:	bfc4      	itt	gt
 800c62a:	1a9b      	subgt	r3, r3, r2
 800c62c:	18ed      	addgt	r5, r5, r3
 800c62e:	2600      	movs	r6, #0
 800c630:	341a      	adds	r4, #26
 800c632:	42b5      	cmp	r5, r6
 800c634:	d11a      	bne.n	800c66c <_printf_common+0xc8>
 800c636:	2000      	movs	r0, #0
 800c638:	e008      	b.n	800c64c <_printf_common+0xa8>
 800c63a:	2301      	movs	r3, #1
 800c63c:	4652      	mov	r2, sl
 800c63e:	4641      	mov	r1, r8
 800c640:	4638      	mov	r0, r7
 800c642:	47c8      	blx	r9
 800c644:	3001      	adds	r0, #1
 800c646:	d103      	bne.n	800c650 <_printf_common+0xac>
 800c648:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c650:	3501      	adds	r5, #1
 800c652:	e7c6      	b.n	800c5e2 <_printf_common+0x3e>
 800c654:	18e1      	adds	r1, r4, r3
 800c656:	1c5a      	adds	r2, r3, #1
 800c658:	2030      	movs	r0, #48	@ 0x30
 800c65a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c65e:	4422      	add	r2, r4
 800c660:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c664:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c668:	3302      	adds	r3, #2
 800c66a:	e7c7      	b.n	800c5fc <_printf_common+0x58>
 800c66c:	2301      	movs	r3, #1
 800c66e:	4622      	mov	r2, r4
 800c670:	4641      	mov	r1, r8
 800c672:	4638      	mov	r0, r7
 800c674:	47c8      	blx	r9
 800c676:	3001      	adds	r0, #1
 800c678:	d0e6      	beq.n	800c648 <_printf_common+0xa4>
 800c67a:	3601      	adds	r6, #1
 800c67c:	e7d9      	b.n	800c632 <_printf_common+0x8e>
	...

0800c680 <_printf_i>:
 800c680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c684:	7e0f      	ldrb	r7, [r1, #24]
 800c686:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c688:	2f78      	cmp	r7, #120	@ 0x78
 800c68a:	4691      	mov	r9, r2
 800c68c:	4680      	mov	r8, r0
 800c68e:	460c      	mov	r4, r1
 800c690:	469a      	mov	sl, r3
 800c692:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c696:	d807      	bhi.n	800c6a8 <_printf_i+0x28>
 800c698:	2f62      	cmp	r7, #98	@ 0x62
 800c69a:	d80a      	bhi.n	800c6b2 <_printf_i+0x32>
 800c69c:	2f00      	cmp	r7, #0
 800c69e:	f000 80d2 	beq.w	800c846 <_printf_i+0x1c6>
 800c6a2:	2f58      	cmp	r7, #88	@ 0x58
 800c6a4:	f000 80b9 	beq.w	800c81a <_printf_i+0x19a>
 800c6a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c6ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c6b0:	e03a      	b.n	800c728 <_printf_i+0xa8>
 800c6b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c6b6:	2b15      	cmp	r3, #21
 800c6b8:	d8f6      	bhi.n	800c6a8 <_printf_i+0x28>
 800c6ba:	a101      	add	r1, pc, #4	@ (adr r1, 800c6c0 <_printf_i+0x40>)
 800c6bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c6c0:	0800c719 	.word	0x0800c719
 800c6c4:	0800c72d 	.word	0x0800c72d
 800c6c8:	0800c6a9 	.word	0x0800c6a9
 800c6cc:	0800c6a9 	.word	0x0800c6a9
 800c6d0:	0800c6a9 	.word	0x0800c6a9
 800c6d4:	0800c6a9 	.word	0x0800c6a9
 800c6d8:	0800c72d 	.word	0x0800c72d
 800c6dc:	0800c6a9 	.word	0x0800c6a9
 800c6e0:	0800c6a9 	.word	0x0800c6a9
 800c6e4:	0800c6a9 	.word	0x0800c6a9
 800c6e8:	0800c6a9 	.word	0x0800c6a9
 800c6ec:	0800c82d 	.word	0x0800c82d
 800c6f0:	0800c757 	.word	0x0800c757
 800c6f4:	0800c7e7 	.word	0x0800c7e7
 800c6f8:	0800c6a9 	.word	0x0800c6a9
 800c6fc:	0800c6a9 	.word	0x0800c6a9
 800c700:	0800c84f 	.word	0x0800c84f
 800c704:	0800c6a9 	.word	0x0800c6a9
 800c708:	0800c757 	.word	0x0800c757
 800c70c:	0800c6a9 	.word	0x0800c6a9
 800c710:	0800c6a9 	.word	0x0800c6a9
 800c714:	0800c7ef 	.word	0x0800c7ef
 800c718:	6833      	ldr	r3, [r6, #0]
 800c71a:	1d1a      	adds	r2, r3, #4
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	6032      	str	r2, [r6, #0]
 800c720:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c724:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c728:	2301      	movs	r3, #1
 800c72a:	e09d      	b.n	800c868 <_printf_i+0x1e8>
 800c72c:	6833      	ldr	r3, [r6, #0]
 800c72e:	6820      	ldr	r0, [r4, #0]
 800c730:	1d19      	adds	r1, r3, #4
 800c732:	6031      	str	r1, [r6, #0]
 800c734:	0606      	lsls	r6, r0, #24
 800c736:	d501      	bpl.n	800c73c <_printf_i+0xbc>
 800c738:	681d      	ldr	r5, [r3, #0]
 800c73a:	e003      	b.n	800c744 <_printf_i+0xc4>
 800c73c:	0645      	lsls	r5, r0, #25
 800c73e:	d5fb      	bpl.n	800c738 <_printf_i+0xb8>
 800c740:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c744:	2d00      	cmp	r5, #0
 800c746:	da03      	bge.n	800c750 <_printf_i+0xd0>
 800c748:	232d      	movs	r3, #45	@ 0x2d
 800c74a:	426d      	negs	r5, r5
 800c74c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c750:	4859      	ldr	r0, [pc, #356]	@ (800c8b8 <_printf_i+0x238>)
 800c752:	230a      	movs	r3, #10
 800c754:	e011      	b.n	800c77a <_printf_i+0xfa>
 800c756:	6821      	ldr	r1, [r4, #0]
 800c758:	6833      	ldr	r3, [r6, #0]
 800c75a:	0608      	lsls	r0, r1, #24
 800c75c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c760:	d402      	bmi.n	800c768 <_printf_i+0xe8>
 800c762:	0649      	lsls	r1, r1, #25
 800c764:	bf48      	it	mi
 800c766:	b2ad      	uxthmi	r5, r5
 800c768:	2f6f      	cmp	r7, #111	@ 0x6f
 800c76a:	4853      	ldr	r0, [pc, #332]	@ (800c8b8 <_printf_i+0x238>)
 800c76c:	6033      	str	r3, [r6, #0]
 800c76e:	bf14      	ite	ne
 800c770:	230a      	movne	r3, #10
 800c772:	2308      	moveq	r3, #8
 800c774:	2100      	movs	r1, #0
 800c776:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c77a:	6866      	ldr	r6, [r4, #4]
 800c77c:	60a6      	str	r6, [r4, #8]
 800c77e:	2e00      	cmp	r6, #0
 800c780:	bfa2      	ittt	ge
 800c782:	6821      	ldrge	r1, [r4, #0]
 800c784:	f021 0104 	bicge.w	r1, r1, #4
 800c788:	6021      	strge	r1, [r4, #0]
 800c78a:	b90d      	cbnz	r5, 800c790 <_printf_i+0x110>
 800c78c:	2e00      	cmp	r6, #0
 800c78e:	d04b      	beq.n	800c828 <_printf_i+0x1a8>
 800c790:	4616      	mov	r6, r2
 800c792:	fbb5 f1f3 	udiv	r1, r5, r3
 800c796:	fb03 5711 	mls	r7, r3, r1, r5
 800c79a:	5dc7      	ldrb	r7, [r0, r7]
 800c79c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c7a0:	462f      	mov	r7, r5
 800c7a2:	42bb      	cmp	r3, r7
 800c7a4:	460d      	mov	r5, r1
 800c7a6:	d9f4      	bls.n	800c792 <_printf_i+0x112>
 800c7a8:	2b08      	cmp	r3, #8
 800c7aa:	d10b      	bne.n	800c7c4 <_printf_i+0x144>
 800c7ac:	6823      	ldr	r3, [r4, #0]
 800c7ae:	07df      	lsls	r7, r3, #31
 800c7b0:	d508      	bpl.n	800c7c4 <_printf_i+0x144>
 800c7b2:	6923      	ldr	r3, [r4, #16]
 800c7b4:	6861      	ldr	r1, [r4, #4]
 800c7b6:	4299      	cmp	r1, r3
 800c7b8:	bfde      	ittt	le
 800c7ba:	2330      	movle	r3, #48	@ 0x30
 800c7bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c7c0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c7c4:	1b92      	subs	r2, r2, r6
 800c7c6:	6122      	str	r2, [r4, #16]
 800c7c8:	f8cd a000 	str.w	sl, [sp]
 800c7cc:	464b      	mov	r3, r9
 800c7ce:	aa03      	add	r2, sp, #12
 800c7d0:	4621      	mov	r1, r4
 800c7d2:	4640      	mov	r0, r8
 800c7d4:	f7ff fee6 	bl	800c5a4 <_printf_common>
 800c7d8:	3001      	adds	r0, #1
 800c7da:	d14a      	bne.n	800c872 <_printf_i+0x1f2>
 800c7dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c7e0:	b004      	add	sp, #16
 800c7e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7e6:	6823      	ldr	r3, [r4, #0]
 800c7e8:	f043 0320 	orr.w	r3, r3, #32
 800c7ec:	6023      	str	r3, [r4, #0]
 800c7ee:	4833      	ldr	r0, [pc, #204]	@ (800c8bc <_printf_i+0x23c>)
 800c7f0:	2778      	movs	r7, #120	@ 0x78
 800c7f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c7f6:	6823      	ldr	r3, [r4, #0]
 800c7f8:	6831      	ldr	r1, [r6, #0]
 800c7fa:	061f      	lsls	r7, r3, #24
 800c7fc:	f851 5b04 	ldr.w	r5, [r1], #4
 800c800:	d402      	bmi.n	800c808 <_printf_i+0x188>
 800c802:	065f      	lsls	r7, r3, #25
 800c804:	bf48      	it	mi
 800c806:	b2ad      	uxthmi	r5, r5
 800c808:	6031      	str	r1, [r6, #0]
 800c80a:	07d9      	lsls	r1, r3, #31
 800c80c:	bf44      	itt	mi
 800c80e:	f043 0320 	orrmi.w	r3, r3, #32
 800c812:	6023      	strmi	r3, [r4, #0]
 800c814:	b11d      	cbz	r5, 800c81e <_printf_i+0x19e>
 800c816:	2310      	movs	r3, #16
 800c818:	e7ac      	b.n	800c774 <_printf_i+0xf4>
 800c81a:	4827      	ldr	r0, [pc, #156]	@ (800c8b8 <_printf_i+0x238>)
 800c81c:	e7e9      	b.n	800c7f2 <_printf_i+0x172>
 800c81e:	6823      	ldr	r3, [r4, #0]
 800c820:	f023 0320 	bic.w	r3, r3, #32
 800c824:	6023      	str	r3, [r4, #0]
 800c826:	e7f6      	b.n	800c816 <_printf_i+0x196>
 800c828:	4616      	mov	r6, r2
 800c82a:	e7bd      	b.n	800c7a8 <_printf_i+0x128>
 800c82c:	6833      	ldr	r3, [r6, #0]
 800c82e:	6825      	ldr	r5, [r4, #0]
 800c830:	6961      	ldr	r1, [r4, #20]
 800c832:	1d18      	adds	r0, r3, #4
 800c834:	6030      	str	r0, [r6, #0]
 800c836:	062e      	lsls	r6, r5, #24
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	d501      	bpl.n	800c840 <_printf_i+0x1c0>
 800c83c:	6019      	str	r1, [r3, #0]
 800c83e:	e002      	b.n	800c846 <_printf_i+0x1c6>
 800c840:	0668      	lsls	r0, r5, #25
 800c842:	d5fb      	bpl.n	800c83c <_printf_i+0x1bc>
 800c844:	8019      	strh	r1, [r3, #0]
 800c846:	2300      	movs	r3, #0
 800c848:	6123      	str	r3, [r4, #16]
 800c84a:	4616      	mov	r6, r2
 800c84c:	e7bc      	b.n	800c7c8 <_printf_i+0x148>
 800c84e:	6833      	ldr	r3, [r6, #0]
 800c850:	1d1a      	adds	r2, r3, #4
 800c852:	6032      	str	r2, [r6, #0]
 800c854:	681e      	ldr	r6, [r3, #0]
 800c856:	6862      	ldr	r2, [r4, #4]
 800c858:	2100      	movs	r1, #0
 800c85a:	4630      	mov	r0, r6
 800c85c:	f7f3 fda0 	bl	80003a0 <memchr>
 800c860:	b108      	cbz	r0, 800c866 <_printf_i+0x1e6>
 800c862:	1b80      	subs	r0, r0, r6
 800c864:	6060      	str	r0, [r4, #4]
 800c866:	6863      	ldr	r3, [r4, #4]
 800c868:	6123      	str	r3, [r4, #16]
 800c86a:	2300      	movs	r3, #0
 800c86c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c870:	e7aa      	b.n	800c7c8 <_printf_i+0x148>
 800c872:	6923      	ldr	r3, [r4, #16]
 800c874:	4632      	mov	r2, r6
 800c876:	4649      	mov	r1, r9
 800c878:	4640      	mov	r0, r8
 800c87a:	47d0      	blx	sl
 800c87c:	3001      	adds	r0, #1
 800c87e:	d0ad      	beq.n	800c7dc <_printf_i+0x15c>
 800c880:	6823      	ldr	r3, [r4, #0]
 800c882:	079b      	lsls	r3, r3, #30
 800c884:	d413      	bmi.n	800c8ae <_printf_i+0x22e>
 800c886:	68e0      	ldr	r0, [r4, #12]
 800c888:	9b03      	ldr	r3, [sp, #12]
 800c88a:	4298      	cmp	r0, r3
 800c88c:	bfb8      	it	lt
 800c88e:	4618      	movlt	r0, r3
 800c890:	e7a6      	b.n	800c7e0 <_printf_i+0x160>
 800c892:	2301      	movs	r3, #1
 800c894:	4632      	mov	r2, r6
 800c896:	4649      	mov	r1, r9
 800c898:	4640      	mov	r0, r8
 800c89a:	47d0      	blx	sl
 800c89c:	3001      	adds	r0, #1
 800c89e:	d09d      	beq.n	800c7dc <_printf_i+0x15c>
 800c8a0:	3501      	adds	r5, #1
 800c8a2:	68e3      	ldr	r3, [r4, #12]
 800c8a4:	9903      	ldr	r1, [sp, #12]
 800c8a6:	1a5b      	subs	r3, r3, r1
 800c8a8:	42ab      	cmp	r3, r5
 800c8aa:	dcf2      	bgt.n	800c892 <_printf_i+0x212>
 800c8ac:	e7eb      	b.n	800c886 <_printf_i+0x206>
 800c8ae:	2500      	movs	r5, #0
 800c8b0:	f104 0619 	add.w	r6, r4, #25
 800c8b4:	e7f5      	b.n	800c8a2 <_printf_i+0x222>
 800c8b6:	bf00      	nop
 800c8b8:	08020339 	.word	0x08020339
 800c8bc:	0802034a 	.word	0x0802034a

0800c8c0 <__sflush_r>:
 800c8c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8c8:	0716      	lsls	r6, r2, #28
 800c8ca:	4605      	mov	r5, r0
 800c8cc:	460c      	mov	r4, r1
 800c8ce:	d454      	bmi.n	800c97a <__sflush_r+0xba>
 800c8d0:	684b      	ldr	r3, [r1, #4]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	dc02      	bgt.n	800c8dc <__sflush_r+0x1c>
 800c8d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	dd48      	ble.n	800c96e <__sflush_r+0xae>
 800c8dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c8de:	2e00      	cmp	r6, #0
 800c8e0:	d045      	beq.n	800c96e <__sflush_r+0xae>
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c8e8:	682f      	ldr	r7, [r5, #0]
 800c8ea:	6a21      	ldr	r1, [r4, #32]
 800c8ec:	602b      	str	r3, [r5, #0]
 800c8ee:	d030      	beq.n	800c952 <__sflush_r+0x92>
 800c8f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c8f2:	89a3      	ldrh	r3, [r4, #12]
 800c8f4:	0759      	lsls	r1, r3, #29
 800c8f6:	d505      	bpl.n	800c904 <__sflush_r+0x44>
 800c8f8:	6863      	ldr	r3, [r4, #4]
 800c8fa:	1ad2      	subs	r2, r2, r3
 800c8fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c8fe:	b10b      	cbz	r3, 800c904 <__sflush_r+0x44>
 800c900:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c902:	1ad2      	subs	r2, r2, r3
 800c904:	2300      	movs	r3, #0
 800c906:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c908:	6a21      	ldr	r1, [r4, #32]
 800c90a:	4628      	mov	r0, r5
 800c90c:	47b0      	blx	r6
 800c90e:	1c43      	adds	r3, r0, #1
 800c910:	89a3      	ldrh	r3, [r4, #12]
 800c912:	d106      	bne.n	800c922 <__sflush_r+0x62>
 800c914:	6829      	ldr	r1, [r5, #0]
 800c916:	291d      	cmp	r1, #29
 800c918:	d82b      	bhi.n	800c972 <__sflush_r+0xb2>
 800c91a:	4a2a      	ldr	r2, [pc, #168]	@ (800c9c4 <__sflush_r+0x104>)
 800c91c:	410a      	asrs	r2, r1
 800c91e:	07d6      	lsls	r6, r2, #31
 800c920:	d427      	bmi.n	800c972 <__sflush_r+0xb2>
 800c922:	2200      	movs	r2, #0
 800c924:	6062      	str	r2, [r4, #4]
 800c926:	04d9      	lsls	r1, r3, #19
 800c928:	6922      	ldr	r2, [r4, #16]
 800c92a:	6022      	str	r2, [r4, #0]
 800c92c:	d504      	bpl.n	800c938 <__sflush_r+0x78>
 800c92e:	1c42      	adds	r2, r0, #1
 800c930:	d101      	bne.n	800c936 <__sflush_r+0x76>
 800c932:	682b      	ldr	r3, [r5, #0]
 800c934:	b903      	cbnz	r3, 800c938 <__sflush_r+0x78>
 800c936:	6560      	str	r0, [r4, #84]	@ 0x54
 800c938:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c93a:	602f      	str	r7, [r5, #0]
 800c93c:	b1b9      	cbz	r1, 800c96e <__sflush_r+0xae>
 800c93e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c942:	4299      	cmp	r1, r3
 800c944:	d002      	beq.n	800c94c <__sflush_r+0x8c>
 800c946:	4628      	mov	r0, r5
 800c948:	f000 fa24 	bl	800cd94 <_free_r>
 800c94c:	2300      	movs	r3, #0
 800c94e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c950:	e00d      	b.n	800c96e <__sflush_r+0xae>
 800c952:	2301      	movs	r3, #1
 800c954:	4628      	mov	r0, r5
 800c956:	47b0      	blx	r6
 800c958:	4602      	mov	r2, r0
 800c95a:	1c50      	adds	r0, r2, #1
 800c95c:	d1c9      	bne.n	800c8f2 <__sflush_r+0x32>
 800c95e:	682b      	ldr	r3, [r5, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d0c6      	beq.n	800c8f2 <__sflush_r+0x32>
 800c964:	2b1d      	cmp	r3, #29
 800c966:	d001      	beq.n	800c96c <__sflush_r+0xac>
 800c968:	2b16      	cmp	r3, #22
 800c96a:	d11e      	bne.n	800c9aa <__sflush_r+0xea>
 800c96c:	602f      	str	r7, [r5, #0]
 800c96e:	2000      	movs	r0, #0
 800c970:	e022      	b.n	800c9b8 <__sflush_r+0xf8>
 800c972:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c976:	b21b      	sxth	r3, r3
 800c978:	e01b      	b.n	800c9b2 <__sflush_r+0xf2>
 800c97a:	690f      	ldr	r7, [r1, #16]
 800c97c:	2f00      	cmp	r7, #0
 800c97e:	d0f6      	beq.n	800c96e <__sflush_r+0xae>
 800c980:	0793      	lsls	r3, r2, #30
 800c982:	680e      	ldr	r6, [r1, #0]
 800c984:	bf08      	it	eq
 800c986:	694b      	ldreq	r3, [r1, #20]
 800c988:	600f      	str	r7, [r1, #0]
 800c98a:	bf18      	it	ne
 800c98c:	2300      	movne	r3, #0
 800c98e:	eba6 0807 	sub.w	r8, r6, r7
 800c992:	608b      	str	r3, [r1, #8]
 800c994:	f1b8 0f00 	cmp.w	r8, #0
 800c998:	dde9      	ble.n	800c96e <__sflush_r+0xae>
 800c99a:	6a21      	ldr	r1, [r4, #32]
 800c99c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c99e:	4643      	mov	r3, r8
 800c9a0:	463a      	mov	r2, r7
 800c9a2:	4628      	mov	r0, r5
 800c9a4:	47b0      	blx	r6
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	dc08      	bgt.n	800c9bc <__sflush_r+0xfc>
 800c9aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9b2:	81a3      	strh	r3, [r4, #12]
 800c9b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9bc:	4407      	add	r7, r0
 800c9be:	eba8 0800 	sub.w	r8, r8, r0
 800c9c2:	e7e7      	b.n	800c994 <__sflush_r+0xd4>
 800c9c4:	dfbffffe 	.word	0xdfbffffe

0800c9c8 <_fflush_r>:
 800c9c8:	b538      	push	{r3, r4, r5, lr}
 800c9ca:	690b      	ldr	r3, [r1, #16]
 800c9cc:	4605      	mov	r5, r0
 800c9ce:	460c      	mov	r4, r1
 800c9d0:	b913      	cbnz	r3, 800c9d8 <_fflush_r+0x10>
 800c9d2:	2500      	movs	r5, #0
 800c9d4:	4628      	mov	r0, r5
 800c9d6:	bd38      	pop	{r3, r4, r5, pc}
 800c9d8:	b118      	cbz	r0, 800c9e2 <_fflush_r+0x1a>
 800c9da:	6a03      	ldr	r3, [r0, #32]
 800c9dc:	b90b      	cbnz	r3, 800c9e2 <_fflush_r+0x1a>
 800c9de:	f7ff fb81 	bl	800c0e4 <__sinit>
 800c9e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d0f3      	beq.n	800c9d2 <_fflush_r+0xa>
 800c9ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c9ec:	07d0      	lsls	r0, r2, #31
 800c9ee:	d404      	bmi.n	800c9fa <_fflush_r+0x32>
 800c9f0:	0599      	lsls	r1, r3, #22
 800c9f2:	d402      	bmi.n	800c9fa <_fflush_r+0x32>
 800c9f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9f6:	f7ff fbf0 	bl	800c1da <__retarget_lock_acquire_recursive>
 800c9fa:	4628      	mov	r0, r5
 800c9fc:	4621      	mov	r1, r4
 800c9fe:	f7ff ff5f 	bl	800c8c0 <__sflush_r>
 800ca02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca04:	07da      	lsls	r2, r3, #31
 800ca06:	4605      	mov	r5, r0
 800ca08:	d4e4      	bmi.n	800c9d4 <_fflush_r+0xc>
 800ca0a:	89a3      	ldrh	r3, [r4, #12]
 800ca0c:	059b      	lsls	r3, r3, #22
 800ca0e:	d4e1      	bmi.n	800c9d4 <_fflush_r+0xc>
 800ca10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca12:	f7ff fbe3 	bl	800c1dc <__retarget_lock_release_recursive>
 800ca16:	e7dd      	b.n	800c9d4 <_fflush_r+0xc>

0800ca18 <__malloc_lock>:
 800ca18:	4801      	ldr	r0, [pc, #4]	@ (800ca20 <__malloc_lock+0x8>)
 800ca1a:	f7ff bbde 	b.w	800c1da <__retarget_lock_acquire_recursive>
 800ca1e:	bf00      	nop
 800ca20:	240045e4 	.word	0x240045e4

0800ca24 <__malloc_unlock>:
 800ca24:	4801      	ldr	r0, [pc, #4]	@ (800ca2c <__malloc_unlock+0x8>)
 800ca26:	f7ff bbd9 	b.w	800c1dc <__retarget_lock_release_recursive>
 800ca2a:	bf00      	nop
 800ca2c:	240045e4 	.word	0x240045e4

0800ca30 <__sread>:
 800ca30:	b510      	push	{r4, lr}
 800ca32:	460c      	mov	r4, r1
 800ca34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca38:	f000 f978 	bl	800cd2c <_read_r>
 800ca3c:	2800      	cmp	r0, #0
 800ca3e:	bfab      	itete	ge
 800ca40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ca42:	89a3      	ldrhlt	r3, [r4, #12]
 800ca44:	181b      	addge	r3, r3, r0
 800ca46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ca4a:	bfac      	ite	ge
 800ca4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ca4e:	81a3      	strhlt	r3, [r4, #12]
 800ca50:	bd10      	pop	{r4, pc}

0800ca52 <__swrite>:
 800ca52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca56:	461f      	mov	r7, r3
 800ca58:	898b      	ldrh	r3, [r1, #12]
 800ca5a:	05db      	lsls	r3, r3, #23
 800ca5c:	4605      	mov	r5, r0
 800ca5e:	460c      	mov	r4, r1
 800ca60:	4616      	mov	r6, r2
 800ca62:	d505      	bpl.n	800ca70 <__swrite+0x1e>
 800ca64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca68:	2302      	movs	r3, #2
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	f000 f94c 	bl	800cd08 <_lseek_r>
 800ca70:	89a3      	ldrh	r3, [r4, #12]
 800ca72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ca7a:	81a3      	strh	r3, [r4, #12]
 800ca7c:	4632      	mov	r2, r6
 800ca7e:	463b      	mov	r3, r7
 800ca80:	4628      	mov	r0, r5
 800ca82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca86:	f000 b973 	b.w	800cd70 <_write_r>

0800ca8a <__sseek>:
 800ca8a:	b510      	push	{r4, lr}
 800ca8c:	460c      	mov	r4, r1
 800ca8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca92:	f000 f939 	bl	800cd08 <_lseek_r>
 800ca96:	1c43      	adds	r3, r0, #1
 800ca98:	89a3      	ldrh	r3, [r4, #12]
 800ca9a:	bf15      	itete	ne
 800ca9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ca9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800caa2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800caa6:	81a3      	strheq	r3, [r4, #12]
 800caa8:	bf18      	it	ne
 800caaa:	81a3      	strhne	r3, [r4, #12]
 800caac:	bd10      	pop	{r4, pc}

0800caae <__sclose>:
 800caae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cab2:	f000 b8f7 	b.w	800cca4 <_close_r>

0800cab6 <__swbuf_r>:
 800cab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cab8:	460e      	mov	r6, r1
 800caba:	4614      	mov	r4, r2
 800cabc:	4605      	mov	r5, r0
 800cabe:	b118      	cbz	r0, 800cac8 <__swbuf_r+0x12>
 800cac0:	6a03      	ldr	r3, [r0, #32]
 800cac2:	b90b      	cbnz	r3, 800cac8 <__swbuf_r+0x12>
 800cac4:	f7ff fb0e 	bl	800c0e4 <__sinit>
 800cac8:	69a3      	ldr	r3, [r4, #24]
 800caca:	60a3      	str	r3, [r4, #8]
 800cacc:	89a3      	ldrh	r3, [r4, #12]
 800cace:	071a      	lsls	r2, r3, #28
 800cad0:	d501      	bpl.n	800cad6 <__swbuf_r+0x20>
 800cad2:	6923      	ldr	r3, [r4, #16]
 800cad4:	b943      	cbnz	r3, 800cae8 <__swbuf_r+0x32>
 800cad6:	4621      	mov	r1, r4
 800cad8:	4628      	mov	r0, r5
 800cada:	f000 f82b 	bl	800cb34 <__swsetup_r>
 800cade:	b118      	cbz	r0, 800cae8 <__swbuf_r+0x32>
 800cae0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800cae4:	4638      	mov	r0, r7
 800cae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cae8:	6823      	ldr	r3, [r4, #0]
 800caea:	6922      	ldr	r2, [r4, #16]
 800caec:	1a98      	subs	r0, r3, r2
 800caee:	6963      	ldr	r3, [r4, #20]
 800caf0:	b2f6      	uxtb	r6, r6
 800caf2:	4283      	cmp	r3, r0
 800caf4:	4637      	mov	r7, r6
 800caf6:	dc05      	bgt.n	800cb04 <__swbuf_r+0x4e>
 800caf8:	4621      	mov	r1, r4
 800cafa:	4628      	mov	r0, r5
 800cafc:	f7ff ff64 	bl	800c9c8 <_fflush_r>
 800cb00:	2800      	cmp	r0, #0
 800cb02:	d1ed      	bne.n	800cae0 <__swbuf_r+0x2a>
 800cb04:	68a3      	ldr	r3, [r4, #8]
 800cb06:	3b01      	subs	r3, #1
 800cb08:	60a3      	str	r3, [r4, #8]
 800cb0a:	6823      	ldr	r3, [r4, #0]
 800cb0c:	1c5a      	adds	r2, r3, #1
 800cb0e:	6022      	str	r2, [r4, #0]
 800cb10:	701e      	strb	r6, [r3, #0]
 800cb12:	6962      	ldr	r2, [r4, #20]
 800cb14:	1c43      	adds	r3, r0, #1
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d004      	beq.n	800cb24 <__swbuf_r+0x6e>
 800cb1a:	89a3      	ldrh	r3, [r4, #12]
 800cb1c:	07db      	lsls	r3, r3, #31
 800cb1e:	d5e1      	bpl.n	800cae4 <__swbuf_r+0x2e>
 800cb20:	2e0a      	cmp	r6, #10
 800cb22:	d1df      	bne.n	800cae4 <__swbuf_r+0x2e>
 800cb24:	4621      	mov	r1, r4
 800cb26:	4628      	mov	r0, r5
 800cb28:	f7ff ff4e 	bl	800c9c8 <_fflush_r>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d0d9      	beq.n	800cae4 <__swbuf_r+0x2e>
 800cb30:	e7d6      	b.n	800cae0 <__swbuf_r+0x2a>
	...

0800cb34 <__swsetup_r>:
 800cb34:	b538      	push	{r3, r4, r5, lr}
 800cb36:	4b29      	ldr	r3, [pc, #164]	@ (800cbdc <__swsetup_r+0xa8>)
 800cb38:	4605      	mov	r5, r0
 800cb3a:	6818      	ldr	r0, [r3, #0]
 800cb3c:	460c      	mov	r4, r1
 800cb3e:	b118      	cbz	r0, 800cb48 <__swsetup_r+0x14>
 800cb40:	6a03      	ldr	r3, [r0, #32]
 800cb42:	b90b      	cbnz	r3, 800cb48 <__swsetup_r+0x14>
 800cb44:	f7ff face 	bl	800c0e4 <__sinit>
 800cb48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb4c:	0719      	lsls	r1, r3, #28
 800cb4e:	d422      	bmi.n	800cb96 <__swsetup_r+0x62>
 800cb50:	06da      	lsls	r2, r3, #27
 800cb52:	d407      	bmi.n	800cb64 <__swsetup_r+0x30>
 800cb54:	2209      	movs	r2, #9
 800cb56:	602a      	str	r2, [r5, #0]
 800cb58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb5c:	81a3      	strh	r3, [r4, #12]
 800cb5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cb62:	e033      	b.n	800cbcc <__swsetup_r+0x98>
 800cb64:	0758      	lsls	r0, r3, #29
 800cb66:	d512      	bpl.n	800cb8e <__swsetup_r+0x5a>
 800cb68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb6a:	b141      	cbz	r1, 800cb7e <__swsetup_r+0x4a>
 800cb6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb70:	4299      	cmp	r1, r3
 800cb72:	d002      	beq.n	800cb7a <__swsetup_r+0x46>
 800cb74:	4628      	mov	r0, r5
 800cb76:	f000 f90d 	bl	800cd94 <_free_r>
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb7e:	89a3      	ldrh	r3, [r4, #12]
 800cb80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cb84:	81a3      	strh	r3, [r4, #12]
 800cb86:	2300      	movs	r3, #0
 800cb88:	6063      	str	r3, [r4, #4]
 800cb8a:	6923      	ldr	r3, [r4, #16]
 800cb8c:	6023      	str	r3, [r4, #0]
 800cb8e:	89a3      	ldrh	r3, [r4, #12]
 800cb90:	f043 0308 	orr.w	r3, r3, #8
 800cb94:	81a3      	strh	r3, [r4, #12]
 800cb96:	6923      	ldr	r3, [r4, #16]
 800cb98:	b94b      	cbnz	r3, 800cbae <__swsetup_r+0x7a>
 800cb9a:	89a3      	ldrh	r3, [r4, #12]
 800cb9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cba4:	d003      	beq.n	800cbae <__swsetup_r+0x7a>
 800cba6:	4621      	mov	r1, r4
 800cba8:	4628      	mov	r0, r5
 800cbaa:	f000 f83f 	bl	800cc2c <__smakebuf_r>
 800cbae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbb2:	f013 0201 	ands.w	r2, r3, #1
 800cbb6:	d00a      	beq.n	800cbce <__swsetup_r+0x9a>
 800cbb8:	2200      	movs	r2, #0
 800cbba:	60a2      	str	r2, [r4, #8]
 800cbbc:	6962      	ldr	r2, [r4, #20]
 800cbbe:	4252      	negs	r2, r2
 800cbc0:	61a2      	str	r2, [r4, #24]
 800cbc2:	6922      	ldr	r2, [r4, #16]
 800cbc4:	b942      	cbnz	r2, 800cbd8 <__swsetup_r+0xa4>
 800cbc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cbca:	d1c5      	bne.n	800cb58 <__swsetup_r+0x24>
 800cbcc:	bd38      	pop	{r3, r4, r5, pc}
 800cbce:	0799      	lsls	r1, r3, #30
 800cbd0:	bf58      	it	pl
 800cbd2:	6962      	ldrpl	r2, [r4, #20]
 800cbd4:	60a2      	str	r2, [r4, #8]
 800cbd6:	e7f4      	b.n	800cbc2 <__swsetup_r+0x8e>
 800cbd8:	2000      	movs	r0, #0
 800cbda:	e7f7      	b.n	800cbcc <__swsetup_r+0x98>
 800cbdc:	24000038 	.word	0x24000038

0800cbe0 <__swhatbuf_r>:
 800cbe0:	b570      	push	{r4, r5, r6, lr}
 800cbe2:	460c      	mov	r4, r1
 800cbe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbe8:	2900      	cmp	r1, #0
 800cbea:	b096      	sub	sp, #88	@ 0x58
 800cbec:	4615      	mov	r5, r2
 800cbee:	461e      	mov	r6, r3
 800cbf0:	da0d      	bge.n	800cc0e <__swhatbuf_r+0x2e>
 800cbf2:	89a3      	ldrh	r3, [r4, #12]
 800cbf4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cbf8:	f04f 0100 	mov.w	r1, #0
 800cbfc:	bf14      	ite	ne
 800cbfe:	2340      	movne	r3, #64	@ 0x40
 800cc00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cc04:	2000      	movs	r0, #0
 800cc06:	6031      	str	r1, [r6, #0]
 800cc08:	602b      	str	r3, [r5, #0]
 800cc0a:	b016      	add	sp, #88	@ 0x58
 800cc0c:	bd70      	pop	{r4, r5, r6, pc}
 800cc0e:	466a      	mov	r2, sp
 800cc10:	f000 f858 	bl	800ccc4 <_fstat_r>
 800cc14:	2800      	cmp	r0, #0
 800cc16:	dbec      	blt.n	800cbf2 <__swhatbuf_r+0x12>
 800cc18:	9901      	ldr	r1, [sp, #4]
 800cc1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cc1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cc22:	4259      	negs	r1, r3
 800cc24:	4159      	adcs	r1, r3
 800cc26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc2a:	e7eb      	b.n	800cc04 <__swhatbuf_r+0x24>

0800cc2c <__smakebuf_r>:
 800cc2c:	898b      	ldrh	r3, [r1, #12]
 800cc2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc30:	079d      	lsls	r5, r3, #30
 800cc32:	4606      	mov	r6, r0
 800cc34:	460c      	mov	r4, r1
 800cc36:	d507      	bpl.n	800cc48 <__smakebuf_r+0x1c>
 800cc38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cc3c:	6023      	str	r3, [r4, #0]
 800cc3e:	6123      	str	r3, [r4, #16]
 800cc40:	2301      	movs	r3, #1
 800cc42:	6163      	str	r3, [r4, #20]
 800cc44:	b003      	add	sp, #12
 800cc46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc48:	ab01      	add	r3, sp, #4
 800cc4a:	466a      	mov	r2, sp
 800cc4c:	f7ff ffc8 	bl	800cbe0 <__swhatbuf_r>
 800cc50:	9f00      	ldr	r7, [sp, #0]
 800cc52:	4605      	mov	r5, r0
 800cc54:	4639      	mov	r1, r7
 800cc56:	4630      	mov	r0, r6
 800cc58:	f7ff fc24 	bl	800c4a4 <_malloc_r>
 800cc5c:	b948      	cbnz	r0, 800cc72 <__smakebuf_r+0x46>
 800cc5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc62:	059a      	lsls	r2, r3, #22
 800cc64:	d4ee      	bmi.n	800cc44 <__smakebuf_r+0x18>
 800cc66:	f023 0303 	bic.w	r3, r3, #3
 800cc6a:	f043 0302 	orr.w	r3, r3, #2
 800cc6e:	81a3      	strh	r3, [r4, #12]
 800cc70:	e7e2      	b.n	800cc38 <__smakebuf_r+0xc>
 800cc72:	89a3      	ldrh	r3, [r4, #12]
 800cc74:	6020      	str	r0, [r4, #0]
 800cc76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc7a:	81a3      	strh	r3, [r4, #12]
 800cc7c:	9b01      	ldr	r3, [sp, #4]
 800cc7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cc82:	b15b      	cbz	r3, 800cc9c <__smakebuf_r+0x70>
 800cc84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc88:	4630      	mov	r0, r6
 800cc8a:	f000 f82d 	bl	800cce8 <_isatty_r>
 800cc8e:	b128      	cbz	r0, 800cc9c <__smakebuf_r+0x70>
 800cc90:	89a3      	ldrh	r3, [r4, #12]
 800cc92:	f023 0303 	bic.w	r3, r3, #3
 800cc96:	f043 0301 	orr.w	r3, r3, #1
 800cc9a:	81a3      	strh	r3, [r4, #12]
 800cc9c:	89a3      	ldrh	r3, [r4, #12]
 800cc9e:	431d      	orrs	r5, r3
 800cca0:	81a5      	strh	r5, [r4, #12]
 800cca2:	e7cf      	b.n	800cc44 <__smakebuf_r+0x18>

0800cca4 <_close_r>:
 800cca4:	b538      	push	{r3, r4, r5, lr}
 800cca6:	4d06      	ldr	r5, [pc, #24]	@ (800ccc0 <_close_r+0x1c>)
 800cca8:	2300      	movs	r3, #0
 800ccaa:	4604      	mov	r4, r0
 800ccac:	4608      	mov	r0, r1
 800ccae:	602b      	str	r3, [r5, #0]
 800ccb0:	f7f4 f9b4 	bl	800101c <_close>
 800ccb4:	1c43      	adds	r3, r0, #1
 800ccb6:	d102      	bne.n	800ccbe <_close_r+0x1a>
 800ccb8:	682b      	ldr	r3, [r5, #0]
 800ccba:	b103      	cbz	r3, 800ccbe <_close_r+0x1a>
 800ccbc:	6023      	str	r3, [r4, #0]
 800ccbe:	bd38      	pop	{r3, r4, r5, pc}
 800ccc0:	240045f0 	.word	0x240045f0

0800ccc4 <_fstat_r>:
 800ccc4:	b538      	push	{r3, r4, r5, lr}
 800ccc6:	4d07      	ldr	r5, [pc, #28]	@ (800cce4 <_fstat_r+0x20>)
 800ccc8:	2300      	movs	r3, #0
 800ccca:	4604      	mov	r4, r0
 800cccc:	4608      	mov	r0, r1
 800ccce:	4611      	mov	r1, r2
 800ccd0:	602b      	str	r3, [r5, #0]
 800ccd2:	f7f4 f9af 	bl	8001034 <_fstat>
 800ccd6:	1c43      	adds	r3, r0, #1
 800ccd8:	d102      	bne.n	800cce0 <_fstat_r+0x1c>
 800ccda:	682b      	ldr	r3, [r5, #0]
 800ccdc:	b103      	cbz	r3, 800cce0 <_fstat_r+0x1c>
 800ccde:	6023      	str	r3, [r4, #0]
 800cce0:	bd38      	pop	{r3, r4, r5, pc}
 800cce2:	bf00      	nop
 800cce4:	240045f0 	.word	0x240045f0

0800cce8 <_isatty_r>:
 800cce8:	b538      	push	{r3, r4, r5, lr}
 800ccea:	4d06      	ldr	r5, [pc, #24]	@ (800cd04 <_isatty_r+0x1c>)
 800ccec:	2300      	movs	r3, #0
 800ccee:	4604      	mov	r4, r0
 800ccf0:	4608      	mov	r0, r1
 800ccf2:	602b      	str	r3, [r5, #0]
 800ccf4:	f7f4 f9ae 	bl	8001054 <_isatty>
 800ccf8:	1c43      	adds	r3, r0, #1
 800ccfa:	d102      	bne.n	800cd02 <_isatty_r+0x1a>
 800ccfc:	682b      	ldr	r3, [r5, #0]
 800ccfe:	b103      	cbz	r3, 800cd02 <_isatty_r+0x1a>
 800cd00:	6023      	str	r3, [r4, #0]
 800cd02:	bd38      	pop	{r3, r4, r5, pc}
 800cd04:	240045f0 	.word	0x240045f0

0800cd08 <_lseek_r>:
 800cd08:	b538      	push	{r3, r4, r5, lr}
 800cd0a:	4d07      	ldr	r5, [pc, #28]	@ (800cd28 <_lseek_r+0x20>)
 800cd0c:	4604      	mov	r4, r0
 800cd0e:	4608      	mov	r0, r1
 800cd10:	4611      	mov	r1, r2
 800cd12:	2200      	movs	r2, #0
 800cd14:	602a      	str	r2, [r5, #0]
 800cd16:	461a      	mov	r2, r3
 800cd18:	f7f4 f9a7 	bl	800106a <_lseek>
 800cd1c:	1c43      	adds	r3, r0, #1
 800cd1e:	d102      	bne.n	800cd26 <_lseek_r+0x1e>
 800cd20:	682b      	ldr	r3, [r5, #0]
 800cd22:	b103      	cbz	r3, 800cd26 <_lseek_r+0x1e>
 800cd24:	6023      	str	r3, [r4, #0]
 800cd26:	bd38      	pop	{r3, r4, r5, pc}
 800cd28:	240045f0 	.word	0x240045f0

0800cd2c <_read_r>:
 800cd2c:	b538      	push	{r3, r4, r5, lr}
 800cd2e:	4d07      	ldr	r5, [pc, #28]	@ (800cd4c <_read_r+0x20>)
 800cd30:	4604      	mov	r4, r0
 800cd32:	4608      	mov	r0, r1
 800cd34:	4611      	mov	r1, r2
 800cd36:	2200      	movs	r2, #0
 800cd38:	602a      	str	r2, [r5, #0]
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	f7f4 f935 	bl	8000faa <_read>
 800cd40:	1c43      	adds	r3, r0, #1
 800cd42:	d102      	bne.n	800cd4a <_read_r+0x1e>
 800cd44:	682b      	ldr	r3, [r5, #0]
 800cd46:	b103      	cbz	r3, 800cd4a <_read_r+0x1e>
 800cd48:	6023      	str	r3, [r4, #0]
 800cd4a:	bd38      	pop	{r3, r4, r5, pc}
 800cd4c:	240045f0 	.word	0x240045f0

0800cd50 <_sbrk_r>:
 800cd50:	b538      	push	{r3, r4, r5, lr}
 800cd52:	4d06      	ldr	r5, [pc, #24]	@ (800cd6c <_sbrk_r+0x1c>)
 800cd54:	2300      	movs	r3, #0
 800cd56:	4604      	mov	r4, r0
 800cd58:	4608      	mov	r0, r1
 800cd5a:	602b      	str	r3, [r5, #0]
 800cd5c:	f7f4 f992 	bl	8001084 <_sbrk>
 800cd60:	1c43      	adds	r3, r0, #1
 800cd62:	d102      	bne.n	800cd6a <_sbrk_r+0x1a>
 800cd64:	682b      	ldr	r3, [r5, #0]
 800cd66:	b103      	cbz	r3, 800cd6a <_sbrk_r+0x1a>
 800cd68:	6023      	str	r3, [r4, #0]
 800cd6a:	bd38      	pop	{r3, r4, r5, pc}
 800cd6c:	240045f0 	.word	0x240045f0

0800cd70 <_write_r>:
 800cd70:	b538      	push	{r3, r4, r5, lr}
 800cd72:	4d07      	ldr	r5, [pc, #28]	@ (800cd90 <_write_r+0x20>)
 800cd74:	4604      	mov	r4, r0
 800cd76:	4608      	mov	r0, r1
 800cd78:	4611      	mov	r1, r2
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	602a      	str	r2, [r5, #0]
 800cd7e:	461a      	mov	r2, r3
 800cd80:	f7f4 f930 	bl	8000fe4 <_write>
 800cd84:	1c43      	adds	r3, r0, #1
 800cd86:	d102      	bne.n	800cd8e <_write_r+0x1e>
 800cd88:	682b      	ldr	r3, [r5, #0]
 800cd8a:	b103      	cbz	r3, 800cd8e <_write_r+0x1e>
 800cd8c:	6023      	str	r3, [r4, #0]
 800cd8e:	bd38      	pop	{r3, r4, r5, pc}
 800cd90:	240045f0 	.word	0x240045f0

0800cd94 <_free_r>:
 800cd94:	b538      	push	{r3, r4, r5, lr}
 800cd96:	4605      	mov	r5, r0
 800cd98:	2900      	cmp	r1, #0
 800cd9a:	d041      	beq.n	800ce20 <_free_r+0x8c>
 800cd9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cda0:	1f0c      	subs	r4, r1, #4
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	bfb8      	it	lt
 800cda6:	18e4      	addlt	r4, r4, r3
 800cda8:	f7ff fe36 	bl	800ca18 <__malloc_lock>
 800cdac:	4a1d      	ldr	r2, [pc, #116]	@ (800ce24 <_free_r+0x90>)
 800cdae:	6813      	ldr	r3, [r2, #0]
 800cdb0:	b933      	cbnz	r3, 800cdc0 <_free_r+0x2c>
 800cdb2:	6063      	str	r3, [r4, #4]
 800cdb4:	6014      	str	r4, [r2, #0]
 800cdb6:	4628      	mov	r0, r5
 800cdb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdbc:	f7ff be32 	b.w	800ca24 <__malloc_unlock>
 800cdc0:	42a3      	cmp	r3, r4
 800cdc2:	d908      	bls.n	800cdd6 <_free_r+0x42>
 800cdc4:	6820      	ldr	r0, [r4, #0]
 800cdc6:	1821      	adds	r1, r4, r0
 800cdc8:	428b      	cmp	r3, r1
 800cdca:	bf01      	itttt	eq
 800cdcc:	6819      	ldreq	r1, [r3, #0]
 800cdce:	685b      	ldreq	r3, [r3, #4]
 800cdd0:	1809      	addeq	r1, r1, r0
 800cdd2:	6021      	streq	r1, [r4, #0]
 800cdd4:	e7ed      	b.n	800cdb2 <_free_r+0x1e>
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	685b      	ldr	r3, [r3, #4]
 800cdda:	b10b      	cbz	r3, 800cde0 <_free_r+0x4c>
 800cddc:	42a3      	cmp	r3, r4
 800cdde:	d9fa      	bls.n	800cdd6 <_free_r+0x42>
 800cde0:	6811      	ldr	r1, [r2, #0]
 800cde2:	1850      	adds	r0, r2, r1
 800cde4:	42a0      	cmp	r0, r4
 800cde6:	d10b      	bne.n	800ce00 <_free_r+0x6c>
 800cde8:	6820      	ldr	r0, [r4, #0]
 800cdea:	4401      	add	r1, r0
 800cdec:	1850      	adds	r0, r2, r1
 800cdee:	4283      	cmp	r3, r0
 800cdf0:	6011      	str	r1, [r2, #0]
 800cdf2:	d1e0      	bne.n	800cdb6 <_free_r+0x22>
 800cdf4:	6818      	ldr	r0, [r3, #0]
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	6053      	str	r3, [r2, #4]
 800cdfa:	4408      	add	r0, r1
 800cdfc:	6010      	str	r0, [r2, #0]
 800cdfe:	e7da      	b.n	800cdb6 <_free_r+0x22>
 800ce00:	d902      	bls.n	800ce08 <_free_r+0x74>
 800ce02:	230c      	movs	r3, #12
 800ce04:	602b      	str	r3, [r5, #0]
 800ce06:	e7d6      	b.n	800cdb6 <_free_r+0x22>
 800ce08:	6820      	ldr	r0, [r4, #0]
 800ce0a:	1821      	adds	r1, r4, r0
 800ce0c:	428b      	cmp	r3, r1
 800ce0e:	bf04      	itt	eq
 800ce10:	6819      	ldreq	r1, [r3, #0]
 800ce12:	685b      	ldreq	r3, [r3, #4]
 800ce14:	6063      	str	r3, [r4, #4]
 800ce16:	bf04      	itt	eq
 800ce18:	1809      	addeq	r1, r1, r0
 800ce1a:	6021      	streq	r1, [r4, #0]
 800ce1c:	6054      	str	r4, [r2, #4]
 800ce1e:	e7ca      	b.n	800cdb6 <_free_r+0x22>
 800ce20:	bd38      	pop	{r3, r4, r5, pc}
 800ce22:	bf00      	nop
 800ce24:	240045ec 	.word	0x240045ec

0800ce28 <sqrtf>:
 800ce28:	b508      	push	{r3, lr}
 800ce2a:	ed2d 8b02 	vpush	{d8}
 800ce2e:	eeb0 8a40 	vmov.f32	s16, s0
 800ce32:	f000 f817 	bl	800ce64 <__ieee754_sqrtf>
 800ce36:	eeb4 8a48 	vcmp.f32	s16, s16
 800ce3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce3e:	d60c      	bvs.n	800ce5a <sqrtf+0x32>
 800ce40:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ce60 <sqrtf+0x38>
 800ce44:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ce48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce4c:	d505      	bpl.n	800ce5a <sqrtf+0x32>
 800ce4e:	f7ff f999 	bl	800c184 <__errno>
 800ce52:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ce56:	2321      	movs	r3, #33	@ 0x21
 800ce58:	6003      	str	r3, [r0, #0]
 800ce5a:	ecbd 8b02 	vpop	{d8}
 800ce5e:	bd08      	pop	{r3, pc}
 800ce60:	00000000 	.word	0x00000000

0800ce64 <__ieee754_sqrtf>:
 800ce64:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ce68:	4770      	bx	lr
	...

0800ce6c <_init>:
 800ce6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce6e:	bf00      	nop
 800ce70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce72:	bc08      	pop	{r3}
 800ce74:	469e      	mov	lr, r3
 800ce76:	4770      	bx	lr

0800ce78 <_fini>:
 800ce78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce7a:	bf00      	nop
 800ce7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce7e:	bc08      	pop	{r3}
 800ce80:	469e      	mov	lr, r3
 800ce82:	4770      	bx	lr
