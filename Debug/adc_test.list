
adc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce9c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000134d8  0800d13c  0800d13c  0000e13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020614  08020614  00021614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802061c  0802061c  0002161c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08020620  08020620  00021620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  08020624  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004b64  24000088  080206ac  00022088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004bec  080206ac  00022bec  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00022088  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001dd91  00000000  00000000  000220b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003563  00000000  00000000  0003fe47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001688  00000000  00000000  000433b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000010e5  00000000  00000000  00044a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a94b  00000000  00000000  00045b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001dccc  00000000  00000000  00080468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017bfe0  00000000  00000000  0009e134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b3  00000000  00000000  0021a114  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000067c8  00000000  00000000  0021a1c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  00220990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    0000318f  00000000  00000000  002209f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000060  00000000  00000000  00223b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d124 	.word	0x0800d124

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	0800d124 	.word	0x0800d124

080002e0 <arm_bitreversal_32>:
 80002e0:	1c4b      	adds	r3, r1, #1
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	bf98      	it	ls
 80002e6:	4770      	bxls	lr
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002ec:	1c91      	adds	r1, r2, #2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002f8:	880a      	ldrh	r2, [r1, #0]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002fe:	4480      	add	r8, r0
 8000300:	4481      	add	r9, r0
 8000302:	4402      	add	r2, r0
 8000304:	4484      	add	ip, r0
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
 800030e:	6815      	ldr	r5, [r2, #0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
 8000314:	f8c9 6000 	str.w	r6, [r9]
 8000318:	f8c8 7000 	str.w	r7, [r8]
 800031c:	f8cc 5000 	str.w	r5, [ip]
 8000320:	6014      	str	r4, [r2, #0]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800032a:	6855      	ldr	r5, [r2, #4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
 800033c:	6054      	str	r4, [r2, #4]
 800033e:	3108      	adds	r1, #8
 8000340:	3b01      	subs	r3, #1
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
 800034a:	1c4b      	adds	r3, r1, #1
 800034c:	2b01      	cmp	r3, #1
 800034e:	bf98      	it	ls
 8000350:	4770      	bxls	lr
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000356:	1c91      	adds	r1, r2, #2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000362:	880a      	ldrh	r2, [r1, #0]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
 8000380:	6815      	ldr	r5, [r2, #0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
 8000386:	f8c9 6000 	str.w	r6, [r9]
 800038a:	f8c8 7000 	str.w	r7, [r8]
 800038e:	f8cc 5000 	str.w	r5, [ip]
 8000392:	6014      	str	r4, [r2, #0]
 8000394:	3108      	adds	r1, #8
 8000396:	3b01      	subs	r3, #1
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800039e:	4770      	bx	lr

080003a0 <memchr>:
 80003a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80003a4:	2a10      	cmp	r2, #16
 80003a6:	db2b      	blt.n	8000400 <memchr+0x60>
 80003a8:	f010 0f07 	tst.w	r0, #7
 80003ac:	d008      	beq.n	80003c0 <memchr+0x20>
 80003ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003b2:	3a01      	subs	r2, #1
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d02d      	beq.n	8000414 <memchr+0x74>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	b342      	cbz	r2, 8000410 <memchr+0x70>
 80003be:	d1f6      	bne.n	80003ae <memchr+0xe>
 80003c0:	b4f0      	push	{r4, r5, r6, r7}
 80003c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003ca:	f022 0407 	bic.w	r4, r2, #7
 80003ce:	f07f 0700 	mvns.w	r7, #0
 80003d2:	2300      	movs	r3, #0
 80003d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003d8:	3c08      	subs	r4, #8
 80003da:	ea85 0501 	eor.w	r5, r5, r1
 80003de:	ea86 0601 	eor.w	r6, r6, r1
 80003e2:	fa85 f547 	uadd8	r5, r5, r7
 80003e6:	faa3 f587 	sel	r5, r3, r7
 80003ea:	fa86 f647 	uadd8	r6, r6, r7
 80003ee:	faa5 f687 	sel	r6, r5, r7
 80003f2:	b98e      	cbnz	r6, 8000418 <memchr+0x78>
 80003f4:	d1ee      	bne.n	80003d4 <memchr+0x34>
 80003f6:	bcf0      	pop	{r4, r5, r6, r7}
 80003f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80003fc:	f002 0207 	and.w	r2, r2, #7
 8000400:	b132      	cbz	r2, 8000410 <memchr+0x70>
 8000402:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000406:	3a01      	subs	r2, #1
 8000408:	ea83 0301 	eor.w	r3, r3, r1
 800040c:	b113      	cbz	r3, 8000414 <memchr+0x74>
 800040e:	d1f8      	bne.n	8000402 <memchr+0x62>
 8000410:	2000      	movs	r0, #0
 8000412:	4770      	bx	lr
 8000414:	3801      	subs	r0, #1
 8000416:	4770      	bx	lr
 8000418:	2d00      	cmp	r5, #0
 800041a:	bf06      	itte	eq
 800041c:	4635      	moveq	r5, r6
 800041e:	3803      	subeq	r0, #3
 8000420:	3807      	subne	r0, #7
 8000422:	f015 0f01 	tst.w	r5, #1
 8000426:	d107      	bne.n	8000438 <memchr+0x98>
 8000428:	3001      	adds	r0, #1
 800042a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800042e:	bf02      	ittt	eq
 8000430:	3001      	addeq	r0, #1
 8000432:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000436:	3001      	addeq	r0, #1
 8000438:	bcf0      	pop	{r4, r5, r6, r7}
 800043a:	3801      	subs	r0, #1
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop

08000440 <__aeabi_uldivmod>:
 8000440:	b953      	cbnz	r3, 8000458 <__aeabi_uldivmod+0x18>
 8000442:	b94a      	cbnz	r2, 8000458 <__aeabi_uldivmod+0x18>
 8000444:	2900      	cmp	r1, #0
 8000446:	bf08      	it	eq
 8000448:	2800      	cmpeq	r0, #0
 800044a:	bf1c      	itt	ne
 800044c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000450:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000454:	f000 b96a 	b.w	800072c <__aeabi_idiv0>
 8000458:	f1ad 0c08 	sub.w	ip, sp, #8
 800045c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000460:	f000 f806 	bl	8000470 <__udivmoddi4>
 8000464:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800046c:	b004      	add	sp, #16
 800046e:	4770      	bx	lr

08000470 <__udivmoddi4>:
 8000470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000474:	9d08      	ldr	r5, [sp, #32]
 8000476:	460c      	mov	r4, r1
 8000478:	2b00      	cmp	r3, #0
 800047a:	d14e      	bne.n	800051a <__udivmoddi4+0xaa>
 800047c:	4694      	mov	ip, r2
 800047e:	458c      	cmp	ip, r1
 8000480:	4686      	mov	lr, r0
 8000482:	fab2 f282 	clz	r2, r2
 8000486:	d962      	bls.n	800054e <__udivmoddi4+0xde>
 8000488:	b14a      	cbz	r2, 800049e <__udivmoddi4+0x2e>
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	4091      	lsls	r1, r2
 8000490:	fa20 f303 	lsr.w	r3, r0, r3
 8000494:	fa0c fc02 	lsl.w	ip, ip, r2
 8000498:	4319      	orrs	r1, r3
 800049a:	fa00 fe02 	lsl.w	lr, r0, r2
 800049e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a2:	fa1f f68c 	uxth.w	r6, ip
 80004a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ae:	fb07 1114 	mls	r1, r7, r4, r1
 80004b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b6:	fb04 f106 	mul.w	r1, r4, r6
 80004ba:	4299      	cmp	r1, r3
 80004bc:	d90a      	bls.n	80004d4 <__udivmoddi4+0x64>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004c6:	f080 8112 	bcs.w	80006ee <__udivmoddi4+0x27e>
 80004ca:	4299      	cmp	r1, r3
 80004cc:	f240 810f 	bls.w	80006ee <__udivmoddi4+0x27e>
 80004d0:	3c02      	subs	r4, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	fa1f f38e 	uxth.w	r3, lr
 80004da:	fbb1 f0f7 	udiv	r0, r1, r7
 80004de:	fb07 1110 	mls	r1, r7, r0, r1
 80004e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e6:	fb00 f606 	mul.w	r6, r0, r6
 80004ea:	429e      	cmp	r6, r3
 80004ec:	d90a      	bls.n	8000504 <__udivmoddi4+0x94>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80004f6:	f080 80fc 	bcs.w	80006f2 <__udivmoddi4+0x282>
 80004fa:	429e      	cmp	r6, r3
 80004fc:	f240 80f9 	bls.w	80006f2 <__udivmoddi4+0x282>
 8000500:	4463      	add	r3, ip
 8000502:	3802      	subs	r0, #2
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800050a:	2100      	movs	r1, #0
 800050c:	b11d      	cbz	r5, 8000516 <__udivmoddi4+0xa6>
 800050e:	40d3      	lsrs	r3, r2
 8000510:	2200      	movs	r2, #0
 8000512:	e9c5 3200 	strd	r3, r2, [r5]
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	428b      	cmp	r3, r1
 800051c:	d905      	bls.n	800052a <__udivmoddi4+0xba>
 800051e:	b10d      	cbz	r5, 8000524 <__udivmoddi4+0xb4>
 8000520:	e9c5 0100 	strd	r0, r1, [r5]
 8000524:	2100      	movs	r1, #0
 8000526:	4608      	mov	r0, r1
 8000528:	e7f5      	b.n	8000516 <__udivmoddi4+0xa6>
 800052a:	fab3 f183 	clz	r1, r3
 800052e:	2900      	cmp	r1, #0
 8000530:	d146      	bne.n	80005c0 <__udivmoddi4+0x150>
 8000532:	42a3      	cmp	r3, r4
 8000534:	d302      	bcc.n	800053c <__udivmoddi4+0xcc>
 8000536:	4290      	cmp	r0, r2
 8000538:	f0c0 80f0 	bcc.w	800071c <__udivmoddi4+0x2ac>
 800053c:	1a86      	subs	r6, r0, r2
 800053e:	eb64 0303 	sbc.w	r3, r4, r3
 8000542:	2001      	movs	r0, #1
 8000544:	2d00      	cmp	r5, #0
 8000546:	d0e6      	beq.n	8000516 <__udivmoddi4+0xa6>
 8000548:	e9c5 6300 	strd	r6, r3, [r5]
 800054c:	e7e3      	b.n	8000516 <__udivmoddi4+0xa6>
 800054e:	2a00      	cmp	r2, #0
 8000550:	f040 8090 	bne.w	8000674 <__udivmoddi4+0x204>
 8000554:	eba1 040c 	sub.w	r4, r1, ip
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	2101      	movs	r1, #1
 8000562:	fbb4 f6f8 	udiv	r6, r4, r8
 8000566:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800056a:	fb08 4416 	mls	r4, r8, r6, r4
 800056e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000572:	fb07 f006 	mul.w	r0, r7, r6
 8000576:	4298      	cmp	r0, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x11c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000582:	d202      	bcs.n	800058a <__udivmoddi4+0x11a>
 8000584:	4298      	cmp	r0, r3
 8000586:	f200 80cd 	bhi.w	8000724 <__udivmoddi4+0x2b4>
 800058a:	4626      	mov	r6, r4
 800058c:	1a1c      	subs	r4, r3, r0
 800058e:	fa1f f38e 	uxth.w	r3, lr
 8000592:	fbb4 f0f8 	udiv	r0, r4, r8
 8000596:	fb08 4410 	mls	r4, r8, r0, r4
 800059a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800059e:	fb00 f707 	mul.w	r7, r0, r7
 80005a2:	429f      	cmp	r7, r3
 80005a4:	d908      	bls.n	80005b8 <__udivmoddi4+0x148>
 80005a6:	eb1c 0303 	adds.w	r3, ip, r3
 80005aa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005ae:	d202      	bcs.n	80005b6 <__udivmoddi4+0x146>
 80005b0:	429f      	cmp	r7, r3
 80005b2:	f200 80b0 	bhi.w	8000716 <__udivmoddi4+0x2a6>
 80005b6:	4620      	mov	r0, r4
 80005b8:	1bdb      	subs	r3, r3, r7
 80005ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005be:	e7a5      	b.n	800050c <__udivmoddi4+0x9c>
 80005c0:	f1c1 0620 	rsb	r6, r1, #32
 80005c4:	408b      	lsls	r3, r1
 80005c6:	fa22 f706 	lsr.w	r7, r2, r6
 80005ca:	431f      	orrs	r7, r3
 80005cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005d0:	fa04 f301 	lsl.w	r3, r4, r1
 80005d4:	ea43 030c 	orr.w	r3, r3, ip
 80005d8:	40f4      	lsrs	r4, r6
 80005da:	fa00 f801 	lsl.w	r8, r0, r1
 80005de:	0c38      	lsrs	r0, r7, #16
 80005e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005e4:	fbb4 fef0 	udiv	lr, r4, r0
 80005e8:	fa1f fc87 	uxth.w	ip, r7
 80005ec:	fb00 441e 	mls	r4, r0, lr, r4
 80005f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005f4:	fb0e f90c 	mul.w	r9, lr, ip
 80005f8:	45a1      	cmp	r9, r4
 80005fa:	fa02 f201 	lsl.w	r2, r2, r1
 80005fe:	d90a      	bls.n	8000616 <__udivmoddi4+0x1a6>
 8000600:	193c      	adds	r4, r7, r4
 8000602:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000606:	f080 8084 	bcs.w	8000712 <__udivmoddi4+0x2a2>
 800060a:	45a1      	cmp	r9, r4
 800060c:	f240 8081 	bls.w	8000712 <__udivmoddi4+0x2a2>
 8000610:	f1ae 0e02 	sub.w	lr, lr, #2
 8000614:	443c      	add	r4, r7
 8000616:	eba4 0409 	sub.w	r4, r4, r9
 800061a:	fa1f f983 	uxth.w	r9, r3
 800061e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000622:	fb00 4413 	mls	r4, r0, r3, r4
 8000626:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800062a:	fb03 fc0c 	mul.w	ip, r3, ip
 800062e:	45a4      	cmp	ip, r4
 8000630:	d907      	bls.n	8000642 <__udivmoddi4+0x1d2>
 8000632:	193c      	adds	r4, r7, r4
 8000634:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000638:	d267      	bcs.n	800070a <__udivmoddi4+0x29a>
 800063a:	45a4      	cmp	ip, r4
 800063c:	d965      	bls.n	800070a <__udivmoddi4+0x29a>
 800063e:	3b02      	subs	r3, #2
 8000640:	443c      	add	r4, r7
 8000642:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000646:	fba0 9302 	umull	r9, r3, r0, r2
 800064a:	eba4 040c 	sub.w	r4, r4, ip
 800064e:	429c      	cmp	r4, r3
 8000650:	46ce      	mov	lr, r9
 8000652:	469c      	mov	ip, r3
 8000654:	d351      	bcc.n	80006fa <__udivmoddi4+0x28a>
 8000656:	d04e      	beq.n	80006f6 <__udivmoddi4+0x286>
 8000658:	b155      	cbz	r5, 8000670 <__udivmoddi4+0x200>
 800065a:	ebb8 030e 	subs.w	r3, r8, lr
 800065e:	eb64 040c 	sbc.w	r4, r4, ip
 8000662:	fa04 f606 	lsl.w	r6, r4, r6
 8000666:	40cb      	lsrs	r3, r1
 8000668:	431e      	orrs	r6, r3
 800066a:	40cc      	lsrs	r4, r1
 800066c:	e9c5 6400 	strd	r6, r4, [r5]
 8000670:	2100      	movs	r1, #0
 8000672:	e750      	b.n	8000516 <__udivmoddi4+0xa6>
 8000674:	f1c2 0320 	rsb	r3, r2, #32
 8000678:	fa20 f103 	lsr.w	r1, r0, r3
 800067c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000680:	fa24 f303 	lsr.w	r3, r4, r3
 8000684:	4094      	lsls	r4, r2
 8000686:	430c      	orrs	r4, r1
 8000688:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800068c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000690:	fa1f f78c 	uxth.w	r7, ip
 8000694:	fbb3 f0f8 	udiv	r0, r3, r8
 8000698:	fb08 3110 	mls	r1, r8, r0, r3
 800069c:	0c23      	lsrs	r3, r4, #16
 800069e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006a2:	fb00 f107 	mul.w	r1, r0, r7
 80006a6:	4299      	cmp	r1, r3
 80006a8:	d908      	bls.n	80006bc <__udivmoddi4+0x24c>
 80006aa:	eb1c 0303 	adds.w	r3, ip, r3
 80006ae:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006b2:	d22c      	bcs.n	800070e <__udivmoddi4+0x29e>
 80006b4:	4299      	cmp	r1, r3
 80006b6:	d92a      	bls.n	800070e <__udivmoddi4+0x29e>
 80006b8:	3802      	subs	r0, #2
 80006ba:	4463      	add	r3, ip
 80006bc:	1a5b      	subs	r3, r3, r1
 80006be:	b2a4      	uxth	r4, r4
 80006c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006c4:	fb08 3311 	mls	r3, r8, r1, r3
 80006c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006cc:	fb01 f307 	mul.w	r3, r1, r7
 80006d0:	42a3      	cmp	r3, r4
 80006d2:	d908      	bls.n	80006e6 <__udivmoddi4+0x276>
 80006d4:	eb1c 0404 	adds.w	r4, ip, r4
 80006d8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006dc:	d213      	bcs.n	8000706 <__udivmoddi4+0x296>
 80006de:	42a3      	cmp	r3, r4
 80006e0:	d911      	bls.n	8000706 <__udivmoddi4+0x296>
 80006e2:	3902      	subs	r1, #2
 80006e4:	4464      	add	r4, ip
 80006e6:	1ae4      	subs	r4, r4, r3
 80006e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006ec:	e739      	b.n	8000562 <__udivmoddi4+0xf2>
 80006ee:	4604      	mov	r4, r0
 80006f0:	e6f0      	b.n	80004d4 <__udivmoddi4+0x64>
 80006f2:	4608      	mov	r0, r1
 80006f4:	e706      	b.n	8000504 <__udivmoddi4+0x94>
 80006f6:	45c8      	cmp	r8, r9
 80006f8:	d2ae      	bcs.n	8000658 <__udivmoddi4+0x1e8>
 80006fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80006fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000702:	3801      	subs	r0, #1
 8000704:	e7a8      	b.n	8000658 <__udivmoddi4+0x1e8>
 8000706:	4631      	mov	r1, r6
 8000708:	e7ed      	b.n	80006e6 <__udivmoddi4+0x276>
 800070a:	4603      	mov	r3, r0
 800070c:	e799      	b.n	8000642 <__udivmoddi4+0x1d2>
 800070e:	4630      	mov	r0, r6
 8000710:	e7d4      	b.n	80006bc <__udivmoddi4+0x24c>
 8000712:	46d6      	mov	lr, sl
 8000714:	e77f      	b.n	8000616 <__udivmoddi4+0x1a6>
 8000716:	4463      	add	r3, ip
 8000718:	3802      	subs	r0, #2
 800071a:	e74d      	b.n	80005b8 <__udivmoddi4+0x148>
 800071c:	4606      	mov	r6, r0
 800071e:	4623      	mov	r3, r4
 8000720:	4608      	mov	r0, r1
 8000722:	e70f      	b.n	8000544 <__udivmoddi4+0xd4>
 8000724:	3e02      	subs	r6, #2
 8000726:	4463      	add	r3, ip
 8000728:	e730      	b.n	800058c <__udivmoddi4+0x11c>
 800072a:	bf00      	nop

0800072c <__aeabi_idiv0>:
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop

08000730 <HAL_ADC_ConvCpltCallback>:
//
//		}
//	}
//}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < ADC_BUFFER_LENGTH; ++i) {
 8000738:	2300      	movs	r3, #0
 800073a:	81fb      	strh	r3, [r7, #14]
 800073c:	e027      	b.n	800078e <HAL_ADC_ConvCpltCallback+0x5e>

			fftInBuf[fftIndex++] = adc_data[i];
 800073e:	89fb      	ldrh	r3, [r7, #14]
 8000740:	4a17      	ldr	r2, [pc, #92]	@ (80007a0 <HAL_ADC_ConvCpltCallback+0x70>)
 8000742:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000746:	b298      	uxth	r0, r3
 8000748:	4b16      	ldr	r3, [pc, #88]	@ (80007a4 <HAL_ADC_ConvCpltCallback+0x74>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	1c5a      	adds	r2, r3, #1
 800074e:	b291      	uxth	r1, r2
 8000750:	4a14      	ldr	r2, [pc, #80]	@ (80007a4 <HAL_ADC_ConvCpltCallback+0x74>)
 8000752:	8011      	strh	r1, [r2, #0]
 8000754:	ee07 0a90 	vmov	s15, r0
 8000758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800075c:	4a12      	ldr	r2, [pc, #72]	@ (80007a8 <HAL_ADC_ConvCpltCallback+0x78>)
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	4413      	add	r3, r2
 8000762:	edc3 7a00 	vstr	s15, [r3]

			if(fftIndex == FFT_BUFFER_SIZE) {
 8000766:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <HAL_ADC_ConvCpltCallback+0x74>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800076e:	d10b      	bne.n	8000788 <HAL_ADC_ConvCpltCallback+0x58>

				arm_rfft_fast_f32(&fftHandler, fftInBuf, fftOutBuf, 0);
 8000770:	2300      	movs	r3, #0
 8000772:	4a0e      	ldr	r2, [pc, #56]	@ (80007ac <HAL_ADC_ConvCpltCallback+0x7c>)
 8000774:	490c      	ldr	r1, [pc, #48]	@ (80007a8 <HAL_ADC_ConvCpltCallback+0x78>)
 8000776:	480e      	ldr	r0, [pc, #56]	@ (80007b0 <HAL_ADC_ConvCpltCallback+0x80>)
 8000778:	f00a fe3e 	bl	800b3f8 <arm_rfft_fast_f32>

				// Set FFT flag
				fftFlag = 1;
 800077c:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <HAL_ADC_ConvCpltCallback+0x84>)
 800077e:	2201      	movs	r2, #1
 8000780:	701a      	strb	r2, [r3, #0]

				fftIndex = 0;
 8000782:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <HAL_ADC_ConvCpltCallback+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i < ADC_BUFFER_LENGTH; ++i) {
 8000788:	89fb      	ldrh	r3, [r7, #14]
 800078a:	3301      	adds	r3, #1
 800078c:	81fb      	strh	r3, [r7, #14]
 800078e:	89fb      	ldrh	r3, [r7, #14]
 8000790:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000794:	d3d3      	bcc.n	800073e <HAL_ADC_ConvCpltCallback+0xe>
			}
	}
}
 8000796:	bf00      	nop
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	240001dc 	.word	0x240001dc
 80007a4:	240049f6 	.word	0x240049f6
 80007a8:	240009f4 	.word	0x240009f4
 80007ac:	240029f4 	.word	0x240029f4
 80007b0:	240009dc 	.word	0x240009dc
 80007b4:	240049f4 	.word	0x240049f4

080007b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007be:	f000 fa7d 	bl	8000cbc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c2:	f000 ff61 	bl	8001688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c6:	f000 f8d3 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ca:	f000 fa3f 	bl	8000c4c <MX_GPIO_Init>
  MX_DMA_Init();
 80007ce:	f000 fa1d 	bl	8000c0c <MX_DMA_Init>
  MX_ADC1_Init();
 80007d2:	f000 f949 	bl	8000a68 <MX_ADC1_Init>
  MX_TIM8_Init();
 80007d6:	f000 f9c7 	bl	8000b68 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  // Initialize FFT
  arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 80007da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007de:	485c      	ldr	r0, [pc, #368]	@ (8000950 <main+0x198>)
 80007e0:	f00a fd58 	bl	800b294 <arm_rfft_fast_init_f32>

  HAL_ADCEx_Calibration_Start(&hadc1,ADC_CALIB_OFFSET,ADC_SINGLE_ENDED);
 80007e4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80007e8:	2100      	movs	r1, #0
 80007ea:	485a      	ldr	r0, [pc, #360]	@ (8000954 <main+0x19c>)
 80007ec:	f002 fcde 	bl	80031ac <HAL_ADCEx_Calibration_Start>

  HAL_TIM_Base_Start(&htim8);
 80007f0:	4859      	ldr	r0, [pc, #356]	@ (8000958 <main+0x1a0>)
 80007f2:	f009 f853 	bl	800989c <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&adc_data, ADC_BUFFER_LENGTH);
 80007f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007fa:	4958      	ldr	r1, [pc, #352]	@ (800095c <main+0x1a4>)
 80007fc:	4855      	ldr	r0, [pc, #340]	@ (8000954 <main+0x19c>)
 80007fe:	f001 fbe5 	bl	8001fcc <HAL_ADC_Start_DMA>


  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000802:	2000      	movs	r0, #0
 8000804:	f000 fd5c 	bl	80012c0 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000808:	2001      	movs	r0, #1
 800080a:	f000 fd59 	bl	80012c0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800080e:	2002      	movs	r0, #2
 8000810:	f000 fd56 	bl	80012c0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000814:	2101      	movs	r1, #1
 8000816:	2000      	movs	r0, #0
 8000818:	f000 fdc8 	bl	80013ac <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800081c:	4b50      	ldr	r3, [pc, #320]	@ (8000960 <main+0x1a8>)
 800081e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000822:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000824:	4b4e      	ldr	r3, [pc, #312]	@ (8000960 <main+0x1a8>)
 8000826:	2200      	movs	r2, #0
 8000828:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800082a:	4b4d      	ldr	r3, [pc, #308]	@ (8000960 <main+0x1a8>)
 800082c:	2200      	movs	r2, #0
 800082e:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000830:	4b4b      	ldr	r3, [pc, #300]	@ (8000960 <main+0x1a8>)
 8000832:	2200      	movs	r2, #0
 8000834:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000836:	4b4a      	ldr	r3, [pc, #296]	@ (8000960 <main+0x1a8>)
 8000838:	2200      	movs	r2, #0
 800083a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800083c:	4948      	ldr	r1, [pc, #288]	@ (8000960 <main+0x1a8>)
 800083e:	2000      	movs	r0, #0
 8000840:	f000 fe44 	bl	80014cc <BSP_COM_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <main+0x96>
  {
    Error_Handler();
 800084a:	f000 fa63 	bl	8000d14 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t printTimer = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]

  float peakVal = 0.0f;
 8000852:	f04f 0300 	mov.w	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
  uint16_t peakHz = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	81fb      	strh	r3, [r7, #14]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 if(fftFlag) {
 800085c:	4b41      	ldr	r3, [pc, #260]	@ (8000964 <main+0x1ac>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d059      	beq.n	8000918 <main+0x160>
		 peakVal = 0.0f;
 8000864:	f04f 0300 	mov.w	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
		 peakHz = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	81fb      	strh	r3, [r7, #14]

		 uint16_t freqIndex = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	81bb      	strh	r3, [r7, #12]
		 for(uint16_t i = 0; i < FFT_BUFFER_SIZE; i += 2) {
 8000872:	2300      	movs	r3, #0
 8000874:	817b      	strh	r3, [r7, #10]
 8000876:	e048      	b.n	800090a <main+0x152>

			 float currVal = sqrtf((fftOutBuf[i] * fftOutBuf[i]) + (fftOutBuf[i+1] * fftOutBuf[i+1]));
 8000878:	897b      	ldrh	r3, [r7, #10]
 800087a:	4a3b      	ldr	r2, [pc, #236]	@ (8000968 <main+0x1b0>)
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	4413      	add	r3, r2
 8000880:	ed93 7a00 	vldr	s14, [r3]
 8000884:	897b      	ldrh	r3, [r7, #10]
 8000886:	4a38      	ldr	r2, [pc, #224]	@ (8000968 <main+0x1b0>)
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	4413      	add	r3, r2
 800088c:	edd3 7a00 	vldr	s15, [r3]
 8000890:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000894:	897b      	ldrh	r3, [r7, #10]
 8000896:	3301      	adds	r3, #1
 8000898:	4a33      	ldr	r2, [pc, #204]	@ (8000968 <main+0x1b0>)
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	4413      	add	r3, r2
 800089e:	edd3 6a00 	vldr	s13, [r3]
 80008a2:	897b      	ldrh	r3, [r7, #10]
 80008a4:	3301      	adds	r3, #1
 80008a6:	4a30      	ldr	r2, [pc, #192]	@ (8000968 <main+0x1b0>)
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	4413      	add	r3, r2
 80008ac:	edd3 7a00 	vldr	s15, [r3]
 80008b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008b8:	eeb0 0a67 	vmov.f32	s0, s15
 80008bc:	f00c fc10 	bl	800d0e0 <sqrtf>
 80008c0:	ed87 0a01 	vstr	s0, [r7, #4]

			 if(currVal > peakVal) {
 80008c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80008c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80008cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008d4:	dd13      	ble.n	80008fe <main+0x146>

				 peakVal = currVal;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	613b      	str	r3, [r7, #16]

				 peakHz = (uint16_t)((freqIndex * SAMPLE_RATE_HZ) / (float)FFT_BUFFER_SIZE);
 80008da:	89bb      	ldrh	r3, [r7, #12]
 80008dc:	ee07 3a90 	vmov	s15, r3
 80008e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008e4:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8000940 <main+0x188>
 80008e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80008ec:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 8000948 <main+0x190>
 80008f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80008f8:	ee17 3a90 	vmov	r3, s15
 80008fc:	81fb      	strh	r3, [r7, #14]

			 }

			 freqIndex++;
 80008fe:	89bb      	ldrh	r3, [r7, #12]
 8000900:	3301      	adds	r3, #1
 8000902:	81bb      	strh	r3, [r7, #12]
		 for(uint16_t i = 0; i < FFT_BUFFER_SIZE; i += 2) {
 8000904:	897b      	ldrh	r3, [r7, #10]
 8000906:	3302      	adds	r3, #2
 8000908:	817b      	strh	r3, [r7, #10]
 800090a:	897b      	ldrh	r3, [r7, #10]
 800090c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000910:	d3b2      	bcc.n	8000878 <main+0xc0>
		 }

		 fftFlag = 0;
 8000912:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <main+0x1ac>)
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
	 }

	 if(HAL_GetTick() - printTimer > PRINT_TIME) {
 8000918:	f000 ff3c 	bl	8001794 <HAL_GetTick>
 800091c:	4602      	mov	r2, r0
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000926:	d999      	bls.n	800085c <main+0xa4>

		 printf("peak Hz: %u\n", peakHz);
 8000928:	89fb      	ldrh	r3, [r7, #14]
 800092a:	4619      	mov	r1, r3
 800092c:	480f      	ldr	r0, [pc, #60]	@ (800096c <main+0x1b4>)
 800092e:	f00b fd6b 	bl	800c408 <iprintf>

		 printTimer = HAL_GetTick();
 8000932:	f000 ff2f 	bl	8001794 <HAL_GetTick>
 8000936:	6178      	str	r0, [r7, #20]
	 if(fftFlag) {
 8000938:	e790      	b.n	800085c <main+0xa4>
 800093a:	bf00      	nop
 800093c:	f3af 8000 	nop.w
 8000940:	00000000 	.word	0x00000000
 8000944:	414312d0 	.word	0x414312d0
 8000948:	00000000 	.word	0x00000000
 800094c:	40a00000 	.word	0x40a00000
 8000950:	240009dc 	.word	0x240009dc
 8000954:	240000b4 	.word	0x240000b4
 8000958:	24000190 	.word	0x24000190
 800095c:	240001dc 	.word	0x240001dc
 8000960:	240000a4 	.word	0x240000a4
 8000964:	240049f4 	.word	0x240049f4
 8000968:	240029f4 	.word	0x240029f4
 800096c:	0800d13c 	.word	0x0800d13c

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b09c      	sub	sp, #112	@ 0x70
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097a:	224c      	movs	r2, #76	@ 0x4c
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f00b fd54 	bl	800c42c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2220      	movs	r2, #32
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f00b fd4e 	bl	800c42c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000990:	2002      	movs	r0, #2
 8000992:	f005 fa0d 	bl	8005db0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b31      	ldr	r3, [pc, #196]	@ (8000a60 <SystemClock_Config+0xf0>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	4a30      	ldr	r2, [pc, #192]	@ (8000a60 <SystemClock_Config+0xf0>)
 80009a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009a4:	6193      	str	r3, [r2, #24]
 80009a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000a60 <SystemClock_Config+0xf0>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000a64 <SystemClock_Config+0xf4>)
 80009b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009b4:	4a2b      	ldr	r2, [pc, #172]	@ (8000a64 <SystemClock_Config+0xf4>)
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009bc:	4b29      	ldr	r3, [pc, #164]	@ (8000a64 <SystemClock_Config+0xf4>)
 80009be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009c8:	bf00      	nop
 80009ca:	4b25      	ldr	r3, [pc, #148]	@ (8000a60 <SystemClock_Config+0xf0>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009d6:	d1f8      	bne.n	80009ca <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d8:	2302      	movs	r3, #2
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009dc:	2301      	movs	r3, #1
 80009de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e0:	2340      	movs	r3, #64	@ 0x40
 80009e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e4:	2302      	movs	r3, #2
 80009e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009e8:	2300      	movs	r3, #0
 80009ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009ec:	2304      	movs	r3, #4
 80009ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80009f0:	233c      	movs	r3, #60	@ 0x3c
 80009f2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a00:	230c      	movs	r3, #12
 8000a02:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a10:	4618      	mov	r0, r3
 8000a12:	f005 fa07 	bl	8005e24 <HAL_RCC_OscConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000a1c:	f000 f97a 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a20:	233f      	movs	r3, #63	@ 0x3f
 8000a22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a24:	2303      	movs	r3, #3
 8000a26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a2c:	2308      	movs	r3, #8
 8000a2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a30:	2340      	movs	r3, #64	@ 0x40
 8000a32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a34:	2340      	movs	r3, #64	@ 0x40
 8000a36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a3c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a3e:	2340      	movs	r3, #64	@ 0x40
 8000a40:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2104      	movs	r1, #4
 8000a46:	4618      	mov	r0, r3
 8000a48:	f005 fe46 	bl	80066d8 <HAL_RCC_ClockConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000a52:	f000 f95f 	bl	8000d14 <Error_Handler>
  }
}
 8000a56:	bf00      	nop
 8000a58:	3770      	adds	r7, #112	@ 0x70
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	58024800 	.word	0x58024800
 8000a64:	58000400 	.word	0x58000400

08000a68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	@ 0x28
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
 8000a88:	615a      	str	r2, [r3, #20]
 8000a8a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a8c:	4b33      	ldr	r3, [pc, #204]	@ (8000b5c <MX_ADC1_Init+0xf4>)
 8000a8e:	4a34      	ldr	r2, [pc, #208]	@ (8000b60 <MX_ADC1_Init+0xf8>)
 8000a90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000a92:	4b32      	ldr	r3, [pc, #200]	@ (8000b5c <MX_ADC1_Init+0xf4>)
 8000a94:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a9a:	4b30      	ldr	r3, [pc, #192]	@ (8000b5c <MX_ADC1_Init+0xf4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b5c <MX_ADC1_Init+0xf4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b5c <MX_ADC1_Init+0xf4>)
 8000aa8:	2204      	movs	r2, #4
 8000aaa:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000aac:	4b2b      	ldr	r3, [pc, #172]	@ (8000b5c <MX_ADC1_Init+0xf4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b5c <MX_ADC1_Init+0xf4>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000ab8:	4b28      	ldr	r3, [pc, #160]	@ (8000b5c <MX_ADC1_Init+0xf4>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000abe:	4b27      	ldr	r3, [pc, #156]	@ (8000b5c <MX_ADC1_Init+0xf4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO2;
 8000ac4:	4b25      	ldr	r3, [pc, #148]	@ (8000b5c <MX_ADC1_Init+0xf4>)
 8000ac6:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000aca:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000acc:	4b23      	ldr	r3, [pc, #140]	@ (8000b5c <MX_ADC1_Init+0xf4>)
 8000ace:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ad2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000ad4:	4b21      	ldr	r3, [pc, #132]	@ (8000b5c <MX_ADC1_Init+0xf4>)
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ada:	4b20      	ldr	r3, [pc, #128]	@ (8000b5c <MX_ADC1_Init+0xf4>)
 8000adc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ae0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b5c <MX_ADC1_Init+0xf4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b5c <MX_ADC1_Init+0xf4>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000af0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <MX_ADC1_Init+0xf4>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000af6:	4819      	ldr	r0, [pc, #100]	@ (8000b5c <MX_ADC1_Init+0xf4>)
 8000af8:	f001 f8c6 	bl	8001c88 <HAL_ADC_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000b02:	f000 f907 	bl	8000d14 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4812      	ldr	r0, [pc, #72]	@ (8000b5c <MX_ADC1_Init+0xf4>)
 8000b12:	f002 fbe1 	bl	80032d8 <HAL_ADCEx_MultiModeConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000b1c:	f000 f8fa 	bl	8000d14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000b20:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <MX_ADC1_Init+0xfc>)
 8000b22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b24:	2306      	movs	r3, #6
 8000b26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b2c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b30:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b32:	2304      	movs	r3, #4
 8000b34:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b3e:	463b      	mov	r3, r7
 8000b40:	4619      	mov	r1, r3
 8000b42:	4806      	ldr	r0, [pc, #24]	@ (8000b5c <MX_ADC1_Init+0xf4>)
 8000b44:	f001 fd5e 	bl	8002604 <HAL_ADC_ConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8000b4e:	f000 f8e1 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	3728      	adds	r7, #40	@ 0x28
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	240000b4 	.word	0x240000b4
 8000b60:	40022000 	.word	0x40022000
 8000b64:	43210000 	.word	0x43210000

08000b68 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6e:	f107 0310 	add.w	r3, r7, #16
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b86:	4b1f      	ldr	r3, [pc, #124]	@ (8000c04 <MX_TIM8_Init+0x9c>)
 8000b88:	4a1f      	ldr	r2, [pc, #124]	@ (8000c08 <MX_TIM8_Init+0xa0>)
 8000b8a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16 - 1;
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c04 <MX_TIM8_Init+0x9c>)
 8000b8e:	220f      	movs	r2, #15
 8000b90:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b92:	4b1c      	ldr	r3, [pc, #112]	@ (8000c04 <MX_TIM8_Init+0x9c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 6 - 1;
 8000b98:	4b1a      	ldr	r3, [pc, #104]	@ (8000c04 <MX_TIM8_Init+0x9c>)
 8000b9a:	2205      	movs	r2, #5
 8000b9c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9e:	4b19      	ldr	r3, [pc, #100]	@ (8000c04 <MX_TIM8_Init+0x9c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000ba4:	4b17      	ldr	r3, [pc, #92]	@ (8000c04 <MX_TIM8_Init+0x9c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000baa:	4b16      	ldr	r3, [pc, #88]	@ (8000c04 <MX_TIM8_Init+0x9c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000bb0:	4814      	ldr	r0, [pc, #80]	@ (8000c04 <MX_TIM8_Init+0x9c>)
 8000bb2:	f008 fe1b 	bl	80097ec <HAL_TIM_Base_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8000bbc:	f000 f8aa 	bl	8000d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	4619      	mov	r1, r3
 8000bcc:	480d      	ldr	r0, [pc, #52]	@ (8000c04 <MX_TIM8_Init+0x9c>)
 8000bce:	f008 ffdd 	bl	8009b8c <HAL_TIM_ConfigClockSource>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8000bd8:	f000 f89c 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bdc:	2320      	movs	r3, #32
 8000bde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	4619      	mov	r1, r3
 8000bec:	4805      	ldr	r0, [pc, #20]	@ (8000c04 <MX_TIM8_Init+0x9c>)
 8000bee:	f009 fa35 	bl	800a05c <HAL_TIMEx_MasterConfigSynchronization>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8000bf8:	f000 f88c 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	3720      	adds	r7, #32
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	24000190 	.word	0x24000190
 8000c08:	40010400 	.word	0x40010400

08000c0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c12:	4b0d      	ldr	r3, [pc, #52]	@ (8000c48 <MX_DMA_Init+0x3c>)
 8000c14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c18:	4a0b      	ldr	r2, [pc, #44]	@ (8000c48 <MX_DMA_Init+0x3c>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c22:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <MX_DMA_Init+0x3c>)
 8000c24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2100      	movs	r1, #0
 8000c34:	200b      	movs	r0, #11
 8000c36:	f002 fd08 	bl	800364a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c3a:	200b      	movs	r0, #11
 8000c3c:	f002 fd1f 	bl	800367e <HAL_NVIC_EnableIRQ>

}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	58024400 	.word	0x58024400

08000c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	4b19      	ldr	r3, [pc, #100]	@ (8000cb8 <MX_GPIO_Init+0x6c>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c58:	4a17      	ldr	r2, [pc, #92]	@ (8000cb8 <MX_GPIO_Init+0x6c>)
 8000c5a:	f043 0304 	orr.w	r3, r3, #4
 8000c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c62:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <MX_GPIO_Init+0x6c>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c70:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <MX_GPIO_Init+0x6c>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c76:	4a10      	ldr	r2, [pc, #64]	@ (8000cb8 <MX_GPIO_Init+0x6c>)
 8000c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c80:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb8 <MX_GPIO_Init+0x6c>)
 8000c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <MX_GPIO_Init+0x6c>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c94:	4a08      	ldr	r2, [pc, #32]	@ (8000cb8 <MX_GPIO_Init+0x6c>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <MX_GPIO_Init+0x6c>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	58024400 	.word	0x58024400

08000cbc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000cce:	f002 fcf1 	bl	80036b4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000cde:	231f      	movs	r3, #31
 8000ce0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ce2:	2387      	movs	r3, #135	@ 0x87
 8000ce4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000cea:	2300      	movs	r3, #0
 8000cec:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cfe:	463b      	mov	r3, r7
 8000d00:	4618      	mov	r0, r3
 8000d02:	f002 fd0f 	bl	8003724 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d06:	2004      	movs	r0, #4
 8000d08:	f002 fcec 	bl	80036e4 <HAL_MPU_Enable>

}
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <Error_Handler+0x8>

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <HAL_MspInit+0x30>)
 8000d28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d2c:	4a08      	ldr	r2, [pc, #32]	@ (8000d50 <HAL_MspInit+0x30>)
 8000d2e:	f043 0302 	orr.w	r3, r3, #2
 8000d32:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <HAL_MspInit+0x30>)
 8000d38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	58024400 	.word	0x58024400

08000d54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b0ba      	sub	sp, #232	@ 0xe8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	22c0      	movs	r2, #192	@ 0xc0
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f00b fb59 	bl	800c42c <memset>
  if(hadc->Instance==ADC1)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a48      	ldr	r2, [pc, #288]	@ (8000ea0 <HAL_ADC_MspInit+0x14c>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	f040 8088 	bne.w	8000e96 <HAL_ADC_MspInit+0x142>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d86:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000d8a:	f04f 0300 	mov.w	r3, #0
 8000d8e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000d92:	2304      	movs	r3, #4
 8000d94:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000d96:	230a      	movs	r3, #10
 8000d98:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000da2:	2302      	movs	r3, #2
 8000da4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000da6:	23c0      	movs	r3, #192	@ 0xc0
 8000da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000daa:	2320      	movs	r3, #32
 8000dac:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f006 f817 	bl	8006df0 <HAL_RCCEx_PeriphCLKConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000dc8:	f7ff ffa4 	bl	8000d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000dcc:	4b35      	ldr	r3, [pc, #212]	@ (8000ea4 <HAL_ADC_MspInit+0x150>)
 8000dce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dd2:	4a34      	ldr	r2, [pc, #208]	@ (8000ea4 <HAL_ADC_MspInit+0x150>)
 8000dd4:	f043 0320 	orr.w	r3, r3, #32
 8000dd8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ddc:	4b31      	ldr	r3, [pc, #196]	@ (8000ea4 <HAL_ADC_MspInit+0x150>)
 8000dde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000de2:	f003 0320 	and.w	r3, r3, #32
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	4b2e      	ldr	r3, [pc, #184]	@ (8000ea4 <HAL_ADC_MspInit+0x150>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df0:	4a2c      	ldr	r2, [pc, #176]	@ (8000ea4 <HAL_ADC_MspInit+0x150>)
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea4 <HAL_ADC_MspInit+0x150>)
 8000dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4821      	ldr	r0, [pc, #132]	@ (8000ea8 <HAL_ADC_MspInit+0x154>)
 8000e22:	f004 fdfb 	bl	8005a1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000e26:	4b21      	ldr	r3, [pc, #132]	@ (8000eac <HAL_ADC_MspInit+0x158>)
 8000e28:	4a21      	ldr	r2, [pc, #132]	@ (8000eb0 <HAL_ADC_MspInit+0x15c>)
 8000e2a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eac <HAL_ADC_MspInit+0x158>)
 8000e2e:	2209      	movs	r2, #9
 8000e30:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e32:	4b1e      	ldr	r3, [pc, #120]	@ (8000eac <HAL_ADC_MspInit+0x158>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e38:	4b1c      	ldr	r3, [pc, #112]	@ (8000eac <HAL_ADC_MspInit+0x158>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000eac <HAL_ADC_MspInit+0x158>)
 8000e40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e44:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e46:	4b19      	ldr	r3, [pc, #100]	@ (8000eac <HAL_ADC_MspInit+0x158>)
 8000e48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e4c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e4e:	4b17      	ldr	r3, [pc, #92]	@ (8000eac <HAL_ADC_MspInit+0x158>)
 8000e50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e56:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <HAL_ADC_MspInit+0x158>)
 8000e58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e5c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e5e:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <HAL_ADC_MspInit+0x158>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e64:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <HAL_ADC_MspInit+0x158>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e6a:	4810      	ldr	r0, [pc, #64]	@ (8000eac <HAL_ADC_MspInit+0x158>)
 8000e6c:	f002 fc9a 	bl	80037a4 <HAL_DMA_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_ADC_MspInit+0x126>
    {
      Error_Handler();
 8000e76:	f7ff ff4d 	bl	8000d14 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a0b      	ldr	r2, [pc, #44]	@ (8000eac <HAL_ADC_MspInit+0x158>)
 8000e7e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000e80:	4a0a      	ldr	r2, [pc, #40]	@ (8000eac <HAL_ADC_MspInit+0x158>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2012      	movs	r0, #18
 8000e8c:	f002 fbdd 	bl	800364a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e90:	2012      	movs	r0, #18
 8000e92:	f002 fbf4 	bl	800367e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e96:	bf00      	nop
 8000e98:	37e8      	adds	r7, #232	@ 0xe8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40022000 	.word	0x40022000
 8000ea4:	58024400 	.word	0x58024400
 8000ea8:	58020000 	.word	0x58020000
 8000eac:	24000118 	.word	0x24000118
 8000eb0:	40020010 	.word	0x40020010

08000eb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0e      	ldr	r2, [pc, #56]	@ (8000efc <HAL_TIM_Base_MspInit+0x48>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d116      	bne.n	8000ef4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f00 <HAL_TIM_Base_MspInit+0x4c>)
 8000ec8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ecc:	4a0c      	ldr	r2, [pc, #48]	@ (8000f00 <HAL_TIM_Base_MspInit+0x4c>)
 8000ece:	f043 0302 	orr.w	r3, r3, #2
 8000ed2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <HAL_TIM_Base_MspInit+0x4c>)
 8000ed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	202c      	movs	r0, #44	@ 0x2c
 8000eea:	f002 fbae 	bl	800364a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000eee:	202c      	movs	r0, #44	@ 0x2c
 8000ef0:	f002 fbc5 	bl	800367e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40010400 	.word	0x40010400
 8000f00:	58024400 	.word	0x58024400

08000f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <NMI_Handler+0x4>

08000f0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5a:	f000 fc07 	bl	800176c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f68:	4802      	ldr	r0, [pc, #8]	@ (8000f74 <DMA1_Stream0_IRQHandler+0x10>)
 8000f6a:	f003 f9e1 	bl	8004330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	24000118 	.word	0x24000118

08000f78 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f7c:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <ADC_IRQHandler+0x10>)
 8000f7e:	f001 f8e9 	bl	8002154 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	240000b4 	.word	0x240000b4

08000f8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000f90:	2000      	movs	r0, #0
 8000f92:	f000 fa7d 	bl	8001490 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000fa0:	4802      	ldr	r0, [pc, #8]	@ (8000fac <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000fa2:	f008 fceb 	bl	800997c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	24000190 	.word	0x24000190

08000fb0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	e00a      	b.n	8000fd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fc2:	f3af 8000 	nop.w
 8000fc6:	4601      	mov	r1, r0
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	60ba      	str	r2, [r7, #8]
 8000fce:	b2ca      	uxtb	r2, r1
 8000fd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dbf0      	blt.n	8000fc2 <_read+0x12>
  }

  return len;
 8000fe0:	687b      	ldr	r3, [r7, #4]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	60f8      	str	r0, [r7, #12]
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	e009      	b.n	8001010 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	60ba      	str	r2, [r7, #8]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f000 fac3 	bl	8001590 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3301      	adds	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	429a      	cmp	r2, r3
 8001016:	dbf1      	blt.n	8000ffc <_write+0x12>
  }
  return len;
 8001018:	687b      	ldr	r3, [r7, #4]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <_close>:

int _close(int file)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800104a:	605a      	str	r2, [r3, #4]
  return 0;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <_isatty>:

int _isatty(int file)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001062:	2301      	movs	r3, #1
}
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001094:	4a14      	ldr	r2, [pc, #80]	@ (80010e8 <_sbrk+0x5c>)
 8001096:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <_sbrk+0x60>)
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a0:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d102      	bne.n	80010ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a8:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <_sbrk+0x64>)
 80010aa:	4a12      	ldr	r2, [pc, #72]	@ (80010f4 <_sbrk+0x68>)
 80010ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ae:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <_sbrk+0x64>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d207      	bcs.n	80010cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010bc:	f00b f9be 	bl	800c43c <__errno>
 80010c0:	4603      	mov	r3, r0
 80010c2:	220c      	movs	r2, #12
 80010c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010ca:	e009      	b.n	80010e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010cc:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <_sbrk+0x64>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d2:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	4a05      	ldr	r2, [pc, #20]	@ (80010f0 <_sbrk+0x64>)
 80010dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	24080000 	.word	0x24080000
 80010ec:	00000400 	.word	0x00000400
 80010f0:	240049f8 	.word	0x240049f8
 80010f4:	24004bf0 	.word	0x24004bf0

080010f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010fc:	4b43      	ldr	r3, [pc, #268]	@ (800120c <SystemInit+0x114>)
 80010fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001102:	4a42      	ldr	r2, [pc, #264]	@ (800120c <SystemInit+0x114>)
 8001104:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001108:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800110c:	4b40      	ldr	r3, [pc, #256]	@ (8001210 <SystemInit+0x118>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 030f 	and.w	r3, r3, #15
 8001114:	2b06      	cmp	r3, #6
 8001116:	d807      	bhi.n	8001128 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001118:	4b3d      	ldr	r3, [pc, #244]	@ (8001210 <SystemInit+0x118>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f023 030f 	bic.w	r3, r3, #15
 8001120:	4a3b      	ldr	r2, [pc, #236]	@ (8001210 <SystemInit+0x118>)
 8001122:	f043 0307 	orr.w	r3, r3, #7
 8001126:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001128:	4b3a      	ldr	r3, [pc, #232]	@ (8001214 <SystemInit+0x11c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a39      	ldr	r2, [pc, #228]	@ (8001214 <SystemInit+0x11c>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001134:	4b37      	ldr	r3, [pc, #220]	@ (8001214 <SystemInit+0x11c>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800113a:	4b36      	ldr	r3, [pc, #216]	@ (8001214 <SystemInit+0x11c>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	4935      	ldr	r1, [pc, #212]	@ (8001214 <SystemInit+0x11c>)
 8001140:	4b35      	ldr	r3, [pc, #212]	@ (8001218 <SystemInit+0x120>)
 8001142:	4013      	ands	r3, r2
 8001144:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001146:	4b32      	ldr	r3, [pc, #200]	@ (8001210 <SystemInit+0x118>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	2b00      	cmp	r3, #0
 8001150:	d007      	beq.n	8001162 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001152:	4b2f      	ldr	r3, [pc, #188]	@ (8001210 <SystemInit+0x118>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f023 030f 	bic.w	r3, r3, #15
 800115a:	4a2d      	ldr	r2, [pc, #180]	@ (8001210 <SystemInit+0x118>)
 800115c:	f043 0307 	orr.w	r3, r3, #7
 8001160:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001162:	4b2c      	ldr	r3, [pc, #176]	@ (8001214 <SystemInit+0x11c>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001168:	4b2a      	ldr	r3, [pc, #168]	@ (8001214 <SystemInit+0x11c>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800116e:	4b29      	ldr	r3, [pc, #164]	@ (8001214 <SystemInit+0x11c>)
 8001170:	2200      	movs	r2, #0
 8001172:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001174:	4b27      	ldr	r3, [pc, #156]	@ (8001214 <SystemInit+0x11c>)
 8001176:	4a29      	ldr	r2, [pc, #164]	@ (800121c <SystemInit+0x124>)
 8001178:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800117a:	4b26      	ldr	r3, [pc, #152]	@ (8001214 <SystemInit+0x11c>)
 800117c:	4a28      	ldr	r2, [pc, #160]	@ (8001220 <SystemInit+0x128>)
 800117e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001180:	4b24      	ldr	r3, [pc, #144]	@ (8001214 <SystemInit+0x11c>)
 8001182:	4a28      	ldr	r2, [pc, #160]	@ (8001224 <SystemInit+0x12c>)
 8001184:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001186:	4b23      	ldr	r3, [pc, #140]	@ (8001214 <SystemInit+0x11c>)
 8001188:	2200      	movs	r2, #0
 800118a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800118c:	4b21      	ldr	r3, [pc, #132]	@ (8001214 <SystemInit+0x11c>)
 800118e:	4a25      	ldr	r2, [pc, #148]	@ (8001224 <SystemInit+0x12c>)
 8001190:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001192:	4b20      	ldr	r3, [pc, #128]	@ (8001214 <SystemInit+0x11c>)
 8001194:	2200      	movs	r2, #0
 8001196:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001198:	4b1e      	ldr	r3, [pc, #120]	@ (8001214 <SystemInit+0x11c>)
 800119a:	4a22      	ldr	r2, [pc, #136]	@ (8001224 <SystemInit+0x12c>)
 800119c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800119e:	4b1d      	ldr	r3, [pc, #116]	@ (8001214 <SystemInit+0x11c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <SystemInit+0x11c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001214 <SystemInit+0x11c>)
 80011aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011b0:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <SystemInit+0x11c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001228 <SystemInit+0x130>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <SystemInit+0x134>)
 80011bc:	4013      	ands	r3, r2
 80011be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011c2:	d202      	bcs.n	80011ca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <SystemInit+0x138>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80011ca:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <SystemInit+0x11c>)
 80011cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d113      	bne.n	8001200 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80011d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <SystemInit+0x11c>)
 80011da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011de:	4a0d      	ldr	r2, [pc, #52]	@ (8001214 <SystemInit+0x11c>)
 80011e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011e4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011e8:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <SystemInit+0x13c>)
 80011ea:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80011ee:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80011f0:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <SystemInit+0x11c>)
 80011f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011f6:	4a07      	ldr	r2, [pc, #28]	@ (8001214 <SystemInit+0x11c>)
 80011f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80011fc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000ed00 	.word	0xe000ed00
 8001210:	52002000 	.word	0x52002000
 8001214:	58024400 	.word	0x58024400
 8001218:	eaf6ed7f 	.word	0xeaf6ed7f
 800121c:	02020200 	.word	0x02020200
 8001220:	01ff0000 	.word	0x01ff0000
 8001224:	01010280 	.word	0x01010280
 8001228:	5c001000 	.word	0x5c001000
 800122c:	ffff0000 	.word	0xffff0000
 8001230:	51008108 	.word	0x51008108
 8001234:	52004000 	.word	0x52004000

08001238 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800123c:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <ExitRun0Mode+0x2c>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	4a08      	ldr	r2, [pc, #32]	@ (8001264 <ExitRun0Mode+0x2c>)
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001248:	bf00      	nop
 800124a:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <ExitRun0Mode+0x2c>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0f9      	beq.n	800124a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001256:	bf00      	nop
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	58024800 	.word	0x58024800

08001268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001268:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80012a4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800126c:	f7ff ffe4 	bl	8001238 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001270:	f7ff ff42 	bl	80010f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001274:	480c      	ldr	r0, [pc, #48]	@ (80012a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001276:	490d      	ldr	r1, [pc, #52]	@ (80012ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001278:	4a0d      	ldr	r2, [pc, #52]	@ (80012b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800127c:	e002      	b.n	8001284 <LoopCopyDataInit>

0800127e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001282:	3304      	adds	r3, #4

08001284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001288:	d3f9      	bcc.n	800127e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128a:	4a0a      	ldr	r2, [pc, #40]	@ (80012b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800128c:	4c0a      	ldr	r4, [pc, #40]	@ (80012b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001290:	e001      	b.n	8001296 <LoopFillZerobss>

08001292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001294:	3204      	adds	r2, #4

08001296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001298:	d3fb      	bcc.n	8001292 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800129a:	f00b f8d5 	bl	800c448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129e:	f7ff fa8b 	bl	80007b8 <main>
  bx  lr
 80012a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012a4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012ac:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 80012b0:	08020624 	.word	0x08020624
  ldr r2, =_sbss
 80012b4:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 80012b8:	24004bec 	.word	0x24004bec

080012bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <ADC3_IRQHandler>
	...

080012c0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08c      	sub	sp, #48	@ 0x30
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d009      	beq.n	80012e8 <BSP_LED_Init+0x28>
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d006      	beq.n	80012e8 <BSP_LED_Init+0x28>
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d003      	beq.n	80012e8 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80012e0:	f06f 0301 	mvn.w	r3, #1
 80012e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012e6:	e055      	b.n	8001394 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10f      	bne.n	800130e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80012ee:	4b2c      	ldr	r3, [pc, #176]	@ (80013a0 <BSP_LED_Init+0xe0>)
 80012f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f4:	4a2a      	ldr	r2, [pc, #168]	@ (80013a0 <BSP_LED_Init+0xe0>)
 80012f6:	f043 0302 	orr.w	r3, r3, #2
 80012fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012fe:	4b28      	ldr	r3, [pc, #160]	@ (80013a0 <BSP_LED_Init+0xe0>)
 8001300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	e021      	b.n	8001352 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d10f      	bne.n	8001334 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001314:	4b22      	ldr	r3, [pc, #136]	@ (80013a0 <BSP_LED_Init+0xe0>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131a:	4a21      	ldr	r2, [pc, #132]	@ (80013a0 <BSP_LED_Init+0xe0>)
 800131c:	f043 0310 	orr.w	r3, r3, #16
 8001320:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001324:	4b1e      	ldr	r3, [pc, #120]	@ (80013a0 <BSP_LED_Init+0xe0>)
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132a:	f003 0310 	and.w	r3, r3, #16
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	e00e      	b.n	8001352 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001334:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <BSP_LED_Init+0xe0>)
 8001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133a:	4a19      	ldr	r2, [pc, #100]	@ (80013a0 <BSP_LED_Init+0xe0>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001344:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <BSP_LED_Init+0xe0>)
 8001346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	4a13      	ldr	r2, [pc, #76]	@ (80013a4 <BSP_LED_Init+0xe4>)
 8001356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800135a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001364:	2303      	movs	r3, #3
 8001366:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	4a0f      	ldr	r2, [pc, #60]	@ (80013a8 <BSP_LED_Init+0xe8>)
 800136c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001370:	f107 0218 	add.w	r2, r7, #24
 8001374:	4611      	mov	r1, r2
 8001376:	4618      	mov	r0, r3
 8001378:	f004 fb50 	bl	8005a1c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	4a0a      	ldr	r2, [pc, #40]	@ (80013a8 <BSP_LED_Init+0xe8>)
 8001380:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	4a07      	ldr	r2, [pc, #28]	@ (80013a4 <BSP_LED_Init+0xe4>)
 8001388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800138c:	2200      	movs	r2, #0
 800138e:	4619      	mov	r1, r3
 8001390:	f004 fcf4 	bl	8005d7c <HAL_GPIO_WritePin>
  }

  return ret;
 8001394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001396:	4618      	mov	r0, r3
 8001398:	3730      	adds	r7, #48	@ 0x30
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	58024400 	.word	0x58024400
 80013a4:	0800d15c 	.word	0x0800d15c
 80013a8:	2400000c 	.word	0x2400000c

080013ac <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	460a      	mov	r2, r1
 80013b6:	71fb      	strb	r3, [r7, #7]
 80013b8:	4613      	mov	r3, r2
 80013ba:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80013bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001478 <BSP_PB_Init+0xcc>)
 80013be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c2:	4a2d      	ldr	r2, [pc, #180]	@ (8001478 <BSP_PB_Init+0xcc>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001478 <BSP_PB_Init+0xcc>)
 80013ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80013da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013de:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80013e0:	2302      	movs	r3, #2
 80013e2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e4:	2302      	movs	r3, #2
 80013e6:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10c      	bne.n	8001408 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	4a21      	ldr	r2, [pc, #132]	@ (800147c <BSP_PB_Init+0xd0>)
 80013f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fa:	f107 020c 	add.w	r2, r7, #12
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f004 fb0b 	bl	8005a1c <HAL_GPIO_Init>
 8001406:	e031      	b.n	800146c <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001408:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800140c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	4a1a      	ldr	r2, [pc, #104]	@ (800147c <BSP_PB_Init+0xd0>)
 8001412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001416:	f107 020c 	add.w	r2, r7, #12
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f004 fafd 	bl	8005a1c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	4a16      	ldr	r2, [pc, #88]	@ (8001480 <BSP_PB_Init+0xd4>)
 8001428:	441a      	add	r2, r3
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	4915      	ldr	r1, [pc, #84]	@ (8001484 <BSP_PB_Init+0xd8>)
 800142e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001432:	4619      	mov	r1, r3
 8001434:	4610      	mov	r0, r2
 8001436:	f004 faac 	bl	8005992 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4a10      	ldr	r2, [pc, #64]	@ (8001480 <BSP_PB_Init+0xd4>)
 8001440:	1898      	adds	r0, r3, r2
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	4a10      	ldr	r2, [pc, #64]	@ (8001488 <BSP_PB_Init+0xdc>)
 8001446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144a:	461a      	mov	r2, r3
 800144c:	2100      	movs	r1, #0
 800144e:	f004 fa81 	bl	8005954 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001452:	2028      	movs	r0, #40	@ 0x28
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	4a0d      	ldr	r2, [pc, #52]	@ (800148c <BSP_PB_Init+0xe0>)
 8001458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145c:	2200      	movs	r2, #0
 800145e:	4619      	mov	r1, r3
 8001460:	f002 f8f3 	bl	800364a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001464:	2328      	movs	r3, #40	@ 0x28
 8001466:	4618      	mov	r0, r3
 8001468:	f002 f909 	bl	800367e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3720      	adds	r7, #32
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	58024400 	.word	0x58024400
 800147c:	24000018 	.word	0x24000018
 8001480:	240049fc 	.word	0x240049fc
 8001484:	0800d164 	.word	0x0800d164
 8001488:	2400001c 	.word	0x2400001c
 800148c:	24000020 	.word	0x24000020

08001490 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4a04      	ldr	r2, [pc, #16]	@ (80014b0 <BSP_PB_IRQHandler+0x20>)
 80014a0:	4413      	add	r3, r2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f004 fa8a 	bl	80059bc <HAL_EXTI_IRQHandler>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	240049fc 	.word	0x240049fc

080014b4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80014e2:	f06f 0301 	mvn.w	r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	e018      	b.n	800151c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2294      	movs	r2, #148	@ 0x94
 80014ee:	fb02 f303 	mul.w	r3, r2, r3
 80014f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001528 <BSP_COM_Init+0x5c>)
 80014f4:	4413      	add	r3, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 f86e 	bl	80015d8 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	2294      	movs	r2, #148	@ 0x94
 8001500:	fb02 f303 	mul.w	r3, r2, r3
 8001504:	4a08      	ldr	r2, [pc, #32]	@ (8001528 <BSP_COM_Init+0x5c>)
 8001506:	4413      	add	r3, r2
 8001508:	6839      	ldr	r1, [r7, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f80e 	bl	800152c <MX_USART3_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d002      	beq.n	800151c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001516:	f06f 0303 	mvn.w	r3, #3
 800151a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800151c:	68fb      	ldr	r3, [r7, #12]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	24004a04 	.word	0x24004a04

0800152c <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001536:	4b15      	ldr	r3, [pc, #84]	@ (800158c <MX_USART3_Init+0x60>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	220c      	movs	r2, #12
 800154a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	895b      	ldrh	r3, [r3, #10]
 8001550:	461a      	mov	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	891b      	ldrh	r3, [r3, #8]
 8001562:	461a      	mov	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	899b      	ldrh	r3, [r3, #12]
 800156c:	461a      	mov	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001578:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f008 fe1a 	bl	800a1b4 <HAL_UART_Init>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	24000008 	.word	0x24000008

08001590 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001598:	4b09      	ldr	r3, [pc, #36]	@ (80015c0 <__io_putchar+0x30>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	2394      	movs	r3, #148	@ 0x94
 80015a0:	fb02 f303 	mul.w	r3, r2, r3
 80015a4:	4a07      	ldr	r2, [pc, #28]	@ (80015c4 <__io_putchar+0x34>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	1d39      	adds	r1, r7, #4
 80015aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ae:	2201      	movs	r2, #1
 80015b0:	f008 fe5a 	bl	800a268 <HAL_UART_Transmit>
  return ch;
 80015b4:	687b      	ldr	r3, [r7, #4]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	24004a98 	.word	0x24004a98
 80015c4:	24004a04 	.word	0x24004a04

080015c8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f7ff ff71 	bl	80014b4 <BSP_PB_Callback>
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	@ 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80015e0:	4b27      	ldr	r3, [pc, #156]	@ (8001680 <COM1_MspInit+0xa8>)
 80015e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e6:	4a26      	ldr	r2, [pc, #152]	@ (8001680 <COM1_MspInit+0xa8>)
 80015e8:	f043 0308 	orr.w	r3, r3, #8
 80015ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015f0:	4b23      	ldr	r3, [pc, #140]	@ (8001680 <COM1_MspInit+0xa8>)
 80015f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80015fe:	4b20      	ldr	r3, [pc, #128]	@ (8001680 <COM1_MspInit+0xa8>)
 8001600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001604:	4a1e      	ldr	r2, [pc, #120]	@ (8001680 <COM1_MspInit+0xa8>)
 8001606:	f043 0308 	orr.w	r3, r3, #8
 800160a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800160e:	4b1c      	ldr	r3, [pc, #112]	@ (8001680 <COM1_MspInit+0xa8>)
 8001610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800161c:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <COM1_MspInit+0xa8>)
 800161e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001622:	4a17      	ldr	r2, [pc, #92]	@ (8001680 <COM1_MspInit+0xa8>)
 8001624:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001628:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800162c:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <COM1_MspInit+0xa8>)
 800162e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001632:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800163a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800163e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001644:	2302      	movs	r3, #2
 8001646:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001648:	2301      	movs	r3, #1
 800164a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800164c:	2307      	movs	r3, #7
 800164e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4619      	mov	r1, r3
 8001656:	480b      	ldr	r0, [pc, #44]	@ (8001684 <COM1_MspInit+0xac>)
 8001658:	f004 f9e0 	bl	8005a1c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800165c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001660:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001666:	2307      	movs	r3, #7
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	4804      	ldr	r0, [pc, #16]	@ (8001684 <COM1_MspInit+0xac>)
 8001672:	f004 f9d3 	bl	8005a1c <HAL_GPIO_Init>
}
 8001676:	bf00      	nop
 8001678:	3728      	adds	r7, #40	@ 0x28
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	58024400 	.word	0x58024400
 8001684:	58020c00 	.word	0x58020c00

08001688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800168e:	2003      	movs	r0, #3
 8001690:	f001 ffd0 	bl	8003634 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001694:	f005 f9d6 	bl	8006a44 <HAL_RCC_GetSysClockFreq>
 8001698:	4602      	mov	r2, r0
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <HAL_Init+0x68>)
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	0a1b      	lsrs	r3, r3, #8
 80016a0:	f003 030f 	and.w	r3, r3, #15
 80016a4:	4913      	ldr	r1, [pc, #76]	@ (80016f4 <HAL_Init+0x6c>)
 80016a6:	5ccb      	ldrb	r3, [r1, r3]
 80016a8:	f003 031f 	and.w	r3, r3, #31
 80016ac:	fa22 f303 	lsr.w	r3, r2, r3
 80016b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016b2:	4b0f      	ldr	r3, [pc, #60]	@ (80016f0 <HAL_Init+0x68>)
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	4a0e      	ldr	r2, [pc, #56]	@ (80016f4 <HAL_Init+0x6c>)
 80016bc:	5cd3      	ldrb	r3, [r2, r3]
 80016be:	f003 031f 	and.w	r3, r3, #31
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	fa22 f303 	lsr.w	r3, r2, r3
 80016c8:	4a0b      	ldr	r2, [pc, #44]	@ (80016f8 <HAL_Init+0x70>)
 80016ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016cc:	4a0b      	ldr	r2, [pc, #44]	@ (80016fc <HAL_Init+0x74>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016d2:	2000      	movs	r0, #0
 80016d4:	f000 f814 	bl	8001700 <HAL_InitTick>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e002      	b.n	80016e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016e2:	f7ff fb1d 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	58024400 	.word	0x58024400
 80016f4:	0800d14c 	.word	0x0800d14c
 80016f8:	24000004 	.word	0x24000004
 80016fc:	24000000 	.word	0x24000000

08001700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001708:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <HAL_InitTick+0x60>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e021      	b.n	8001758 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001714:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <HAL_InitTick+0x64>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <HAL_InitTick+0x60>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001722:	fbb3 f3f1 	udiv	r3, r3, r1
 8001726:	fbb2 f3f3 	udiv	r3, r2, r3
 800172a:	4618      	mov	r0, r3
 800172c:	f001 ffb5 	bl	800369a <HAL_SYSTICK_Config>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e00e      	b.n	8001758 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b0f      	cmp	r3, #15
 800173e:	d80a      	bhi.n	8001756 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001740:	2200      	movs	r2, #0
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001748:	f001 ff7f 	bl	800364a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800174c:	4a06      	ldr	r2, [pc, #24]	@ (8001768 <HAL_InitTick+0x68>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	e000      	b.n	8001758 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	24000028 	.word	0x24000028
 8001764:	24000000 	.word	0x24000000
 8001768:	24000024 	.word	0x24000024

0800176c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001770:	4b06      	ldr	r3, [pc, #24]	@ (800178c <HAL_IncTick+0x20>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <HAL_IncTick+0x24>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4413      	add	r3, r2
 800177c:	4a04      	ldr	r2, [pc, #16]	@ (8001790 <HAL_IncTick+0x24>)
 800177e:	6013      	str	r3, [r2, #0]
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	24000028 	.word	0x24000028
 8001790:	24004a9c 	.word	0x24004a9c

08001794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return uwTick;
 8001798:	4b03      	ldr	r3, [pc, #12]	@ (80017a8 <HAL_GetTick+0x14>)
 800179a:	681b      	ldr	r3, [r3, #0]
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	24004a9c 	.word	0x24004a9c

080017ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017b0:	4b03      	ldr	r3, [pc, #12]	@ (80017c0 <HAL_GetREVID+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	0c1b      	lsrs	r3, r3, #16
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	5c001000 	.word	0x5c001000

080017c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	431a      	orrs	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	609a      	str	r2, [r3, #8]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	609a      	str	r2, [r3, #8]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800182c:	b480      	push	{r7}
 800182e:	b087      	sub	sp, #28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800183c:	2b00      	cmp	r3, #0
 800183e:	d107      	bne.n	8001850 <LL_ADC_SetChannelPreselection+0x24>
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	0e9b      	lsrs	r3, r3, #26
 8001844:	f003 031f 	and.w	r3, r3, #31
 8001848:	2201      	movs	r2, #1
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	e015      	b.n	800187c <LL_ADC_SetChannelPreselection+0x50>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	fa93 f3a3 	rbit	r3, r3
 800185a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8001866:	2320      	movs	r3, #32
 8001868:	e003      	b.n	8001872 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	fab3 f383 	clz	r3, r3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	f003 031f 	and.w	r3, r3, #31
 8001876:	2201      	movs	r2, #1
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	69d2      	ldr	r2, [r2, #28]
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8001886:	bf00      	nop
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001892:	b480      	push	{r7}
 8001894:	b087      	sub	sp, #28
 8001896:	af00      	add	r7, sp, #0
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3360      	adds	r3, #96	@ 0x60
 80018a4:	461a      	mov	r2, r3
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	430b      	orrs	r3, r1
 80018c0:	431a      	orrs	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80018c6:	bf00      	nop
 80018c8:	371c      	adds	r7, #28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b085      	sub	sp, #20
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	f003 031f 	and.w	r3, r3, #31
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	431a      	orrs	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	611a      	str	r2, [r3, #16]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001904:	b480      	push	{r7}
 8001906:	b087      	sub	sp, #28
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	3360      	adds	r3, #96	@ 0x60
 8001914:	461a      	mov	r2, r3
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	431a      	orrs	r2, r3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	601a      	str	r2, [r3, #0]
  }
}
 800192e:	bf00      	nop
 8001930:	371c      	adds	r7, #28
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001960:	b480      	push	{r7}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	3330      	adds	r3, #48	@ 0x30
 8001970:	461a      	mov	r2, r3
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	4413      	add	r3, r2
 800197e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f003 031f 	and.w	r3, r3, #31
 800198a:	211f      	movs	r1, #31
 800198c:	fa01 f303 	lsl.w	r3, r1, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	401a      	ands	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	0e9b      	lsrs	r3, r3, #26
 8001998:	f003 011f 	and.w	r1, r3, #31
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	431a      	orrs	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019ac:	bf00      	nop
 80019ae:	371c      	adds	r7, #28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	f023 0203 	bic.w	r2, r3, #3
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	60da      	str	r2, [r3, #12]
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ea:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	3314      	adds	r3, #20
 8001a14:	461a      	mov	r2, r3
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	0e5b      	lsrs	r3, r3, #25
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	4413      	add	r3, r2
 8001a22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	0d1b      	lsrs	r3, r3, #20
 8001a2c:	f003 031f 	and.w	r3, r3, #31
 8001a30:	2107      	movs	r1, #7
 8001a32:	fa01 f303 	lsl.w	r3, r1, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	401a      	ands	r2, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	0d1b      	lsrs	r3, r3, #20
 8001a3e:	f003 031f 	and.w	r3, r3, #31
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a4e:	bf00      	nop
 8001a50:	371c      	adds	r7, #28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a74:	43db      	mvns	r3, r3
 8001a76:	401a      	ands	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f003 0318 	and.w	r3, r3, #24
 8001a7e:	4908      	ldr	r1, [pc, #32]	@ (8001aa0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a80:	40d9      	lsrs	r1, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	400b      	ands	r3, r1
 8001a86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001a92:	bf00      	nop
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	000fffff 	.word	0x000fffff

08001aa4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 031f 	and.w	r3, r3, #31
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	4b04      	ldr	r3, [pc, #16]	@ (8001afc <LL_ADC_DisableDeepPowerDown+0x20>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6093      	str	r3, [r2, #8]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	5fffffc0 	.word	0x5fffffc0

08001b00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b14:	d101      	bne.n	8001b1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <LL_ADC_EnableInternalRegulator+0x24>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	6fffffc0 	.word	0x6fffffc0

08001b50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b64:	d101      	bne.n	8001b6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	4b05      	ldr	r3, [pc, #20]	@ (8001b9c <LL_ADC_Enable+0x24>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	f043 0201 	orr.w	r2, r3, #1
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	7fffffc0 	.word	0x7fffffc0

08001ba0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <LL_ADC_Disable+0x24>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	f043 0202 	orr.w	r2, r3, #2
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	7fffffc0 	.word	0x7fffffc0

08001bc8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d101      	bne.n	8001be0 <LL_ADC_IsEnabled+0x18>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <LL_ADC_IsEnabled+0x1a>
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d101      	bne.n	8001c06 <LL_ADC_IsDisableOngoing+0x18>
 8001c02:	2301      	movs	r3, #1
 8001c04:	e000      	b.n	8001c08 <LL_ADC_IsDisableOngoing+0x1a>
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <LL_ADC_REG_StartConversion+0x24>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	f043 0204 	orr.w	r2, r3, #4
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	7fffffc0 	.word	0x7fffffc0

08001c3c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d101      	bne.n	8001c54 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d101      	bne.n	8001c7a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b089      	sub	sp, #36	@ 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e18f      	b.n	8001fc2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d109      	bne.n	8001cc4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff f84f 	bl	8000d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff19 	bl	8001b00 <LL_ADC_IsDeepPowerDownEnabled>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d004      	beq.n	8001cde <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff feff 	bl	8001adc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff ff34 	bl	8001b50 <LL_ADC_IsInternalRegulatorEnabled>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d114      	bne.n	8001d18 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff ff18 	bl	8001b28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cf8:	4b87      	ldr	r3, [pc, #540]	@ (8001f18 <HAL_ADC_Init+0x290>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	099b      	lsrs	r3, r3, #6
 8001cfe:	4a87      	ldr	r2, [pc, #540]	@ (8001f1c <HAL_ADC_Init+0x294>)
 8001d00:	fba2 2303 	umull	r2, r3, r2, r3
 8001d04:	099b      	lsrs	r3, r3, #6
 8001d06:	3301      	adds	r3, #1
 8001d08:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d0a:	e002      	b.n	8001d12 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1f9      	bne.n	8001d0c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff17 	bl	8001b50 <LL_ADC_IsInternalRegulatorEnabled>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10d      	bne.n	8001d44 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d2c:	f043 0210 	orr.w	r2, r3, #16
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d38:	f043 0201 	orr.w	r2, r3, #1
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff77 	bl	8001c3c <LL_ADC_REG_IsConversionOngoing>
 8001d4e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f040 8129 	bne.w	8001fb0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f040 8125 	bne.w	8001fb0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d6a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d6e:	f043 0202 	orr.w	r2, r3, #2
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff ff24 	bl	8001bc8 <LL_ADC_IsEnabled>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d136      	bne.n	8001df4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a65      	ldr	r2, [pc, #404]	@ (8001f20 <HAL_ADC_Init+0x298>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d004      	beq.n	8001d9a <HAL_ADC_Init+0x112>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a63      	ldr	r2, [pc, #396]	@ (8001f24 <HAL_ADC_Init+0x29c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d10e      	bne.n	8001db8 <HAL_ADC_Init+0x130>
 8001d9a:	4861      	ldr	r0, [pc, #388]	@ (8001f20 <HAL_ADC_Init+0x298>)
 8001d9c:	f7ff ff14 	bl	8001bc8 <LL_ADC_IsEnabled>
 8001da0:	4604      	mov	r4, r0
 8001da2:	4860      	ldr	r0, [pc, #384]	@ (8001f24 <HAL_ADC_Init+0x29c>)
 8001da4:	f7ff ff10 	bl	8001bc8 <LL_ADC_IsEnabled>
 8001da8:	4603      	mov	r3, r0
 8001daa:	4323      	orrs	r3, r4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	bf0c      	ite	eq
 8001db0:	2301      	moveq	r3, #1
 8001db2:	2300      	movne	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	e008      	b.n	8001dca <HAL_ADC_Init+0x142>
 8001db8:	485b      	ldr	r0, [pc, #364]	@ (8001f28 <HAL_ADC_Init+0x2a0>)
 8001dba:	f7ff ff05 	bl	8001bc8 <LL_ADC_IsEnabled>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf0c      	ite	eq
 8001dc4:	2301      	moveq	r3, #1
 8001dc6:	2300      	movne	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d012      	beq.n	8001df4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a53      	ldr	r2, [pc, #332]	@ (8001f20 <HAL_ADC_Init+0x298>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d004      	beq.n	8001de2 <HAL_ADC_Init+0x15a>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a51      	ldr	r2, [pc, #324]	@ (8001f24 <HAL_ADC_Init+0x29c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d101      	bne.n	8001de6 <HAL_ADC_Init+0x15e>
 8001de2:	4a52      	ldr	r2, [pc, #328]	@ (8001f2c <HAL_ADC_Init+0x2a4>)
 8001de4:	e000      	b.n	8001de8 <HAL_ADC_Init+0x160>
 8001de6:	4a52      	ldr	r2, [pc, #328]	@ (8001f30 <HAL_ADC_Init+0x2a8>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4619      	mov	r1, r3
 8001dee:	4610      	mov	r0, r2
 8001df0:	f7ff fce8 	bl	80017c4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001df4:	f7ff fcda 	bl	80017ac <HAL_GetREVID>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d914      	bls.n	8001e2c <HAL_ADC_Init+0x1a4>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b10      	cmp	r3, #16
 8001e08:	d110      	bne.n	8001e2c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	7d5b      	ldrb	r3, [r3, #21]
 8001e0e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e14:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e1a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7f1b      	ldrb	r3, [r3, #28]
 8001e20:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e22:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e24:	f043 030c 	orr.w	r3, r3, #12
 8001e28:	61bb      	str	r3, [r7, #24]
 8001e2a:	e00d      	b.n	8001e48 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7d5b      	ldrb	r3, [r3, #21]
 8001e30:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e36:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e3c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	7f1b      	ldrb	r3, [r3, #28]
 8001e42:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	7f1b      	ldrb	r3, [r3, #28]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d106      	bne.n	8001e5e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	3b01      	subs	r3, #1
 8001e56:	045b      	lsls	r3, r3, #17
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d009      	beq.n	8001e7a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e72:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	4b2c      	ldr	r3, [pc, #176]	@ (8001f34 <HAL_ADC_Init+0x2ac>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	69b9      	ldr	r1, [r7, #24]
 8001e8a:	430b      	orrs	r3, r1
 8001e8c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fed2 	bl	8001c3c <LL_ADC_REG_IsConversionOngoing>
 8001e98:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fedf 	bl	8001c62 <LL_ADC_INJ_IsConversionOngoing>
 8001ea4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d15f      	bne.n	8001f6c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d15c      	bne.n	8001f6c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	7d1b      	ldrb	r3, [r3, #20]
 8001eb6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f38 <HAL_ADC_Init+0x2b0>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	69b9      	ldr	r1, [r7, #24]
 8001ed0:	430b      	orrs	r3, r1
 8001ed2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d130      	bne.n	8001f40 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	4b14      	ldr	r3, [pc, #80]	@ (8001f3c <HAL_ADC_Init+0x2b4>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ef2:	3a01      	subs	r2, #1
 8001ef4:	0411      	lsls	r1, r2, #16
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001efa:	4311      	orrs	r1, r2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f00:	4311      	orrs	r1, r2
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f06:	430a      	orrs	r2, r1
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	611a      	str	r2, [r3, #16]
 8001f14:	e01c      	b.n	8001f50 <HAL_ADC_Init+0x2c8>
 8001f16:	bf00      	nop
 8001f18:	24000000 	.word	0x24000000
 8001f1c:	053e2d63 	.word	0x053e2d63
 8001f20:	40022000 	.word	0x40022000
 8001f24:	40022100 	.word	0x40022100
 8001f28:	58026000 	.word	0x58026000
 8001f2c:	40022300 	.word	0x40022300
 8001f30:	58026300 	.word	0x58026300
 8001f34:	fff0c003 	.word	0xfff0c003
 8001f38:	ffffbffc 	.word	0xffffbffc
 8001f3c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691a      	ldr	r2, [r3, #16]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0201 	bic.w	r2, r2, #1
 8001f4e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 ffba 	bl	8002ee0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d10c      	bne.n	8001f8e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	f023 010f 	bic.w	r1, r3, #15
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	1e5a      	subs	r2, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f8c:	e007      	b.n	8001f9e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 020f 	bic.w	r2, r2, #15
 8001f9c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa2:	f023 0303 	bic.w	r3, r3, #3
 8001fa6:	f043 0201 	orr.w	r2, r3, #1
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	655a      	str	r2, [r3, #84]	@ 0x54
 8001fae:	e007      	b.n	8001fc0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb4:	f043 0210 	orr.w	r2, r3, #16
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3724      	adds	r7, #36	@ 0x24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd90      	pop	{r4, r7, pc}
 8001fca:	bf00      	nop

08001fcc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a55      	ldr	r2, [pc, #340]	@ (8002134 <HAL_ADC_Start_DMA+0x168>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d004      	beq.n	8001fec <HAL_ADC_Start_DMA+0x20>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a54      	ldr	r2, [pc, #336]	@ (8002138 <HAL_ADC_Start_DMA+0x16c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d101      	bne.n	8001ff0 <HAL_ADC_Start_DMA+0x24>
 8001fec:	4b53      	ldr	r3, [pc, #332]	@ (800213c <HAL_ADC_Start_DMA+0x170>)
 8001fee:	e000      	b.n	8001ff2 <HAL_ADC_Start_DMA+0x26>
 8001ff0:	4b53      	ldr	r3, [pc, #332]	@ (8002140 <HAL_ADC_Start_DMA+0x174>)
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fd56 	bl	8001aa4 <LL_ADC_GetMultimode>
 8001ff8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fe1c 	bl	8001c3c <LL_ADC_REG_IsConversionOngoing>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	f040 808c 	bne.w	8002124 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_ADC_Start_DMA+0x4e>
 8002016:	2302      	movs	r3, #2
 8002018:	e087      	b.n	800212a <HAL_ADC_Start_DMA+0x15e>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	2b05      	cmp	r3, #5
 800202c:	d002      	beq.n	8002034 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	2b09      	cmp	r3, #9
 8002032:	d170      	bne.n	8002116 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 fdd5 	bl	8002be4 <ADC_Enable>
 800203a:	4603      	mov	r3, r0
 800203c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800203e:	7dfb      	ldrb	r3, [r7, #23]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d163      	bne.n	800210c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002048:	4b3e      	ldr	r3, [pc, #248]	@ (8002144 <HAL_ADC_Start_DMA+0x178>)
 800204a:	4013      	ands	r3, r2
 800204c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a37      	ldr	r2, [pc, #220]	@ (8002138 <HAL_ADC_Start_DMA+0x16c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d002      	beq.n	8002064 <HAL_ADC_Start_DMA+0x98>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	e000      	b.n	8002066 <HAL_ADC_Start_DMA+0x9a>
 8002064:	4b33      	ldr	r3, [pc, #204]	@ (8002134 <HAL_ADC_Start_DMA+0x168>)
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	4293      	cmp	r3, r2
 800206c:	d002      	beq.n	8002074 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d105      	bne.n	8002080 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002078:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002084:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d006      	beq.n	800209a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002090:	f023 0206 	bic.w	r2, r3, #6
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	659a      	str	r2, [r3, #88]	@ 0x58
 8002098:	e002      	b.n	80020a0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a4:	4a28      	ldr	r2, [pc, #160]	@ (8002148 <HAL_ADC_Start_DMA+0x17c>)
 80020a6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ac:	4a27      	ldr	r2, [pc, #156]	@ (800214c <HAL_ADC_Start_DMA+0x180>)
 80020ae:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b4:	4a26      	ldr	r2, [pc, #152]	@ (8002150 <HAL_ADC_Start_DMA+0x184>)
 80020b6:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	221c      	movs	r2, #28
 80020be:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0210 	orr.w	r2, r2, #16
 80020d6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e0:	4619      	mov	r1, r3
 80020e2:	4610      	mov	r0, r2
 80020e4:	f7ff fc68 	bl	80019b8 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	3340      	adds	r3, #64	@ 0x40
 80020f2:	4619      	mov	r1, r3
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f001 feb0 	bl	8003e5c <HAL_DMA_Start_IT>
 80020fc:	4603      	mov	r3, r0
 80020fe:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fd85 	bl	8001c14 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800210a:	e00d      	b.n	8002128 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002114:	e008      	b.n	8002128 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002122:	e001      	b.n	8002128 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002124:	2302      	movs	r3, #2
 8002126:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002128:	7dfb      	ldrb	r3, [r7, #23]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40022000 	.word	0x40022000
 8002138:	40022100 	.word	0x40022100
 800213c:	40022300 	.word	0x40022300
 8002140:	58026300 	.word	0x58026300
 8002144:	fffff0fe 	.word	0xfffff0fe
 8002148:	08002db7 	.word	0x08002db7
 800214c:	08002e8f 	.word	0x08002e8f
 8002150:	08002eab 	.word	0x08002eab

08002154 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	@ 0x28
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800215c:	2300      	movs	r3, #0
 800215e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a87      	ldr	r2, [pc, #540]	@ (8002394 <HAL_ADC_IRQHandler+0x240>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d004      	beq.n	8002184 <HAL_ADC_IRQHandler+0x30>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a86      	ldr	r2, [pc, #536]	@ (8002398 <HAL_ADC_IRQHandler+0x244>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d101      	bne.n	8002188 <HAL_ADC_IRQHandler+0x34>
 8002184:	4b85      	ldr	r3, [pc, #532]	@ (800239c <HAL_ADC_IRQHandler+0x248>)
 8002186:	e000      	b.n	800218a <HAL_ADC_IRQHandler+0x36>
 8002188:	4b85      	ldr	r3, [pc, #532]	@ (80023a0 <HAL_ADC_IRQHandler+0x24c>)
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fc8a 	bl	8001aa4 <LL_ADC_GetMultimode>
 8002190:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d017      	beq.n	80021cc <HAL_ADC_IRQHandler+0x78>
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d012      	beq.n	80021cc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d105      	bne.n	80021be <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f001 f880 	bl	80032c4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2202      	movs	r2, #2
 80021ca:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d004      	beq.n	80021e0 <HAL_ADC_IRQHandler+0x8c>
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10a      	bne.n	80021f6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 8083 	beq.w	80022f2 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d07d      	beq.n	80022f2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d105      	bne.n	800220e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002206:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fb91 	bl	800193a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d062      	beq.n	80022e4 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a5d      	ldr	r2, [pc, #372]	@ (8002398 <HAL_ADC_IRQHandler+0x244>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d002      	beq.n	800222e <HAL_ADC_IRQHandler+0xda>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	e000      	b.n	8002230 <HAL_ADC_IRQHandler+0xdc>
 800222e:	4b59      	ldr	r3, [pc, #356]	@ (8002394 <HAL_ADC_IRQHandler+0x240>)
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	4293      	cmp	r3, r2
 8002236:	d008      	beq.n	800224a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d005      	beq.n	800224a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b05      	cmp	r3, #5
 8002242:	d002      	beq.n	800224a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2b09      	cmp	r3, #9
 8002248:	d104      	bne.n	8002254 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	623b      	str	r3, [r7, #32]
 8002252:	e00c      	b.n	800226e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a4f      	ldr	r2, [pc, #316]	@ (8002398 <HAL_ADC_IRQHandler+0x244>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d002      	beq.n	8002264 <HAL_ADC_IRQHandler+0x110>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	e000      	b.n	8002266 <HAL_ADC_IRQHandler+0x112>
 8002264:	4b4b      	ldr	r3, [pc, #300]	@ (8002394 <HAL_ADC_IRQHandler+0x240>)
 8002266:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d135      	bne.n	80022e4 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b08      	cmp	r3, #8
 8002284:	d12e      	bne.n	80022e4 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fcd6 	bl	8001c3c <LL_ADC_REG_IsConversionOngoing>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d11a      	bne.n	80022cc <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 020c 	bic.w	r2, r2, #12
 80022a4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022aa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d112      	bne.n	80022e4 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c2:	f043 0201 	orr.w	r2, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	655a      	str	r2, [r3, #84]	@ 0x54
 80022ca:	e00b      	b.n	80022e4 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d0:	f043 0210 	orr.w	r2, r3, #16
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022dc:	f043 0201 	orr.w	r2, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7fe fa23 	bl	8000730 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	220c      	movs	r2, #12
 80022f0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d004      	beq.n	8002306 <HAL_ADC_IRQHandler+0x1b2>
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	f003 0320 	and.w	r3, r3, #32
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10b      	bne.n	800231e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80a0 	beq.w	8002452 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 809a 	beq.w	8002452 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b00      	cmp	r3, #0
 8002328:	d105      	bne.n	8002336 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800232e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fb4f 	bl	80019de <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002340:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff faf7 	bl	800193a <LL_ADC_REG_IsTriggerSourceSWStart>
 800234c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a11      	ldr	r2, [pc, #68]	@ (8002398 <HAL_ADC_IRQHandler+0x244>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d002      	beq.n	800235e <HAL_ADC_IRQHandler+0x20a>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	e000      	b.n	8002360 <HAL_ADC_IRQHandler+0x20c>
 800235e:	4b0d      	ldr	r3, [pc, #52]	@ (8002394 <HAL_ADC_IRQHandler+0x240>)
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	4293      	cmp	r3, r2
 8002366:	d008      	beq.n	800237a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d005      	beq.n	800237a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2b06      	cmp	r3, #6
 8002372:	d002      	beq.n	800237a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2b07      	cmp	r3, #7
 8002378:	d104      	bne.n	8002384 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	623b      	str	r3, [r7, #32]
 8002382:	e014      	b.n	80023ae <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a03      	ldr	r2, [pc, #12]	@ (8002398 <HAL_ADC_IRQHandler+0x244>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d00a      	beq.n	80023a4 <HAL_ADC_IRQHandler+0x250>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	e008      	b.n	80023a6 <HAL_ADC_IRQHandler+0x252>
 8002394:	40022000 	.word	0x40022000
 8002398:	40022100 	.word	0x40022100
 800239c:	40022300 	.word	0x40022300
 80023a0:	58026300 	.word	0x58026300
 80023a4:	4b84      	ldr	r3, [pc, #528]	@ (80025b8 <HAL_ADC_IRQHandler+0x464>)
 80023a6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d047      	beq.n	8002444 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d007      	beq.n	80023ce <HAL_ADC_IRQHandler+0x27a>
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d03f      	beq.n	8002444 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d13a      	bne.n	8002444 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023d8:	2b40      	cmp	r3, #64	@ 0x40
 80023da:	d133      	bne.n	8002444 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d12e      	bne.n	8002444 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff fc39 	bl	8001c62 <LL_ADC_INJ_IsConversionOngoing>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d11a      	bne.n	800242c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002404:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800240a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241a:	2b00      	cmp	r3, #0
 800241c:	d112      	bne.n	8002444 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002422:	f043 0201 	orr.w	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	655a      	str	r2, [r3, #84]	@ 0x54
 800242a:	e00b      	b.n	8002444 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002430:	f043 0210 	orr.w	r2, r3, #16
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243c:	f043 0201 	orr.w	r2, r3, #1
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 ff15 	bl	8003274 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2260      	movs	r2, #96	@ 0x60
 8002450:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002458:	2b00      	cmp	r3, #0
 800245a:	d011      	beq.n	8002480 <HAL_ADC_IRQHandler+0x32c>
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00c      	beq.n	8002480 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800246a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f8b2 	bl	80025dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2280      	movs	r2, #128	@ 0x80
 800247e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d012      	beq.n	80024b0 <HAL_ADC_IRQHandler+0x35c>
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00d      	beq.n	80024b0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002498:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 fefb 	bl	800329c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d012      	beq.n	80024e0 <HAL_ADC_IRQHandler+0x38c>
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00d      	beq.n	80024e0 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 feed 	bl	80032b0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d043      	beq.n	8002572 <HAL_ADC_IRQHandler+0x41e>
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d03e      	beq.n	8002572 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d102      	bne.n	8002502 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80024fc:	2301      	movs	r3, #1
 80024fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002500:	e021      	b.n	8002546 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d015      	beq.n	8002534 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a2a      	ldr	r2, [pc, #168]	@ (80025b8 <HAL_ADC_IRQHandler+0x464>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d004      	beq.n	800251c <HAL_ADC_IRQHandler+0x3c8>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a29      	ldr	r2, [pc, #164]	@ (80025bc <HAL_ADC_IRQHandler+0x468>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d101      	bne.n	8002520 <HAL_ADC_IRQHandler+0x3cc>
 800251c:	4b28      	ldr	r3, [pc, #160]	@ (80025c0 <HAL_ADC_IRQHandler+0x46c>)
 800251e:	e000      	b.n	8002522 <HAL_ADC_IRQHandler+0x3ce>
 8002520:	4b28      	ldr	r3, [pc, #160]	@ (80025c4 <HAL_ADC_IRQHandler+0x470>)
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff facc 	bl	8001ac0 <LL_ADC_GetMultiDMATransfer>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00b      	beq.n	8002546 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800252e:	2301      	movs	r3, #1
 8002530:	627b      	str	r3, [r7, #36]	@ 0x24
 8002532:	e008      	b.n	8002546 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002542:	2301      	movs	r3, #1
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	2b01      	cmp	r3, #1
 800254a:	d10e      	bne.n	800256a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002550:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255c:	f043 0202 	orr.w	r2, r3, #2
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f843 	bl	80025f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2210      	movs	r2, #16
 8002570:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002578:	2b00      	cmp	r3, #0
 800257a:	d018      	beq.n	80025ae <HAL_ADC_IRQHandler+0x45a>
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002582:	2b00      	cmp	r3, #0
 8002584:	d013      	beq.n	80025ae <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800258a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002596:	f043 0208 	orr.w	r2, r3, #8
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025a6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 fe6d 	bl	8003288 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80025ae:	bf00      	nop
 80025b0:	3728      	adds	r7, #40	@ 0x28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40022000 	.word	0x40022000
 80025bc:	40022100 	.word	0x40022100
 80025c0:	40022300 	.word	0x40022300
 80025c4:	58026300 	.word	0x58026300

080025c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002604:	b590      	push	{r4, r7, lr}
 8002606:	b08d      	sub	sp, #52	@ 0x34
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4a65      	ldr	r2, [pc, #404]	@ (80027b4 <HAL_ADC_ConfigChannel+0x1b0>)
 800261e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_ADC_ConfigChannel+0x2a>
 800262a:	2302      	movs	r3, #2
 800262c:	e2c7      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x5ba>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fafe 	bl	8001c3c <LL_ADC_REG_IsConversionOngoing>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	f040 82ac 	bne.w	8002ba0 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	db2c      	blt.n	80026aa <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002658:	2b00      	cmp	r3, #0
 800265a:	d108      	bne.n	800266e <HAL_ADC_ConfigChannel+0x6a>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	0e9b      	lsrs	r3, r3, #26
 8002662:	f003 031f 	and.w	r3, r3, #31
 8002666:	2201      	movs	r2, #1
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	e016      	b.n	800269c <HAL_ADC_ConfigChannel+0x98>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	613b      	str	r3, [r7, #16]
  return result;
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8002686:	2320      	movs	r3, #32
 8002688:	e003      	b.n	8002692 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	fab3 f383 	clz	r3, r3
 8002690:	b2db      	uxtb	r3, r3
 8002692:	f003 031f 	and.w	r3, r3, #31
 8002696:	2201      	movs	r2, #1
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	69d1      	ldr	r1, [r2, #28]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	430b      	orrs	r3, r1
 80026a8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6859      	ldr	r1, [r3, #4]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	f7ff f952 	bl	8001960 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fabb 	bl	8001c3c <LL_ADC_REG_IsConversionOngoing>
 80026c6:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fac8 	bl	8001c62 <LL_ADC_INJ_IsConversionOngoing>
 80026d2:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f040 80b8 	bne.w	800284c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f040 80b4 	bne.w	800284c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	6819      	ldr	r1, [r3, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	461a      	mov	r2, r3
 80026f2:	f7ff f987 	bl	8001a04 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026f6:	4b30      	ldr	r3, [pc, #192]	@ (80027b8 <HAL_ADC_ConfigChannel+0x1b4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80026fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002702:	d10b      	bne.n	800271c <HAL_ADC_ConfigChannel+0x118>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	695a      	ldr	r2, [r3, #20]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	089b      	lsrs	r3, r3, #2
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	e01d      	b.n	8002758 <HAL_ADC_ConfigChannel+0x154>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10b      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x13e>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	695a      	ldr	r2, [r3, #20]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	089b      	lsrs	r3, r3, #2
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	e00a      	b.n	8002758 <HAL_ADC_ConfigChannel+0x154>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	089b      	lsrs	r3, r3, #2
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	2b04      	cmp	r3, #4
 8002760:	d02c      	beq.n	80027bc <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	6919      	ldr	r1, [r3, #16]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	f7ff f88f 	bl	8001892 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	6919      	ldr	r1, [r3, #16]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	7e5b      	ldrb	r3, [r3, #25]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d102      	bne.n	800278a <HAL_ADC_ConfigChannel+0x186>
 8002784:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002788:	e000      	b.n	800278c <HAL_ADC_ConfigChannel+0x188>
 800278a:	2300      	movs	r3, #0
 800278c:	461a      	mov	r2, r3
 800278e:	f7ff f8b9 	bl	8001904 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6919      	ldr	r1, [r3, #16]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	7e1b      	ldrb	r3, [r3, #24]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d102      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x1a4>
 80027a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027a6:	e000      	b.n	80027aa <HAL_ADC_ConfigChannel+0x1a6>
 80027a8:	2300      	movs	r3, #0
 80027aa:	461a      	mov	r2, r3
 80027ac:	f7ff f891 	bl	80018d2 <LL_ADC_SetDataRightShift>
 80027b0:	e04c      	b.n	800284c <HAL_ADC_ConfigChannel+0x248>
 80027b2:	bf00      	nop
 80027b4:	47ff0000 	.word	0x47ff0000
 80027b8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	069b      	lsls	r3, r3, #26
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d107      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027de:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	069b      	lsls	r3, r3, #26
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d107      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002802:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800280a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	069b      	lsls	r3, r3, #26
 8002814:	429a      	cmp	r2, r3
 8002816:	d107      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002826:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800282e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	069b      	lsls	r3, r3, #26
 8002838:	429a      	cmp	r2, r3
 800283a:	d107      	bne.n	800284c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800284a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff f9b9 	bl	8001bc8 <LL_ADC_IsEnabled>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	f040 81aa 	bne.w	8002bb2 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	6819      	ldr	r1, [r3, #0]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	461a      	mov	r2, r3
 800286c:	f7ff f8f6 	bl	8001a5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4a87      	ldr	r2, [pc, #540]	@ (8002a94 <HAL_ADC_ConfigChannel+0x490>)
 8002876:	4293      	cmp	r3, r2
 8002878:	f040 809a 	bne.w	80029b0 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4984      	ldr	r1, [pc, #528]	@ (8002a98 <HAL_ADC_ConfigChannel+0x494>)
 8002886:	428b      	cmp	r3, r1
 8002888:	d147      	bne.n	800291a <HAL_ADC_ConfigChannel+0x316>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4983      	ldr	r1, [pc, #524]	@ (8002a9c <HAL_ADC_ConfigChannel+0x498>)
 8002890:	428b      	cmp	r3, r1
 8002892:	d040      	beq.n	8002916 <HAL_ADC_ConfigChannel+0x312>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4981      	ldr	r1, [pc, #516]	@ (8002aa0 <HAL_ADC_ConfigChannel+0x49c>)
 800289a:	428b      	cmp	r3, r1
 800289c:	d039      	beq.n	8002912 <HAL_ADC_ConfigChannel+0x30e>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4980      	ldr	r1, [pc, #512]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x4a0>)
 80028a4:	428b      	cmp	r3, r1
 80028a6:	d032      	beq.n	800290e <HAL_ADC_ConfigChannel+0x30a>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	497e      	ldr	r1, [pc, #504]	@ (8002aa8 <HAL_ADC_ConfigChannel+0x4a4>)
 80028ae:	428b      	cmp	r3, r1
 80028b0:	d02b      	beq.n	800290a <HAL_ADC_ConfigChannel+0x306>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	497d      	ldr	r1, [pc, #500]	@ (8002aac <HAL_ADC_ConfigChannel+0x4a8>)
 80028b8:	428b      	cmp	r3, r1
 80028ba:	d024      	beq.n	8002906 <HAL_ADC_ConfigChannel+0x302>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	497b      	ldr	r1, [pc, #492]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x4ac>)
 80028c2:	428b      	cmp	r3, r1
 80028c4:	d01d      	beq.n	8002902 <HAL_ADC_ConfigChannel+0x2fe>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	497a      	ldr	r1, [pc, #488]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x4b0>)
 80028cc:	428b      	cmp	r3, r1
 80028ce:	d016      	beq.n	80028fe <HAL_ADC_ConfigChannel+0x2fa>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4978      	ldr	r1, [pc, #480]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x4b4>)
 80028d6:	428b      	cmp	r3, r1
 80028d8:	d00f      	beq.n	80028fa <HAL_ADC_ConfigChannel+0x2f6>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4977      	ldr	r1, [pc, #476]	@ (8002abc <HAL_ADC_ConfigChannel+0x4b8>)
 80028e0:	428b      	cmp	r3, r1
 80028e2:	d008      	beq.n	80028f6 <HAL_ADC_ConfigChannel+0x2f2>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4975      	ldr	r1, [pc, #468]	@ (8002ac0 <HAL_ADC_ConfigChannel+0x4bc>)
 80028ea:	428b      	cmp	r3, r1
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x2ee>
 80028ee:	4b75      	ldr	r3, [pc, #468]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x4c0>)
 80028f0:	e05a      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x3a4>
 80028f2:	2300      	movs	r3, #0
 80028f4:	e058      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x3a4>
 80028f6:	4b74      	ldr	r3, [pc, #464]	@ (8002ac8 <HAL_ADC_ConfigChannel+0x4c4>)
 80028f8:	e056      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x3a4>
 80028fa:	4b74      	ldr	r3, [pc, #464]	@ (8002acc <HAL_ADC_ConfigChannel+0x4c8>)
 80028fc:	e054      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x3a4>
 80028fe:	4b6e      	ldr	r3, [pc, #440]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x4b4>)
 8002900:	e052      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x3a4>
 8002902:	4b6c      	ldr	r3, [pc, #432]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x4b0>)
 8002904:	e050      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x3a4>
 8002906:	4b72      	ldr	r3, [pc, #456]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x4cc>)
 8002908:	e04e      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x3a4>
 800290a:	4b72      	ldr	r3, [pc, #456]	@ (8002ad4 <HAL_ADC_ConfigChannel+0x4d0>)
 800290c:	e04c      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x3a4>
 800290e:	4b72      	ldr	r3, [pc, #456]	@ (8002ad8 <HAL_ADC_ConfigChannel+0x4d4>)
 8002910:	e04a      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x3a4>
 8002912:	4b72      	ldr	r3, [pc, #456]	@ (8002adc <HAL_ADC_ConfigChannel+0x4d8>)
 8002914:	e048      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x3a4>
 8002916:	2301      	movs	r3, #1
 8002918:	e046      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x3a4>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4970      	ldr	r1, [pc, #448]	@ (8002ae0 <HAL_ADC_ConfigChannel+0x4dc>)
 8002920:	428b      	cmp	r3, r1
 8002922:	d140      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x3a2>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	495c      	ldr	r1, [pc, #368]	@ (8002a9c <HAL_ADC_ConfigChannel+0x498>)
 800292a:	428b      	cmp	r3, r1
 800292c:	d039      	beq.n	80029a2 <HAL_ADC_ConfigChannel+0x39e>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	495b      	ldr	r1, [pc, #364]	@ (8002aa0 <HAL_ADC_ConfigChannel+0x49c>)
 8002934:	428b      	cmp	r3, r1
 8002936:	d032      	beq.n	800299e <HAL_ADC_ConfigChannel+0x39a>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4959      	ldr	r1, [pc, #356]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x4a0>)
 800293e:	428b      	cmp	r3, r1
 8002940:	d02b      	beq.n	800299a <HAL_ADC_ConfigChannel+0x396>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4958      	ldr	r1, [pc, #352]	@ (8002aa8 <HAL_ADC_ConfigChannel+0x4a4>)
 8002948:	428b      	cmp	r3, r1
 800294a:	d024      	beq.n	8002996 <HAL_ADC_ConfigChannel+0x392>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4956      	ldr	r1, [pc, #344]	@ (8002aac <HAL_ADC_ConfigChannel+0x4a8>)
 8002952:	428b      	cmp	r3, r1
 8002954:	d01d      	beq.n	8002992 <HAL_ADC_ConfigChannel+0x38e>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4955      	ldr	r1, [pc, #340]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x4ac>)
 800295c:	428b      	cmp	r3, r1
 800295e:	d016      	beq.n	800298e <HAL_ADC_ConfigChannel+0x38a>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4953      	ldr	r1, [pc, #332]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x4b0>)
 8002966:	428b      	cmp	r3, r1
 8002968:	d00f      	beq.n	800298a <HAL_ADC_ConfigChannel+0x386>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4952      	ldr	r1, [pc, #328]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x4b4>)
 8002970:	428b      	cmp	r3, r1
 8002972:	d008      	beq.n	8002986 <HAL_ADC_ConfigChannel+0x382>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4951      	ldr	r1, [pc, #324]	@ (8002ac0 <HAL_ADC_ConfigChannel+0x4bc>)
 800297a:	428b      	cmp	r3, r1
 800297c:	d101      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x37e>
 800297e:	4b51      	ldr	r3, [pc, #324]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x4c0>)
 8002980:	e012      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x3a4>
 8002982:	2300      	movs	r3, #0
 8002984:	e010      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x3a4>
 8002986:	4b51      	ldr	r3, [pc, #324]	@ (8002acc <HAL_ADC_ConfigChannel+0x4c8>)
 8002988:	e00e      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x3a4>
 800298a:	4b4b      	ldr	r3, [pc, #300]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x4b4>)
 800298c:	e00c      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x3a4>
 800298e:	4b49      	ldr	r3, [pc, #292]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x4b0>)
 8002990:	e00a      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x3a4>
 8002992:	4b4f      	ldr	r3, [pc, #316]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x4cc>)
 8002994:	e008      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x3a4>
 8002996:	4b4f      	ldr	r3, [pc, #316]	@ (8002ad4 <HAL_ADC_ConfigChannel+0x4d0>)
 8002998:	e006      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x3a4>
 800299a:	4b4f      	ldr	r3, [pc, #316]	@ (8002ad8 <HAL_ADC_ConfigChannel+0x4d4>)
 800299c:	e004      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x3a4>
 800299e:	4b4f      	ldr	r3, [pc, #316]	@ (8002adc <HAL_ADC_ConfigChannel+0x4d8>)
 80029a0:	e002      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x3a4>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x3a4>
 80029a6:	2300      	movs	r3, #0
 80029a8:	4619      	mov	r1, r3
 80029aa:	4610      	mov	r0, r2
 80029ac:	f7fe ff3e 	bl	800182c <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f280 80fc 	bge.w	8002bb2 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a36      	ldr	r2, [pc, #216]	@ (8002a98 <HAL_ADC_ConfigChannel+0x494>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d004      	beq.n	80029ce <HAL_ADC_ConfigChannel+0x3ca>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a45      	ldr	r2, [pc, #276]	@ (8002ae0 <HAL_ADC_ConfigChannel+0x4dc>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d101      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x3ce>
 80029ce:	4b45      	ldr	r3, [pc, #276]	@ (8002ae4 <HAL_ADC_ConfigChannel+0x4e0>)
 80029d0:	e000      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x3d0>
 80029d2:	4b45      	ldr	r3, [pc, #276]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x4e4>)
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe ff1b 	bl	8001810 <LL_ADC_GetCommonPathInternalCh>
 80029da:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002a98 <HAL_ADC_ConfigChannel+0x494>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d004      	beq.n	80029f0 <HAL_ADC_ConfigChannel+0x3ec>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a3d      	ldr	r2, [pc, #244]	@ (8002ae0 <HAL_ADC_ConfigChannel+0x4dc>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d10e      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x40a>
 80029f0:	4829      	ldr	r0, [pc, #164]	@ (8002a98 <HAL_ADC_ConfigChannel+0x494>)
 80029f2:	f7ff f8e9 	bl	8001bc8 <LL_ADC_IsEnabled>
 80029f6:	4604      	mov	r4, r0
 80029f8:	4839      	ldr	r0, [pc, #228]	@ (8002ae0 <HAL_ADC_ConfigChannel+0x4dc>)
 80029fa:	f7ff f8e5 	bl	8001bc8 <LL_ADC_IsEnabled>
 80029fe:	4603      	mov	r3, r0
 8002a00:	4323      	orrs	r3, r4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	bf0c      	ite	eq
 8002a06:	2301      	moveq	r3, #1
 8002a08:	2300      	movne	r3, #0
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	e008      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x41c>
 8002a0e:	4837      	ldr	r0, [pc, #220]	@ (8002aec <HAL_ADC_ConfigChannel+0x4e8>)
 8002a10:	f7ff f8da 	bl	8001bc8 <LL_ADC_IsEnabled>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	bf0c      	ite	eq
 8002a1a:	2301      	moveq	r3, #1
 8002a1c:	2300      	movne	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80b3 	beq.w	8002b8c <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a31      	ldr	r2, [pc, #196]	@ (8002af0 <HAL_ADC_ConfigChannel+0x4ec>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d165      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x4f8>
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d160      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a2b      	ldr	r2, [pc, #172]	@ (8002aec <HAL_ADC_ConfigChannel+0x4e8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	f040 80b6 	bne.w	8002bb2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a13      	ldr	r2, [pc, #76]	@ (8002a98 <HAL_ADC_ConfigChannel+0x494>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d004      	beq.n	8002a5a <HAL_ADC_ConfigChannel+0x456>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a22      	ldr	r2, [pc, #136]	@ (8002ae0 <HAL_ADC_ConfigChannel+0x4dc>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d101      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x45a>
 8002a5a:	4a22      	ldr	r2, [pc, #136]	@ (8002ae4 <HAL_ADC_ConfigChannel+0x4e0>)
 8002a5c:	e000      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x45c>
 8002a5e:	4a22      	ldr	r2, [pc, #136]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x4e4>)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a66:	4619      	mov	r1, r3
 8002a68:	4610      	mov	r0, r2
 8002a6a:	f7fe febe 	bl	80017ea <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a6e:	4b21      	ldr	r3, [pc, #132]	@ (8002af4 <HAL_ADC_ConfigChannel+0x4f0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	099b      	lsrs	r3, r3, #6
 8002a74:	4a20      	ldr	r2, [pc, #128]	@ (8002af8 <HAL_ADC_ConfigChannel+0x4f4>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	099b      	lsrs	r3, r3, #6
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002a82:	e002      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f9      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a90:	e08f      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x5ae>
 8002a92:	bf00      	nop
 8002a94:	47ff0000 	.word	0x47ff0000
 8002a98:	40022000 	.word	0x40022000
 8002a9c:	04300002 	.word	0x04300002
 8002aa0:	08600004 	.word	0x08600004
 8002aa4:	0c900008 	.word	0x0c900008
 8002aa8:	10c00010 	.word	0x10c00010
 8002aac:	14f00020 	.word	0x14f00020
 8002ab0:	2a000400 	.word	0x2a000400
 8002ab4:	2e300800 	.word	0x2e300800
 8002ab8:	32601000 	.word	0x32601000
 8002abc:	43210000 	.word	0x43210000
 8002ac0:	4b840000 	.word	0x4b840000
 8002ac4:	4fb80000 	.word	0x4fb80000
 8002ac8:	47520000 	.word	0x47520000
 8002acc:	36902000 	.word	0x36902000
 8002ad0:	25b00200 	.word	0x25b00200
 8002ad4:	21800100 	.word	0x21800100
 8002ad8:	1d500080 	.word	0x1d500080
 8002adc:	19200040 	.word	0x19200040
 8002ae0:	40022100 	.word	0x40022100
 8002ae4:	40022300 	.word	0x40022300
 8002ae8:	58026300 	.word	0x58026300
 8002aec:	58026000 	.word	0x58026000
 8002af0:	cb840000 	.word	0xcb840000
 8002af4:	24000000 	.word	0x24000000
 8002af8:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a31      	ldr	r2, [pc, #196]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x5c4>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d11e      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x540>
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d119      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a2d      	ldr	r2, [pc, #180]	@ (8002bcc <HAL_ADC_ConfigChannel+0x5c8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d14b      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a2c      	ldr	r2, [pc, #176]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x5cc>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d004      	beq.n	8002b2e <HAL_ADC_ConfigChannel+0x52a>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a2a      	ldr	r2, [pc, #168]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x5d0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d101      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x52e>
 8002b2e:	4a2a      	ldr	r2, [pc, #168]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x5d4>)
 8002b30:	e000      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x530>
 8002b32:	4a2a      	ldr	r2, [pc, #168]	@ (8002bdc <HAL_ADC_ConfigChannel+0x5d8>)
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	f7fe fe54 	bl	80017ea <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b42:	e036      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a25      	ldr	r2, [pc, #148]	@ (8002be0 <HAL_ADC_ConfigChannel+0x5dc>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d131      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x5ae>
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d12c      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8002bcc <HAL_ADC_ConfigChannel+0x5c8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d127      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a1a      	ldr	r2, [pc, #104]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x5cc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d004      	beq.n	8002b76 <HAL_ADC_ConfigChannel+0x572>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a18      	ldr	r2, [pc, #96]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x5d0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d101      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x576>
 8002b76:	4a18      	ldr	r2, [pc, #96]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x5d4>)
 8002b78:	e000      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x578>
 8002b7a:	4a18      	ldr	r2, [pc, #96]	@ (8002bdc <HAL_ADC_ConfigChannel+0x5d8>)
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b82:	4619      	mov	r1, r3
 8002b84:	4610      	mov	r0, r2
 8002b86:	f7fe fe30 	bl	80017ea <LL_ADC_SetCommonPathInternalCh>
 8002b8a:	e012      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b90:	f043 0220 	orr.w	r2, r3, #32
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002b9e:	e008      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba4:	f043 0220 	orr.w	r2, r3, #32
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3734      	adds	r7, #52	@ 0x34
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd90      	pop	{r4, r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	c7520000 	.word	0xc7520000
 8002bcc:	58026000 	.word	0x58026000
 8002bd0:	40022000 	.word	0x40022000
 8002bd4:	40022100 	.word	0x40022100
 8002bd8:	40022300 	.word	0x40022300
 8002bdc:	58026300 	.word	0x58026300
 8002be0:	cfb80000 	.word	0xcfb80000

08002be4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fe ffe9 	bl	8001bc8 <LL_ADC_IsEnabled>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d16e      	bne.n	8002cda <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	4b38      	ldr	r3, [pc, #224]	@ (8002ce4 <ADC_Enable+0x100>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00d      	beq.n	8002c26 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0e:	f043 0210 	orr.w	r2, r3, #16
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1a:	f043 0201 	orr.w	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e05a      	b.n	8002cdc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe ffa4 	bl	8001b78 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c30:	f7fe fdb0 	bl	8001794 <HAL_GetTick>
 8002c34:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a2b      	ldr	r2, [pc, #172]	@ (8002ce8 <ADC_Enable+0x104>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d004      	beq.n	8002c4a <ADC_Enable+0x66>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a29      	ldr	r2, [pc, #164]	@ (8002cec <ADC_Enable+0x108>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d101      	bne.n	8002c4e <ADC_Enable+0x6a>
 8002c4a:	4b29      	ldr	r3, [pc, #164]	@ (8002cf0 <ADC_Enable+0x10c>)
 8002c4c:	e000      	b.n	8002c50 <ADC_Enable+0x6c>
 8002c4e:	4b29      	ldr	r3, [pc, #164]	@ (8002cf4 <ADC_Enable+0x110>)
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fe ff27 	bl	8001aa4 <LL_ADC_GetMultimode>
 8002c56:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a23      	ldr	r2, [pc, #140]	@ (8002cec <ADC_Enable+0x108>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d002      	beq.n	8002c68 <ADC_Enable+0x84>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	e000      	b.n	8002c6a <ADC_Enable+0x86>
 8002c68:	4b1f      	ldr	r3, [pc, #124]	@ (8002ce8 <ADC_Enable+0x104>)
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d02c      	beq.n	8002ccc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d130      	bne.n	8002cda <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c78:	e028      	b.n	8002ccc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe ffa2 	bl	8001bc8 <LL_ADC_IsEnabled>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d104      	bne.n	8002c94 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe ff72 	bl	8001b78 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c94:	f7fe fd7e 	bl	8001794 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d914      	bls.n	8002ccc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d00d      	beq.n	8002ccc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb4:	f043 0210 	orr.w	r2, r3, #16
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc0:	f043 0201 	orr.w	r2, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e007      	b.n	8002cdc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d1cf      	bne.n	8002c7a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	8000003f 	.word	0x8000003f
 8002ce8:	40022000 	.word	0x40022000
 8002cec:	40022100 	.word	0x40022100
 8002cf0:	40022300 	.word	0x40022300
 8002cf4:	58026300 	.word	0x58026300

08002cf8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fe ff72 	bl	8001bee <LL_ADC_IsDisableOngoing>
 8002d0a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fe ff59 	bl	8001bc8 <LL_ADC_IsEnabled>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d047      	beq.n	8002dac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d144      	bne.n	8002dac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 030d 	and.w	r3, r3, #13
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d10c      	bne.n	8002d4a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fe ff33 	bl	8001ba0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2203      	movs	r2, #3
 8002d40:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d42:	f7fe fd27 	bl	8001794 <HAL_GetTick>
 8002d46:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d48:	e029      	b.n	8002d9e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4e:	f043 0210 	orr.w	r2, r3, #16
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5a:	f043 0201 	orr.w	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e023      	b.n	8002dae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d66:	f7fe fd15 	bl	8001794 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d914      	bls.n	8002d9e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00d      	beq.n	8002d9e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d86:	f043 0210 	orr.w	r2, r3, #16
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d92:	f043 0201 	orr.w	r2, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e007      	b.n	8002dae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1dc      	bne.n	8002d66 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b084      	sub	sp, #16
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d14b      	bne.n	8002e68 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d021      	beq.n	8002e2e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe fda3 	bl	800193a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d032      	beq.n	8002e60 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d12b      	bne.n	8002e60 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d11f      	bne.n	8002e60 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e24:	f043 0201 	orr.w	r2, r3, #1
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e2c:	e018      	b.n	8002e60 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d111      	bne.n	8002e60 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d105      	bne.n	8002e60 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e58:	f043 0201 	orr.w	r2, r3, #1
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f7fd fc65 	bl	8000730 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e66:	e00e      	b.n	8002e86 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f7ff fbbb 	bl	80025f0 <HAL_ADC_ErrorCallback>
}
 8002e7a:	e004      	b.n	8002e86 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	4798      	blx	r3
}
 8002e86:	bf00      	nop
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f7ff fb93 	bl	80025c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ea2:	bf00      	nop
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b084      	sub	sp, #16
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ebc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec8:	f043 0204 	orr.w	r2, r3, #4
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f7ff fb8d 	bl	80025f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a7a      	ldr	r2, [pc, #488]	@ (80030d8 <ADC_ConfigureBoostMode+0x1f8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d004      	beq.n	8002efc <ADC_ConfigureBoostMode+0x1c>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a79      	ldr	r2, [pc, #484]	@ (80030dc <ADC_ConfigureBoostMode+0x1fc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d109      	bne.n	8002f10 <ADC_ConfigureBoostMode+0x30>
 8002efc:	4b78      	ldr	r3, [pc, #480]	@ (80030e0 <ADC_ConfigureBoostMode+0x200>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	bf14      	ite	ne
 8002f08:	2301      	movne	r3, #1
 8002f0a:	2300      	moveq	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	e008      	b.n	8002f22 <ADC_ConfigureBoostMode+0x42>
 8002f10:	4b74      	ldr	r3, [pc, #464]	@ (80030e4 <ADC_ConfigureBoostMode+0x204>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf14      	ite	ne
 8002f1c:	2301      	movne	r3, #1
 8002f1e:	2300      	moveq	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d01c      	beq.n	8002f60 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002f26:	f003 ff07 	bl	8006d38 <HAL_RCC_GetHCLKFreq>
 8002f2a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f34:	d010      	beq.n	8002f58 <ADC_ConfigureBoostMode+0x78>
 8002f36:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f3a:	d873      	bhi.n	8003024 <ADC_ConfigureBoostMode+0x144>
 8002f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f40:	d002      	beq.n	8002f48 <ADC_ConfigureBoostMode+0x68>
 8002f42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f46:	d16d      	bne.n	8003024 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	0c1b      	lsrs	r3, r3, #16
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f54:	60fb      	str	r3, [r7, #12]
        break;
 8002f56:	e068      	b.n	800302a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	089b      	lsrs	r3, r3, #2
 8002f5c:	60fb      	str	r3, [r7, #12]
        break;
 8002f5e:	e064      	b.n	800302a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002f60:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002f64:	f04f 0100 	mov.w	r1, #0
 8002f68:	f005 f94c 	bl	8008204 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f6c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002f76:	d051      	beq.n	800301c <ADC_ConfigureBoostMode+0x13c>
 8002f78:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002f7c:	d854      	bhi.n	8003028 <ADC_ConfigureBoostMode+0x148>
 8002f7e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002f82:	d047      	beq.n	8003014 <ADC_ConfigureBoostMode+0x134>
 8002f84:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002f88:	d84e      	bhi.n	8003028 <ADC_ConfigureBoostMode+0x148>
 8002f8a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002f8e:	d03d      	beq.n	800300c <ADC_ConfigureBoostMode+0x12c>
 8002f90:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002f94:	d848      	bhi.n	8003028 <ADC_ConfigureBoostMode+0x148>
 8002f96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f9a:	d033      	beq.n	8003004 <ADC_ConfigureBoostMode+0x124>
 8002f9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fa0:	d842      	bhi.n	8003028 <ADC_ConfigureBoostMode+0x148>
 8002fa2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002fa6:	d029      	beq.n	8002ffc <ADC_ConfigureBoostMode+0x11c>
 8002fa8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002fac:	d83c      	bhi.n	8003028 <ADC_ConfigureBoostMode+0x148>
 8002fae:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002fb2:	d01a      	beq.n	8002fea <ADC_ConfigureBoostMode+0x10a>
 8002fb4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002fb8:	d836      	bhi.n	8003028 <ADC_ConfigureBoostMode+0x148>
 8002fba:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002fbe:	d014      	beq.n	8002fea <ADC_ConfigureBoostMode+0x10a>
 8002fc0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002fc4:	d830      	bhi.n	8003028 <ADC_ConfigureBoostMode+0x148>
 8002fc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fca:	d00e      	beq.n	8002fea <ADC_ConfigureBoostMode+0x10a>
 8002fcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fd0:	d82a      	bhi.n	8003028 <ADC_ConfigureBoostMode+0x148>
 8002fd2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002fd6:	d008      	beq.n	8002fea <ADC_ConfigureBoostMode+0x10a>
 8002fd8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002fdc:	d824      	bhi.n	8003028 <ADC_ConfigureBoostMode+0x148>
 8002fde:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002fe2:	d002      	beq.n	8002fea <ADC_ConfigureBoostMode+0x10a>
 8002fe4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002fe8:	d11e      	bne.n	8003028 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	0c9b      	lsrs	r3, r3, #18
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff8:	60fb      	str	r3, [r7, #12]
        break;
 8002ffa:	e016      	b.n	800302a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	091b      	lsrs	r3, r3, #4
 8003000:	60fb      	str	r3, [r7, #12]
        break;
 8003002:	e012      	b.n	800302a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	60fb      	str	r3, [r7, #12]
        break;
 800300a:	e00e      	b.n	800302a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	099b      	lsrs	r3, r3, #6
 8003010:	60fb      	str	r3, [r7, #12]
        break;
 8003012:	e00a      	b.n	800302a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	09db      	lsrs	r3, r3, #7
 8003018:	60fb      	str	r3, [r7, #12]
        break;
 800301a:	e006      	b.n	800302a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	0a1b      	lsrs	r3, r3, #8
 8003020:	60fb      	str	r3, [r7, #12]
        break;
 8003022:	e002      	b.n	800302a <ADC_ConfigureBoostMode+0x14a>
        break;
 8003024:	bf00      	nop
 8003026:	e000      	b.n	800302a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003028:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800302a:	f7fe fbbf 	bl	80017ac <HAL_GetREVID>
 800302e:	4603      	mov	r3, r0
 8003030:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003034:	4293      	cmp	r3, r2
 8003036:	d815      	bhi.n	8003064 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4a2b      	ldr	r2, [pc, #172]	@ (80030e8 <ADC_ConfigureBoostMode+0x208>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d908      	bls.n	8003052 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800304e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003050:	e03e      	b.n	80030d0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003060:	609a      	str	r2, [r3, #8]
}
 8003062:	e035      	b.n	80030d0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	085b      	lsrs	r3, r3, #1
 8003068:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4a1f      	ldr	r2, [pc, #124]	@ (80030ec <ADC_ConfigureBoostMode+0x20c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d808      	bhi.n	8003084 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003080:	609a      	str	r2, [r3, #8]
}
 8003082:	e025      	b.n	80030d0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4a1a      	ldr	r2, [pc, #104]	@ (80030f0 <ADC_ConfigureBoostMode+0x210>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d80a      	bhi.n	80030a2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800309e:	609a      	str	r2, [r3, #8]
}
 80030a0:	e016      	b.n	80030d0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4a13      	ldr	r2, [pc, #76]	@ (80030f4 <ADC_ConfigureBoostMode+0x214>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d80a      	bhi.n	80030c0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030bc:	609a      	str	r2, [r3, #8]
}
 80030be:	e007      	b.n	80030d0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80030ce:	609a      	str	r2, [r3, #8]
}
 80030d0:	bf00      	nop
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40022000 	.word	0x40022000
 80030dc:	40022100 	.word	0x40022100
 80030e0:	40022300 	.word	0x40022300
 80030e4:	58026300 	.word	0x58026300
 80030e8:	01312d00 	.word	0x01312d00
 80030ec:	005f5e10 	.word	0x005f5e10
 80030f0:	00bebc20 	.word	0x00bebc20
 80030f4:	017d7840 	.word	0x017d7840

080030f8 <LL_ADC_IsEnabled>:
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <LL_ADC_IsEnabled+0x18>
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <LL_ADC_IsEnabled+0x1a>
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
	...

08003120 <LL_ADC_StartCalibration>:
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	4b09      	ldr	r3, [pc, #36]	@ (8003158 <LL_ADC_StartCalibration+0x38>)
 8003132:	4013      	ands	r3, r2
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003140:	430a      	orrs	r2, r1
 8003142:	4313      	orrs	r3, r2
 8003144:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	609a      	str	r2, [r3, #8]
}
 800314c:	bf00      	nop
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	3ffeffc0 	.word	0x3ffeffc0

0800315c <LL_ADC_IsCalibrationOnGoing>:
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800316c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003170:	d101      	bne.n	8003176 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <LL_ADC_REG_IsConversionOngoing>:
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b04      	cmp	r3, #4
 8003196:	d101      	bne.n	800319c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_ADCEx_Calibration_Start+0x1e>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e04c      	b.n	8003264 <HAL_ADCEx_Calibration_Start+0xb8>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f7ff fd90 	bl	8002cf8 <ADC_Disable>
 80031d8:	4603      	mov	r3, r0
 80031da:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80031dc:	7dfb      	ldrb	r3, [r7, #23]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d135      	bne.n	800324e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80031e6:	4b21      	ldr	r3, [pc, #132]	@ (800326c <HAL_ADCEx_Calibration_Start+0xc0>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	f043 0202 	orr.w	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	68b9      	ldr	r1, [r7, #8]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff ff90 	bl	8003120 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003200:	e014      	b.n	800322c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	3301      	adds	r3, #1
 8003206:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4a19      	ldr	r2, [pc, #100]	@ (8003270 <HAL_ADCEx_Calibration_Start+0xc4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d30d      	bcc.n	800322c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003214:	f023 0312 	bic.w	r3, r3, #18
 8003218:	f043 0210 	orr.w	r2, r3, #16
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e01b      	b.n	8003264 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff93 	bl	800315c <LL_ADC_IsCalibrationOnGoing>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1e2      	bne.n	8003202 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003240:	f023 0303 	bic.w	r3, r3, #3
 8003244:	f043 0201 	orr.w	r2, r3, #1
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	655a      	str	r2, [r3, #84]	@ 0x54
 800324c:	e005      	b.n	800325a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003252:	f043 0210 	orr.w	r2, r3, #16
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003262:	7dfb      	ldrb	r3, [r7, #23]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	ffffeefd 	.word	0xffffeefd
 8003270:	25c3f800 	.word	0x25c3f800

08003274 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032d8:	b590      	push	{r4, r7, lr}
 80032da:	b09f      	sub	sp, #124	@ 0x7c
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e0be      	b.n	8003474 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80032fe:	2300      	movs	r3, #0
 8003300:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003302:	2300      	movs	r3, #0
 8003304:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a5c      	ldr	r2, [pc, #368]	@ (800347c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d102      	bne.n	8003316 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003310:	4b5b      	ldr	r3, [pc, #364]	@ (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003312:	60bb      	str	r3, [r7, #8]
 8003314:	e001      	b.n	800331a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003316:	2300      	movs	r3, #0
 8003318:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10b      	bne.n	8003338 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003324:	f043 0220 	orr.w	r2, r3, #32
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e09d      	b.n	8003474 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff ff22 	bl	8003184 <LL_ADC_REG_IsConversionOngoing>
 8003340:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff ff1c 	bl	8003184 <LL_ADC_REG_IsConversionOngoing>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d17f      	bne.n	8003452 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003352:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003354:	2b00      	cmp	r3, #0
 8003356:	d17c      	bne.n	8003452 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a47      	ldr	r2, [pc, #284]	@ (800347c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d004      	beq.n	800336c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a46      	ldr	r2, [pc, #280]	@ (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d101      	bne.n	8003370 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800336c:	4b45      	ldr	r3, [pc, #276]	@ (8003484 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800336e:	e000      	b.n	8003372 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003370:	4b45      	ldr	r3, [pc, #276]	@ (8003488 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003372:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d039      	beq.n	80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800337c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	431a      	orrs	r2, r3
 800338a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800338c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a3a      	ldr	r2, [pc, #232]	@ (800347c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d004      	beq.n	80033a2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a38      	ldr	r2, [pc, #224]	@ (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d10e      	bne.n	80033c0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80033a2:	4836      	ldr	r0, [pc, #216]	@ (800347c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033a4:	f7ff fea8 	bl	80030f8 <LL_ADC_IsEnabled>
 80033a8:	4604      	mov	r4, r0
 80033aa:	4835      	ldr	r0, [pc, #212]	@ (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033ac:	f7ff fea4 	bl	80030f8 <LL_ADC_IsEnabled>
 80033b0:	4603      	mov	r3, r0
 80033b2:	4323      	orrs	r3, r4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf0c      	ite	eq
 80033b8:	2301      	moveq	r3, #1
 80033ba:	2300      	movne	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	e008      	b.n	80033d2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80033c0:	4832      	ldr	r0, [pc, #200]	@ (800348c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80033c2:	f7ff fe99 	bl	80030f8 <LL_ADC_IsEnabled>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	bf0c      	ite	eq
 80033cc:	2301      	moveq	r3, #1
 80033ce:	2300      	movne	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d047      	beq.n	8003466 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	4b2d      	ldr	r3, [pc, #180]	@ (8003490 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80033dc:	4013      	ands	r3, r2
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	6811      	ldr	r1, [r2, #0]
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	6892      	ldr	r2, [r2, #8]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	431a      	orrs	r2, r3
 80033ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033ec:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033ee:	e03a      	b.n	8003466 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80033f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033fa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a1e      	ldr	r2, [pc, #120]	@ (800347c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d004      	beq.n	8003410 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a1d      	ldr	r2, [pc, #116]	@ (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d10e      	bne.n	800342e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003410:	481a      	ldr	r0, [pc, #104]	@ (800347c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003412:	f7ff fe71 	bl	80030f8 <LL_ADC_IsEnabled>
 8003416:	4604      	mov	r4, r0
 8003418:	4819      	ldr	r0, [pc, #100]	@ (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800341a:	f7ff fe6d 	bl	80030f8 <LL_ADC_IsEnabled>
 800341e:	4603      	mov	r3, r0
 8003420:	4323      	orrs	r3, r4
 8003422:	2b00      	cmp	r3, #0
 8003424:	bf0c      	ite	eq
 8003426:	2301      	moveq	r3, #1
 8003428:	2300      	movne	r3, #0
 800342a:	b2db      	uxtb	r3, r3
 800342c:	e008      	b.n	8003440 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800342e:	4817      	ldr	r0, [pc, #92]	@ (800348c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003430:	f7ff fe62 	bl	80030f8 <LL_ADC_IsEnabled>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	bf0c      	ite	eq
 800343a:	2301      	moveq	r3, #1
 800343c:	2300      	movne	r3, #0
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d010      	beq.n	8003466 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	4b11      	ldr	r3, [pc, #68]	@ (8003490 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800344a:	4013      	ands	r3, r2
 800344c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800344e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003450:	e009      	b.n	8003466 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003456:	f043 0220 	orr.w	r2, r3, #32
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003464:	e000      	b.n	8003468 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003466:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003470:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003474:	4618      	mov	r0, r3
 8003476:	377c      	adds	r7, #124	@ 0x7c
 8003478:	46bd      	mov	sp, r7
 800347a:	bd90      	pop	{r4, r7, pc}
 800347c:	40022000 	.word	0x40022000
 8003480:	40022100 	.word	0x40022100
 8003484:	40022300 	.word	0x40022300
 8003488:	58026300 	.word	0x58026300
 800348c:	58026000 	.word	0x58026000
 8003490:	fffff0e0 	.word	0xfffff0e0

08003494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034a4:	4b0b      	ldr	r3, [pc, #44]	@ (80034d4 <__NVIC_SetPriorityGrouping+0x40>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034b0:	4013      	ands	r3, r2
 80034b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034bc:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <__NVIC_SetPriorityGrouping+0x44>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034c2:	4a04      	ldr	r2, [pc, #16]	@ (80034d4 <__NVIC_SetPriorityGrouping+0x40>)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	60d3      	str	r3, [r2, #12]
}
 80034c8:	bf00      	nop
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	e000ed00 	.word	0xe000ed00
 80034d8:	05fa0000 	.word	0x05fa0000

080034dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034e0:	4b04      	ldr	r3, [pc, #16]	@ (80034f4 <__NVIC_GetPriorityGrouping+0x18>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	0a1b      	lsrs	r3, r3, #8
 80034e6:	f003 0307 	and.w	r3, r3, #7
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003506:	2b00      	cmp	r3, #0
 8003508:	db0b      	blt.n	8003522 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	f003 021f 	and.w	r2, r3, #31
 8003510:	4907      	ldr	r1, [pc, #28]	@ (8003530 <__NVIC_EnableIRQ+0x38>)
 8003512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	2001      	movs	r0, #1
 800351a:	fa00 f202 	lsl.w	r2, r0, r2
 800351e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	e000e100 	.word	0xe000e100

08003534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	6039      	str	r1, [r7, #0]
 800353e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003540:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003544:	2b00      	cmp	r3, #0
 8003546:	db0a      	blt.n	800355e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	b2da      	uxtb	r2, r3
 800354c:	490c      	ldr	r1, [pc, #48]	@ (8003580 <__NVIC_SetPriority+0x4c>)
 800354e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003552:	0112      	lsls	r2, r2, #4
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	440b      	add	r3, r1
 8003558:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800355c:	e00a      	b.n	8003574 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	4908      	ldr	r1, [pc, #32]	@ (8003584 <__NVIC_SetPriority+0x50>)
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	3b04      	subs	r3, #4
 800356c:	0112      	lsls	r2, r2, #4
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	440b      	add	r3, r1
 8003572:	761a      	strb	r2, [r3, #24]
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	e000e100 	.word	0xe000e100
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003588:	b480      	push	{r7}
 800358a:	b089      	sub	sp, #36	@ 0x24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f1c3 0307 	rsb	r3, r3, #7
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	bf28      	it	cs
 80035a6:	2304      	movcs	r3, #4
 80035a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3304      	adds	r3, #4
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d902      	bls.n	80035b8 <NVIC_EncodePriority+0x30>
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3b03      	subs	r3, #3
 80035b6:	e000      	b.n	80035ba <NVIC_EncodePriority+0x32>
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43da      	mvns	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	401a      	ands	r2, r3
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	fa01 f303 	lsl.w	r3, r1, r3
 80035da:	43d9      	mvns	r1, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e0:	4313      	orrs	r3, r2
         );
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3724      	adds	r7, #36	@ 0x24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003600:	d301      	bcc.n	8003606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003602:	2301      	movs	r3, #1
 8003604:	e00f      	b.n	8003626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003606:	4a0a      	ldr	r2, [pc, #40]	@ (8003630 <SysTick_Config+0x40>)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3b01      	subs	r3, #1
 800360c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800360e:	210f      	movs	r1, #15
 8003610:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003614:	f7ff ff8e 	bl	8003534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003618:	4b05      	ldr	r3, [pc, #20]	@ (8003630 <SysTick_Config+0x40>)
 800361a:	2200      	movs	r2, #0
 800361c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800361e:	4b04      	ldr	r3, [pc, #16]	@ (8003630 <SysTick_Config+0x40>)
 8003620:	2207      	movs	r2, #7
 8003622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	e000e010 	.word	0xe000e010

08003634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff ff29 	bl	8003494 <__NVIC_SetPriorityGrouping>
}
 8003642:	bf00      	nop
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b086      	sub	sp, #24
 800364e:	af00      	add	r7, sp, #0
 8003650:	4603      	mov	r3, r0
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
 8003656:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003658:	f7ff ff40 	bl	80034dc <__NVIC_GetPriorityGrouping>
 800365c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	68b9      	ldr	r1, [r7, #8]
 8003662:	6978      	ldr	r0, [r7, #20]
 8003664:	f7ff ff90 	bl	8003588 <NVIC_EncodePriority>
 8003668:	4602      	mov	r2, r0
 800366a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800366e:	4611      	mov	r1, r2
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff ff5f 	bl	8003534 <__NVIC_SetPriority>
}
 8003676:	bf00      	nop
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	4603      	mov	r3, r0
 8003686:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003688:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ff33 	bl	80034f8 <__NVIC_EnableIRQ>
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff ffa4 	bl	80035f0 <SysTick_Config>
 80036a8:	4603      	mov	r3, r0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80036b8:	f3bf 8f5f 	dmb	sy
}
 80036bc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80036be:	4b07      	ldr	r3, [pc, #28]	@ (80036dc <HAL_MPU_Disable+0x28>)
 80036c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c2:	4a06      	ldr	r2, [pc, #24]	@ (80036dc <HAL_MPU_Disable+0x28>)
 80036c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80036ca:	4b05      	ldr	r3, [pc, #20]	@ (80036e0 <HAL_MPU_Disable+0x2c>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	605a      	str	r2, [r3, #4]
}
 80036d0:	bf00      	nop
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	e000ed00 	.word	0xe000ed00
 80036e0:	e000ed90 	.word	0xe000ed90

080036e4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80036ec:	4a0b      	ldr	r2, [pc, #44]	@ (800371c <HAL_MPU_Enable+0x38>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80036f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003720 <HAL_MPU_Enable+0x3c>)
 80036f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fa:	4a09      	ldr	r2, [pc, #36]	@ (8003720 <HAL_MPU_Enable+0x3c>)
 80036fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003700:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003702:	f3bf 8f4f 	dsb	sy
}
 8003706:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003708:	f3bf 8f6f 	isb	sy
}
 800370c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	e000ed90 	.word	0xe000ed90
 8003720:	e000ed00 	.word	0xe000ed00

08003724 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	785a      	ldrb	r2, [r3, #1]
 8003730:	4b1b      	ldr	r3, [pc, #108]	@ (80037a0 <HAL_MPU_ConfigRegion+0x7c>)
 8003732:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003734:	4b1a      	ldr	r3, [pc, #104]	@ (80037a0 <HAL_MPU_ConfigRegion+0x7c>)
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	4a19      	ldr	r2, [pc, #100]	@ (80037a0 <HAL_MPU_ConfigRegion+0x7c>)
 800373a:	f023 0301 	bic.w	r3, r3, #1
 800373e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003740:	4a17      	ldr	r2, [pc, #92]	@ (80037a0 <HAL_MPU_ConfigRegion+0x7c>)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	7b1b      	ldrb	r3, [r3, #12]
 800374c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	7adb      	ldrb	r3, [r3, #11]
 8003752:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003754:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	7a9b      	ldrb	r3, [r3, #10]
 800375a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800375c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	7b5b      	ldrb	r3, [r3, #13]
 8003762:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003764:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	7b9b      	ldrb	r3, [r3, #14]
 800376a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800376c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	7bdb      	ldrb	r3, [r3, #15]
 8003772:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003774:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	7a5b      	ldrb	r3, [r3, #9]
 800377a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800377c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	7a1b      	ldrb	r3, [r3, #8]
 8003782:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003784:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	7812      	ldrb	r2, [r2, #0]
 800378a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800378c:	4a04      	ldr	r2, [pc, #16]	@ (80037a0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800378e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003790:	6113      	str	r3, [r2, #16]
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	e000ed90 	.word	0xe000ed90

080037a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80037ac:	f7fd fff2 	bl	8001794 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e316      	b.n	8003dea <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a66      	ldr	r2, [pc, #408]	@ (800395c <HAL_DMA_Init+0x1b8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d04a      	beq.n	800385c <HAL_DMA_Init+0xb8>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a65      	ldr	r2, [pc, #404]	@ (8003960 <HAL_DMA_Init+0x1bc>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d045      	beq.n	800385c <HAL_DMA_Init+0xb8>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a63      	ldr	r2, [pc, #396]	@ (8003964 <HAL_DMA_Init+0x1c0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d040      	beq.n	800385c <HAL_DMA_Init+0xb8>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a62      	ldr	r2, [pc, #392]	@ (8003968 <HAL_DMA_Init+0x1c4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d03b      	beq.n	800385c <HAL_DMA_Init+0xb8>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a60      	ldr	r2, [pc, #384]	@ (800396c <HAL_DMA_Init+0x1c8>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d036      	beq.n	800385c <HAL_DMA_Init+0xb8>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a5f      	ldr	r2, [pc, #380]	@ (8003970 <HAL_DMA_Init+0x1cc>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d031      	beq.n	800385c <HAL_DMA_Init+0xb8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a5d      	ldr	r2, [pc, #372]	@ (8003974 <HAL_DMA_Init+0x1d0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d02c      	beq.n	800385c <HAL_DMA_Init+0xb8>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a5c      	ldr	r2, [pc, #368]	@ (8003978 <HAL_DMA_Init+0x1d4>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d027      	beq.n	800385c <HAL_DMA_Init+0xb8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a5a      	ldr	r2, [pc, #360]	@ (800397c <HAL_DMA_Init+0x1d8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d022      	beq.n	800385c <HAL_DMA_Init+0xb8>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a59      	ldr	r2, [pc, #356]	@ (8003980 <HAL_DMA_Init+0x1dc>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d01d      	beq.n	800385c <HAL_DMA_Init+0xb8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a57      	ldr	r2, [pc, #348]	@ (8003984 <HAL_DMA_Init+0x1e0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d018      	beq.n	800385c <HAL_DMA_Init+0xb8>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a56      	ldr	r2, [pc, #344]	@ (8003988 <HAL_DMA_Init+0x1e4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d013      	beq.n	800385c <HAL_DMA_Init+0xb8>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a54      	ldr	r2, [pc, #336]	@ (800398c <HAL_DMA_Init+0x1e8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00e      	beq.n	800385c <HAL_DMA_Init+0xb8>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a53      	ldr	r2, [pc, #332]	@ (8003990 <HAL_DMA_Init+0x1ec>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d009      	beq.n	800385c <HAL_DMA_Init+0xb8>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a51      	ldr	r2, [pc, #324]	@ (8003994 <HAL_DMA_Init+0x1f0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d004      	beq.n	800385c <HAL_DMA_Init+0xb8>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a50      	ldr	r2, [pc, #320]	@ (8003998 <HAL_DMA_Init+0x1f4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d101      	bne.n	8003860 <HAL_DMA_Init+0xbc>
 800385c:	2301      	movs	r3, #1
 800385e:	e000      	b.n	8003862 <HAL_DMA_Init+0xbe>
 8003860:	2300      	movs	r3, #0
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 813b 	beq.w	8003ade <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a37      	ldr	r2, [pc, #220]	@ (800395c <HAL_DMA_Init+0x1b8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d04a      	beq.n	8003918 <HAL_DMA_Init+0x174>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a36      	ldr	r2, [pc, #216]	@ (8003960 <HAL_DMA_Init+0x1bc>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d045      	beq.n	8003918 <HAL_DMA_Init+0x174>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a34      	ldr	r2, [pc, #208]	@ (8003964 <HAL_DMA_Init+0x1c0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d040      	beq.n	8003918 <HAL_DMA_Init+0x174>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a33      	ldr	r2, [pc, #204]	@ (8003968 <HAL_DMA_Init+0x1c4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d03b      	beq.n	8003918 <HAL_DMA_Init+0x174>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a31      	ldr	r2, [pc, #196]	@ (800396c <HAL_DMA_Init+0x1c8>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d036      	beq.n	8003918 <HAL_DMA_Init+0x174>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a30      	ldr	r2, [pc, #192]	@ (8003970 <HAL_DMA_Init+0x1cc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d031      	beq.n	8003918 <HAL_DMA_Init+0x174>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a2e      	ldr	r2, [pc, #184]	@ (8003974 <HAL_DMA_Init+0x1d0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d02c      	beq.n	8003918 <HAL_DMA_Init+0x174>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a2d      	ldr	r2, [pc, #180]	@ (8003978 <HAL_DMA_Init+0x1d4>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d027      	beq.n	8003918 <HAL_DMA_Init+0x174>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a2b      	ldr	r2, [pc, #172]	@ (800397c <HAL_DMA_Init+0x1d8>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d022      	beq.n	8003918 <HAL_DMA_Init+0x174>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a2a      	ldr	r2, [pc, #168]	@ (8003980 <HAL_DMA_Init+0x1dc>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d01d      	beq.n	8003918 <HAL_DMA_Init+0x174>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a28      	ldr	r2, [pc, #160]	@ (8003984 <HAL_DMA_Init+0x1e0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d018      	beq.n	8003918 <HAL_DMA_Init+0x174>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a27      	ldr	r2, [pc, #156]	@ (8003988 <HAL_DMA_Init+0x1e4>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d013      	beq.n	8003918 <HAL_DMA_Init+0x174>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a25      	ldr	r2, [pc, #148]	@ (800398c <HAL_DMA_Init+0x1e8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00e      	beq.n	8003918 <HAL_DMA_Init+0x174>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a24      	ldr	r2, [pc, #144]	@ (8003990 <HAL_DMA_Init+0x1ec>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d009      	beq.n	8003918 <HAL_DMA_Init+0x174>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a22      	ldr	r2, [pc, #136]	@ (8003994 <HAL_DMA_Init+0x1f0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d004      	beq.n	8003918 <HAL_DMA_Init+0x174>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a21      	ldr	r2, [pc, #132]	@ (8003998 <HAL_DMA_Init+0x1f4>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d108      	bne.n	800392a <HAL_DMA_Init+0x186>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0201 	bic.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	e007      	b.n	800393a <HAL_DMA_Init+0x196>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0201 	bic.w	r2, r2, #1
 8003938:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800393a:	e02f      	b.n	800399c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800393c:	f7fd ff2a 	bl	8001794 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b05      	cmp	r3, #5
 8003948:	d928      	bls.n	800399c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2203      	movs	r2, #3
 8003954:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e246      	b.n	8003dea <HAL_DMA_Init+0x646>
 800395c:	40020010 	.word	0x40020010
 8003960:	40020028 	.word	0x40020028
 8003964:	40020040 	.word	0x40020040
 8003968:	40020058 	.word	0x40020058
 800396c:	40020070 	.word	0x40020070
 8003970:	40020088 	.word	0x40020088
 8003974:	400200a0 	.word	0x400200a0
 8003978:	400200b8 	.word	0x400200b8
 800397c:	40020410 	.word	0x40020410
 8003980:	40020428 	.word	0x40020428
 8003984:	40020440 	.word	0x40020440
 8003988:	40020458 	.word	0x40020458
 800398c:	40020470 	.word	0x40020470
 8003990:	40020488 	.word	0x40020488
 8003994:	400204a0 	.word	0x400204a0
 8003998:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1c8      	bne.n	800393c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	4b83      	ldr	r3, [pc, #524]	@ (8003bc4 <HAL_DMA_Init+0x420>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80039c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039da:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	d107      	bne.n	8003a00 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f8:	4313      	orrs	r3, r2
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003a00:	4b71      	ldr	r3, [pc, #452]	@ (8003bc8 <HAL_DMA_Init+0x424>)
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	4b71      	ldr	r3, [pc, #452]	@ (8003bcc <HAL_DMA_Init+0x428>)
 8003a06:	4013      	ands	r3, r2
 8003a08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a0c:	d328      	bcc.n	8003a60 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b28      	cmp	r3, #40	@ 0x28
 8003a14:	d903      	bls.n	8003a1e <HAL_DMA_Init+0x27a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a1c:	d917      	bls.n	8003a4e <HAL_DMA_Init+0x2aa>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a24:	d903      	bls.n	8003a2e <HAL_DMA_Init+0x28a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b42      	cmp	r3, #66	@ 0x42
 8003a2c:	d90f      	bls.n	8003a4e <HAL_DMA_Init+0x2aa>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b46      	cmp	r3, #70	@ 0x46
 8003a34:	d903      	bls.n	8003a3e <HAL_DMA_Init+0x29a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b48      	cmp	r3, #72	@ 0x48
 8003a3c:	d907      	bls.n	8003a4e <HAL_DMA_Init+0x2aa>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b4e      	cmp	r3, #78	@ 0x4e
 8003a44:	d905      	bls.n	8003a52 <HAL_DMA_Init+0x2ae>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b52      	cmp	r3, #82	@ 0x52
 8003a4c:	d801      	bhi.n	8003a52 <HAL_DMA_Init+0x2ae>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <HAL_DMA_Init+0x2b0>
 8003a52:	2300      	movs	r3, #0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a5e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f023 0307 	bic.w	r3, r3, #7
 8003a76:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d117      	bne.n	8003aba <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00e      	beq.n	8003aba <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f001 fdcf 	bl	8005640 <DMA_CheckFifoParam>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2240      	movs	r2, #64	@ 0x40
 8003aac:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e197      	b.n	8003dea <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f001 fd0a 	bl	80054dc <DMA_CalcBaseAndBitshift>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	223f      	movs	r2, #63	@ 0x3f
 8003ad6:	409a      	lsls	r2, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	609a      	str	r2, [r3, #8]
 8003adc:	e0cd      	b.n	8003c7a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a3b      	ldr	r2, [pc, #236]	@ (8003bd0 <HAL_DMA_Init+0x42c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d022      	beq.n	8003b2e <HAL_DMA_Init+0x38a>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a39      	ldr	r2, [pc, #228]	@ (8003bd4 <HAL_DMA_Init+0x430>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d01d      	beq.n	8003b2e <HAL_DMA_Init+0x38a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a38      	ldr	r2, [pc, #224]	@ (8003bd8 <HAL_DMA_Init+0x434>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d018      	beq.n	8003b2e <HAL_DMA_Init+0x38a>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a36      	ldr	r2, [pc, #216]	@ (8003bdc <HAL_DMA_Init+0x438>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d013      	beq.n	8003b2e <HAL_DMA_Init+0x38a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a35      	ldr	r2, [pc, #212]	@ (8003be0 <HAL_DMA_Init+0x43c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00e      	beq.n	8003b2e <HAL_DMA_Init+0x38a>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a33      	ldr	r2, [pc, #204]	@ (8003be4 <HAL_DMA_Init+0x440>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d009      	beq.n	8003b2e <HAL_DMA_Init+0x38a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a32      	ldr	r2, [pc, #200]	@ (8003be8 <HAL_DMA_Init+0x444>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d004      	beq.n	8003b2e <HAL_DMA_Init+0x38a>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a30      	ldr	r2, [pc, #192]	@ (8003bec <HAL_DMA_Init+0x448>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d101      	bne.n	8003b32 <HAL_DMA_Init+0x38e>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e000      	b.n	8003b34 <HAL_DMA_Init+0x390>
 8003b32:	2300      	movs	r3, #0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 8097 	beq.w	8003c68 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a24      	ldr	r2, [pc, #144]	@ (8003bd0 <HAL_DMA_Init+0x42c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d021      	beq.n	8003b88 <HAL_DMA_Init+0x3e4>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a22      	ldr	r2, [pc, #136]	@ (8003bd4 <HAL_DMA_Init+0x430>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d01c      	beq.n	8003b88 <HAL_DMA_Init+0x3e4>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a21      	ldr	r2, [pc, #132]	@ (8003bd8 <HAL_DMA_Init+0x434>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d017      	beq.n	8003b88 <HAL_DMA_Init+0x3e4>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a1f      	ldr	r2, [pc, #124]	@ (8003bdc <HAL_DMA_Init+0x438>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d012      	beq.n	8003b88 <HAL_DMA_Init+0x3e4>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a1e      	ldr	r2, [pc, #120]	@ (8003be0 <HAL_DMA_Init+0x43c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00d      	beq.n	8003b88 <HAL_DMA_Init+0x3e4>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a1c      	ldr	r2, [pc, #112]	@ (8003be4 <HAL_DMA_Init+0x440>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d008      	beq.n	8003b88 <HAL_DMA_Init+0x3e4>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a1b      	ldr	r2, [pc, #108]	@ (8003be8 <HAL_DMA_Init+0x444>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d003      	beq.n	8003b88 <HAL_DMA_Init+0x3e4>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a19      	ldr	r2, [pc, #100]	@ (8003bec <HAL_DMA_Init+0x448>)
 8003b86:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4b13      	ldr	r3, [pc, #76]	@ (8003bf0 <HAL_DMA_Init+0x44c>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	2b40      	cmp	r3, #64	@ 0x40
 8003bae:	d021      	beq.n	8003bf4 <HAL_DMA_Init+0x450>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b80      	cmp	r3, #128	@ 0x80
 8003bb6:	d102      	bne.n	8003bbe <HAL_DMA_Init+0x41a>
 8003bb8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003bbc:	e01b      	b.n	8003bf6 <HAL_DMA_Init+0x452>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e019      	b.n	8003bf6 <HAL_DMA_Init+0x452>
 8003bc2:	bf00      	nop
 8003bc4:	fe10803f 	.word	0xfe10803f
 8003bc8:	5c001000 	.word	0x5c001000
 8003bcc:	ffff0000 	.word	0xffff0000
 8003bd0:	58025408 	.word	0x58025408
 8003bd4:	5802541c 	.word	0x5802541c
 8003bd8:	58025430 	.word	0x58025430
 8003bdc:	58025444 	.word	0x58025444
 8003be0:	58025458 	.word	0x58025458
 8003be4:	5802546c 	.word	0x5802546c
 8003be8:	58025480 	.word	0x58025480
 8003bec:	58025494 	.word	0x58025494
 8003bf0:	fffe000f 	.word	0xfffe000f
 8003bf4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68d2      	ldr	r2, [r2, #12]
 8003bfa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003bfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c24:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4b6e      	ldr	r3, [pc, #440]	@ (8003df4 <HAL_DMA_Init+0x650>)
 8003c3c:	4413      	add	r3, r2
 8003c3e:	4a6e      	ldr	r2, [pc, #440]	@ (8003df8 <HAL_DMA_Init+0x654>)
 8003c40:	fba2 2303 	umull	r2, r3, r2, r3
 8003c44:	091b      	lsrs	r3, r3, #4
 8003c46:	009a      	lsls	r2, r3, #2
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f001 fc45 	bl	80054dc <DMA_CalcBaseAndBitshift>
 8003c52:	4603      	mov	r3, r0
 8003c54:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c5a:	f003 031f 	and.w	r3, r3, #31
 8003c5e:	2201      	movs	r2, #1
 8003c60:	409a      	lsls	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	605a      	str	r2, [r3, #4]
 8003c66:	e008      	b.n	8003c7a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2240      	movs	r2, #64	@ 0x40
 8003c6c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2203      	movs	r2, #3
 8003c72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e0b7      	b.n	8003dea <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a5f      	ldr	r2, [pc, #380]	@ (8003dfc <HAL_DMA_Init+0x658>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d072      	beq.n	8003d6a <HAL_DMA_Init+0x5c6>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a5d      	ldr	r2, [pc, #372]	@ (8003e00 <HAL_DMA_Init+0x65c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d06d      	beq.n	8003d6a <HAL_DMA_Init+0x5c6>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a5c      	ldr	r2, [pc, #368]	@ (8003e04 <HAL_DMA_Init+0x660>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d068      	beq.n	8003d6a <HAL_DMA_Init+0x5c6>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a5a      	ldr	r2, [pc, #360]	@ (8003e08 <HAL_DMA_Init+0x664>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d063      	beq.n	8003d6a <HAL_DMA_Init+0x5c6>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a59      	ldr	r2, [pc, #356]	@ (8003e0c <HAL_DMA_Init+0x668>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d05e      	beq.n	8003d6a <HAL_DMA_Init+0x5c6>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a57      	ldr	r2, [pc, #348]	@ (8003e10 <HAL_DMA_Init+0x66c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d059      	beq.n	8003d6a <HAL_DMA_Init+0x5c6>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a56      	ldr	r2, [pc, #344]	@ (8003e14 <HAL_DMA_Init+0x670>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d054      	beq.n	8003d6a <HAL_DMA_Init+0x5c6>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a54      	ldr	r2, [pc, #336]	@ (8003e18 <HAL_DMA_Init+0x674>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d04f      	beq.n	8003d6a <HAL_DMA_Init+0x5c6>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a53      	ldr	r2, [pc, #332]	@ (8003e1c <HAL_DMA_Init+0x678>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d04a      	beq.n	8003d6a <HAL_DMA_Init+0x5c6>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a51      	ldr	r2, [pc, #324]	@ (8003e20 <HAL_DMA_Init+0x67c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d045      	beq.n	8003d6a <HAL_DMA_Init+0x5c6>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a50      	ldr	r2, [pc, #320]	@ (8003e24 <HAL_DMA_Init+0x680>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d040      	beq.n	8003d6a <HAL_DMA_Init+0x5c6>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a4e      	ldr	r2, [pc, #312]	@ (8003e28 <HAL_DMA_Init+0x684>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d03b      	beq.n	8003d6a <HAL_DMA_Init+0x5c6>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a4d      	ldr	r2, [pc, #308]	@ (8003e2c <HAL_DMA_Init+0x688>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d036      	beq.n	8003d6a <HAL_DMA_Init+0x5c6>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a4b      	ldr	r2, [pc, #300]	@ (8003e30 <HAL_DMA_Init+0x68c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d031      	beq.n	8003d6a <HAL_DMA_Init+0x5c6>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a4a      	ldr	r2, [pc, #296]	@ (8003e34 <HAL_DMA_Init+0x690>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d02c      	beq.n	8003d6a <HAL_DMA_Init+0x5c6>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a48      	ldr	r2, [pc, #288]	@ (8003e38 <HAL_DMA_Init+0x694>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d027      	beq.n	8003d6a <HAL_DMA_Init+0x5c6>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a47      	ldr	r2, [pc, #284]	@ (8003e3c <HAL_DMA_Init+0x698>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d022      	beq.n	8003d6a <HAL_DMA_Init+0x5c6>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a45      	ldr	r2, [pc, #276]	@ (8003e40 <HAL_DMA_Init+0x69c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d01d      	beq.n	8003d6a <HAL_DMA_Init+0x5c6>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a44      	ldr	r2, [pc, #272]	@ (8003e44 <HAL_DMA_Init+0x6a0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d018      	beq.n	8003d6a <HAL_DMA_Init+0x5c6>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a42      	ldr	r2, [pc, #264]	@ (8003e48 <HAL_DMA_Init+0x6a4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d013      	beq.n	8003d6a <HAL_DMA_Init+0x5c6>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a41      	ldr	r2, [pc, #260]	@ (8003e4c <HAL_DMA_Init+0x6a8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00e      	beq.n	8003d6a <HAL_DMA_Init+0x5c6>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a3f      	ldr	r2, [pc, #252]	@ (8003e50 <HAL_DMA_Init+0x6ac>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d009      	beq.n	8003d6a <HAL_DMA_Init+0x5c6>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a3e      	ldr	r2, [pc, #248]	@ (8003e54 <HAL_DMA_Init+0x6b0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d004      	beq.n	8003d6a <HAL_DMA_Init+0x5c6>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a3c      	ldr	r2, [pc, #240]	@ (8003e58 <HAL_DMA_Init+0x6b4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d101      	bne.n	8003d6e <HAL_DMA_Init+0x5ca>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <HAL_DMA_Init+0x5cc>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d032      	beq.n	8003dda <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f001 fcdf 	bl	8005738 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2b80      	cmp	r3, #128	@ 0x80
 8003d80:	d102      	bne.n	8003d88 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d90:	b2d2      	uxtb	r2, r2
 8003d92:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003d9c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d010      	beq.n	8003dc8 <HAL_DMA_Init+0x624>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d80c      	bhi.n	8003dc8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f001 fd5c 	bl	800586c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003dc4:	605a      	str	r2, [r3, #4]
 8003dc6:	e008      	b.n	8003dda <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	a7fdabf8 	.word	0xa7fdabf8
 8003df8:	cccccccd 	.word	0xcccccccd
 8003dfc:	40020010 	.word	0x40020010
 8003e00:	40020028 	.word	0x40020028
 8003e04:	40020040 	.word	0x40020040
 8003e08:	40020058 	.word	0x40020058
 8003e0c:	40020070 	.word	0x40020070
 8003e10:	40020088 	.word	0x40020088
 8003e14:	400200a0 	.word	0x400200a0
 8003e18:	400200b8 	.word	0x400200b8
 8003e1c:	40020410 	.word	0x40020410
 8003e20:	40020428 	.word	0x40020428
 8003e24:	40020440 	.word	0x40020440
 8003e28:	40020458 	.word	0x40020458
 8003e2c:	40020470 	.word	0x40020470
 8003e30:	40020488 	.word	0x40020488
 8003e34:	400204a0 	.word	0x400204a0
 8003e38:	400204b8 	.word	0x400204b8
 8003e3c:	58025408 	.word	0x58025408
 8003e40:	5802541c 	.word	0x5802541c
 8003e44:	58025430 	.word	0x58025430
 8003e48:	58025444 	.word	0x58025444
 8003e4c:	58025458 	.word	0x58025458
 8003e50:	5802546c 	.word	0x5802546c
 8003e54:	58025480 	.word	0x58025480
 8003e58:	58025494 	.word	0x58025494

08003e5c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e226      	b.n	80042c6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d101      	bne.n	8003e86 <HAL_DMA_Start_IT+0x2a>
 8003e82:	2302      	movs	r3, #2
 8003e84:	e21f      	b.n	80042c6 <HAL_DMA_Start_IT+0x46a>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	f040 820a 	bne.w	80042b0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a68      	ldr	r2, [pc, #416]	@ (8004050 <HAL_DMA_Start_IT+0x1f4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d04a      	beq.n	8003f4a <HAL_DMA_Start_IT+0xee>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a66      	ldr	r2, [pc, #408]	@ (8004054 <HAL_DMA_Start_IT+0x1f8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d045      	beq.n	8003f4a <HAL_DMA_Start_IT+0xee>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a65      	ldr	r2, [pc, #404]	@ (8004058 <HAL_DMA_Start_IT+0x1fc>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d040      	beq.n	8003f4a <HAL_DMA_Start_IT+0xee>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a63      	ldr	r2, [pc, #396]	@ (800405c <HAL_DMA_Start_IT+0x200>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d03b      	beq.n	8003f4a <HAL_DMA_Start_IT+0xee>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a62      	ldr	r2, [pc, #392]	@ (8004060 <HAL_DMA_Start_IT+0x204>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d036      	beq.n	8003f4a <HAL_DMA_Start_IT+0xee>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a60      	ldr	r2, [pc, #384]	@ (8004064 <HAL_DMA_Start_IT+0x208>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d031      	beq.n	8003f4a <HAL_DMA_Start_IT+0xee>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a5f      	ldr	r2, [pc, #380]	@ (8004068 <HAL_DMA_Start_IT+0x20c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d02c      	beq.n	8003f4a <HAL_DMA_Start_IT+0xee>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a5d      	ldr	r2, [pc, #372]	@ (800406c <HAL_DMA_Start_IT+0x210>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d027      	beq.n	8003f4a <HAL_DMA_Start_IT+0xee>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a5c      	ldr	r2, [pc, #368]	@ (8004070 <HAL_DMA_Start_IT+0x214>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d022      	beq.n	8003f4a <HAL_DMA_Start_IT+0xee>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a5a      	ldr	r2, [pc, #360]	@ (8004074 <HAL_DMA_Start_IT+0x218>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d01d      	beq.n	8003f4a <HAL_DMA_Start_IT+0xee>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a59      	ldr	r2, [pc, #356]	@ (8004078 <HAL_DMA_Start_IT+0x21c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d018      	beq.n	8003f4a <HAL_DMA_Start_IT+0xee>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a57      	ldr	r2, [pc, #348]	@ (800407c <HAL_DMA_Start_IT+0x220>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d013      	beq.n	8003f4a <HAL_DMA_Start_IT+0xee>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a56      	ldr	r2, [pc, #344]	@ (8004080 <HAL_DMA_Start_IT+0x224>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d00e      	beq.n	8003f4a <HAL_DMA_Start_IT+0xee>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a54      	ldr	r2, [pc, #336]	@ (8004084 <HAL_DMA_Start_IT+0x228>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d009      	beq.n	8003f4a <HAL_DMA_Start_IT+0xee>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a53      	ldr	r2, [pc, #332]	@ (8004088 <HAL_DMA_Start_IT+0x22c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d004      	beq.n	8003f4a <HAL_DMA_Start_IT+0xee>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a51      	ldr	r2, [pc, #324]	@ (800408c <HAL_DMA_Start_IT+0x230>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d108      	bne.n	8003f5c <HAL_DMA_Start_IT+0x100>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0201 	bic.w	r2, r2, #1
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	e007      	b.n	8003f6c <HAL_DMA_Start_IT+0x110>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0201 	bic.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f001 f906 	bl	8005184 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a34      	ldr	r2, [pc, #208]	@ (8004050 <HAL_DMA_Start_IT+0x1f4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d04a      	beq.n	8004018 <HAL_DMA_Start_IT+0x1bc>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a33      	ldr	r2, [pc, #204]	@ (8004054 <HAL_DMA_Start_IT+0x1f8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d045      	beq.n	8004018 <HAL_DMA_Start_IT+0x1bc>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a31      	ldr	r2, [pc, #196]	@ (8004058 <HAL_DMA_Start_IT+0x1fc>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d040      	beq.n	8004018 <HAL_DMA_Start_IT+0x1bc>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a30      	ldr	r2, [pc, #192]	@ (800405c <HAL_DMA_Start_IT+0x200>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d03b      	beq.n	8004018 <HAL_DMA_Start_IT+0x1bc>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a2e      	ldr	r2, [pc, #184]	@ (8004060 <HAL_DMA_Start_IT+0x204>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d036      	beq.n	8004018 <HAL_DMA_Start_IT+0x1bc>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a2d      	ldr	r2, [pc, #180]	@ (8004064 <HAL_DMA_Start_IT+0x208>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d031      	beq.n	8004018 <HAL_DMA_Start_IT+0x1bc>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a2b      	ldr	r2, [pc, #172]	@ (8004068 <HAL_DMA_Start_IT+0x20c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d02c      	beq.n	8004018 <HAL_DMA_Start_IT+0x1bc>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a2a      	ldr	r2, [pc, #168]	@ (800406c <HAL_DMA_Start_IT+0x210>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d027      	beq.n	8004018 <HAL_DMA_Start_IT+0x1bc>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a28      	ldr	r2, [pc, #160]	@ (8004070 <HAL_DMA_Start_IT+0x214>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d022      	beq.n	8004018 <HAL_DMA_Start_IT+0x1bc>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a27      	ldr	r2, [pc, #156]	@ (8004074 <HAL_DMA_Start_IT+0x218>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d01d      	beq.n	8004018 <HAL_DMA_Start_IT+0x1bc>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a25      	ldr	r2, [pc, #148]	@ (8004078 <HAL_DMA_Start_IT+0x21c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d018      	beq.n	8004018 <HAL_DMA_Start_IT+0x1bc>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a24      	ldr	r2, [pc, #144]	@ (800407c <HAL_DMA_Start_IT+0x220>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d013      	beq.n	8004018 <HAL_DMA_Start_IT+0x1bc>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a22      	ldr	r2, [pc, #136]	@ (8004080 <HAL_DMA_Start_IT+0x224>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d00e      	beq.n	8004018 <HAL_DMA_Start_IT+0x1bc>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a21      	ldr	r2, [pc, #132]	@ (8004084 <HAL_DMA_Start_IT+0x228>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d009      	beq.n	8004018 <HAL_DMA_Start_IT+0x1bc>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a1f      	ldr	r2, [pc, #124]	@ (8004088 <HAL_DMA_Start_IT+0x22c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d004      	beq.n	8004018 <HAL_DMA_Start_IT+0x1bc>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1e      	ldr	r2, [pc, #120]	@ (800408c <HAL_DMA_Start_IT+0x230>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d101      	bne.n	800401c <HAL_DMA_Start_IT+0x1c0>
 8004018:	2301      	movs	r3, #1
 800401a:	e000      	b.n	800401e <HAL_DMA_Start_IT+0x1c2>
 800401c:	2300      	movs	r3, #0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d036      	beq.n	8004090 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f023 021e 	bic.w	r2, r3, #30
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 0216 	orr.w	r2, r2, #22
 8004034:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d03e      	beq.n	80040bc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f042 0208 	orr.w	r2, r2, #8
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	e035      	b.n	80040bc <HAL_DMA_Start_IT+0x260>
 8004050:	40020010 	.word	0x40020010
 8004054:	40020028 	.word	0x40020028
 8004058:	40020040 	.word	0x40020040
 800405c:	40020058 	.word	0x40020058
 8004060:	40020070 	.word	0x40020070
 8004064:	40020088 	.word	0x40020088
 8004068:	400200a0 	.word	0x400200a0
 800406c:	400200b8 	.word	0x400200b8
 8004070:	40020410 	.word	0x40020410
 8004074:	40020428 	.word	0x40020428
 8004078:	40020440 	.word	0x40020440
 800407c:	40020458 	.word	0x40020458
 8004080:	40020470 	.word	0x40020470
 8004084:	40020488 	.word	0x40020488
 8004088:	400204a0 	.word	0x400204a0
 800408c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f023 020e 	bic.w	r2, r3, #14
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 020a 	orr.w	r2, r2, #10
 80040a2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d007      	beq.n	80040bc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0204 	orr.w	r2, r2, #4
 80040ba:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a83      	ldr	r2, [pc, #524]	@ (80042d0 <HAL_DMA_Start_IT+0x474>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d072      	beq.n	80041ac <HAL_DMA_Start_IT+0x350>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a82      	ldr	r2, [pc, #520]	@ (80042d4 <HAL_DMA_Start_IT+0x478>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d06d      	beq.n	80041ac <HAL_DMA_Start_IT+0x350>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a80      	ldr	r2, [pc, #512]	@ (80042d8 <HAL_DMA_Start_IT+0x47c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d068      	beq.n	80041ac <HAL_DMA_Start_IT+0x350>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a7f      	ldr	r2, [pc, #508]	@ (80042dc <HAL_DMA_Start_IT+0x480>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d063      	beq.n	80041ac <HAL_DMA_Start_IT+0x350>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a7d      	ldr	r2, [pc, #500]	@ (80042e0 <HAL_DMA_Start_IT+0x484>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d05e      	beq.n	80041ac <HAL_DMA_Start_IT+0x350>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a7c      	ldr	r2, [pc, #496]	@ (80042e4 <HAL_DMA_Start_IT+0x488>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d059      	beq.n	80041ac <HAL_DMA_Start_IT+0x350>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a7a      	ldr	r2, [pc, #488]	@ (80042e8 <HAL_DMA_Start_IT+0x48c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d054      	beq.n	80041ac <HAL_DMA_Start_IT+0x350>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a79      	ldr	r2, [pc, #484]	@ (80042ec <HAL_DMA_Start_IT+0x490>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d04f      	beq.n	80041ac <HAL_DMA_Start_IT+0x350>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a77      	ldr	r2, [pc, #476]	@ (80042f0 <HAL_DMA_Start_IT+0x494>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d04a      	beq.n	80041ac <HAL_DMA_Start_IT+0x350>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a76      	ldr	r2, [pc, #472]	@ (80042f4 <HAL_DMA_Start_IT+0x498>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d045      	beq.n	80041ac <HAL_DMA_Start_IT+0x350>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a74      	ldr	r2, [pc, #464]	@ (80042f8 <HAL_DMA_Start_IT+0x49c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d040      	beq.n	80041ac <HAL_DMA_Start_IT+0x350>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a73      	ldr	r2, [pc, #460]	@ (80042fc <HAL_DMA_Start_IT+0x4a0>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d03b      	beq.n	80041ac <HAL_DMA_Start_IT+0x350>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a71      	ldr	r2, [pc, #452]	@ (8004300 <HAL_DMA_Start_IT+0x4a4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d036      	beq.n	80041ac <HAL_DMA_Start_IT+0x350>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a70      	ldr	r2, [pc, #448]	@ (8004304 <HAL_DMA_Start_IT+0x4a8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d031      	beq.n	80041ac <HAL_DMA_Start_IT+0x350>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a6e      	ldr	r2, [pc, #440]	@ (8004308 <HAL_DMA_Start_IT+0x4ac>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d02c      	beq.n	80041ac <HAL_DMA_Start_IT+0x350>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a6d      	ldr	r2, [pc, #436]	@ (800430c <HAL_DMA_Start_IT+0x4b0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d027      	beq.n	80041ac <HAL_DMA_Start_IT+0x350>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a6b      	ldr	r2, [pc, #428]	@ (8004310 <HAL_DMA_Start_IT+0x4b4>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d022      	beq.n	80041ac <HAL_DMA_Start_IT+0x350>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a6a      	ldr	r2, [pc, #424]	@ (8004314 <HAL_DMA_Start_IT+0x4b8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d01d      	beq.n	80041ac <HAL_DMA_Start_IT+0x350>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a68      	ldr	r2, [pc, #416]	@ (8004318 <HAL_DMA_Start_IT+0x4bc>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d018      	beq.n	80041ac <HAL_DMA_Start_IT+0x350>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a67      	ldr	r2, [pc, #412]	@ (800431c <HAL_DMA_Start_IT+0x4c0>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d013      	beq.n	80041ac <HAL_DMA_Start_IT+0x350>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a65      	ldr	r2, [pc, #404]	@ (8004320 <HAL_DMA_Start_IT+0x4c4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d00e      	beq.n	80041ac <HAL_DMA_Start_IT+0x350>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a64      	ldr	r2, [pc, #400]	@ (8004324 <HAL_DMA_Start_IT+0x4c8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d009      	beq.n	80041ac <HAL_DMA_Start_IT+0x350>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a62      	ldr	r2, [pc, #392]	@ (8004328 <HAL_DMA_Start_IT+0x4cc>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d004      	beq.n	80041ac <HAL_DMA_Start_IT+0x350>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a61      	ldr	r2, [pc, #388]	@ (800432c <HAL_DMA_Start_IT+0x4d0>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d101      	bne.n	80041b0 <HAL_DMA_Start_IT+0x354>
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <HAL_DMA_Start_IT+0x356>
 80041b0:	2300      	movs	r3, #0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d01a      	beq.n	80041ec <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d007      	beq.n	80041d4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041d2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d007      	beq.n	80041ec <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041ea:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a37      	ldr	r2, [pc, #220]	@ (80042d0 <HAL_DMA_Start_IT+0x474>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d04a      	beq.n	800428c <HAL_DMA_Start_IT+0x430>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a36      	ldr	r2, [pc, #216]	@ (80042d4 <HAL_DMA_Start_IT+0x478>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d045      	beq.n	800428c <HAL_DMA_Start_IT+0x430>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a34      	ldr	r2, [pc, #208]	@ (80042d8 <HAL_DMA_Start_IT+0x47c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d040      	beq.n	800428c <HAL_DMA_Start_IT+0x430>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a33      	ldr	r2, [pc, #204]	@ (80042dc <HAL_DMA_Start_IT+0x480>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d03b      	beq.n	800428c <HAL_DMA_Start_IT+0x430>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a31      	ldr	r2, [pc, #196]	@ (80042e0 <HAL_DMA_Start_IT+0x484>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d036      	beq.n	800428c <HAL_DMA_Start_IT+0x430>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a30      	ldr	r2, [pc, #192]	@ (80042e4 <HAL_DMA_Start_IT+0x488>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d031      	beq.n	800428c <HAL_DMA_Start_IT+0x430>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a2e      	ldr	r2, [pc, #184]	@ (80042e8 <HAL_DMA_Start_IT+0x48c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d02c      	beq.n	800428c <HAL_DMA_Start_IT+0x430>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a2d      	ldr	r2, [pc, #180]	@ (80042ec <HAL_DMA_Start_IT+0x490>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d027      	beq.n	800428c <HAL_DMA_Start_IT+0x430>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a2b      	ldr	r2, [pc, #172]	@ (80042f0 <HAL_DMA_Start_IT+0x494>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d022      	beq.n	800428c <HAL_DMA_Start_IT+0x430>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a2a      	ldr	r2, [pc, #168]	@ (80042f4 <HAL_DMA_Start_IT+0x498>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d01d      	beq.n	800428c <HAL_DMA_Start_IT+0x430>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a28      	ldr	r2, [pc, #160]	@ (80042f8 <HAL_DMA_Start_IT+0x49c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d018      	beq.n	800428c <HAL_DMA_Start_IT+0x430>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a27      	ldr	r2, [pc, #156]	@ (80042fc <HAL_DMA_Start_IT+0x4a0>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d013      	beq.n	800428c <HAL_DMA_Start_IT+0x430>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a25      	ldr	r2, [pc, #148]	@ (8004300 <HAL_DMA_Start_IT+0x4a4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d00e      	beq.n	800428c <HAL_DMA_Start_IT+0x430>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a24      	ldr	r2, [pc, #144]	@ (8004304 <HAL_DMA_Start_IT+0x4a8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d009      	beq.n	800428c <HAL_DMA_Start_IT+0x430>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a22      	ldr	r2, [pc, #136]	@ (8004308 <HAL_DMA_Start_IT+0x4ac>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d004      	beq.n	800428c <HAL_DMA_Start_IT+0x430>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a21      	ldr	r2, [pc, #132]	@ (800430c <HAL_DMA_Start_IT+0x4b0>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d108      	bne.n	800429e <HAL_DMA_Start_IT+0x442>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0201 	orr.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	e012      	b.n	80042c4 <HAL_DMA_Start_IT+0x468>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0201 	orr.w	r2, r2, #1
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	e009      	b.n	80042c4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80042c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40020010 	.word	0x40020010
 80042d4:	40020028 	.word	0x40020028
 80042d8:	40020040 	.word	0x40020040
 80042dc:	40020058 	.word	0x40020058
 80042e0:	40020070 	.word	0x40020070
 80042e4:	40020088 	.word	0x40020088
 80042e8:	400200a0 	.word	0x400200a0
 80042ec:	400200b8 	.word	0x400200b8
 80042f0:	40020410 	.word	0x40020410
 80042f4:	40020428 	.word	0x40020428
 80042f8:	40020440 	.word	0x40020440
 80042fc:	40020458 	.word	0x40020458
 8004300:	40020470 	.word	0x40020470
 8004304:	40020488 	.word	0x40020488
 8004308:	400204a0 	.word	0x400204a0
 800430c:	400204b8 	.word	0x400204b8
 8004310:	58025408 	.word	0x58025408
 8004314:	5802541c 	.word	0x5802541c
 8004318:	58025430 	.word	0x58025430
 800431c:	58025444 	.word	0x58025444
 8004320:	58025458 	.word	0x58025458
 8004324:	5802546c 	.word	0x5802546c
 8004328:	58025480 	.word	0x58025480
 800432c:	58025494 	.word	0x58025494

08004330 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08a      	sub	sp, #40	@ 0x28
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800433c:	4b67      	ldr	r3, [pc, #412]	@ (80044dc <HAL_DMA_IRQHandler+0x1ac>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a67      	ldr	r2, [pc, #412]	@ (80044e0 <HAL_DMA_IRQHandler+0x1b0>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	0a9b      	lsrs	r3, r3, #10
 8004348:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004354:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a5f      	ldr	r2, [pc, #380]	@ (80044e4 <HAL_DMA_IRQHandler+0x1b4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d04a      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a5d      	ldr	r2, [pc, #372]	@ (80044e8 <HAL_DMA_IRQHandler+0x1b8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d045      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a5c      	ldr	r2, [pc, #368]	@ (80044ec <HAL_DMA_IRQHandler+0x1bc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d040      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a5a      	ldr	r2, [pc, #360]	@ (80044f0 <HAL_DMA_IRQHandler+0x1c0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d03b      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a59      	ldr	r2, [pc, #356]	@ (80044f4 <HAL_DMA_IRQHandler+0x1c4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d036      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a57      	ldr	r2, [pc, #348]	@ (80044f8 <HAL_DMA_IRQHandler+0x1c8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d031      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a56      	ldr	r2, [pc, #344]	@ (80044fc <HAL_DMA_IRQHandler+0x1cc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d02c      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a54      	ldr	r2, [pc, #336]	@ (8004500 <HAL_DMA_IRQHandler+0x1d0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d027      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a53      	ldr	r2, [pc, #332]	@ (8004504 <HAL_DMA_IRQHandler+0x1d4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d022      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a51      	ldr	r2, [pc, #324]	@ (8004508 <HAL_DMA_IRQHandler+0x1d8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d01d      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a50      	ldr	r2, [pc, #320]	@ (800450c <HAL_DMA_IRQHandler+0x1dc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d018      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a4e      	ldr	r2, [pc, #312]	@ (8004510 <HAL_DMA_IRQHandler+0x1e0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d013      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a4d      	ldr	r2, [pc, #308]	@ (8004514 <HAL_DMA_IRQHandler+0x1e4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d00e      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a4b      	ldr	r2, [pc, #300]	@ (8004518 <HAL_DMA_IRQHandler+0x1e8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d009      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a4a      	ldr	r2, [pc, #296]	@ (800451c <HAL_DMA_IRQHandler+0x1ec>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d004      	beq.n	8004402 <HAL_DMA_IRQHandler+0xd2>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a48      	ldr	r2, [pc, #288]	@ (8004520 <HAL_DMA_IRQHandler+0x1f0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d101      	bne.n	8004406 <HAL_DMA_IRQHandler+0xd6>
 8004402:	2301      	movs	r3, #1
 8004404:	e000      	b.n	8004408 <HAL_DMA_IRQHandler+0xd8>
 8004406:	2300      	movs	r3, #0
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 842b 	beq.w	8004c64 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	2208      	movs	r2, #8
 8004418:	409a      	lsls	r2, r3
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	4013      	ands	r3, r2
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 80a2 	beq.w	8004568 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a2e      	ldr	r2, [pc, #184]	@ (80044e4 <HAL_DMA_IRQHandler+0x1b4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d04a      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a2d      	ldr	r2, [pc, #180]	@ (80044e8 <HAL_DMA_IRQHandler+0x1b8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d045      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a2b      	ldr	r2, [pc, #172]	@ (80044ec <HAL_DMA_IRQHandler+0x1bc>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d040      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a2a      	ldr	r2, [pc, #168]	@ (80044f0 <HAL_DMA_IRQHandler+0x1c0>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d03b      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a28      	ldr	r2, [pc, #160]	@ (80044f4 <HAL_DMA_IRQHandler+0x1c4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d036      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a27      	ldr	r2, [pc, #156]	@ (80044f8 <HAL_DMA_IRQHandler+0x1c8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d031      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a25      	ldr	r2, [pc, #148]	@ (80044fc <HAL_DMA_IRQHandler+0x1cc>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d02c      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a24      	ldr	r2, [pc, #144]	@ (8004500 <HAL_DMA_IRQHandler+0x1d0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d027      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a22      	ldr	r2, [pc, #136]	@ (8004504 <HAL_DMA_IRQHandler+0x1d4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d022      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a21      	ldr	r2, [pc, #132]	@ (8004508 <HAL_DMA_IRQHandler+0x1d8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d01d      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1f      	ldr	r2, [pc, #124]	@ (800450c <HAL_DMA_IRQHandler+0x1dc>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d018      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1e      	ldr	r2, [pc, #120]	@ (8004510 <HAL_DMA_IRQHandler+0x1e0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d013      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004514 <HAL_DMA_IRQHandler+0x1e4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00e      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004518 <HAL_DMA_IRQHandler+0x1e8>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d009      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a19      	ldr	r2, [pc, #100]	@ (800451c <HAL_DMA_IRQHandler+0x1ec>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x194>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a18      	ldr	r2, [pc, #96]	@ (8004520 <HAL_DMA_IRQHandler+0x1f0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d12f      	bne.n	8004524 <HAL_DMA_IRQHandler+0x1f4>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0304 	and.w	r3, r3, #4
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	bf14      	ite	ne
 80044d2:	2301      	movne	r3, #1
 80044d4:	2300      	moveq	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	e02e      	b.n	8004538 <HAL_DMA_IRQHandler+0x208>
 80044da:	bf00      	nop
 80044dc:	24000000 	.word	0x24000000
 80044e0:	1b4e81b5 	.word	0x1b4e81b5
 80044e4:	40020010 	.word	0x40020010
 80044e8:	40020028 	.word	0x40020028
 80044ec:	40020040 	.word	0x40020040
 80044f0:	40020058 	.word	0x40020058
 80044f4:	40020070 	.word	0x40020070
 80044f8:	40020088 	.word	0x40020088
 80044fc:	400200a0 	.word	0x400200a0
 8004500:	400200b8 	.word	0x400200b8
 8004504:	40020410 	.word	0x40020410
 8004508:	40020428 	.word	0x40020428
 800450c:	40020440 	.word	0x40020440
 8004510:	40020458 	.word	0x40020458
 8004514:	40020470 	.word	0x40020470
 8004518:	40020488 	.word	0x40020488
 800451c:	400204a0 	.word	0x400204a0
 8004520:	400204b8 	.word	0x400204b8
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	bf14      	ite	ne
 8004532:	2301      	movne	r3, #1
 8004534:	2300      	moveq	r3, #0
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d015      	beq.n	8004568 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0204 	bic.w	r2, r2, #4
 800454a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004550:	f003 031f 	and.w	r3, r3, #31
 8004554:	2208      	movs	r2, #8
 8004556:	409a      	lsls	r2, r3
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004560:	f043 0201 	orr.w	r2, r3, #1
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800456c:	f003 031f 	and.w	r3, r3, #31
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	fa22 f303 	lsr.w	r3, r2, r3
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d06e      	beq.n	800465c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a69      	ldr	r2, [pc, #420]	@ (8004728 <HAL_DMA_IRQHandler+0x3f8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d04a      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a67      	ldr	r2, [pc, #412]	@ (800472c <HAL_DMA_IRQHandler+0x3fc>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d045      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a66      	ldr	r2, [pc, #408]	@ (8004730 <HAL_DMA_IRQHandler+0x400>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d040      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a64      	ldr	r2, [pc, #400]	@ (8004734 <HAL_DMA_IRQHandler+0x404>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d03b      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a63      	ldr	r2, [pc, #396]	@ (8004738 <HAL_DMA_IRQHandler+0x408>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d036      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a61      	ldr	r2, [pc, #388]	@ (800473c <HAL_DMA_IRQHandler+0x40c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d031      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a60      	ldr	r2, [pc, #384]	@ (8004740 <HAL_DMA_IRQHandler+0x410>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d02c      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a5e      	ldr	r2, [pc, #376]	@ (8004744 <HAL_DMA_IRQHandler+0x414>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d027      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a5d      	ldr	r2, [pc, #372]	@ (8004748 <HAL_DMA_IRQHandler+0x418>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d022      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a5b      	ldr	r2, [pc, #364]	@ (800474c <HAL_DMA_IRQHandler+0x41c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d01d      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a5a      	ldr	r2, [pc, #360]	@ (8004750 <HAL_DMA_IRQHandler+0x420>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d018      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a58      	ldr	r2, [pc, #352]	@ (8004754 <HAL_DMA_IRQHandler+0x424>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d013      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a57      	ldr	r2, [pc, #348]	@ (8004758 <HAL_DMA_IRQHandler+0x428>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00e      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a55      	ldr	r2, [pc, #340]	@ (800475c <HAL_DMA_IRQHandler+0x42c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d009      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a54      	ldr	r2, [pc, #336]	@ (8004760 <HAL_DMA_IRQHandler+0x430>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d004      	beq.n	800461e <HAL_DMA_IRQHandler+0x2ee>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a52      	ldr	r2, [pc, #328]	@ (8004764 <HAL_DMA_IRQHandler+0x434>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d10a      	bne.n	8004634 <HAL_DMA_IRQHandler+0x304>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004628:	2b00      	cmp	r3, #0
 800462a:	bf14      	ite	ne
 800462c:	2301      	movne	r3, #1
 800462e:	2300      	moveq	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	e003      	b.n	800463c <HAL_DMA_IRQHandler+0x30c>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2300      	movs	r3, #0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00d      	beq.n	800465c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004644:	f003 031f 	and.w	r3, r3, #31
 8004648:	2201      	movs	r2, #1
 800464a:	409a      	lsls	r2, r3
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004654:	f043 0202 	orr.w	r2, r3, #2
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004660:	f003 031f 	and.w	r3, r3, #31
 8004664:	2204      	movs	r2, #4
 8004666:	409a      	lsls	r2, r3
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	4013      	ands	r3, r2
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 808f 	beq.w	8004790 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a2c      	ldr	r2, [pc, #176]	@ (8004728 <HAL_DMA_IRQHandler+0x3f8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d04a      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a2a      	ldr	r2, [pc, #168]	@ (800472c <HAL_DMA_IRQHandler+0x3fc>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d045      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a29      	ldr	r2, [pc, #164]	@ (8004730 <HAL_DMA_IRQHandler+0x400>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d040      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a27      	ldr	r2, [pc, #156]	@ (8004734 <HAL_DMA_IRQHandler+0x404>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d03b      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a26      	ldr	r2, [pc, #152]	@ (8004738 <HAL_DMA_IRQHandler+0x408>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d036      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a24      	ldr	r2, [pc, #144]	@ (800473c <HAL_DMA_IRQHandler+0x40c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d031      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a23      	ldr	r2, [pc, #140]	@ (8004740 <HAL_DMA_IRQHandler+0x410>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d02c      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a21      	ldr	r2, [pc, #132]	@ (8004744 <HAL_DMA_IRQHandler+0x414>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d027      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a20      	ldr	r2, [pc, #128]	@ (8004748 <HAL_DMA_IRQHandler+0x418>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d022      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a1e      	ldr	r2, [pc, #120]	@ (800474c <HAL_DMA_IRQHandler+0x41c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d01d      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a1d      	ldr	r2, [pc, #116]	@ (8004750 <HAL_DMA_IRQHandler+0x420>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d018      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004754 <HAL_DMA_IRQHandler+0x424>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d013      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004758 <HAL_DMA_IRQHandler+0x428>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00e      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a18      	ldr	r2, [pc, #96]	@ (800475c <HAL_DMA_IRQHandler+0x42c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d009      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a17      	ldr	r2, [pc, #92]	@ (8004760 <HAL_DMA_IRQHandler+0x430>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d004      	beq.n	8004712 <HAL_DMA_IRQHandler+0x3e2>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a15      	ldr	r2, [pc, #84]	@ (8004764 <HAL_DMA_IRQHandler+0x434>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d12a      	bne.n	8004768 <HAL_DMA_IRQHandler+0x438>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	bf14      	ite	ne
 8004720:	2301      	movne	r3, #1
 8004722:	2300      	moveq	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	e023      	b.n	8004770 <HAL_DMA_IRQHandler+0x440>
 8004728:	40020010 	.word	0x40020010
 800472c:	40020028 	.word	0x40020028
 8004730:	40020040 	.word	0x40020040
 8004734:	40020058 	.word	0x40020058
 8004738:	40020070 	.word	0x40020070
 800473c:	40020088 	.word	0x40020088
 8004740:	400200a0 	.word	0x400200a0
 8004744:	400200b8 	.word	0x400200b8
 8004748:	40020410 	.word	0x40020410
 800474c:	40020428 	.word	0x40020428
 8004750:	40020440 	.word	0x40020440
 8004754:	40020458 	.word	0x40020458
 8004758:	40020470 	.word	0x40020470
 800475c:	40020488 	.word	0x40020488
 8004760:	400204a0 	.word	0x400204a0
 8004764:	400204b8 	.word	0x400204b8
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2300      	movs	r3, #0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00d      	beq.n	8004790 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004778:	f003 031f 	and.w	r3, r3, #31
 800477c:	2204      	movs	r2, #4
 800477e:	409a      	lsls	r2, r3
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004788:	f043 0204 	orr.w	r2, r3, #4
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	2210      	movs	r2, #16
 800479a:	409a      	lsls	r2, r3
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	4013      	ands	r3, r2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 80a6 	beq.w	80048f2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a85      	ldr	r2, [pc, #532]	@ (80049c0 <HAL_DMA_IRQHandler+0x690>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d04a      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a83      	ldr	r2, [pc, #524]	@ (80049c4 <HAL_DMA_IRQHandler+0x694>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d045      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a82      	ldr	r2, [pc, #520]	@ (80049c8 <HAL_DMA_IRQHandler+0x698>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d040      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a80      	ldr	r2, [pc, #512]	@ (80049cc <HAL_DMA_IRQHandler+0x69c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d03b      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a7f      	ldr	r2, [pc, #508]	@ (80049d0 <HAL_DMA_IRQHandler+0x6a0>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d036      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a7d      	ldr	r2, [pc, #500]	@ (80049d4 <HAL_DMA_IRQHandler+0x6a4>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d031      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a7c      	ldr	r2, [pc, #496]	@ (80049d8 <HAL_DMA_IRQHandler+0x6a8>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d02c      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a7a      	ldr	r2, [pc, #488]	@ (80049dc <HAL_DMA_IRQHandler+0x6ac>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d027      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a79      	ldr	r2, [pc, #484]	@ (80049e0 <HAL_DMA_IRQHandler+0x6b0>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d022      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a77      	ldr	r2, [pc, #476]	@ (80049e4 <HAL_DMA_IRQHandler+0x6b4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d01d      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a76      	ldr	r2, [pc, #472]	@ (80049e8 <HAL_DMA_IRQHandler+0x6b8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d018      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a74      	ldr	r2, [pc, #464]	@ (80049ec <HAL_DMA_IRQHandler+0x6bc>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d013      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a73      	ldr	r2, [pc, #460]	@ (80049f0 <HAL_DMA_IRQHandler+0x6c0>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00e      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a71      	ldr	r2, [pc, #452]	@ (80049f4 <HAL_DMA_IRQHandler+0x6c4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d009      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a70      	ldr	r2, [pc, #448]	@ (80049f8 <HAL_DMA_IRQHandler+0x6c8>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d004      	beq.n	8004846 <HAL_DMA_IRQHandler+0x516>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a6e      	ldr	r2, [pc, #440]	@ (80049fc <HAL_DMA_IRQHandler+0x6cc>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d10a      	bne.n	800485c <HAL_DMA_IRQHandler+0x52c>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0308 	and.w	r3, r3, #8
 8004850:	2b00      	cmp	r3, #0
 8004852:	bf14      	ite	ne
 8004854:	2301      	movne	r3, #1
 8004856:	2300      	moveq	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	e009      	b.n	8004870 <HAL_DMA_IRQHandler+0x540>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b00      	cmp	r3, #0
 8004868:	bf14      	ite	ne
 800486a:	2301      	movne	r3, #1
 800486c:	2300      	moveq	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d03e      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004878:	f003 031f 	and.w	r3, r3, #31
 800487c:	2210      	movs	r2, #16
 800487e:	409a      	lsls	r2, r3
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d018      	beq.n	80048c4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d108      	bne.n	80048b2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d024      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	4798      	blx	r3
 80048b0:	e01f      	b.n	80048f2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d01b      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	4798      	blx	r3
 80048c2:	e016      	b.n	80048f2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d107      	bne.n	80048e2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 0208 	bic.w	r2, r2, #8
 80048e0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f6:	f003 031f 	and.w	r3, r3, #31
 80048fa:	2220      	movs	r2, #32
 80048fc:	409a      	lsls	r2, r3
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	4013      	ands	r3, r2
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 8110 	beq.w	8004b28 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a2c      	ldr	r2, [pc, #176]	@ (80049c0 <HAL_DMA_IRQHandler+0x690>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d04a      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a2b      	ldr	r2, [pc, #172]	@ (80049c4 <HAL_DMA_IRQHandler+0x694>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d045      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a29      	ldr	r2, [pc, #164]	@ (80049c8 <HAL_DMA_IRQHandler+0x698>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d040      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a28      	ldr	r2, [pc, #160]	@ (80049cc <HAL_DMA_IRQHandler+0x69c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d03b      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a26      	ldr	r2, [pc, #152]	@ (80049d0 <HAL_DMA_IRQHandler+0x6a0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d036      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a25      	ldr	r2, [pc, #148]	@ (80049d4 <HAL_DMA_IRQHandler+0x6a4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d031      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a23      	ldr	r2, [pc, #140]	@ (80049d8 <HAL_DMA_IRQHandler+0x6a8>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d02c      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a22      	ldr	r2, [pc, #136]	@ (80049dc <HAL_DMA_IRQHandler+0x6ac>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d027      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a20      	ldr	r2, [pc, #128]	@ (80049e0 <HAL_DMA_IRQHandler+0x6b0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d022      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1f      	ldr	r2, [pc, #124]	@ (80049e4 <HAL_DMA_IRQHandler+0x6b4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d01d      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a1d      	ldr	r2, [pc, #116]	@ (80049e8 <HAL_DMA_IRQHandler+0x6b8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d018      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1c      	ldr	r2, [pc, #112]	@ (80049ec <HAL_DMA_IRQHandler+0x6bc>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d013      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a1a      	ldr	r2, [pc, #104]	@ (80049f0 <HAL_DMA_IRQHandler+0x6c0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d00e      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a19      	ldr	r2, [pc, #100]	@ (80049f4 <HAL_DMA_IRQHandler+0x6c4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d009      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a17      	ldr	r2, [pc, #92]	@ (80049f8 <HAL_DMA_IRQHandler+0x6c8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d004      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x678>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a16      	ldr	r2, [pc, #88]	@ (80049fc <HAL_DMA_IRQHandler+0x6cc>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d12b      	bne.n	8004a00 <HAL_DMA_IRQHandler+0x6d0>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	bf14      	ite	ne
 80049b6:	2301      	movne	r3, #1
 80049b8:	2300      	moveq	r3, #0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	e02a      	b.n	8004a14 <HAL_DMA_IRQHandler+0x6e4>
 80049be:	bf00      	nop
 80049c0:	40020010 	.word	0x40020010
 80049c4:	40020028 	.word	0x40020028
 80049c8:	40020040 	.word	0x40020040
 80049cc:	40020058 	.word	0x40020058
 80049d0:	40020070 	.word	0x40020070
 80049d4:	40020088 	.word	0x40020088
 80049d8:	400200a0 	.word	0x400200a0
 80049dc:	400200b8 	.word	0x400200b8
 80049e0:	40020410 	.word	0x40020410
 80049e4:	40020428 	.word	0x40020428
 80049e8:	40020440 	.word	0x40020440
 80049ec:	40020458 	.word	0x40020458
 80049f0:	40020470 	.word	0x40020470
 80049f4:	40020488 	.word	0x40020488
 80049f8:	400204a0 	.word	0x400204a0
 80049fc:	400204b8 	.word	0x400204b8
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	bf14      	ite	ne
 8004a0e:	2301      	movne	r3, #1
 8004a10:	2300      	moveq	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 8087 	beq.w	8004b28 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a1e:	f003 031f 	and.w	r3, r3, #31
 8004a22:	2220      	movs	r2, #32
 8004a24:	409a      	lsls	r2, r3
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d139      	bne.n	8004aaa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0216 	bic.w	r2, r2, #22
 8004a44:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	695a      	ldr	r2, [r3, #20]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a54:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d103      	bne.n	8004a66 <HAL_DMA_IRQHandler+0x736>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d007      	beq.n	8004a76 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0208 	bic.w	r2, r2, #8
 8004a74:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a7a:	f003 031f 	and.w	r3, r3, #31
 8004a7e:	223f      	movs	r2, #63	@ 0x3f
 8004a80:	409a      	lsls	r2, r3
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 834a 	beq.w	8005134 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	4798      	blx	r3
          }
          return;
 8004aa8:	e344      	b.n	8005134 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d018      	beq.n	8004aea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d108      	bne.n	8004ad8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d02c      	beq.n	8004b28 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	4798      	blx	r3
 8004ad6:	e027      	b.n	8004b28 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d023      	beq.n	8004b28 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	4798      	blx	r3
 8004ae8:	e01e      	b.n	8004b28 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10f      	bne.n	8004b18 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0210 	bic.w	r2, r2, #16
 8004b06:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8306 	beq.w	800513e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 8088 	beq.w	8004c50 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2204      	movs	r2, #4
 8004b44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a7a      	ldr	r2, [pc, #488]	@ (8004d38 <HAL_DMA_IRQHandler+0xa08>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d04a      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a79      	ldr	r2, [pc, #484]	@ (8004d3c <HAL_DMA_IRQHandler+0xa0c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d045      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a77      	ldr	r2, [pc, #476]	@ (8004d40 <HAL_DMA_IRQHandler+0xa10>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d040      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a76      	ldr	r2, [pc, #472]	@ (8004d44 <HAL_DMA_IRQHandler+0xa14>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d03b      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a74      	ldr	r2, [pc, #464]	@ (8004d48 <HAL_DMA_IRQHandler+0xa18>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d036      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a73      	ldr	r2, [pc, #460]	@ (8004d4c <HAL_DMA_IRQHandler+0xa1c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d031      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a71      	ldr	r2, [pc, #452]	@ (8004d50 <HAL_DMA_IRQHandler+0xa20>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d02c      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a70      	ldr	r2, [pc, #448]	@ (8004d54 <HAL_DMA_IRQHandler+0xa24>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d027      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a6e      	ldr	r2, [pc, #440]	@ (8004d58 <HAL_DMA_IRQHandler+0xa28>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d022      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a6d      	ldr	r2, [pc, #436]	@ (8004d5c <HAL_DMA_IRQHandler+0xa2c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d01d      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a6b      	ldr	r2, [pc, #428]	@ (8004d60 <HAL_DMA_IRQHandler+0xa30>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d018      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a6a      	ldr	r2, [pc, #424]	@ (8004d64 <HAL_DMA_IRQHandler+0xa34>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d013      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a68      	ldr	r2, [pc, #416]	@ (8004d68 <HAL_DMA_IRQHandler+0xa38>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d00e      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a67      	ldr	r2, [pc, #412]	@ (8004d6c <HAL_DMA_IRQHandler+0xa3c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d009      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a65      	ldr	r2, [pc, #404]	@ (8004d70 <HAL_DMA_IRQHandler+0xa40>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d004      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x8b8>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a64      	ldr	r2, [pc, #400]	@ (8004d74 <HAL_DMA_IRQHandler+0xa44>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d108      	bne.n	8004bfa <HAL_DMA_IRQHandler+0x8ca>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0201 	bic.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	e007      	b.n	8004c0a <HAL_DMA_IRQHandler+0x8da>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0201 	bic.w	r2, r2, #1
 8004c08:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d307      	bcc.n	8004c26 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1f2      	bne.n	8004c0a <HAL_DMA_IRQHandler+0x8da>
 8004c24:	e000      	b.n	8004c28 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004c26:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d004      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2203      	movs	r2, #3
 8004c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004c3e:	e003      	b.n	8004c48 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 8272 	beq.w	800513e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	4798      	blx	r3
 8004c62:	e26c      	b.n	800513e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a43      	ldr	r2, [pc, #268]	@ (8004d78 <HAL_DMA_IRQHandler+0xa48>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d022      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x984>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a42      	ldr	r2, [pc, #264]	@ (8004d7c <HAL_DMA_IRQHandler+0xa4c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d01d      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x984>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a40      	ldr	r2, [pc, #256]	@ (8004d80 <HAL_DMA_IRQHandler+0xa50>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d018      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x984>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a3f      	ldr	r2, [pc, #252]	@ (8004d84 <HAL_DMA_IRQHandler+0xa54>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d013      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x984>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a3d      	ldr	r2, [pc, #244]	@ (8004d88 <HAL_DMA_IRQHandler+0xa58>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00e      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x984>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a3c      	ldr	r2, [pc, #240]	@ (8004d8c <HAL_DMA_IRQHandler+0xa5c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d009      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x984>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a3a      	ldr	r2, [pc, #232]	@ (8004d90 <HAL_DMA_IRQHandler+0xa60>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d004      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x984>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a39      	ldr	r2, [pc, #228]	@ (8004d94 <HAL_DMA_IRQHandler+0xa64>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d101      	bne.n	8004cb8 <HAL_DMA_IRQHandler+0x988>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <HAL_DMA_IRQHandler+0x98a>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 823f 	beq.w	800513e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ccc:	f003 031f 	and.w	r3, r3, #31
 8004cd0:	2204      	movs	r2, #4
 8004cd2:	409a      	lsls	r2, r3
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 80cd 	beq.w	8004e78 <HAL_DMA_IRQHandler+0xb48>
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 80c7 	beq.w	8004e78 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cee:	f003 031f 	and.w	r3, r3, #31
 8004cf2:	2204      	movs	r2, #4
 8004cf4:	409a      	lsls	r2, r3
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d049      	beq.n	8004d98 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d109      	bne.n	8004d22 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 8210 	beq.w	8005138 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d20:	e20a      	b.n	8005138 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 8206 	beq.w	8005138 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d34:	e200      	b.n	8005138 <HAL_DMA_IRQHandler+0xe08>
 8004d36:	bf00      	nop
 8004d38:	40020010 	.word	0x40020010
 8004d3c:	40020028 	.word	0x40020028
 8004d40:	40020040 	.word	0x40020040
 8004d44:	40020058 	.word	0x40020058
 8004d48:	40020070 	.word	0x40020070
 8004d4c:	40020088 	.word	0x40020088
 8004d50:	400200a0 	.word	0x400200a0
 8004d54:	400200b8 	.word	0x400200b8
 8004d58:	40020410 	.word	0x40020410
 8004d5c:	40020428 	.word	0x40020428
 8004d60:	40020440 	.word	0x40020440
 8004d64:	40020458 	.word	0x40020458
 8004d68:	40020470 	.word	0x40020470
 8004d6c:	40020488 	.word	0x40020488
 8004d70:	400204a0 	.word	0x400204a0
 8004d74:	400204b8 	.word	0x400204b8
 8004d78:	58025408 	.word	0x58025408
 8004d7c:	5802541c 	.word	0x5802541c
 8004d80:	58025430 	.word	0x58025430
 8004d84:	58025444 	.word	0x58025444
 8004d88:	58025458 	.word	0x58025458
 8004d8c:	5802546c 	.word	0x5802546c
 8004d90:	58025480 	.word	0x58025480
 8004d94:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d160      	bne.n	8004e64 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a7f      	ldr	r2, [pc, #508]	@ (8004fa4 <HAL_DMA_IRQHandler+0xc74>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d04a      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a7d      	ldr	r2, [pc, #500]	@ (8004fa8 <HAL_DMA_IRQHandler+0xc78>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d045      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a7c      	ldr	r2, [pc, #496]	@ (8004fac <HAL_DMA_IRQHandler+0xc7c>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d040      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a7a      	ldr	r2, [pc, #488]	@ (8004fb0 <HAL_DMA_IRQHandler+0xc80>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d03b      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a79      	ldr	r2, [pc, #484]	@ (8004fb4 <HAL_DMA_IRQHandler+0xc84>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d036      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a77      	ldr	r2, [pc, #476]	@ (8004fb8 <HAL_DMA_IRQHandler+0xc88>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d031      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a76      	ldr	r2, [pc, #472]	@ (8004fbc <HAL_DMA_IRQHandler+0xc8c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d02c      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a74      	ldr	r2, [pc, #464]	@ (8004fc0 <HAL_DMA_IRQHandler+0xc90>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d027      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a73      	ldr	r2, [pc, #460]	@ (8004fc4 <HAL_DMA_IRQHandler+0xc94>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d022      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a71      	ldr	r2, [pc, #452]	@ (8004fc8 <HAL_DMA_IRQHandler+0xc98>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d01d      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a70      	ldr	r2, [pc, #448]	@ (8004fcc <HAL_DMA_IRQHandler+0xc9c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d018      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a6e      	ldr	r2, [pc, #440]	@ (8004fd0 <HAL_DMA_IRQHandler+0xca0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d013      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a6d      	ldr	r2, [pc, #436]	@ (8004fd4 <HAL_DMA_IRQHandler+0xca4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00e      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a6b      	ldr	r2, [pc, #428]	@ (8004fd8 <HAL_DMA_IRQHandler+0xca8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d009      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a6a      	ldr	r2, [pc, #424]	@ (8004fdc <HAL_DMA_IRQHandler+0xcac>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d004      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xb12>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a68      	ldr	r2, [pc, #416]	@ (8004fe0 <HAL_DMA_IRQHandler+0xcb0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d108      	bne.n	8004e54 <HAL_DMA_IRQHandler+0xb24>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0208 	bic.w	r2, r2, #8
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	e007      	b.n	8004e64 <HAL_DMA_IRQHandler+0xb34>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0204 	bic.w	r2, r2, #4
 8004e62:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 8165 	beq.w	8005138 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e76:	e15f      	b.n	8005138 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e7c:	f003 031f 	and.w	r3, r3, #31
 8004e80:	2202      	movs	r2, #2
 8004e82:	409a      	lsls	r2, r3
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	4013      	ands	r3, r2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 80c5 	beq.w	8005018 <HAL_DMA_IRQHandler+0xce8>
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 80bf 	beq.w	8005018 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e9e:	f003 031f 	and.w	r3, r3, #31
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	409a      	lsls	r2, r3
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d018      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d109      	bne.n	8004ed2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f000 813a 	beq.w	800513c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ed0:	e134      	b.n	800513c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 8130 	beq.w	800513c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ee4:	e12a      	b.n	800513c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f003 0320 	and.w	r3, r3, #32
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f040 8089 	bne.w	8005004 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a2b      	ldr	r2, [pc, #172]	@ (8004fa4 <HAL_DMA_IRQHandler+0xc74>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d04a      	beq.n	8004f92 <HAL_DMA_IRQHandler+0xc62>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a29      	ldr	r2, [pc, #164]	@ (8004fa8 <HAL_DMA_IRQHandler+0xc78>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d045      	beq.n	8004f92 <HAL_DMA_IRQHandler+0xc62>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a28      	ldr	r2, [pc, #160]	@ (8004fac <HAL_DMA_IRQHandler+0xc7c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d040      	beq.n	8004f92 <HAL_DMA_IRQHandler+0xc62>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a26      	ldr	r2, [pc, #152]	@ (8004fb0 <HAL_DMA_IRQHandler+0xc80>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d03b      	beq.n	8004f92 <HAL_DMA_IRQHandler+0xc62>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a25      	ldr	r2, [pc, #148]	@ (8004fb4 <HAL_DMA_IRQHandler+0xc84>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d036      	beq.n	8004f92 <HAL_DMA_IRQHandler+0xc62>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a23      	ldr	r2, [pc, #140]	@ (8004fb8 <HAL_DMA_IRQHandler+0xc88>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d031      	beq.n	8004f92 <HAL_DMA_IRQHandler+0xc62>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a22      	ldr	r2, [pc, #136]	@ (8004fbc <HAL_DMA_IRQHandler+0xc8c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d02c      	beq.n	8004f92 <HAL_DMA_IRQHandler+0xc62>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a20      	ldr	r2, [pc, #128]	@ (8004fc0 <HAL_DMA_IRQHandler+0xc90>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d027      	beq.n	8004f92 <HAL_DMA_IRQHandler+0xc62>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a1f      	ldr	r2, [pc, #124]	@ (8004fc4 <HAL_DMA_IRQHandler+0xc94>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d022      	beq.n	8004f92 <HAL_DMA_IRQHandler+0xc62>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a1d      	ldr	r2, [pc, #116]	@ (8004fc8 <HAL_DMA_IRQHandler+0xc98>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d01d      	beq.n	8004f92 <HAL_DMA_IRQHandler+0xc62>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8004fcc <HAL_DMA_IRQHandler+0xc9c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d018      	beq.n	8004f92 <HAL_DMA_IRQHandler+0xc62>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a1a      	ldr	r2, [pc, #104]	@ (8004fd0 <HAL_DMA_IRQHandler+0xca0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d013      	beq.n	8004f92 <HAL_DMA_IRQHandler+0xc62>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a19      	ldr	r2, [pc, #100]	@ (8004fd4 <HAL_DMA_IRQHandler+0xca4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00e      	beq.n	8004f92 <HAL_DMA_IRQHandler+0xc62>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a17      	ldr	r2, [pc, #92]	@ (8004fd8 <HAL_DMA_IRQHandler+0xca8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d009      	beq.n	8004f92 <HAL_DMA_IRQHandler+0xc62>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a16      	ldr	r2, [pc, #88]	@ (8004fdc <HAL_DMA_IRQHandler+0xcac>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d004      	beq.n	8004f92 <HAL_DMA_IRQHandler+0xc62>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a14      	ldr	r2, [pc, #80]	@ (8004fe0 <HAL_DMA_IRQHandler+0xcb0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d128      	bne.n	8004fe4 <HAL_DMA_IRQHandler+0xcb4>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 0214 	bic.w	r2, r2, #20
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	e027      	b.n	8004ff4 <HAL_DMA_IRQHandler+0xcc4>
 8004fa4:	40020010 	.word	0x40020010
 8004fa8:	40020028 	.word	0x40020028
 8004fac:	40020040 	.word	0x40020040
 8004fb0:	40020058 	.word	0x40020058
 8004fb4:	40020070 	.word	0x40020070
 8004fb8:	40020088 	.word	0x40020088
 8004fbc:	400200a0 	.word	0x400200a0
 8004fc0:	400200b8 	.word	0x400200b8
 8004fc4:	40020410 	.word	0x40020410
 8004fc8:	40020428 	.word	0x40020428
 8004fcc:	40020440 	.word	0x40020440
 8004fd0:	40020458 	.word	0x40020458
 8004fd4:	40020470 	.word	0x40020470
 8004fd8:	40020488 	.word	0x40020488
 8004fdc:	400204a0 	.word	0x400204a0
 8004fe0:	400204b8 	.word	0x400204b8
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 020a 	bic.w	r2, r2, #10
 8004ff2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 8097 	beq.w	800513c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005016:	e091      	b.n	800513c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800501c:	f003 031f 	and.w	r3, r3, #31
 8005020:	2208      	movs	r2, #8
 8005022:	409a      	lsls	r2, r3
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	4013      	ands	r3, r2
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 8088 	beq.w	800513e <HAL_DMA_IRQHandler+0xe0e>
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 8082 	beq.w	800513e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a41      	ldr	r2, [pc, #260]	@ (8005144 <HAL_DMA_IRQHandler+0xe14>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d04a      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a3f      	ldr	r2, [pc, #252]	@ (8005148 <HAL_DMA_IRQHandler+0xe18>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d045      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a3e      	ldr	r2, [pc, #248]	@ (800514c <HAL_DMA_IRQHandler+0xe1c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d040      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a3c      	ldr	r2, [pc, #240]	@ (8005150 <HAL_DMA_IRQHandler+0xe20>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d03b      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a3b      	ldr	r2, [pc, #236]	@ (8005154 <HAL_DMA_IRQHandler+0xe24>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d036      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a39      	ldr	r2, [pc, #228]	@ (8005158 <HAL_DMA_IRQHandler+0xe28>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d031      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a38      	ldr	r2, [pc, #224]	@ (800515c <HAL_DMA_IRQHandler+0xe2c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d02c      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a36      	ldr	r2, [pc, #216]	@ (8005160 <HAL_DMA_IRQHandler+0xe30>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d027      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a35      	ldr	r2, [pc, #212]	@ (8005164 <HAL_DMA_IRQHandler+0xe34>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d022      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a33      	ldr	r2, [pc, #204]	@ (8005168 <HAL_DMA_IRQHandler+0xe38>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d01d      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a32      	ldr	r2, [pc, #200]	@ (800516c <HAL_DMA_IRQHandler+0xe3c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d018      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a30      	ldr	r2, [pc, #192]	@ (8005170 <HAL_DMA_IRQHandler+0xe40>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d013      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a2f      	ldr	r2, [pc, #188]	@ (8005174 <HAL_DMA_IRQHandler+0xe44>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00e      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005178 <HAL_DMA_IRQHandler+0xe48>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d009      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a2c      	ldr	r2, [pc, #176]	@ (800517c <HAL_DMA_IRQHandler+0xe4c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d004      	beq.n	80050da <HAL_DMA_IRQHandler+0xdaa>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a2a      	ldr	r2, [pc, #168]	@ (8005180 <HAL_DMA_IRQHandler+0xe50>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d108      	bne.n	80050ec <HAL_DMA_IRQHandler+0xdbc>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 021c 	bic.w	r2, r2, #28
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	e007      	b.n	80050fc <HAL_DMA_IRQHandler+0xdcc>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 020e 	bic.w	r2, r2, #14
 80050fa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005100:	f003 031f 	and.w	r3, r3, #31
 8005104:	2201      	movs	r2, #1
 8005106:	409a      	lsls	r2, r3
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005126:	2b00      	cmp	r3, #0
 8005128:	d009      	beq.n	800513e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	4798      	blx	r3
 8005132:	e004      	b.n	800513e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005134:	bf00      	nop
 8005136:	e002      	b.n	800513e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005138:	bf00      	nop
 800513a:	e000      	b.n	800513e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800513c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800513e:	3728      	adds	r7, #40	@ 0x28
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40020010 	.word	0x40020010
 8005148:	40020028 	.word	0x40020028
 800514c:	40020040 	.word	0x40020040
 8005150:	40020058 	.word	0x40020058
 8005154:	40020070 	.word	0x40020070
 8005158:	40020088 	.word	0x40020088
 800515c:	400200a0 	.word	0x400200a0
 8005160:	400200b8 	.word	0x400200b8
 8005164:	40020410 	.word	0x40020410
 8005168:	40020428 	.word	0x40020428
 800516c:	40020440 	.word	0x40020440
 8005170:	40020458 	.word	0x40020458
 8005174:	40020470 	.word	0x40020470
 8005178:	40020488 	.word	0x40020488
 800517c:	400204a0 	.word	0x400204a0
 8005180:	400204b8 	.word	0x400204b8

08005184 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005196:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800519c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a7f      	ldr	r2, [pc, #508]	@ (80053a0 <DMA_SetConfig+0x21c>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d072      	beq.n	800528e <DMA_SetConfig+0x10a>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a7d      	ldr	r2, [pc, #500]	@ (80053a4 <DMA_SetConfig+0x220>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d06d      	beq.n	800528e <DMA_SetConfig+0x10a>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a7c      	ldr	r2, [pc, #496]	@ (80053a8 <DMA_SetConfig+0x224>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d068      	beq.n	800528e <DMA_SetConfig+0x10a>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a7a      	ldr	r2, [pc, #488]	@ (80053ac <DMA_SetConfig+0x228>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d063      	beq.n	800528e <DMA_SetConfig+0x10a>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a79      	ldr	r2, [pc, #484]	@ (80053b0 <DMA_SetConfig+0x22c>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d05e      	beq.n	800528e <DMA_SetConfig+0x10a>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a77      	ldr	r2, [pc, #476]	@ (80053b4 <DMA_SetConfig+0x230>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d059      	beq.n	800528e <DMA_SetConfig+0x10a>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a76      	ldr	r2, [pc, #472]	@ (80053b8 <DMA_SetConfig+0x234>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d054      	beq.n	800528e <DMA_SetConfig+0x10a>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a74      	ldr	r2, [pc, #464]	@ (80053bc <DMA_SetConfig+0x238>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d04f      	beq.n	800528e <DMA_SetConfig+0x10a>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a73      	ldr	r2, [pc, #460]	@ (80053c0 <DMA_SetConfig+0x23c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d04a      	beq.n	800528e <DMA_SetConfig+0x10a>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a71      	ldr	r2, [pc, #452]	@ (80053c4 <DMA_SetConfig+0x240>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d045      	beq.n	800528e <DMA_SetConfig+0x10a>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a70      	ldr	r2, [pc, #448]	@ (80053c8 <DMA_SetConfig+0x244>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d040      	beq.n	800528e <DMA_SetConfig+0x10a>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a6e      	ldr	r2, [pc, #440]	@ (80053cc <DMA_SetConfig+0x248>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d03b      	beq.n	800528e <DMA_SetConfig+0x10a>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a6d      	ldr	r2, [pc, #436]	@ (80053d0 <DMA_SetConfig+0x24c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d036      	beq.n	800528e <DMA_SetConfig+0x10a>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a6b      	ldr	r2, [pc, #428]	@ (80053d4 <DMA_SetConfig+0x250>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d031      	beq.n	800528e <DMA_SetConfig+0x10a>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a6a      	ldr	r2, [pc, #424]	@ (80053d8 <DMA_SetConfig+0x254>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d02c      	beq.n	800528e <DMA_SetConfig+0x10a>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a68      	ldr	r2, [pc, #416]	@ (80053dc <DMA_SetConfig+0x258>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d027      	beq.n	800528e <DMA_SetConfig+0x10a>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a67      	ldr	r2, [pc, #412]	@ (80053e0 <DMA_SetConfig+0x25c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d022      	beq.n	800528e <DMA_SetConfig+0x10a>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a65      	ldr	r2, [pc, #404]	@ (80053e4 <DMA_SetConfig+0x260>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d01d      	beq.n	800528e <DMA_SetConfig+0x10a>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a64      	ldr	r2, [pc, #400]	@ (80053e8 <DMA_SetConfig+0x264>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d018      	beq.n	800528e <DMA_SetConfig+0x10a>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a62      	ldr	r2, [pc, #392]	@ (80053ec <DMA_SetConfig+0x268>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d013      	beq.n	800528e <DMA_SetConfig+0x10a>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a61      	ldr	r2, [pc, #388]	@ (80053f0 <DMA_SetConfig+0x26c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d00e      	beq.n	800528e <DMA_SetConfig+0x10a>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a5f      	ldr	r2, [pc, #380]	@ (80053f4 <DMA_SetConfig+0x270>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d009      	beq.n	800528e <DMA_SetConfig+0x10a>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a5e      	ldr	r2, [pc, #376]	@ (80053f8 <DMA_SetConfig+0x274>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d004      	beq.n	800528e <DMA_SetConfig+0x10a>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a5c      	ldr	r2, [pc, #368]	@ (80053fc <DMA_SetConfig+0x278>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d101      	bne.n	8005292 <DMA_SetConfig+0x10e>
 800528e:	2301      	movs	r3, #1
 8005290:	e000      	b.n	8005294 <DMA_SetConfig+0x110>
 8005292:	2300      	movs	r3, #0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00d      	beq.n	80052b4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80052a0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d004      	beq.n	80052b4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80052b2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a39      	ldr	r2, [pc, #228]	@ (80053a0 <DMA_SetConfig+0x21c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d04a      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a38      	ldr	r2, [pc, #224]	@ (80053a4 <DMA_SetConfig+0x220>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d045      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a36      	ldr	r2, [pc, #216]	@ (80053a8 <DMA_SetConfig+0x224>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d040      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a35      	ldr	r2, [pc, #212]	@ (80053ac <DMA_SetConfig+0x228>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d03b      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a33      	ldr	r2, [pc, #204]	@ (80053b0 <DMA_SetConfig+0x22c>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d036      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a32      	ldr	r2, [pc, #200]	@ (80053b4 <DMA_SetConfig+0x230>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d031      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a30      	ldr	r2, [pc, #192]	@ (80053b8 <DMA_SetConfig+0x234>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d02c      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a2f      	ldr	r2, [pc, #188]	@ (80053bc <DMA_SetConfig+0x238>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d027      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a2d      	ldr	r2, [pc, #180]	@ (80053c0 <DMA_SetConfig+0x23c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d022      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a2c      	ldr	r2, [pc, #176]	@ (80053c4 <DMA_SetConfig+0x240>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d01d      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a2a      	ldr	r2, [pc, #168]	@ (80053c8 <DMA_SetConfig+0x244>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d018      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a29      	ldr	r2, [pc, #164]	@ (80053cc <DMA_SetConfig+0x248>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d013      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a27      	ldr	r2, [pc, #156]	@ (80053d0 <DMA_SetConfig+0x24c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00e      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a26      	ldr	r2, [pc, #152]	@ (80053d4 <DMA_SetConfig+0x250>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d009      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a24      	ldr	r2, [pc, #144]	@ (80053d8 <DMA_SetConfig+0x254>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d004      	beq.n	8005354 <DMA_SetConfig+0x1d0>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a23      	ldr	r2, [pc, #140]	@ (80053dc <DMA_SetConfig+0x258>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d101      	bne.n	8005358 <DMA_SetConfig+0x1d4>
 8005354:	2301      	movs	r3, #1
 8005356:	e000      	b.n	800535a <DMA_SetConfig+0x1d6>
 8005358:	2300      	movs	r3, #0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d059      	beq.n	8005412 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005362:	f003 031f 	and.w	r3, r3, #31
 8005366:	223f      	movs	r2, #63	@ 0x3f
 8005368:	409a      	lsls	r2, r3
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800537c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	2b40      	cmp	r3, #64	@ 0x40
 800538c:	d138      	bne.n	8005400 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800539e:	e086      	b.n	80054ae <DMA_SetConfig+0x32a>
 80053a0:	40020010 	.word	0x40020010
 80053a4:	40020028 	.word	0x40020028
 80053a8:	40020040 	.word	0x40020040
 80053ac:	40020058 	.word	0x40020058
 80053b0:	40020070 	.word	0x40020070
 80053b4:	40020088 	.word	0x40020088
 80053b8:	400200a0 	.word	0x400200a0
 80053bc:	400200b8 	.word	0x400200b8
 80053c0:	40020410 	.word	0x40020410
 80053c4:	40020428 	.word	0x40020428
 80053c8:	40020440 	.word	0x40020440
 80053cc:	40020458 	.word	0x40020458
 80053d0:	40020470 	.word	0x40020470
 80053d4:	40020488 	.word	0x40020488
 80053d8:	400204a0 	.word	0x400204a0
 80053dc:	400204b8 	.word	0x400204b8
 80053e0:	58025408 	.word	0x58025408
 80053e4:	5802541c 	.word	0x5802541c
 80053e8:	58025430 	.word	0x58025430
 80053ec:	58025444 	.word	0x58025444
 80053f0:	58025458 	.word	0x58025458
 80053f4:	5802546c 	.word	0x5802546c
 80053f8:	58025480 	.word	0x58025480
 80053fc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	60da      	str	r2, [r3, #12]
}
 8005410:	e04d      	b.n	80054ae <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a29      	ldr	r2, [pc, #164]	@ (80054bc <DMA_SetConfig+0x338>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d022      	beq.n	8005462 <DMA_SetConfig+0x2de>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a27      	ldr	r2, [pc, #156]	@ (80054c0 <DMA_SetConfig+0x33c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d01d      	beq.n	8005462 <DMA_SetConfig+0x2de>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a26      	ldr	r2, [pc, #152]	@ (80054c4 <DMA_SetConfig+0x340>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d018      	beq.n	8005462 <DMA_SetConfig+0x2de>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a24      	ldr	r2, [pc, #144]	@ (80054c8 <DMA_SetConfig+0x344>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d013      	beq.n	8005462 <DMA_SetConfig+0x2de>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a23      	ldr	r2, [pc, #140]	@ (80054cc <DMA_SetConfig+0x348>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d00e      	beq.n	8005462 <DMA_SetConfig+0x2de>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a21      	ldr	r2, [pc, #132]	@ (80054d0 <DMA_SetConfig+0x34c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d009      	beq.n	8005462 <DMA_SetConfig+0x2de>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a20      	ldr	r2, [pc, #128]	@ (80054d4 <DMA_SetConfig+0x350>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d004      	beq.n	8005462 <DMA_SetConfig+0x2de>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a1e      	ldr	r2, [pc, #120]	@ (80054d8 <DMA_SetConfig+0x354>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d101      	bne.n	8005466 <DMA_SetConfig+0x2e2>
 8005462:	2301      	movs	r3, #1
 8005464:	e000      	b.n	8005468 <DMA_SetConfig+0x2e4>
 8005466:	2300      	movs	r3, #0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d020      	beq.n	80054ae <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005470:	f003 031f 	and.w	r3, r3, #31
 8005474:	2201      	movs	r2, #1
 8005476:	409a      	lsls	r2, r3
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	2b40      	cmp	r3, #64	@ 0x40
 800548a:	d108      	bne.n	800549e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	60da      	str	r2, [r3, #12]
}
 800549c:	e007      	b.n	80054ae <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	60da      	str	r2, [r3, #12]
}
 80054ae:	bf00      	nop
 80054b0:	371c      	adds	r7, #28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	58025408 	.word	0x58025408
 80054c0:	5802541c 	.word	0x5802541c
 80054c4:	58025430 	.word	0x58025430
 80054c8:	58025444 	.word	0x58025444
 80054cc:	58025458 	.word	0x58025458
 80054d0:	5802546c 	.word	0x5802546c
 80054d4:	58025480 	.word	0x58025480
 80054d8:	58025494 	.word	0x58025494

080054dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a42      	ldr	r2, [pc, #264]	@ (80055f4 <DMA_CalcBaseAndBitshift+0x118>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d04a      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a41      	ldr	r2, [pc, #260]	@ (80055f8 <DMA_CalcBaseAndBitshift+0x11c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d045      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a3f      	ldr	r2, [pc, #252]	@ (80055fc <DMA_CalcBaseAndBitshift+0x120>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d040      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a3e      	ldr	r2, [pc, #248]	@ (8005600 <DMA_CalcBaseAndBitshift+0x124>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d03b      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a3c      	ldr	r2, [pc, #240]	@ (8005604 <DMA_CalcBaseAndBitshift+0x128>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d036      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a3b      	ldr	r2, [pc, #236]	@ (8005608 <DMA_CalcBaseAndBitshift+0x12c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d031      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a39      	ldr	r2, [pc, #228]	@ (800560c <DMA_CalcBaseAndBitshift+0x130>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d02c      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a38      	ldr	r2, [pc, #224]	@ (8005610 <DMA_CalcBaseAndBitshift+0x134>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d027      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a36      	ldr	r2, [pc, #216]	@ (8005614 <DMA_CalcBaseAndBitshift+0x138>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d022      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a35      	ldr	r2, [pc, #212]	@ (8005618 <DMA_CalcBaseAndBitshift+0x13c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d01d      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a33      	ldr	r2, [pc, #204]	@ (800561c <DMA_CalcBaseAndBitshift+0x140>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d018      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a32      	ldr	r2, [pc, #200]	@ (8005620 <DMA_CalcBaseAndBitshift+0x144>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d013      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a30      	ldr	r2, [pc, #192]	@ (8005624 <DMA_CalcBaseAndBitshift+0x148>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00e      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a2f      	ldr	r2, [pc, #188]	@ (8005628 <DMA_CalcBaseAndBitshift+0x14c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d009      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a2d      	ldr	r2, [pc, #180]	@ (800562c <DMA_CalcBaseAndBitshift+0x150>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d004      	beq.n	8005584 <DMA_CalcBaseAndBitshift+0xa8>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a2c      	ldr	r2, [pc, #176]	@ (8005630 <DMA_CalcBaseAndBitshift+0x154>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d101      	bne.n	8005588 <DMA_CalcBaseAndBitshift+0xac>
 8005584:	2301      	movs	r3, #1
 8005586:	e000      	b.n	800558a <DMA_CalcBaseAndBitshift+0xae>
 8005588:	2300      	movs	r3, #0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d024      	beq.n	80055d8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	b2db      	uxtb	r3, r3
 8005594:	3b10      	subs	r3, #16
 8005596:	4a27      	ldr	r2, [pc, #156]	@ (8005634 <DMA_CalcBaseAndBitshift+0x158>)
 8005598:	fba2 2303 	umull	r2, r3, r2, r3
 800559c:	091b      	lsrs	r3, r3, #4
 800559e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	4a24      	ldr	r2, [pc, #144]	@ (8005638 <DMA_CalcBaseAndBitshift+0x15c>)
 80055a8:	5cd3      	ldrb	r3, [r2, r3]
 80055aa:	461a      	mov	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b03      	cmp	r3, #3
 80055b4:	d908      	bls.n	80055c8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	461a      	mov	r2, r3
 80055bc:	4b1f      	ldr	r3, [pc, #124]	@ (800563c <DMA_CalcBaseAndBitshift+0x160>)
 80055be:	4013      	ands	r3, r2
 80055c0:	1d1a      	adds	r2, r3, #4
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80055c6:	e00d      	b.n	80055e4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	461a      	mov	r2, r3
 80055ce:	4b1b      	ldr	r3, [pc, #108]	@ (800563c <DMA_CalcBaseAndBitshift+0x160>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80055d6:	e005      	b.n	80055e4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	40020010 	.word	0x40020010
 80055f8:	40020028 	.word	0x40020028
 80055fc:	40020040 	.word	0x40020040
 8005600:	40020058 	.word	0x40020058
 8005604:	40020070 	.word	0x40020070
 8005608:	40020088 	.word	0x40020088
 800560c:	400200a0 	.word	0x400200a0
 8005610:	400200b8 	.word	0x400200b8
 8005614:	40020410 	.word	0x40020410
 8005618:	40020428 	.word	0x40020428
 800561c:	40020440 	.word	0x40020440
 8005620:	40020458 	.word	0x40020458
 8005624:	40020470 	.word	0x40020470
 8005628:	40020488 	.word	0x40020488
 800562c:	400204a0 	.word	0x400204a0
 8005630:	400204b8 	.word	0x400204b8
 8005634:	aaaaaaab 	.word	0xaaaaaaab
 8005638:	0800d168 	.word	0x0800d168
 800563c:	fffffc00 	.word	0xfffffc00

08005640 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005648:	2300      	movs	r3, #0
 800564a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d120      	bne.n	8005696 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005658:	2b03      	cmp	r3, #3
 800565a:	d858      	bhi.n	800570e <DMA_CheckFifoParam+0xce>
 800565c:	a201      	add	r2, pc, #4	@ (adr r2, 8005664 <DMA_CheckFifoParam+0x24>)
 800565e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005662:	bf00      	nop
 8005664:	08005675 	.word	0x08005675
 8005668:	08005687 	.word	0x08005687
 800566c:	08005675 	.word	0x08005675
 8005670:	0800570f 	.word	0x0800570f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005678:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d048      	beq.n	8005712 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005684:	e045      	b.n	8005712 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800568e:	d142      	bne.n	8005716 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005694:	e03f      	b.n	8005716 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800569e:	d123      	bne.n	80056e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a4:	2b03      	cmp	r3, #3
 80056a6:	d838      	bhi.n	800571a <DMA_CheckFifoParam+0xda>
 80056a8:	a201      	add	r2, pc, #4	@ (adr r2, 80056b0 <DMA_CheckFifoParam+0x70>)
 80056aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ae:	bf00      	nop
 80056b0:	080056c1 	.word	0x080056c1
 80056b4:	080056c7 	.word	0x080056c7
 80056b8:	080056c1 	.word	0x080056c1
 80056bc:	080056d9 	.word	0x080056d9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	73fb      	strb	r3, [r7, #15]
        break;
 80056c4:	e030      	b.n	8005728 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d025      	beq.n	800571e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056d6:	e022      	b.n	800571e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056dc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80056e0:	d11f      	bne.n	8005722 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056e6:	e01c      	b.n	8005722 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d902      	bls.n	80056f6 <DMA_CheckFifoParam+0xb6>
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	d003      	beq.n	80056fc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80056f4:	e018      	b.n	8005728 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	73fb      	strb	r3, [r7, #15]
        break;
 80056fa:	e015      	b.n	8005728 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005700:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00e      	beq.n	8005726 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	73fb      	strb	r3, [r7, #15]
    break;
 800570c:	e00b      	b.n	8005726 <DMA_CheckFifoParam+0xe6>
        break;
 800570e:	bf00      	nop
 8005710:	e00a      	b.n	8005728 <DMA_CheckFifoParam+0xe8>
        break;
 8005712:	bf00      	nop
 8005714:	e008      	b.n	8005728 <DMA_CheckFifoParam+0xe8>
        break;
 8005716:	bf00      	nop
 8005718:	e006      	b.n	8005728 <DMA_CheckFifoParam+0xe8>
        break;
 800571a:	bf00      	nop
 800571c:	e004      	b.n	8005728 <DMA_CheckFifoParam+0xe8>
        break;
 800571e:	bf00      	nop
 8005720:	e002      	b.n	8005728 <DMA_CheckFifoParam+0xe8>
        break;
 8005722:	bf00      	nop
 8005724:	e000      	b.n	8005728 <DMA_CheckFifoParam+0xe8>
    break;
 8005726:	bf00      	nop
    }
  }

  return status;
 8005728:	7bfb      	ldrb	r3, [r7, #15]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop

08005738 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a38      	ldr	r2, [pc, #224]	@ (800582c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d022      	beq.n	8005796 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a36      	ldr	r2, [pc, #216]	@ (8005830 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d01d      	beq.n	8005796 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a35      	ldr	r2, [pc, #212]	@ (8005834 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d018      	beq.n	8005796 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a33      	ldr	r2, [pc, #204]	@ (8005838 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d013      	beq.n	8005796 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a32      	ldr	r2, [pc, #200]	@ (800583c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d00e      	beq.n	8005796 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a30      	ldr	r2, [pc, #192]	@ (8005840 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d009      	beq.n	8005796 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a2f      	ldr	r2, [pc, #188]	@ (8005844 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d004      	beq.n	8005796 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a2d      	ldr	r2, [pc, #180]	@ (8005848 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d101      	bne.n	800579a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005796:	2301      	movs	r3, #1
 8005798:	e000      	b.n	800579c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800579a:	2300      	movs	r3, #0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d01a      	beq.n	80057d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	3b08      	subs	r3, #8
 80057a8:	4a28      	ldr	r2, [pc, #160]	@ (800584c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80057aa:	fba2 2303 	umull	r2, r3, r2, r3
 80057ae:	091b      	lsrs	r3, r3, #4
 80057b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4b26      	ldr	r3, [pc, #152]	@ (8005850 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80057b6:	4413      	add	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	461a      	mov	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a24      	ldr	r2, [pc, #144]	@ (8005854 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80057c4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f003 031f 	and.w	r3, r3, #31
 80057cc:	2201      	movs	r2, #1
 80057ce:	409a      	lsls	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80057d4:	e024      	b.n	8005820 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	3b10      	subs	r3, #16
 80057de:	4a1e      	ldr	r2, [pc, #120]	@ (8005858 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80057e0:	fba2 2303 	umull	r2, r3, r2, r3
 80057e4:	091b      	lsrs	r3, r3, #4
 80057e6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4a1c      	ldr	r2, [pc, #112]	@ (800585c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d806      	bhi.n	80057fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005860 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d902      	bls.n	80057fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	3308      	adds	r3, #8
 80057fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4b18      	ldr	r3, [pc, #96]	@ (8005864 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005802:	4413      	add	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	461a      	mov	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a16      	ldr	r2, [pc, #88]	@ (8005868 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005810:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f003 031f 	and.w	r3, r3, #31
 8005818:	2201      	movs	r2, #1
 800581a:	409a      	lsls	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005820:	bf00      	nop
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	58025408 	.word	0x58025408
 8005830:	5802541c 	.word	0x5802541c
 8005834:	58025430 	.word	0x58025430
 8005838:	58025444 	.word	0x58025444
 800583c:	58025458 	.word	0x58025458
 8005840:	5802546c 	.word	0x5802546c
 8005844:	58025480 	.word	0x58025480
 8005848:	58025494 	.word	0x58025494
 800584c:	cccccccd 	.word	0xcccccccd
 8005850:	16009600 	.word	0x16009600
 8005854:	58025880 	.word	0x58025880
 8005858:	aaaaaaab 	.word	0xaaaaaaab
 800585c:	400204b8 	.word	0x400204b8
 8005860:	4002040f 	.word	0x4002040f
 8005864:	10008200 	.word	0x10008200
 8005868:	40020880 	.word	0x40020880

0800586c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	b2db      	uxtb	r3, r3
 800587a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d04a      	beq.n	8005918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b08      	cmp	r3, #8
 8005886:	d847      	bhi.n	8005918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a25      	ldr	r2, [pc, #148]	@ (8005924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d022      	beq.n	80058d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a24      	ldr	r2, [pc, #144]	@ (8005928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d01d      	beq.n	80058d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a22      	ldr	r2, [pc, #136]	@ (800592c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d018      	beq.n	80058d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a21      	ldr	r2, [pc, #132]	@ (8005930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d013      	beq.n	80058d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a1f      	ldr	r2, [pc, #124]	@ (8005934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00e      	beq.n	80058d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a1e      	ldr	r2, [pc, #120]	@ (8005938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d009      	beq.n	80058d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a1c      	ldr	r2, [pc, #112]	@ (800593c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d004      	beq.n	80058d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d101      	bne.n	80058dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80058d8:	2301      	movs	r3, #1
 80058da:	e000      	b.n	80058de <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80058dc:	2300      	movs	r3, #0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	4b17      	ldr	r3, [pc, #92]	@ (8005944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80058e6:	4413      	add	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	461a      	mov	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a15      	ldr	r2, [pc, #84]	@ (8005948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80058f4:	671a      	str	r2, [r3, #112]	@ 0x70
 80058f6:	e009      	b.n	800590c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4b14      	ldr	r3, [pc, #80]	@ (800594c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80058fc:	4413      	add	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	461a      	mov	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a11      	ldr	r2, [pc, #68]	@ (8005950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800590a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3b01      	subs	r3, #1
 8005910:	2201      	movs	r2, #1
 8005912:	409a      	lsls	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005918:	bf00      	nop
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	58025408 	.word	0x58025408
 8005928:	5802541c 	.word	0x5802541c
 800592c:	58025430 	.word	0x58025430
 8005930:	58025444 	.word	0x58025444
 8005934:	58025458 	.word	0x58025458
 8005938:	5802546c 	.word	0x5802546c
 800593c:	58025480 	.word	0x58025480
 8005940:	58025494 	.word	0x58025494
 8005944:	1600963f 	.word	0x1600963f
 8005948:	58025940 	.word	0x58025940
 800594c:	1000823f 	.word	0x1000823f
 8005950:	40020940 	.word	0x40020940

08005954 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	460b      	mov	r3, r1
 800595e:	607a      	str	r2, [r7, #4]
 8005960:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e00a      	b.n	8005986 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8005970:	7afb      	ldrb	r3, [r7, #11]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d103      	bne.n	800597e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	605a      	str	r2, [r3, #4]
      break;
 800597c:	e002      	b.n	8005984 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	75fb      	strb	r3, [r7, #23]
      break;
 8005982:	bf00      	nop
  }

  return status;
 8005984:	7dfb      	ldrb	r3, [r7, #23]
}
 8005986:	4618      	mov	r0, r3
 8005988:	371c      	adds	r7, #28
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005992:	b480      	push	{r7}
 8005994:	b083      	sub	sp, #12
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e003      	b.n	80059ae <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80059ac:	2300      	movs	r3, #0
  }
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
	...

080059bc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	0c1b      	lsrs	r3, r3, #16
 80059ca:	f003 0303 	and.w	r3, r3, #3
 80059ce:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 031f 	and.w	r3, r3, #31
 80059d8:	2201      	movs	r2, #1
 80059da:	fa02 f303 	lsl.w	r3, r2, r3
 80059de:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	011a      	lsls	r2, r3, #4
 80059e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005a18 <HAL_EXTI_IRQHandler+0x5c>)
 80059e6:	4413      	add	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	4013      	ands	r3, r2
 80059f2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d009      	beq.n	8005a0e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d002      	beq.n	8005a0e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	4798      	blx	r3
    }
  }
}
 8005a0e:	bf00      	nop
 8005a10:	3718      	adds	r7, #24
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	58000088 	.word	0x58000088

08005a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b089      	sub	sp, #36	@ 0x24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a26:	2300      	movs	r3, #0
 8005a28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005a2a:	4b89      	ldr	r3, [pc, #548]	@ (8005c50 <HAL_GPIO_Init+0x234>)
 8005a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a2e:	e194      	b.n	8005d5a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	2101      	movs	r1, #1
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 8186 	beq.w	8005d54 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f003 0303 	and.w	r3, r3, #3
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d005      	beq.n	8005a60 <HAL_GPIO_Init+0x44>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f003 0303 	and.w	r3, r3, #3
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d130      	bne.n	8005ac2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	2203      	movs	r2, #3
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	43db      	mvns	r3, r3
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	4013      	ands	r3, r2
 8005a76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	fa02 f303 	lsl.w	r3, r2, r3
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a96:	2201      	movs	r2, #1
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9e:	43db      	mvns	r3, r3
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	091b      	lsrs	r3, r3, #4
 8005aac:	f003 0201 	and.w	r2, r3, #1
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f003 0303 	and.w	r3, r3, #3
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	d017      	beq.n	8005afe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	2203      	movs	r2, #3
 8005ada:	fa02 f303 	lsl.w	r3, r2, r3
 8005ade:	43db      	mvns	r3, r3
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	689a      	ldr	r2, [r3, #8]
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	fa02 f303 	lsl.w	r3, r2, r3
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d123      	bne.n	8005b52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	08da      	lsrs	r2, r3, #3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	3208      	adds	r2, #8
 8005b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	f003 0307 	and.w	r3, r3, #7
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	220f      	movs	r2, #15
 8005b22:	fa02 f303 	lsl.w	r3, r2, r3
 8005b26:	43db      	mvns	r3, r3
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	691a      	ldr	r2, [r3, #16]
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	08da      	lsrs	r2, r3, #3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3208      	adds	r2, #8
 8005b4c:	69b9      	ldr	r1, [r7, #24]
 8005b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	2203      	movs	r2, #3
 8005b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b62:	43db      	mvns	r3, r3
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	4013      	ands	r3, r2
 8005b68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f003 0203 	and.w	r2, r3, #3
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	005b      	lsls	r3, r3, #1
 8005b76:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 80e0 	beq.w	8005d54 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b94:	4b2f      	ldr	r3, [pc, #188]	@ (8005c54 <HAL_GPIO_Init+0x238>)
 8005b96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b9a:	4a2e      	ldr	r2, [pc, #184]	@ (8005c54 <HAL_GPIO_Init+0x238>)
 8005b9c:	f043 0302 	orr.w	r3, r3, #2
 8005ba0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8005c54 <HAL_GPIO_Init+0x238>)
 8005ba6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	60fb      	str	r3, [r7, #12]
 8005bb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005bb2:	4a29      	ldr	r2, [pc, #164]	@ (8005c58 <HAL_GPIO_Init+0x23c>)
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	089b      	lsrs	r3, r3, #2
 8005bb8:	3302      	adds	r3, #2
 8005bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	f003 0303 	and.w	r3, r3, #3
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	220f      	movs	r2, #15
 8005bca:	fa02 f303 	lsl.w	r3, r2, r3
 8005bce:	43db      	mvns	r3, r3
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a20      	ldr	r2, [pc, #128]	@ (8005c5c <HAL_GPIO_Init+0x240>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d052      	beq.n	8005c84 <HAL_GPIO_Init+0x268>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a1f      	ldr	r2, [pc, #124]	@ (8005c60 <HAL_GPIO_Init+0x244>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d031      	beq.n	8005c4a <HAL_GPIO_Init+0x22e>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a1e      	ldr	r2, [pc, #120]	@ (8005c64 <HAL_GPIO_Init+0x248>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d02b      	beq.n	8005c46 <HAL_GPIO_Init+0x22a>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c68 <HAL_GPIO_Init+0x24c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d025      	beq.n	8005c42 <HAL_GPIO_Init+0x226>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a1c      	ldr	r2, [pc, #112]	@ (8005c6c <HAL_GPIO_Init+0x250>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d01f      	beq.n	8005c3e <HAL_GPIO_Init+0x222>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a1b      	ldr	r2, [pc, #108]	@ (8005c70 <HAL_GPIO_Init+0x254>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d019      	beq.n	8005c3a <HAL_GPIO_Init+0x21e>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a1a      	ldr	r2, [pc, #104]	@ (8005c74 <HAL_GPIO_Init+0x258>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d013      	beq.n	8005c36 <HAL_GPIO_Init+0x21a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a19      	ldr	r2, [pc, #100]	@ (8005c78 <HAL_GPIO_Init+0x25c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d00d      	beq.n	8005c32 <HAL_GPIO_Init+0x216>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a18      	ldr	r2, [pc, #96]	@ (8005c7c <HAL_GPIO_Init+0x260>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d007      	beq.n	8005c2e <HAL_GPIO_Init+0x212>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a17      	ldr	r2, [pc, #92]	@ (8005c80 <HAL_GPIO_Init+0x264>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d101      	bne.n	8005c2a <HAL_GPIO_Init+0x20e>
 8005c26:	2309      	movs	r3, #9
 8005c28:	e02d      	b.n	8005c86 <HAL_GPIO_Init+0x26a>
 8005c2a:	230a      	movs	r3, #10
 8005c2c:	e02b      	b.n	8005c86 <HAL_GPIO_Init+0x26a>
 8005c2e:	2308      	movs	r3, #8
 8005c30:	e029      	b.n	8005c86 <HAL_GPIO_Init+0x26a>
 8005c32:	2307      	movs	r3, #7
 8005c34:	e027      	b.n	8005c86 <HAL_GPIO_Init+0x26a>
 8005c36:	2306      	movs	r3, #6
 8005c38:	e025      	b.n	8005c86 <HAL_GPIO_Init+0x26a>
 8005c3a:	2305      	movs	r3, #5
 8005c3c:	e023      	b.n	8005c86 <HAL_GPIO_Init+0x26a>
 8005c3e:	2304      	movs	r3, #4
 8005c40:	e021      	b.n	8005c86 <HAL_GPIO_Init+0x26a>
 8005c42:	2303      	movs	r3, #3
 8005c44:	e01f      	b.n	8005c86 <HAL_GPIO_Init+0x26a>
 8005c46:	2302      	movs	r3, #2
 8005c48:	e01d      	b.n	8005c86 <HAL_GPIO_Init+0x26a>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e01b      	b.n	8005c86 <HAL_GPIO_Init+0x26a>
 8005c4e:	bf00      	nop
 8005c50:	58000080 	.word	0x58000080
 8005c54:	58024400 	.word	0x58024400
 8005c58:	58000400 	.word	0x58000400
 8005c5c:	58020000 	.word	0x58020000
 8005c60:	58020400 	.word	0x58020400
 8005c64:	58020800 	.word	0x58020800
 8005c68:	58020c00 	.word	0x58020c00
 8005c6c:	58021000 	.word	0x58021000
 8005c70:	58021400 	.word	0x58021400
 8005c74:	58021800 	.word	0x58021800
 8005c78:	58021c00 	.word	0x58021c00
 8005c7c:	58022000 	.word	0x58022000
 8005c80:	58022400 	.word	0x58022400
 8005c84:	2300      	movs	r3, #0
 8005c86:	69fa      	ldr	r2, [r7, #28]
 8005c88:	f002 0203 	and.w	r2, r2, #3
 8005c8c:	0092      	lsls	r2, r2, #2
 8005c8e:	4093      	lsls	r3, r2
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c96:	4938      	ldr	r1, [pc, #224]	@ (8005d78 <HAL_GPIO_Init+0x35c>)
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	089b      	lsrs	r3, r3, #2
 8005c9c:	3302      	adds	r3, #2
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	43db      	mvns	r3, r3
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005cca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005cd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	43db      	mvns	r3, r3
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005cf8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	43db      	mvns	r3, r3
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d003      	beq.n	8005d24 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	43db      	mvns	r3, r3
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	4013      	ands	r3, r2
 8005d38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	3301      	adds	r3, #1
 8005d58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	fa22 f303 	lsr.w	r3, r2, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f47f ae63 	bne.w	8005a30 <HAL_GPIO_Init+0x14>
  }
}
 8005d6a:	bf00      	nop
 8005d6c:	bf00      	nop
 8005d6e:	3724      	adds	r7, #36	@ 0x24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	58000400 	.word	0x58000400

08005d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	807b      	strh	r3, [r7, #2]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d8c:	787b      	ldrb	r3, [r7, #1]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d92:	887a      	ldrh	r2, [r7, #2]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005d98:	e003      	b.n	8005da2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d9a:	887b      	ldrh	r3, [r7, #2]
 8005d9c:	041a      	lsls	r2, r3, #16
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	619a      	str	r2, [r3, #24]
}
 8005da2:	bf00      	nop
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
	...

08005db0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005db8:	4b19      	ldr	r3, [pc, #100]	@ (8005e20 <HAL_PWREx_ConfigSupply+0x70>)
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d00a      	beq.n	8005dda <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005dc4:	4b16      	ldr	r3, [pc, #88]	@ (8005e20 <HAL_PWREx_ConfigSupply+0x70>)
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f003 0307 	and.w	r3, r3, #7
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d001      	beq.n	8005dd6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e01f      	b.n	8005e16 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	e01d      	b.n	8005e16 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005dda:	4b11      	ldr	r3, [pc, #68]	@ (8005e20 <HAL_PWREx_ConfigSupply+0x70>)
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f023 0207 	bic.w	r2, r3, #7
 8005de2:	490f      	ldr	r1, [pc, #60]	@ (8005e20 <HAL_PWREx_ConfigSupply+0x70>)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005dea:	f7fb fcd3 	bl	8001794 <HAL_GetTick>
 8005dee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005df0:	e009      	b.n	8005e06 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005df2:	f7fb fccf 	bl	8001794 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e00:	d901      	bls.n	8005e06 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e007      	b.n	8005e16 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e06:	4b06      	ldr	r3, [pc, #24]	@ (8005e20 <HAL_PWREx_ConfigSupply+0x70>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e12:	d1ee      	bne.n	8005df2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	58024800 	.word	0x58024800

08005e24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08c      	sub	sp, #48	@ 0x30
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d102      	bne.n	8005e38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	f000 bc48 	b.w	80066c8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 8088 	beq.w	8005f56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e46:	4b99      	ldr	r3, [pc, #612]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e50:	4b96      	ldr	r3, [pc, #600]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e54:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e58:	2b10      	cmp	r3, #16
 8005e5a:	d007      	beq.n	8005e6c <HAL_RCC_OscConfig+0x48>
 8005e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5e:	2b18      	cmp	r3, #24
 8005e60:	d111      	bne.n	8005e86 <HAL_RCC_OscConfig+0x62>
 8005e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e64:	f003 0303 	and.w	r3, r3, #3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d10c      	bne.n	8005e86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e6c:	4b8f      	ldr	r3, [pc, #572]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d06d      	beq.n	8005f54 <HAL_RCC_OscConfig+0x130>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d169      	bne.n	8005f54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	f000 bc21 	b.w	80066c8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e8e:	d106      	bne.n	8005e9e <HAL_RCC_OscConfig+0x7a>
 8005e90:	4b86      	ldr	r3, [pc, #536]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a85      	ldr	r2, [pc, #532]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005e96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	e02e      	b.n	8005efc <HAL_RCC_OscConfig+0xd8>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10c      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x9c>
 8005ea6:	4b81      	ldr	r3, [pc, #516]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a80      	ldr	r2, [pc, #512]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005eac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	4b7e      	ldr	r3, [pc, #504]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a7d      	ldr	r2, [pc, #500]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005eb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	e01d      	b.n	8005efc <HAL_RCC_OscConfig+0xd8>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ec8:	d10c      	bne.n	8005ee4 <HAL_RCC_OscConfig+0xc0>
 8005eca:	4b78      	ldr	r3, [pc, #480]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a77      	ldr	r2, [pc, #476]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ed0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	4b75      	ldr	r3, [pc, #468]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a74      	ldr	r2, [pc, #464]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	e00b      	b.n	8005efc <HAL_RCC_OscConfig+0xd8>
 8005ee4:	4b71      	ldr	r3, [pc, #452]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a70      	ldr	r2, [pc, #448]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005eea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eee:	6013      	str	r3, [r2, #0]
 8005ef0:	4b6e      	ldr	r3, [pc, #440]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a6d      	ldr	r2, [pc, #436]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ef6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d013      	beq.n	8005f2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f04:	f7fb fc46 	bl	8001794 <HAL_GetTick>
 8005f08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f0c:	f7fb fc42 	bl	8001794 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b64      	cmp	r3, #100	@ 0x64
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e3d4      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f1e:	4b63      	ldr	r3, [pc, #396]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d0f0      	beq.n	8005f0c <HAL_RCC_OscConfig+0xe8>
 8005f2a:	e014      	b.n	8005f56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2c:	f7fb fc32 	bl	8001794 <HAL_GetTick>
 8005f30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f34:	f7fb fc2e 	bl	8001794 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b64      	cmp	r3, #100	@ 0x64
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e3c0      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f46:	4b59      	ldr	r3, [pc, #356]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1f0      	bne.n	8005f34 <HAL_RCC_OscConfig+0x110>
 8005f52:	e000      	b.n	8005f56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 80ca 	beq.w	80060f8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f64:	4b51      	ldr	r3, [pc, #324]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f6c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f6e:	4b4f      	ldr	r3, [pc, #316]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f72:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d007      	beq.n	8005f8a <HAL_RCC_OscConfig+0x166>
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	2b18      	cmp	r3, #24
 8005f7e:	d156      	bne.n	800602e <HAL_RCC_OscConfig+0x20a>
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	f003 0303 	and.w	r3, r3, #3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d151      	bne.n	800602e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f8a:	4b48      	ldr	r3, [pc, #288]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0304 	and.w	r3, r3, #4
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d005      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x17e>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e392      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005fa2:	4b42      	ldr	r3, [pc, #264]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f023 0219 	bic.w	r2, r3, #25
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	493f      	ldr	r1, [pc, #252]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb4:	f7fb fbee 	bl	8001794 <HAL_GetTick>
 8005fb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fba:	e008      	b.n	8005fce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fbc:	f7fb fbea 	bl	8001794 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e37c      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fce:	4b37      	ldr	r3, [pc, #220]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0304 	and.w	r3, r3, #4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d0f0      	beq.n	8005fbc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fda:	f7fb fbe7 	bl	80017ac <HAL_GetREVID>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d817      	bhi.n	8006018 <HAL_RCC_OscConfig+0x1f4>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	2b40      	cmp	r3, #64	@ 0x40
 8005fee:	d108      	bne.n	8006002 <HAL_RCC_OscConfig+0x1de>
 8005ff0:	4b2e      	ldr	r3, [pc, #184]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005ff8:	4a2c      	ldr	r2, [pc, #176]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ffa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ffe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006000:	e07a      	b.n	80060f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006002:	4b2a      	ldr	r3, [pc, #168]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	031b      	lsls	r3, r3, #12
 8006010:	4926      	ldr	r1, [pc, #152]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8006012:	4313      	orrs	r3, r2
 8006014:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006016:	e06f      	b.n	80060f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006018:	4b24      	ldr	r3, [pc, #144]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	061b      	lsls	r3, r3, #24
 8006026:	4921      	ldr	r1, [pc, #132]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8006028:	4313      	orrs	r3, r2
 800602a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800602c:	e064      	b.n	80060f8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d047      	beq.n	80060c6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006036:	4b1d      	ldr	r3, [pc, #116]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f023 0219 	bic.w	r2, r3, #25
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	491a      	ldr	r1, [pc, #104]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8006044:	4313      	orrs	r3, r2
 8006046:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006048:	f7fb fba4 	bl	8001794 <HAL_GetTick>
 800604c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006050:	f7fb fba0 	bl	8001794 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b02      	cmp	r3, #2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e332      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006062:	4b12      	ldr	r3, [pc, #72]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0304 	and.w	r3, r3, #4
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0f0      	beq.n	8006050 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800606e:	f7fb fb9d 	bl	80017ac <HAL_GetREVID>
 8006072:	4603      	mov	r3, r0
 8006074:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006078:	4293      	cmp	r3, r2
 800607a:	d819      	bhi.n	80060b0 <HAL_RCC_OscConfig+0x28c>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	2b40      	cmp	r3, #64	@ 0x40
 8006082:	d108      	bne.n	8006096 <HAL_RCC_OscConfig+0x272>
 8006084:	4b09      	ldr	r3, [pc, #36]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800608c:	4a07      	ldr	r2, [pc, #28]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 800608e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006092:	6053      	str	r3, [r2, #4]
 8006094:	e030      	b.n	80060f8 <HAL_RCC_OscConfig+0x2d4>
 8006096:	4b05      	ldr	r3, [pc, #20]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	031b      	lsls	r3, r3, #12
 80060a4:	4901      	ldr	r1, [pc, #4]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	604b      	str	r3, [r1, #4]
 80060aa:	e025      	b.n	80060f8 <HAL_RCC_OscConfig+0x2d4>
 80060ac:	58024400 	.word	0x58024400
 80060b0:	4b9a      	ldr	r3, [pc, #616]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	061b      	lsls	r3, r3, #24
 80060be:	4997      	ldr	r1, [pc, #604]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	604b      	str	r3, [r1, #4]
 80060c4:	e018      	b.n	80060f8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060c6:	4b95      	ldr	r3, [pc, #596]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a94      	ldr	r2, [pc, #592]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80060cc:	f023 0301 	bic.w	r3, r3, #1
 80060d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d2:	f7fb fb5f 	bl	8001794 <HAL_GetTick>
 80060d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060d8:	e008      	b.n	80060ec <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060da:	f7fb fb5b 	bl	8001794 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d901      	bls.n	80060ec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e2ed      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060ec:	4b8b      	ldr	r3, [pc, #556]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0304 	and.w	r3, r3, #4
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1f0      	bne.n	80060da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0310 	and.w	r3, r3, #16
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 80a9 	beq.w	8006258 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006106:	4b85      	ldr	r3, [pc, #532]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800610e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006110:	4b82      	ldr	r3, [pc, #520]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 8006112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006114:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	2b08      	cmp	r3, #8
 800611a:	d007      	beq.n	800612c <HAL_RCC_OscConfig+0x308>
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	2b18      	cmp	r3, #24
 8006120:	d13a      	bne.n	8006198 <HAL_RCC_OscConfig+0x374>
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f003 0303 	and.w	r3, r3, #3
 8006128:	2b01      	cmp	r3, #1
 800612a:	d135      	bne.n	8006198 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800612c:	4b7b      	ldr	r3, [pc, #492]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006134:	2b00      	cmp	r3, #0
 8006136:	d005      	beq.n	8006144 <HAL_RCC_OscConfig+0x320>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	2b80      	cmp	r3, #128	@ 0x80
 800613e:	d001      	beq.n	8006144 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e2c1      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006144:	f7fb fb32 	bl	80017ac <HAL_GetREVID>
 8006148:	4603      	mov	r3, r0
 800614a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800614e:	4293      	cmp	r3, r2
 8006150:	d817      	bhi.n	8006182 <HAL_RCC_OscConfig+0x35e>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	2b20      	cmp	r3, #32
 8006158:	d108      	bne.n	800616c <HAL_RCC_OscConfig+0x348>
 800615a:	4b70      	ldr	r3, [pc, #448]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006162:	4a6e      	ldr	r2, [pc, #440]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 8006164:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006168:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800616a:	e075      	b.n	8006258 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800616c:	4b6b      	ldr	r3, [pc, #428]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	069b      	lsls	r3, r3, #26
 800617a:	4968      	ldr	r1, [pc, #416]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 800617c:	4313      	orrs	r3, r2
 800617e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006180:	e06a      	b.n	8006258 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006182:	4b66      	ldr	r3, [pc, #408]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	061b      	lsls	r3, r3, #24
 8006190:	4962      	ldr	r1, [pc, #392]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 8006192:	4313      	orrs	r3, r2
 8006194:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006196:	e05f      	b.n	8006258 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	69db      	ldr	r3, [r3, #28]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d042      	beq.n	8006226 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80061a0:	4b5e      	ldr	r3, [pc, #376]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a5d      	ldr	r2, [pc, #372]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80061a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ac:	f7fb faf2 	bl	8001794 <HAL_GetTick>
 80061b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061b2:	e008      	b.n	80061c6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80061b4:	f7fb faee 	bl	8001794 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e280      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061c6:	4b55      	ldr	r3, [pc, #340]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d0f0      	beq.n	80061b4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061d2:	f7fb faeb 	bl	80017ac <HAL_GetREVID>
 80061d6:	4603      	mov	r3, r0
 80061d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80061dc:	4293      	cmp	r3, r2
 80061de:	d817      	bhi.n	8006210 <HAL_RCC_OscConfig+0x3ec>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	2b20      	cmp	r3, #32
 80061e6:	d108      	bne.n	80061fa <HAL_RCC_OscConfig+0x3d6>
 80061e8:	4b4c      	ldr	r3, [pc, #304]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80061f0:	4a4a      	ldr	r2, [pc, #296]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80061f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061f6:	6053      	str	r3, [r2, #4]
 80061f8:	e02e      	b.n	8006258 <HAL_RCC_OscConfig+0x434>
 80061fa:	4b48      	ldr	r3, [pc, #288]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	069b      	lsls	r3, r3, #26
 8006208:	4944      	ldr	r1, [pc, #272]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 800620a:	4313      	orrs	r3, r2
 800620c:	604b      	str	r3, [r1, #4]
 800620e:	e023      	b.n	8006258 <HAL_RCC_OscConfig+0x434>
 8006210:	4b42      	ldr	r3, [pc, #264]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	061b      	lsls	r3, r3, #24
 800621e:	493f      	ldr	r1, [pc, #252]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 8006220:	4313      	orrs	r3, r2
 8006222:	60cb      	str	r3, [r1, #12]
 8006224:	e018      	b.n	8006258 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006226:	4b3d      	ldr	r3, [pc, #244]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a3c      	ldr	r2, [pc, #240]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 800622c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006232:	f7fb faaf 	bl	8001794 <HAL_GetTick>
 8006236:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006238:	e008      	b.n	800624c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800623a:	f7fb faab 	bl	8001794 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b02      	cmp	r3, #2
 8006246:	d901      	bls.n	800624c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e23d      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800624c:	4b33      	ldr	r3, [pc, #204]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1f0      	bne.n	800623a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0308 	and.w	r3, r3, #8
 8006260:	2b00      	cmp	r3, #0
 8006262:	d036      	beq.n	80062d2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d019      	beq.n	80062a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800626c:	4b2b      	ldr	r3, [pc, #172]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 800626e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006270:	4a2a      	ldr	r2, [pc, #168]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 8006272:	f043 0301 	orr.w	r3, r3, #1
 8006276:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006278:	f7fb fa8c 	bl	8001794 <HAL_GetTick>
 800627c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800627e:	e008      	b.n	8006292 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006280:	f7fb fa88 	bl	8001794 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b02      	cmp	r3, #2
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e21a      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006292:	4b22      	ldr	r3, [pc, #136]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 8006294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0f0      	beq.n	8006280 <HAL_RCC_OscConfig+0x45c>
 800629e:	e018      	b.n	80062d2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062a0:	4b1e      	ldr	r3, [pc, #120]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80062a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062a4:	4a1d      	ldr	r2, [pc, #116]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80062a6:	f023 0301 	bic.w	r3, r3, #1
 80062aa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ac:	f7fb fa72 	bl	8001794 <HAL_GetTick>
 80062b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062b4:	f7fb fa6e 	bl	8001794 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e200      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062c6:	4b15      	ldr	r3, [pc, #84]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80062c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1f0      	bne.n	80062b4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0320 	and.w	r3, r3, #32
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d039      	beq.n	8006352 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d01c      	beq.n	8006320 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062e6:	4b0d      	ldr	r3, [pc, #52]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a0c      	ldr	r2, [pc, #48]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80062ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80062f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80062f2:	f7fb fa4f 	bl	8001794 <HAL_GetTick>
 80062f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062f8:	e008      	b.n	800630c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062fa:	f7fb fa4b 	bl	8001794 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	2b02      	cmp	r3, #2
 8006306:	d901      	bls.n	800630c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e1dd      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800630c:	4b03      	ldr	r3, [pc, #12]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0f0      	beq.n	80062fa <HAL_RCC_OscConfig+0x4d6>
 8006318:	e01b      	b.n	8006352 <HAL_RCC_OscConfig+0x52e>
 800631a:	bf00      	nop
 800631c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006320:	4b9b      	ldr	r3, [pc, #620]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a9a      	ldr	r2, [pc, #616]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006326:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800632a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800632c:	f7fb fa32 	bl	8001794 <HAL_GetTick>
 8006330:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006332:	e008      	b.n	8006346 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006334:	f7fb fa2e 	bl	8001794 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e1c0      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006346:	4b92      	ldr	r3, [pc, #584]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1f0      	bne.n	8006334 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0304 	and.w	r3, r3, #4
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 8081 	beq.w	8006462 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006360:	4b8c      	ldr	r3, [pc, #560]	@ (8006594 <HAL_RCC_OscConfig+0x770>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a8b      	ldr	r2, [pc, #556]	@ (8006594 <HAL_RCC_OscConfig+0x770>)
 8006366:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800636a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800636c:	f7fb fa12 	bl	8001794 <HAL_GetTick>
 8006370:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006374:	f7fb fa0e 	bl	8001794 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b64      	cmp	r3, #100	@ 0x64
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e1a0      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006386:	4b83      	ldr	r3, [pc, #524]	@ (8006594 <HAL_RCC_OscConfig+0x770>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800638e:	2b00      	cmp	r3, #0
 8006390:	d0f0      	beq.n	8006374 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d106      	bne.n	80063a8 <HAL_RCC_OscConfig+0x584>
 800639a:	4b7d      	ldr	r3, [pc, #500]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 800639c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800639e:	4a7c      	ldr	r2, [pc, #496]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063a0:	f043 0301 	orr.w	r3, r3, #1
 80063a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80063a6:	e02d      	b.n	8006404 <HAL_RCC_OscConfig+0x5e0>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10c      	bne.n	80063ca <HAL_RCC_OscConfig+0x5a6>
 80063b0:	4b77      	ldr	r3, [pc, #476]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063b4:	4a76      	ldr	r2, [pc, #472]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063b6:	f023 0301 	bic.w	r3, r3, #1
 80063ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80063bc:	4b74      	ldr	r3, [pc, #464]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063c0:	4a73      	ldr	r2, [pc, #460]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063c2:	f023 0304 	bic.w	r3, r3, #4
 80063c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80063c8:	e01c      	b.n	8006404 <HAL_RCC_OscConfig+0x5e0>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	2b05      	cmp	r3, #5
 80063d0:	d10c      	bne.n	80063ec <HAL_RCC_OscConfig+0x5c8>
 80063d2:	4b6f      	ldr	r3, [pc, #444]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063d6:	4a6e      	ldr	r2, [pc, #440]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063d8:	f043 0304 	orr.w	r3, r3, #4
 80063dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80063de:	4b6c      	ldr	r3, [pc, #432]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063e2:	4a6b      	ldr	r2, [pc, #428]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063e4:	f043 0301 	orr.w	r3, r3, #1
 80063e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80063ea:	e00b      	b.n	8006404 <HAL_RCC_OscConfig+0x5e0>
 80063ec:	4b68      	ldr	r3, [pc, #416]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063f0:	4a67      	ldr	r2, [pc, #412]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063f2:	f023 0301 	bic.w	r3, r3, #1
 80063f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80063f8:	4b65      	ldr	r3, [pc, #404]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063fc:	4a64      	ldr	r2, [pc, #400]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063fe:	f023 0304 	bic.w	r3, r3, #4
 8006402:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d015      	beq.n	8006438 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800640c:	f7fb f9c2 	bl	8001794 <HAL_GetTick>
 8006410:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006412:	e00a      	b.n	800642a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006414:	f7fb f9be 	bl	8001794 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006422:	4293      	cmp	r3, r2
 8006424:	d901      	bls.n	800642a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e14e      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800642a:	4b59      	ldr	r3, [pc, #356]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 800642c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b00      	cmp	r3, #0
 8006434:	d0ee      	beq.n	8006414 <HAL_RCC_OscConfig+0x5f0>
 8006436:	e014      	b.n	8006462 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006438:	f7fb f9ac 	bl	8001794 <HAL_GetTick>
 800643c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800643e:	e00a      	b.n	8006456 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006440:	f7fb f9a8 	bl	8001794 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800644e:	4293      	cmp	r3, r2
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e138      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006456:	4b4e      	ldr	r3, [pc, #312]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1ee      	bne.n	8006440 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 812d 	beq.w	80066c6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800646c:	4b48      	ldr	r3, [pc, #288]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006474:	2b18      	cmp	r3, #24
 8006476:	f000 80bd 	beq.w	80065f4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647e:	2b02      	cmp	r3, #2
 8006480:	f040 809e 	bne.w	80065c0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006484:	4b42      	ldr	r3, [pc, #264]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a41      	ldr	r2, [pc, #260]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 800648a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800648e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006490:	f7fb f980 	bl	8001794 <HAL_GetTick>
 8006494:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006496:	e008      	b.n	80064aa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006498:	f7fb f97c 	bl	8001794 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d901      	bls.n	80064aa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e10e      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064aa:	4b39      	ldr	r3, [pc, #228]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1f0      	bne.n	8006498 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064b6:	4b36      	ldr	r3, [pc, #216]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80064b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064ba:	4b37      	ldr	r3, [pc, #220]	@ (8006598 <HAL_RCC_OscConfig+0x774>)
 80064bc:	4013      	ands	r3, r2
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80064c6:	0112      	lsls	r2, r2, #4
 80064c8:	430a      	orrs	r2, r1
 80064ca:	4931      	ldr	r1, [pc, #196]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d4:	3b01      	subs	r3, #1
 80064d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064de:	3b01      	subs	r3, #1
 80064e0:	025b      	lsls	r3, r3, #9
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	431a      	orrs	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ea:	3b01      	subs	r3, #1
 80064ec:	041b      	lsls	r3, r3, #16
 80064ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f8:	3b01      	subs	r3, #1
 80064fa:	061b      	lsls	r3, r3, #24
 80064fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006500:	4923      	ldr	r1, [pc, #140]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006502:	4313      	orrs	r3, r2
 8006504:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006506:	4b22      	ldr	r3, [pc, #136]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800650a:	4a21      	ldr	r2, [pc, #132]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 800650c:	f023 0301 	bic.w	r3, r3, #1
 8006510:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006512:	4b1f      	ldr	r3, [pc, #124]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006514:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006516:	4b21      	ldr	r3, [pc, #132]	@ (800659c <HAL_RCC_OscConfig+0x778>)
 8006518:	4013      	ands	r3, r2
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800651e:	00d2      	lsls	r2, r2, #3
 8006520:	491b      	ldr	r1, [pc, #108]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006522:	4313      	orrs	r3, r2
 8006524:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006526:	4b1a      	ldr	r3, [pc, #104]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652a:	f023 020c 	bic.w	r2, r3, #12
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006532:	4917      	ldr	r1, [pc, #92]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006534:	4313      	orrs	r3, r2
 8006536:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006538:	4b15      	ldr	r3, [pc, #84]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 800653a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653c:	f023 0202 	bic.w	r2, r3, #2
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006544:	4912      	ldr	r1, [pc, #72]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006546:	4313      	orrs	r3, r2
 8006548:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800654a:	4b11      	ldr	r3, [pc, #68]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 800654c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800654e:	4a10      	ldr	r2, [pc, #64]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006554:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006556:	4b0e      	ldr	r3, [pc, #56]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655a:	4a0d      	ldr	r2, [pc, #52]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 800655c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006560:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006562:	4b0b      	ldr	r3, [pc, #44]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006566:	4a0a      	ldr	r2, [pc, #40]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006568:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800656c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800656e:	4b08      	ldr	r3, [pc, #32]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006572:	4a07      	ldr	r2, [pc, #28]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006574:	f043 0301 	orr.w	r3, r3, #1
 8006578:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800657a:	4b05      	ldr	r3, [pc, #20]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a04      	ldr	r2, [pc, #16]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006580:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006586:	f7fb f905 	bl	8001794 <HAL_GetTick>
 800658a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800658c:	e011      	b.n	80065b2 <HAL_RCC_OscConfig+0x78e>
 800658e:	bf00      	nop
 8006590:	58024400 	.word	0x58024400
 8006594:	58024800 	.word	0x58024800
 8006598:	fffffc0c 	.word	0xfffffc0c
 800659c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065a0:	f7fb f8f8 	bl	8001794 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e08a      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065b2:	4b47      	ldr	r3, [pc, #284]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0f0      	beq.n	80065a0 <HAL_RCC_OscConfig+0x77c>
 80065be:	e082      	b.n	80066c6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065c0:	4b43      	ldr	r3, [pc, #268]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a42      	ldr	r2, [pc, #264]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 80065c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065cc:	f7fb f8e2 	bl	8001794 <HAL_GetTick>
 80065d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065d2:	e008      	b.n	80065e6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065d4:	f7fb f8de 	bl	8001794 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e070      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065e6:	4b3a      	ldr	r3, [pc, #232]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1f0      	bne.n	80065d4 <HAL_RCC_OscConfig+0x7b0>
 80065f2:	e068      	b.n	80066c6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80065f4:	4b36      	ldr	r3, [pc, #216]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 80065f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80065fa:	4b35      	ldr	r3, [pc, #212]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 80065fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065fe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006604:	2b01      	cmp	r3, #1
 8006606:	d031      	beq.n	800666c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	f003 0203 	and.w	r2, r3, #3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006612:	429a      	cmp	r2, r3
 8006614:	d12a      	bne.n	800666c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	091b      	lsrs	r3, r3, #4
 800661a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006622:	429a      	cmp	r2, r3
 8006624:	d122      	bne.n	800666c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006630:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006632:	429a      	cmp	r2, r3
 8006634:	d11a      	bne.n	800666c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	0a5b      	lsrs	r3, r3, #9
 800663a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006642:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006644:	429a      	cmp	r2, r3
 8006646:	d111      	bne.n	800666c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	0c1b      	lsrs	r3, r3, #16
 800664c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006654:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006656:	429a      	cmp	r2, r3
 8006658:	d108      	bne.n	800666c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	0e1b      	lsrs	r3, r3, #24
 800665e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006666:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006668:	429a      	cmp	r2, r3
 800666a:	d001      	beq.n	8006670 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e02b      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006670:	4b17      	ldr	r3, [pc, #92]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 8006672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006674:	08db      	lsrs	r3, r3, #3
 8006676:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800667a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	429a      	cmp	r2, r3
 8006684:	d01f      	beq.n	80066c6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006686:	4b12      	ldr	r3, [pc, #72]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 8006688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800668a:	4a11      	ldr	r2, [pc, #68]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 800668c:	f023 0301 	bic.w	r3, r3, #1
 8006690:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006692:	f7fb f87f 	bl	8001794 <HAL_GetTick>
 8006696:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006698:	bf00      	nop
 800669a:	f7fb f87b 	bl	8001794 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d0f9      	beq.n	800669a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80066a6:	4b0a      	ldr	r3, [pc, #40]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 80066a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066aa:	4b0a      	ldr	r3, [pc, #40]	@ (80066d4 <HAL_RCC_OscConfig+0x8b0>)
 80066ac:	4013      	ands	r3, r2
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80066b2:	00d2      	lsls	r2, r2, #3
 80066b4:	4906      	ldr	r1, [pc, #24]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80066ba:	4b05      	ldr	r3, [pc, #20]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 80066bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066be:	4a04      	ldr	r2, [pc, #16]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 80066c0:	f043 0301 	orr.w	r3, r3, #1
 80066c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3730      	adds	r7, #48	@ 0x30
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	58024400 	.word	0x58024400
 80066d4:	ffff0007 	.word	0xffff0007

080066d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e19c      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066ec:	4b8a      	ldr	r3, [pc, #552]	@ (8006918 <HAL_RCC_ClockConfig+0x240>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 030f 	and.w	r3, r3, #15
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d910      	bls.n	800671c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066fa:	4b87      	ldr	r3, [pc, #540]	@ (8006918 <HAL_RCC_ClockConfig+0x240>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f023 020f 	bic.w	r2, r3, #15
 8006702:	4985      	ldr	r1, [pc, #532]	@ (8006918 <HAL_RCC_ClockConfig+0x240>)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	4313      	orrs	r3, r2
 8006708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800670a:	4b83      	ldr	r3, [pc, #524]	@ (8006918 <HAL_RCC_ClockConfig+0x240>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d001      	beq.n	800671c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e184      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0304 	and.w	r3, r3, #4
 8006724:	2b00      	cmp	r3, #0
 8006726:	d010      	beq.n	800674a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691a      	ldr	r2, [r3, #16]
 800672c:	4b7b      	ldr	r3, [pc, #492]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006734:	429a      	cmp	r2, r3
 8006736:	d908      	bls.n	800674a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006738:	4b78      	ldr	r3, [pc, #480]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	4975      	ldr	r1, [pc, #468]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 8006746:	4313      	orrs	r3, r2
 8006748:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0308 	and.w	r3, r3, #8
 8006752:	2b00      	cmp	r3, #0
 8006754:	d010      	beq.n	8006778 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695a      	ldr	r2, [r3, #20]
 800675a:	4b70      	ldr	r3, [pc, #448]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006762:	429a      	cmp	r2, r3
 8006764:	d908      	bls.n	8006778 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006766:	4b6d      	ldr	r3, [pc, #436]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	496a      	ldr	r1, [pc, #424]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 8006774:	4313      	orrs	r3, r2
 8006776:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0310 	and.w	r3, r3, #16
 8006780:	2b00      	cmp	r3, #0
 8006782:	d010      	beq.n	80067a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	699a      	ldr	r2, [r3, #24]
 8006788:	4b64      	ldr	r3, [pc, #400]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006790:	429a      	cmp	r2, r3
 8006792:	d908      	bls.n	80067a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006794:	4b61      	ldr	r3, [pc, #388]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	495e      	ldr	r1, [pc, #376]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0320 	and.w	r3, r3, #32
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d010      	beq.n	80067d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69da      	ldr	r2, [r3, #28]
 80067b6:	4b59      	ldr	r3, [pc, #356]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067be:	429a      	cmp	r2, r3
 80067c0:	d908      	bls.n	80067d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80067c2:	4b56      	ldr	r3, [pc, #344]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	4953      	ldr	r1, [pc, #332]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d010      	beq.n	8006802 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	4b4d      	ldr	r3, [pc, #308]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	f003 030f 	and.w	r3, r3, #15
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d908      	bls.n	8006802 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067f0:	4b4a      	ldr	r3, [pc, #296]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	f023 020f 	bic.w	r2, r3, #15
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	4947      	ldr	r1, [pc, #284]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d055      	beq.n	80068ba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800680e:	4b43      	ldr	r3, [pc, #268]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	4940      	ldr	r1, [pc, #256]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 800681c:	4313      	orrs	r3, r2
 800681e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	2b02      	cmp	r3, #2
 8006826:	d107      	bne.n	8006838 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006828:	4b3c      	ldr	r3, [pc, #240]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d121      	bne.n	8006878 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e0f6      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	2b03      	cmp	r3, #3
 800683e:	d107      	bne.n	8006850 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006840:	4b36      	ldr	r3, [pc, #216]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d115      	bne.n	8006878 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e0ea      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d107      	bne.n	8006868 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006858:	4b30      	ldr	r3, [pc, #192]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006860:	2b00      	cmp	r3, #0
 8006862:	d109      	bne.n	8006878 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e0de      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006868:	4b2c      	ldr	r3, [pc, #176]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e0d6      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006878:	4b28      	ldr	r3, [pc, #160]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	f023 0207 	bic.w	r2, r3, #7
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	4925      	ldr	r1, [pc, #148]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 8006886:	4313      	orrs	r3, r2
 8006888:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800688a:	f7fa ff83 	bl	8001794 <HAL_GetTick>
 800688e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006890:	e00a      	b.n	80068a8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006892:	f7fa ff7f 	bl	8001794 <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d901      	bls.n	80068a8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e0be      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068a8:	4b1c      	ldr	r3, [pc, #112]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	00db      	lsls	r3, r3, #3
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d1eb      	bne.n	8006892 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d010      	beq.n	80068e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	4b14      	ldr	r3, [pc, #80]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	f003 030f 	and.w	r3, r3, #15
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d208      	bcs.n	80068e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068d6:	4b11      	ldr	r3, [pc, #68]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	f023 020f 	bic.w	r2, r3, #15
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	490e      	ldr	r1, [pc, #56]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006918 <HAL_RCC_ClockConfig+0x240>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 030f 	and.w	r3, r3, #15
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d214      	bcs.n	8006920 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068f6:	4b08      	ldr	r3, [pc, #32]	@ (8006918 <HAL_RCC_ClockConfig+0x240>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f023 020f 	bic.w	r2, r3, #15
 80068fe:	4906      	ldr	r1, [pc, #24]	@ (8006918 <HAL_RCC_ClockConfig+0x240>)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	4313      	orrs	r3, r2
 8006904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006906:	4b04      	ldr	r3, [pc, #16]	@ (8006918 <HAL_RCC_ClockConfig+0x240>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 030f 	and.w	r3, r3, #15
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	429a      	cmp	r2, r3
 8006912:	d005      	beq.n	8006920 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e086      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
 8006918:	52002000 	.word	0x52002000
 800691c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b00      	cmp	r3, #0
 800692a:	d010      	beq.n	800694e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691a      	ldr	r2, [r3, #16]
 8006930:	4b3f      	ldr	r3, [pc, #252]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006938:	429a      	cmp	r2, r3
 800693a:	d208      	bcs.n	800694e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800693c:	4b3c      	ldr	r3, [pc, #240]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	4939      	ldr	r1, [pc, #228]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 800694a:	4313      	orrs	r3, r2
 800694c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0308 	and.w	r3, r3, #8
 8006956:	2b00      	cmp	r3, #0
 8006958:	d010      	beq.n	800697c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	695a      	ldr	r2, [r3, #20]
 800695e:	4b34      	ldr	r3, [pc, #208]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006966:	429a      	cmp	r2, r3
 8006968:	d208      	bcs.n	800697c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800696a:	4b31      	ldr	r3, [pc, #196]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	492e      	ldr	r1, [pc, #184]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 8006978:	4313      	orrs	r3, r2
 800697a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0310 	and.w	r3, r3, #16
 8006984:	2b00      	cmp	r3, #0
 8006986:	d010      	beq.n	80069aa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	699a      	ldr	r2, [r3, #24]
 800698c:	4b28      	ldr	r3, [pc, #160]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 800698e:	69db      	ldr	r3, [r3, #28]
 8006990:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006994:	429a      	cmp	r2, r3
 8006996:	d208      	bcs.n	80069aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006998:	4b25      	ldr	r3, [pc, #148]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	4922      	ldr	r1, [pc, #136]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0320 	and.w	r3, r3, #32
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d010      	beq.n	80069d8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	69da      	ldr	r2, [r3, #28]
 80069ba:	4b1d      	ldr	r3, [pc, #116]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d208      	bcs.n	80069d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80069c6:	4b1a      	ldr	r3, [pc, #104]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	4917      	ldr	r1, [pc, #92]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80069d8:	f000 f834 	bl	8006a44 <HAL_RCC_GetSysClockFreq>
 80069dc:	4602      	mov	r2, r0
 80069de:	4b14      	ldr	r3, [pc, #80]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	0a1b      	lsrs	r3, r3, #8
 80069e4:	f003 030f 	and.w	r3, r3, #15
 80069e8:	4912      	ldr	r1, [pc, #72]	@ (8006a34 <HAL_RCC_ClockConfig+0x35c>)
 80069ea:	5ccb      	ldrb	r3, [r1, r3]
 80069ec:	f003 031f 	and.w	r3, r3, #31
 80069f0:	fa22 f303 	lsr.w	r3, r2, r3
 80069f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069f6:	4b0e      	ldr	r3, [pc, #56]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	f003 030f 	and.w	r3, r3, #15
 80069fe:	4a0d      	ldr	r2, [pc, #52]	@ (8006a34 <HAL_RCC_ClockConfig+0x35c>)
 8006a00:	5cd3      	ldrb	r3, [r2, r3]
 8006a02:	f003 031f 	and.w	r3, r3, #31
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	fa22 f303 	lsr.w	r3, r2, r3
 8006a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8006a38 <HAL_RCC_ClockConfig+0x360>)
 8006a0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a10:	4a0a      	ldr	r2, [pc, #40]	@ (8006a3c <HAL_RCC_ClockConfig+0x364>)
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006a16:	4b0a      	ldr	r3, [pc, #40]	@ (8006a40 <HAL_RCC_ClockConfig+0x368>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7fa fe70 	bl	8001700 <HAL_InitTick>
 8006a20:	4603      	mov	r3, r0
 8006a22:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	58024400 	.word	0x58024400
 8006a34:	0800d14c 	.word	0x0800d14c
 8006a38:	24000004 	.word	0x24000004
 8006a3c:	24000000 	.word	0x24000000
 8006a40:	24000024 	.word	0x24000024

08006a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b089      	sub	sp, #36	@ 0x24
 8006a48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a4a:	4bb3      	ldr	r3, [pc, #716]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a52:	2b18      	cmp	r3, #24
 8006a54:	f200 8155 	bhi.w	8006d02 <HAL_RCC_GetSysClockFreq+0x2be>
 8006a58:	a201      	add	r2, pc, #4	@ (adr r2, 8006a60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5e:	bf00      	nop
 8006a60:	08006ac5 	.word	0x08006ac5
 8006a64:	08006d03 	.word	0x08006d03
 8006a68:	08006d03 	.word	0x08006d03
 8006a6c:	08006d03 	.word	0x08006d03
 8006a70:	08006d03 	.word	0x08006d03
 8006a74:	08006d03 	.word	0x08006d03
 8006a78:	08006d03 	.word	0x08006d03
 8006a7c:	08006d03 	.word	0x08006d03
 8006a80:	08006aeb 	.word	0x08006aeb
 8006a84:	08006d03 	.word	0x08006d03
 8006a88:	08006d03 	.word	0x08006d03
 8006a8c:	08006d03 	.word	0x08006d03
 8006a90:	08006d03 	.word	0x08006d03
 8006a94:	08006d03 	.word	0x08006d03
 8006a98:	08006d03 	.word	0x08006d03
 8006a9c:	08006d03 	.word	0x08006d03
 8006aa0:	08006af1 	.word	0x08006af1
 8006aa4:	08006d03 	.word	0x08006d03
 8006aa8:	08006d03 	.word	0x08006d03
 8006aac:	08006d03 	.word	0x08006d03
 8006ab0:	08006d03 	.word	0x08006d03
 8006ab4:	08006d03 	.word	0x08006d03
 8006ab8:	08006d03 	.word	0x08006d03
 8006abc:	08006d03 	.word	0x08006d03
 8006ac0:	08006af7 	.word	0x08006af7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ac4:	4b94      	ldr	r3, [pc, #592]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0320 	and.w	r3, r3, #32
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d009      	beq.n	8006ae4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ad0:	4b91      	ldr	r3, [pc, #580]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	08db      	lsrs	r3, r3, #3
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	4a90      	ldr	r2, [pc, #576]	@ (8006d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006adc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006ae2:	e111      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006ae4:	4b8d      	ldr	r3, [pc, #564]	@ (8006d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ae6:	61bb      	str	r3, [r7, #24]
      break;
 8006ae8:	e10e      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006aea:	4b8d      	ldr	r3, [pc, #564]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006aec:	61bb      	str	r3, [r7, #24]
      break;
 8006aee:	e10b      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006af0:	4b8c      	ldr	r3, [pc, #560]	@ (8006d24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006af2:	61bb      	str	r3, [r7, #24]
      break;
 8006af4:	e108      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006af6:	4b88      	ldr	r3, [pc, #544]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006b00:	4b85      	ldr	r3, [pc, #532]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b04:	091b      	lsrs	r3, r3, #4
 8006b06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b0a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b0c:	4b82      	ldr	r3, [pc, #520]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006b16:	4b80      	ldr	r3, [pc, #512]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b1a:	08db      	lsrs	r3, r3, #3
 8006b1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	fb02 f303 	mul.w	r3, r2, r3
 8006b26:	ee07 3a90 	vmov	s15, r3
 8006b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 80e1 	beq.w	8006cfc <HAL_RCC_GetSysClockFreq+0x2b8>
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	f000 8083 	beq.w	8006c48 <HAL_RCC_GetSysClockFreq+0x204>
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	f200 80a1 	bhi.w	8006c8c <HAL_RCC_GetSysClockFreq+0x248>
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d003      	beq.n	8006b58 <HAL_RCC_GetSysClockFreq+0x114>
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d056      	beq.n	8006c04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006b56:	e099      	b.n	8006c8c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b58:	4b6f      	ldr	r3, [pc, #444]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0320 	and.w	r3, r3, #32
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d02d      	beq.n	8006bc0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b64:	4b6c      	ldr	r3, [pc, #432]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	08db      	lsrs	r3, r3, #3
 8006b6a:	f003 0303 	and.w	r3, r3, #3
 8006b6e:	4a6b      	ldr	r2, [pc, #428]	@ (8006d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b70:	fa22 f303 	lsr.w	r3, r2, r3
 8006b74:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	ee07 3a90 	vmov	s15, r3
 8006b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	ee07 3a90 	vmov	s15, r3
 8006b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b8e:	4b62      	ldr	r3, [pc, #392]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b96:	ee07 3a90 	vmov	s15, r3
 8006b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ba2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006bbe:	e087      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	ee07 3a90 	vmov	s15, r3
 8006bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bca:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006d2c <HAL_RCC_GetSysClockFreq+0x2e8>
 8006bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bd2:	4b51      	ldr	r3, [pc, #324]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bda:	ee07 3a90 	vmov	s15, r3
 8006bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006be2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006be6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c02:	e065      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	ee07 3a90 	vmov	s15, r3
 8006c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c0e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006d30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c16:	4b40      	ldr	r3, [pc, #256]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c1e:	ee07 3a90 	vmov	s15, r3
 8006c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c26:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c2a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c46:	e043      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c52:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006d34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c62:	ee07 3a90 	vmov	s15, r3
 8006c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c6e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c8a:	e021      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c96:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006d30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca6:	ee07 3a90 	vmov	s15, r3
 8006caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cae:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cb2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006cd0:	4b11      	ldr	r3, [pc, #68]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd4:	0a5b      	lsrs	r3, r3, #9
 8006cd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cda:	3301      	adds	r3, #1
 8006cdc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	ee07 3a90 	vmov	s15, r3
 8006ce4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ce8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cf4:	ee17 3a90 	vmov	r3, s15
 8006cf8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006cfa:	e005      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	61bb      	str	r3, [r7, #24]
      break;
 8006d00:	e002      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006d02:	4b07      	ldr	r3, [pc, #28]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d04:	61bb      	str	r3, [r7, #24]
      break;
 8006d06:	bf00      	nop
  }

  return sysclockfreq;
 8006d08:	69bb      	ldr	r3, [r7, #24]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3724      	adds	r7, #36	@ 0x24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	58024400 	.word	0x58024400
 8006d1c:	03d09000 	.word	0x03d09000
 8006d20:	003d0900 	.word	0x003d0900
 8006d24:	017d7840 	.word	0x017d7840
 8006d28:	46000000 	.word	0x46000000
 8006d2c:	4c742400 	.word	0x4c742400
 8006d30:	4a742400 	.word	0x4a742400
 8006d34:	4bbebc20 	.word	0x4bbebc20

08006d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d3e:	f7ff fe81 	bl	8006a44 <HAL_RCC_GetSysClockFreq>
 8006d42:	4602      	mov	r2, r0
 8006d44:	4b10      	ldr	r3, [pc, #64]	@ (8006d88 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	0a1b      	lsrs	r3, r3, #8
 8006d4a:	f003 030f 	and.w	r3, r3, #15
 8006d4e:	490f      	ldr	r1, [pc, #60]	@ (8006d8c <HAL_RCC_GetHCLKFreq+0x54>)
 8006d50:	5ccb      	ldrb	r3, [r1, r3]
 8006d52:	f003 031f 	and.w	r3, r3, #31
 8006d56:	fa22 f303 	lsr.w	r3, r2, r3
 8006d5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d88 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	f003 030f 	and.w	r3, r3, #15
 8006d64:	4a09      	ldr	r2, [pc, #36]	@ (8006d8c <HAL_RCC_GetHCLKFreq+0x54>)
 8006d66:	5cd3      	ldrb	r3, [r2, r3]
 8006d68:	f003 031f 	and.w	r3, r3, #31
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d72:	4a07      	ldr	r2, [pc, #28]	@ (8006d90 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d76:	4a07      	ldr	r2, [pc, #28]	@ (8006d94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006d7c:	4b04      	ldr	r3, [pc, #16]	@ (8006d90 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	58024400 	.word	0x58024400
 8006d8c:	0800d14c 	.word	0x0800d14c
 8006d90:	24000004 	.word	0x24000004
 8006d94:	24000000 	.word	0x24000000

08006d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006d9c:	f7ff ffcc 	bl	8006d38 <HAL_RCC_GetHCLKFreq>
 8006da0:	4602      	mov	r2, r0
 8006da2:	4b06      	ldr	r3, [pc, #24]	@ (8006dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006da4:	69db      	ldr	r3, [r3, #28]
 8006da6:	091b      	lsrs	r3, r3, #4
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	4904      	ldr	r1, [pc, #16]	@ (8006dc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006dae:	5ccb      	ldrb	r3, [r1, r3]
 8006db0:	f003 031f 	and.w	r3, r3, #31
 8006db4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	58024400 	.word	0x58024400
 8006dc0:	0800d14c 	.word	0x0800d14c

08006dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006dc8:	f7ff ffb6 	bl	8006d38 <HAL_RCC_GetHCLKFreq>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	4b06      	ldr	r3, [pc, #24]	@ (8006de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	0a1b      	lsrs	r3, r3, #8
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	4904      	ldr	r1, [pc, #16]	@ (8006dec <HAL_RCC_GetPCLK2Freq+0x28>)
 8006dda:	5ccb      	ldrb	r3, [r1, r3]
 8006ddc:	f003 031f 	and.w	r3, r3, #31
 8006de0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	58024400 	.word	0x58024400
 8006dec:	0800d14c 	.word	0x0800d14c

08006df0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006df4:	b0ca      	sub	sp, #296	@ 0x128
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e02:	2300      	movs	r3, #0
 8006e04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e10:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006e14:	2500      	movs	r5, #0
 8006e16:	ea54 0305 	orrs.w	r3, r4, r5
 8006e1a:	d049      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e26:	d02f      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006e28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e2c:	d828      	bhi.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e32:	d01a      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006e34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e38:	d822      	bhi.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d003      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006e3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e42:	d007      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e44:	e01c      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e46:	4bb8      	ldr	r3, [pc, #736]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e4a:	4ab7      	ldr	r2, [pc, #732]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e52:	e01a      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e58:	3308      	adds	r3, #8
 8006e5a:	2102      	movs	r1, #2
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f002 fb61 	bl	8009524 <RCCEx_PLL2_Config>
 8006e62:	4603      	mov	r3, r0
 8006e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e68:	e00f      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6e:	3328      	adds	r3, #40	@ 0x28
 8006e70:	2102      	movs	r1, #2
 8006e72:	4618      	mov	r0, r3
 8006e74:	f002 fc08 	bl	8009688 <RCCEx_PLL3_Config>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e7e:	e004      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e86:	e000      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10a      	bne.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006e92:	4ba5      	ldr	r3, [pc, #660]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ea0:	4aa1      	ldr	r2, [pc, #644]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ea2:	430b      	orrs	r3, r1
 8006ea4:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ea6:	e003      	b.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006ebc:	f04f 0900 	mov.w	r9, #0
 8006ec0:	ea58 0309 	orrs.w	r3, r8, r9
 8006ec4:	d047      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ecc:	2b04      	cmp	r3, #4
 8006ece:	d82a      	bhi.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed6:	bf00      	nop
 8006ed8:	08006eed 	.word	0x08006eed
 8006edc:	08006efb 	.word	0x08006efb
 8006ee0:	08006f11 	.word	0x08006f11
 8006ee4:	08006f2f 	.word	0x08006f2f
 8006ee8:	08006f2f 	.word	0x08006f2f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eec:	4b8e      	ldr	r3, [pc, #568]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef0:	4a8d      	ldr	r2, [pc, #564]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ef2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ef6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ef8:	e01a      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006efe:	3308      	adds	r3, #8
 8006f00:	2100      	movs	r1, #0
 8006f02:	4618      	mov	r0, r3
 8006f04:	f002 fb0e 	bl	8009524 <RCCEx_PLL2_Config>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f0e:	e00f      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f14:	3328      	adds	r3, #40	@ 0x28
 8006f16:	2100      	movs	r1, #0
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f002 fbb5 	bl	8009688 <RCCEx_PLL3_Config>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f24:	e004      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f2c:	e000      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006f2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f38:	4b7b      	ldr	r3, [pc, #492]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f3c:	f023 0107 	bic.w	r1, r3, #7
 8006f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f46:	4a78      	ldr	r2, [pc, #480]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f4c:	e003      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006f62:	f04f 0b00 	mov.w	fp, #0
 8006f66:	ea5a 030b 	orrs.w	r3, sl, fp
 8006f6a:	d04c      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f76:	d030      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006f78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f7c:	d829      	bhi.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f80:	d02d      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006f82:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f84:	d825      	bhi.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f86:	2b80      	cmp	r3, #128	@ 0x80
 8006f88:	d018      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006f8a:	2b80      	cmp	r3, #128	@ 0x80
 8006f8c:	d821      	bhi.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d002      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006f92:	2b40      	cmp	r3, #64	@ 0x40
 8006f94:	d007      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006f96:	e01c      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f98:	4b63      	ldr	r3, [pc, #396]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f9c:	4a62      	ldr	r2, [pc, #392]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006fa4:	e01c      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006faa:	3308      	adds	r3, #8
 8006fac:	2100      	movs	r1, #0
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f002 fab8 	bl	8009524 <RCCEx_PLL2_Config>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006fba:	e011      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc0:	3328      	adds	r3, #40	@ 0x28
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f002 fb5f 	bl	8009688 <RCCEx_PLL3_Config>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006fd0:	e006      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fd8:	e002      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006fda:	bf00      	nop
 8006fdc:	e000      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006fde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d10a      	bne.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006fe8:	4b4f      	ldr	r3, [pc, #316]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fec:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ff6:	4a4c      	ldr	r2, [pc, #304]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ff8:	430b      	orrs	r3, r1
 8006ffa:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ffc:	e003      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007002:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800700a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007012:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007016:	2300      	movs	r3, #0
 8007018:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800701c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007020:	460b      	mov	r3, r1
 8007022:	4313      	orrs	r3, r2
 8007024:	d053      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800702a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800702e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007032:	d035      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007034:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007038:	d82e      	bhi.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800703a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800703e:	d031      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007040:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007044:	d828      	bhi.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007046:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800704a:	d01a      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800704c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007050:	d822      	bhi.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007052:	2b00      	cmp	r3, #0
 8007054:	d003      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007056:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800705a:	d007      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800705c:	e01c      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800705e:	4b32      	ldr	r3, [pc, #200]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007062:	4a31      	ldr	r2, [pc, #196]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007068:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800706a:	e01c      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800706c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007070:	3308      	adds	r3, #8
 8007072:	2100      	movs	r1, #0
 8007074:	4618      	mov	r0, r3
 8007076:	f002 fa55 	bl	8009524 <RCCEx_PLL2_Config>
 800707a:	4603      	mov	r3, r0
 800707c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007080:	e011      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007086:	3328      	adds	r3, #40	@ 0x28
 8007088:	2100      	movs	r1, #0
 800708a:	4618      	mov	r0, r3
 800708c:	f002 fafc 	bl	8009688 <RCCEx_PLL3_Config>
 8007090:	4603      	mov	r3, r0
 8007092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007096:	e006      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800709e:	e002      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80070a0:	bf00      	nop
 80070a2:	e000      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80070a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10b      	bne.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80070ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070b2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80070b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80070be:	4a1a      	ldr	r2, [pc, #104]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070c0:	430b      	orrs	r3, r1
 80070c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80070c4:	e003      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80070ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80070da:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80070de:	2300      	movs	r3, #0
 80070e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80070e4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80070e8:	460b      	mov	r3, r1
 80070ea:	4313      	orrs	r3, r2
 80070ec:	d056      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80070ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80070f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80070fa:	d038      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80070fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007100:	d831      	bhi.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007102:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007106:	d034      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007108:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800710c:	d82b      	bhi.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800710e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007112:	d01d      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007114:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007118:	d825      	bhi.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800711a:	2b00      	cmp	r3, #0
 800711c:	d006      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800711e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007122:	d00a      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007124:	e01f      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007126:	bf00      	nop
 8007128:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800712c:	4ba2      	ldr	r3, [pc, #648]	@ (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800712e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007130:	4aa1      	ldr	r2, [pc, #644]	@ (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007136:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007138:	e01c      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800713a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800713e:	3308      	adds	r3, #8
 8007140:	2100      	movs	r1, #0
 8007142:	4618      	mov	r0, r3
 8007144:	f002 f9ee 	bl	8009524 <RCCEx_PLL2_Config>
 8007148:	4603      	mov	r3, r0
 800714a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800714e:	e011      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007154:	3328      	adds	r3, #40	@ 0x28
 8007156:	2100      	movs	r1, #0
 8007158:	4618      	mov	r0, r3
 800715a:	f002 fa95 	bl	8009688 <RCCEx_PLL3_Config>
 800715e:	4603      	mov	r3, r0
 8007160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007164:	e006      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800716c:	e002      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800716e:	bf00      	nop
 8007170:	e000      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007172:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007174:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10b      	bne.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800717c:	4b8e      	ldr	r3, [pc, #568]	@ (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800717e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007180:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007188:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800718c:	4a8a      	ldr	r2, [pc, #552]	@ (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800718e:	430b      	orrs	r3, r1
 8007190:	6593      	str	r3, [r2, #88]	@ 0x58
 8007192:	e003      	b.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007194:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007198:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800719c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80071a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80071ac:	2300      	movs	r3, #0
 80071ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80071b2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80071b6:	460b      	mov	r3, r1
 80071b8:	4313      	orrs	r3, r2
 80071ba:	d03a      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80071bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071c2:	2b30      	cmp	r3, #48	@ 0x30
 80071c4:	d01f      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80071c6:	2b30      	cmp	r3, #48	@ 0x30
 80071c8:	d819      	bhi.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80071ca:	2b20      	cmp	r3, #32
 80071cc:	d00c      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80071ce:	2b20      	cmp	r3, #32
 80071d0:	d815      	bhi.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d019      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80071d6:	2b10      	cmp	r3, #16
 80071d8:	d111      	bne.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071da:	4b77      	ldr	r3, [pc, #476]	@ (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071de:	4a76      	ldr	r2, [pc, #472]	@ (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80071e6:	e011      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ec:	3308      	adds	r3, #8
 80071ee:	2102      	movs	r1, #2
 80071f0:	4618      	mov	r0, r3
 80071f2:	f002 f997 	bl	8009524 <RCCEx_PLL2_Config>
 80071f6:	4603      	mov	r3, r0
 80071f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80071fc:	e006      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007204:	e002      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007206:	bf00      	nop
 8007208:	e000      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800720a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800720c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10a      	bne.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007214:	4b68      	ldr	r3, [pc, #416]	@ (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007218:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800721c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007222:	4a65      	ldr	r2, [pc, #404]	@ (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007224:	430b      	orrs	r3, r1
 8007226:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007228:	e003      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800722e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800723e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007242:	2300      	movs	r3, #0
 8007244:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007248:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800724c:	460b      	mov	r3, r1
 800724e:	4313      	orrs	r3, r2
 8007250:	d051      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007258:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800725c:	d035      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800725e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007262:	d82e      	bhi.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007264:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007268:	d031      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800726a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800726e:	d828      	bhi.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007270:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007274:	d01a      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007276:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800727a:	d822      	bhi.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007280:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007284:	d007      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007286:	e01c      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007288:	4b4b      	ldr	r3, [pc, #300]	@ (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800728a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728c:	4a4a      	ldr	r2, [pc, #296]	@ (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800728e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007292:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007294:	e01c      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800729a:	3308      	adds	r3, #8
 800729c:	2100      	movs	r1, #0
 800729e:	4618      	mov	r0, r3
 80072a0:	f002 f940 	bl	8009524 <RCCEx_PLL2_Config>
 80072a4:	4603      	mov	r3, r0
 80072a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80072aa:	e011      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b0:	3328      	adds	r3, #40	@ 0x28
 80072b2:	2100      	movs	r1, #0
 80072b4:	4618      	mov	r0, r3
 80072b6:	f002 f9e7 	bl	8009688 <RCCEx_PLL3_Config>
 80072ba:	4603      	mov	r3, r0
 80072bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80072c0:	e006      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072c8:	e002      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80072ca:	bf00      	nop
 80072cc:	e000      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80072ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10a      	bne.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80072d8:	4b37      	ldr	r3, [pc, #220]	@ (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072dc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80072e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072e6:	4a34      	ldr	r2, [pc, #208]	@ (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072e8:	430b      	orrs	r3, r1
 80072ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80072ec:	e003      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80072f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007302:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007306:	2300      	movs	r3, #0
 8007308:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800730c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007310:	460b      	mov	r3, r1
 8007312:	4313      	orrs	r3, r2
 8007314:	d056      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800731a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800731c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007320:	d033      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007322:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007326:	d82c      	bhi.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007328:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800732c:	d02f      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800732e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007332:	d826      	bhi.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007334:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007338:	d02b      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800733a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800733e:	d820      	bhi.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007340:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007344:	d012      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007346:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800734a:	d81a      	bhi.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800734c:	2b00      	cmp	r3, #0
 800734e:	d022      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007354:	d115      	bne.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800735a:	3308      	adds	r3, #8
 800735c:	2101      	movs	r1, #1
 800735e:	4618      	mov	r0, r3
 8007360:	f002 f8e0 	bl	8009524 <RCCEx_PLL2_Config>
 8007364:	4603      	mov	r3, r0
 8007366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800736a:	e015      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800736c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007370:	3328      	adds	r3, #40	@ 0x28
 8007372:	2101      	movs	r1, #1
 8007374:	4618      	mov	r0, r3
 8007376:	f002 f987 	bl	8009688 <RCCEx_PLL3_Config>
 800737a:	4603      	mov	r3, r0
 800737c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007380:	e00a      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007388:	e006      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800738a:	bf00      	nop
 800738c:	e004      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800738e:	bf00      	nop
 8007390:	e002      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007392:	bf00      	nop
 8007394:	e000      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007396:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007398:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10d      	bne.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80073a0:	4b05      	ldr	r3, [pc, #20]	@ (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073a4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80073a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073ae:	4a02      	ldr	r2, [pc, #8]	@ (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073b0:	430b      	orrs	r3, r1
 80073b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80073b4:	e006      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80073b6:	bf00      	nop
 80073b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80073c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073cc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80073d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80073d4:	2300      	movs	r3, #0
 80073d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80073da:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80073de:	460b      	mov	r3, r1
 80073e0:	4313      	orrs	r3, r2
 80073e2:	d055      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80073e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80073ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073f0:	d033      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80073f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073f6:	d82c      	bhi.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80073f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073fc:	d02f      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80073fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007402:	d826      	bhi.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007404:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007408:	d02b      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800740a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800740e:	d820      	bhi.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007410:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007414:	d012      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800741a:	d81a      	bhi.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800741c:	2b00      	cmp	r3, #0
 800741e:	d022      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007420:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007424:	d115      	bne.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800742a:	3308      	adds	r3, #8
 800742c:	2101      	movs	r1, #1
 800742e:	4618      	mov	r0, r3
 8007430:	f002 f878 	bl	8009524 <RCCEx_PLL2_Config>
 8007434:	4603      	mov	r3, r0
 8007436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800743a:	e015      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800743c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007440:	3328      	adds	r3, #40	@ 0x28
 8007442:	2101      	movs	r1, #1
 8007444:	4618      	mov	r0, r3
 8007446:	f002 f91f 	bl	8009688 <RCCEx_PLL3_Config>
 800744a:	4603      	mov	r3, r0
 800744c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007450:	e00a      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007458:	e006      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800745a:	bf00      	nop
 800745c:	e004      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800745e:	bf00      	nop
 8007460:	e002      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007462:	bf00      	nop
 8007464:	e000      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007466:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10b      	bne.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007470:	4ba3      	ldr	r3, [pc, #652]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007474:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800747c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007480:	4a9f      	ldr	r2, [pc, #636]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007482:	430b      	orrs	r3, r1
 8007484:	6593      	str	r3, [r2, #88]	@ 0x58
 8007486:	e003      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007488:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800748c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007498:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800749c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80074a0:	2300      	movs	r3, #0
 80074a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80074a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80074aa:	460b      	mov	r3, r1
 80074ac:	4313      	orrs	r3, r2
 80074ae:	d037      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80074b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074ba:	d00e      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80074bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074c0:	d816      	bhi.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d018      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80074c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074ca:	d111      	bne.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074cc:	4b8c      	ldr	r3, [pc, #560]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d0:	4a8b      	ldr	r2, [pc, #556]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074d8:	e00f      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074de:	3308      	adds	r3, #8
 80074e0:	2101      	movs	r1, #1
 80074e2:	4618      	mov	r0, r3
 80074e4:	f002 f81e 	bl	8009524 <RCCEx_PLL2_Config>
 80074e8:	4603      	mov	r3, r0
 80074ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074ee:	e004      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074f6:	e000      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80074f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d10a      	bne.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007502:	4b7f      	ldr	r3, [pc, #508]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007506:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800750a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800750e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007510:	4a7b      	ldr	r2, [pc, #492]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007512:	430b      	orrs	r3, r1
 8007514:	6513      	str	r3, [r2, #80]	@ 0x50
 8007516:	e003      	b.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007518:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800751c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800752c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007530:	2300      	movs	r3, #0
 8007532:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007536:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800753a:	460b      	mov	r3, r1
 800753c:	4313      	orrs	r3, r2
 800753e:	d039      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007546:	2b03      	cmp	r3, #3
 8007548:	d81c      	bhi.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800754a:	a201      	add	r2, pc, #4	@ (adr r2, 8007550 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800754c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007550:	0800758d 	.word	0x0800758d
 8007554:	08007561 	.word	0x08007561
 8007558:	0800756f 	.word	0x0800756f
 800755c:	0800758d 	.word	0x0800758d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007560:	4b67      	ldr	r3, [pc, #412]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007564:	4a66      	ldr	r2, [pc, #408]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007566:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800756a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800756c:	e00f      	b.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800756e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007572:	3308      	adds	r3, #8
 8007574:	2102      	movs	r1, #2
 8007576:	4618      	mov	r0, r3
 8007578:	f001 ffd4 	bl	8009524 <RCCEx_PLL2_Config>
 800757c:	4603      	mov	r3, r0
 800757e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007582:	e004      	b.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800758a:	e000      	b.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800758c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800758e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10a      	bne.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007596:	4b5a      	ldr	r3, [pc, #360]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800759a:	f023 0103 	bic.w	r1, r3, #3
 800759e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075a4:	4a56      	ldr	r2, [pc, #344]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075a6:	430b      	orrs	r3, r1
 80075a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80075aa:	e003      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075bc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80075c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80075c4:	2300      	movs	r3, #0
 80075c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80075ca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80075ce:	460b      	mov	r3, r1
 80075d0:	4313      	orrs	r3, r2
 80075d2:	f000 809f 	beq.w	8007714 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075d6:	4b4b      	ldr	r3, [pc, #300]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a4a      	ldr	r2, [pc, #296]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80075dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075e2:	f7fa f8d7 	bl	8001794 <HAL_GetTick>
 80075e6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075ea:	e00b      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075ec:	f7fa f8d2 	bl	8001794 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	2b64      	cmp	r3, #100	@ 0x64
 80075fa:	d903      	bls.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007602:	e005      	b.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007604:	4b3f      	ldr	r3, [pc, #252]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800760c:	2b00      	cmp	r3, #0
 800760e:	d0ed      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007610:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007614:	2b00      	cmp	r3, #0
 8007616:	d179      	bne.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007618:	4b39      	ldr	r3, [pc, #228]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800761a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800761c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007620:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007624:	4053      	eors	r3, r2
 8007626:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800762a:	2b00      	cmp	r3, #0
 800762c:	d015      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800762e:	4b34      	ldr	r3, [pc, #208]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007632:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007636:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800763a:	4b31      	ldr	r3, [pc, #196]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800763c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800763e:	4a30      	ldr	r2, [pc, #192]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007644:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007646:	4b2e      	ldr	r3, [pc, #184]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800764a:	4a2d      	ldr	r2, [pc, #180]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800764c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007650:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007652:	4a2b      	ldr	r2, [pc, #172]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007654:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007658:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800765a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800765e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007662:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007666:	d118      	bne.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007668:	f7fa f894 	bl	8001794 <HAL_GetTick>
 800766c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007670:	e00d      	b.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007672:	f7fa f88f 	bl	8001794 <HAL_GetTick>
 8007676:	4602      	mov	r2, r0
 8007678:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800767c:	1ad2      	subs	r2, r2, r3
 800767e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007682:	429a      	cmp	r2, r3
 8007684:	d903      	bls.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800768c:	e005      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800768e:	4b1c      	ldr	r3, [pc, #112]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	2b00      	cmp	r3, #0
 8007698:	d0eb      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800769a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d129      	bne.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80076aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076b2:	d10e      	bne.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80076b4:	4b12      	ldr	r3, [pc, #72]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80076bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80076c4:	091a      	lsrs	r2, r3, #4
 80076c6:	4b10      	ldr	r3, [pc, #64]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80076c8:	4013      	ands	r3, r2
 80076ca:	4a0d      	ldr	r2, [pc, #52]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076cc:	430b      	orrs	r3, r1
 80076ce:	6113      	str	r3, [r2, #16]
 80076d0:	e005      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80076d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	4a0a      	ldr	r2, [pc, #40]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80076dc:	6113      	str	r3, [r2, #16]
 80076de:	4b08      	ldr	r3, [pc, #32]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076e0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80076e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80076ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076ee:	4a04      	ldr	r2, [pc, #16]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076f0:	430b      	orrs	r3, r1
 80076f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80076f4:	e00e      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80076fe:	e009      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007700:	58024400 	.word	0x58024400
 8007704:	58024800 	.word	0x58024800
 8007708:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800770c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007710:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771c:	f002 0301 	and.w	r3, r2, #1
 8007720:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007724:	2300      	movs	r3, #0
 8007726:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800772a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800772e:	460b      	mov	r3, r1
 8007730:	4313      	orrs	r3, r2
 8007732:	f000 8089 	beq.w	8007848 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800773a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800773c:	2b28      	cmp	r3, #40	@ 0x28
 800773e:	d86b      	bhi.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007740:	a201      	add	r2, pc, #4	@ (adr r2, 8007748 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007746:	bf00      	nop
 8007748:	08007821 	.word	0x08007821
 800774c:	08007819 	.word	0x08007819
 8007750:	08007819 	.word	0x08007819
 8007754:	08007819 	.word	0x08007819
 8007758:	08007819 	.word	0x08007819
 800775c:	08007819 	.word	0x08007819
 8007760:	08007819 	.word	0x08007819
 8007764:	08007819 	.word	0x08007819
 8007768:	080077ed 	.word	0x080077ed
 800776c:	08007819 	.word	0x08007819
 8007770:	08007819 	.word	0x08007819
 8007774:	08007819 	.word	0x08007819
 8007778:	08007819 	.word	0x08007819
 800777c:	08007819 	.word	0x08007819
 8007780:	08007819 	.word	0x08007819
 8007784:	08007819 	.word	0x08007819
 8007788:	08007803 	.word	0x08007803
 800778c:	08007819 	.word	0x08007819
 8007790:	08007819 	.word	0x08007819
 8007794:	08007819 	.word	0x08007819
 8007798:	08007819 	.word	0x08007819
 800779c:	08007819 	.word	0x08007819
 80077a0:	08007819 	.word	0x08007819
 80077a4:	08007819 	.word	0x08007819
 80077a8:	08007821 	.word	0x08007821
 80077ac:	08007819 	.word	0x08007819
 80077b0:	08007819 	.word	0x08007819
 80077b4:	08007819 	.word	0x08007819
 80077b8:	08007819 	.word	0x08007819
 80077bc:	08007819 	.word	0x08007819
 80077c0:	08007819 	.word	0x08007819
 80077c4:	08007819 	.word	0x08007819
 80077c8:	08007821 	.word	0x08007821
 80077cc:	08007819 	.word	0x08007819
 80077d0:	08007819 	.word	0x08007819
 80077d4:	08007819 	.word	0x08007819
 80077d8:	08007819 	.word	0x08007819
 80077dc:	08007819 	.word	0x08007819
 80077e0:	08007819 	.word	0x08007819
 80077e4:	08007819 	.word	0x08007819
 80077e8:	08007821 	.word	0x08007821
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f0:	3308      	adds	r3, #8
 80077f2:	2101      	movs	r1, #1
 80077f4:	4618      	mov	r0, r3
 80077f6:	f001 fe95 	bl	8009524 <RCCEx_PLL2_Config>
 80077fa:	4603      	mov	r3, r0
 80077fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007800:	e00f      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007806:	3328      	adds	r3, #40	@ 0x28
 8007808:	2101      	movs	r1, #1
 800780a:	4618      	mov	r0, r3
 800780c:	f001 ff3c 	bl	8009688 <RCCEx_PLL3_Config>
 8007810:	4603      	mov	r3, r0
 8007812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007816:	e004      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800781e:	e000      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007820:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10a      	bne.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800782a:	4bbf      	ldr	r3, [pc, #764]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800782c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800782e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007836:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007838:	4abb      	ldr	r2, [pc, #748]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800783a:	430b      	orrs	r3, r1
 800783c:	6553      	str	r3, [r2, #84]	@ 0x54
 800783e:	e003      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007840:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007844:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	f002 0302 	and.w	r3, r2, #2
 8007854:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007858:	2300      	movs	r3, #0
 800785a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800785e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007862:	460b      	mov	r3, r1
 8007864:	4313      	orrs	r3, r2
 8007866:	d041      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800786c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800786e:	2b05      	cmp	r3, #5
 8007870:	d824      	bhi.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007872:	a201      	add	r2, pc, #4	@ (adr r2, 8007878 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007878:	080078c5 	.word	0x080078c5
 800787c:	08007891 	.word	0x08007891
 8007880:	080078a7 	.word	0x080078a7
 8007884:	080078c5 	.word	0x080078c5
 8007888:	080078c5 	.word	0x080078c5
 800788c:	080078c5 	.word	0x080078c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007894:	3308      	adds	r3, #8
 8007896:	2101      	movs	r1, #1
 8007898:	4618      	mov	r0, r3
 800789a:	f001 fe43 	bl	8009524 <RCCEx_PLL2_Config>
 800789e:	4603      	mov	r3, r0
 80078a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80078a4:	e00f      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078aa:	3328      	adds	r3, #40	@ 0x28
 80078ac:	2101      	movs	r1, #1
 80078ae:	4618      	mov	r0, r3
 80078b0:	f001 feea 	bl	8009688 <RCCEx_PLL3_Config>
 80078b4:	4603      	mov	r3, r0
 80078b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80078ba:	e004      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078c2:	e000      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80078c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10a      	bne.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80078ce:	4b96      	ldr	r3, [pc, #600]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078d2:	f023 0107 	bic.w	r1, r3, #7
 80078d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078dc:	4a92      	ldr	r2, [pc, #584]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078de:	430b      	orrs	r3, r1
 80078e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80078e2:	e003      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f4:	f002 0304 	and.w	r3, r2, #4
 80078f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80078fc:	2300      	movs	r3, #0
 80078fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007902:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007906:	460b      	mov	r3, r1
 8007908:	4313      	orrs	r3, r2
 800790a:	d044      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800790c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007910:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007914:	2b05      	cmp	r3, #5
 8007916:	d825      	bhi.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007918:	a201      	add	r2, pc, #4	@ (adr r2, 8007920 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800791a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791e:	bf00      	nop
 8007920:	0800796d 	.word	0x0800796d
 8007924:	08007939 	.word	0x08007939
 8007928:	0800794f 	.word	0x0800794f
 800792c:	0800796d 	.word	0x0800796d
 8007930:	0800796d 	.word	0x0800796d
 8007934:	0800796d 	.word	0x0800796d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800793c:	3308      	adds	r3, #8
 800793e:	2101      	movs	r1, #1
 8007940:	4618      	mov	r0, r3
 8007942:	f001 fdef 	bl	8009524 <RCCEx_PLL2_Config>
 8007946:	4603      	mov	r3, r0
 8007948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800794c:	e00f      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800794e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007952:	3328      	adds	r3, #40	@ 0x28
 8007954:	2101      	movs	r1, #1
 8007956:	4618      	mov	r0, r3
 8007958:	f001 fe96 	bl	8009688 <RCCEx_PLL3_Config>
 800795c:	4603      	mov	r3, r0
 800795e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007962:	e004      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800796a:	e000      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800796c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800796e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10b      	bne.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007976:	4b6c      	ldr	r3, [pc, #432]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800797a:	f023 0107 	bic.w	r1, r3, #7
 800797e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007982:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007986:	4a68      	ldr	r2, [pc, #416]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007988:	430b      	orrs	r3, r1
 800798a:	6593      	str	r3, [r2, #88]	@ 0x58
 800798c:	e003      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800798e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007992:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800799a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799e:	f002 0320 	and.w	r3, r2, #32
 80079a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079a6:	2300      	movs	r3, #0
 80079a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80079ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80079b0:	460b      	mov	r3, r1
 80079b2:	4313      	orrs	r3, r2
 80079b4:	d055      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80079b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079c2:	d033      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80079c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079c8:	d82c      	bhi.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079ce:	d02f      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80079d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079d4:	d826      	bhi.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079da:	d02b      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80079dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079e0:	d820      	bhi.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079e6:	d012      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80079e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079ec:	d81a      	bhi.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d022      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80079f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079f6:	d115      	bne.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079fc:	3308      	adds	r3, #8
 80079fe:	2100      	movs	r1, #0
 8007a00:	4618      	mov	r0, r3
 8007a02:	f001 fd8f 	bl	8009524 <RCCEx_PLL2_Config>
 8007a06:	4603      	mov	r3, r0
 8007a08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a0c:	e015      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a12:	3328      	adds	r3, #40	@ 0x28
 8007a14:	2102      	movs	r1, #2
 8007a16:	4618      	mov	r0, r3
 8007a18:	f001 fe36 	bl	8009688 <RCCEx_PLL3_Config>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a22:	e00a      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a2a:	e006      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a2c:	bf00      	nop
 8007a2e:	e004      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a30:	bf00      	nop
 8007a32:	e002      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a34:	bf00      	nop
 8007a36:	e000      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10b      	bne.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a42:	4b39      	ldr	r3, [pc, #228]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a46:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a52:	4a35      	ldr	r2, [pc, #212]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a54:	430b      	orrs	r3, r1
 8007a56:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a58:	e003      	b.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a72:	2300      	movs	r3, #0
 8007a74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007a78:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	d058      	beq.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a8a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007a8e:	d033      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007a90:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007a94:	d82c      	bhi.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a9a:	d02f      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007a9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aa0:	d826      	bhi.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007aa2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007aa6:	d02b      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007aa8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007aac:	d820      	bhi.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007aae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ab2:	d012      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007ab4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ab8:	d81a      	bhi.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d022      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ac2:	d115      	bne.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac8:	3308      	adds	r3, #8
 8007aca:	2100      	movs	r1, #0
 8007acc:	4618      	mov	r0, r3
 8007ace:	f001 fd29 	bl	8009524 <RCCEx_PLL2_Config>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ad8:	e015      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ade:	3328      	adds	r3, #40	@ 0x28
 8007ae0:	2102      	movs	r1, #2
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f001 fdd0 	bl	8009688 <RCCEx_PLL3_Config>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007aee:	e00a      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007af6:	e006      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007af8:	bf00      	nop
 8007afa:	e004      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007afc:	bf00      	nop
 8007afe:	e002      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007b00:	bf00      	nop
 8007b02:	e000      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10e      	bne.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b0e:	4b06      	ldr	r3, [pc, #24]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b12:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b1e:	4a02      	ldr	r2, [pc, #8]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b20:	430b      	orrs	r3, r1
 8007b22:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b24:	e006      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007b26:	bf00      	nop
 8007b28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007b40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b44:	2300      	movs	r3, #0
 8007b46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b4a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007b4e:	460b      	mov	r3, r1
 8007b50:	4313      	orrs	r3, r2
 8007b52:	d055      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b5c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007b60:	d033      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007b62:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007b66:	d82c      	bhi.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b6c:	d02f      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007b6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b72:	d826      	bhi.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b74:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007b78:	d02b      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007b7a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007b7e:	d820      	bhi.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b84:	d012      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007b86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b8a:	d81a      	bhi.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d022      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007b90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b94:	d115      	bne.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b9a:	3308      	adds	r3, #8
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f001 fcc0 	bl	8009524 <RCCEx_PLL2_Config>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007baa:	e015      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb0:	3328      	adds	r3, #40	@ 0x28
 8007bb2:	2102      	movs	r1, #2
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f001 fd67 	bl	8009688 <RCCEx_PLL3_Config>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007bc0:	e00a      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bc8:	e006      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bca:	bf00      	nop
 8007bcc:	e004      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bce:	bf00      	nop
 8007bd0:	e002      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bd2:	bf00      	nop
 8007bd4:	e000      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10b      	bne.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007be0:	4ba1      	ldr	r3, [pc, #644]	@ (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007be4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007bf0:	4a9d      	ldr	r2, [pc, #628]	@ (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bf2:	430b      	orrs	r3, r1
 8007bf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bf6:	e003      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c08:	f002 0308 	and.w	r3, r2, #8
 8007c0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c10:	2300      	movs	r3, #0
 8007c12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007c16:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	d01e      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c2c:	d10c      	bne.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c32:	3328      	adds	r3, #40	@ 0x28
 8007c34:	2102      	movs	r1, #2
 8007c36:	4618      	mov	r0, r3
 8007c38:	f001 fd26 	bl	8009688 <RCCEx_PLL3_Config>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d002      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007c48:	4b87      	ldr	r3, [pc, #540]	@ (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c4c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c58:	4a83      	ldr	r2, [pc, #524]	@ (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c5a:	430b      	orrs	r3, r1
 8007c5c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c66:	f002 0310 	and.w	r3, r2, #16
 8007c6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c6e:	2300      	movs	r3, #0
 8007c70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007c74:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007c78:	460b      	mov	r3, r1
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	d01e      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c8a:	d10c      	bne.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c90:	3328      	adds	r3, #40	@ 0x28
 8007c92:	2102      	movs	r1, #2
 8007c94:	4618      	mov	r0, r3
 8007c96:	f001 fcf7 	bl	8009688 <RCCEx_PLL3_Config>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d002      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ca6:	4b70      	ldr	r3, [pc, #448]	@ (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007caa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007cb6:	4a6c      	ldr	r2, [pc, #432]	@ (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cb8:	430b      	orrs	r3, r1
 8007cba:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007cc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ccc:	2300      	movs	r3, #0
 8007cce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007cd2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	d03e      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ce0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ce4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ce8:	d022      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007cea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cee:	d81b      	bhi.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d003      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cf8:	d00b      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007cfa:	e015      	b.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d00:	3308      	adds	r3, #8
 8007d02:	2100      	movs	r1, #0
 8007d04:	4618      	mov	r0, r3
 8007d06:	f001 fc0d 	bl	8009524 <RCCEx_PLL2_Config>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d10:	e00f      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d16:	3328      	adds	r3, #40	@ 0x28
 8007d18:	2102      	movs	r1, #2
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f001 fcb4 	bl	8009688 <RCCEx_PLL3_Config>
 8007d20:	4603      	mov	r3, r0
 8007d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d26:	e004      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d2e:	e000      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10b      	bne.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d3a:	4b4b      	ldr	r3, [pc, #300]	@ (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d3e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d4a:	4a47      	ldr	r2, [pc, #284]	@ (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d4c:	430b      	orrs	r3, r1
 8007d4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d50:	e003      	b.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d62:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007d66:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007d68:	2300      	movs	r3, #0
 8007d6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d6c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007d70:	460b      	mov	r3, r1
 8007d72:	4313      	orrs	r3, r2
 8007d74:	d03b      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d82:	d01f      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007d84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d88:	d818      	bhi.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007d8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d8e:	d003      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007d90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d94:	d007      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007d96:	e011      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d98:	4b33      	ldr	r3, [pc, #204]	@ (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d9c:	4a32      	ldr	r2, [pc, #200]	@ (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007da2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007da4:	e00f      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007daa:	3328      	adds	r3, #40	@ 0x28
 8007dac:	2101      	movs	r1, #1
 8007dae:	4618      	mov	r0, r3
 8007db0:	f001 fc6a 	bl	8009688 <RCCEx_PLL3_Config>
 8007db4:	4603      	mov	r3, r0
 8007db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007dba:	e004      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dc2:	e000      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007dc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10b      	bne.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007dce:	4b26      	ldr	r3, [pc, #152]	@ (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dd2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dde:	4a22      	ldr	r2, [pc, #136]	@ (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007de0:	430b      	orrs	r3, r1
 8007de2:	6553      	str	r3, [r2, #84]	@ 0x54
 8007de4:	e003      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007dfa:	673b      	str	r3, [r7, #112]	@ 0x70
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	677b      	str	r3, [r7, #116]	@ 0x74
 8007e00:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007e04:	460b      	mov	r3, r1
 8007e06:	4313      	orrs	r3, r2
 8007e08:	d034      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d003      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e18:	d007      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007e1a:	e011      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e1c:	4b12      	ldr	r3, [pc, #72]	@ (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e20:	4a11      	ldr	r2, [pc, #68]	@ (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e28:	e00e      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e2e:	3308      	adds	r3, #8
 8007e30:	2102      	movs	r1, #2
 8007e32:	4618      	mov	r0, r3
 8007e34:	f001 fb76 	bl	8009524 <RCCEx_PLL2_Config>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e3e:	e003      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10d      	bne.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e50:	4b05      	ldr	r3, [pc, #20]	@ (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e54:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e5e:	4a02      	ldr	r2, [pc, #8]	@ (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e60:	430b      	orrs	r3, r1
 8007e62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007e64:	e006      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007e66:	bf00      	nop
 8007e68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007e80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e82:	2300      	movs	r3, #0
 8007e84:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e86:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	d00c      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e94:	3328      	adds	r3, #40	@ 0x28
 8007e96:	2102      	movs	r1, #2
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f001 fbf5 	bl	8009688 <RCCEx_PLL3_Config>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007eb6:	663b      	str	r3, [r7, #96]	@ 0x60
 8007eb8:	2300      	movs	r3, #0
 8007eba:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ebc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	d038      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ece:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ed2:	d018      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007ed4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ed8:	d811      	bhi.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007eda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ede:	d014      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ee4:	d80b      	bhi.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d011      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007eea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007eee:	d106      	bne.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ef0:	4bc3      	ldr	r3, [pc, #780]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef4:	4ac2      	ldr	r2, [pc, #776]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ef6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007efa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007efc:	e008      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f04:	e004      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007f06:	bf00      	nop
 8007f08:	e002      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007f0a:	bf00      	nop
 8007f0c:	e000      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007f0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10b      	bne.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f18:	4bb9      	ldr	r3, [pc, #740]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f1c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f28:	4ab5      	ldr	r2, [pc, #724]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f2a:	430b      	orrs	r3, r1
 8007f2c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f2e:	e003      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f40:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007f44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f46:	2300      	movs	r3, #0
 8007f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f4a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4313      	orrs	r3, r2
 8007f52:	d009      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f54:	4baa      	ldr	r3, [pc, #680]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f62:	4aa7      	ldr	r2, [pc, #668]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f64:	430b      	orrs	r3, r1
 8007f66:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f70:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007f74:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f76:	2300      	movs	r3, #0
 8007f78:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f7a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007f7e:	460b      	mov	r3, r1
 8007f80:	4313      	orrs	r3, r2
 8007f82:	d00a      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007f84:	4b9e      	ldr	r3, [pc, #632]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007f94:	4a9a      	ldr	r2, [pc, #616]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f96:	430b      	orrs	r3, r1
 8007f98:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fa8:	2300      	movs	r3, #0
 8007faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	d009      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007fb6:	4b92      	ldr	r3, [pc, #584]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fba:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fc4:	4a8e      	ldr	r2, [pc, #568]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fc6:	430b      	orrs	r3, r1
 8007fc8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007fd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fd8:	2300      	movs	r3, #0
 8007fda:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fdc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	d00e      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007fe6:	4b86      	ldr	r3, [pc, #536]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	4a85      	ldr	r2, [pc, #532]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007ff0:	6113      	str	r3, [r2, #16]
 8007ff2:	4b83      	ldr	r3, [pc, #524]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ff4:	6919      	ldr	r1, [r3, #16]
 8007ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ffa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007ffe:	4a80      	ldr	r2, [pc, #512]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008000:	430b      	orrs	r3, r1
 8008002:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008010:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008012:	2300      	movs	r3, #0
 8008014:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008016:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800801a:	460b      	mov	r3, r1
 800801c:	4313      	orrs	r3, r2
 800801e:	d009      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008020:	4b77      	ldr	r3, [pc, #476]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008024:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800802c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800802e:	4a74      	ldr	r2, [pc, #464]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008030:	430b      	orrs	r3, r1
 8008032:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008040:	633b      	str	r3, [r7, #48]	@ 0x30
 8008042:	2300      	movs	r3, #0
 8008044:	637b      	str	r3, [r7, #52]	@ 0x34
 8008046:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800804a:	460b      	mov	r3, r1
 800804c:	4313      	orrs	r3, r2
 800804e:	d00a      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008050:	4b6b      	ldr	r3, [pc, #428]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008054:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800805c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008060:	4a67      	ldr	r2, [pc, #412]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008062:	430b      	orrs	r3, r1
 8008064:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800806a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806e:	2100      	movs	r1, #0
 8008070:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008072:	f003 0301 	and.w	r3, r3, #1
 8008076:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008078:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800807c:	460b      	mov	r3, r1
 800807e:	4313      	orrs	r3, r2
 8008080:	d011      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008086:	3308      	adds	r3, #8
 8008088:	2100      	movs	r1, #0
 800808a:	4618      	mov	r0, r3
 800808c:	f001 fa4a 	bl	8009524 <RCCEx_PLL2_Config>
 8008090:	4603      	mov	r3, r0
 8008092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800809a:	2b00      	cmp	r3, #0
 800809c:	d003      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800809e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80080a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ae:	2100      	movs	r1, #0
 80080b0:	6239      	str	r1, [r7, #32]
 80080b2:	f003 0302 	and.w	r3, r3, #2
 80080b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80080b8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80080bc:	460b      	mov	r3, r1
 80080be:	4313      	orrs	r3, r2
 80080c0:	d011      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080c6:	3308      	adds	r3, #8
 80080c8:	2101      	movs	r1, #1
 80080ca:	4618      	mov	r0, r3
 80080cc:	f001 fa2a 	bl	8009524 <RCCEx_PLL2_Config>
 80080d0:	4603      	mov	r3, r0
 80080d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80080d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d003      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80080e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ee:	2100      	movs	r1, #0
 80080f0:	61b9      	str	r1, [r7, #24]
 80080f2:	f003 0304 	and.w	r3, r3, #4
 80080f6:	61fb      	str	r3, [r7, #28]
 80080f8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80080fc:	460b      	mov	r3, r1
 80080fe:	4313      	orrs	r3, r2
 8008100:	d011      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008106:	3308      	adds	r3, #8
 8008108:	2102      	movs	r1, #2
 800810a:	4618      	mov	r0, r3
 800810c:	f001 fa0a 	bl	8009524 <RCCEx_PLL2_Config>
 8008110:	4603      	mov	r3, r0
 8008112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800811a:	2b00      	cmp	r3, #0
 800811c:	d003      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800811e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800812a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812e:	2100      	movs	r1, #0
 8008130:	6139      	str	r1, [r7, #16]
 8008132:	f003 0308 	and.w	r3, r3, #8
 8008136:	617b      	str	r3, [r7, #20]
 8008138:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800813c:	460b      	mov	r3, r1
 800813e:	4313      	orrs	r3, r2
 8008140:	d011      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008146:	3328      	adds	r3, #40	@ 0x28
 8008148:	2100      	movs	r1, #0
 800814a:	4618      	mov	r0, r3
 800814c:	f001 fa9c 	bl	8009688 <RCCEx_PLL3_Config>
 8008150:	4603      	mov	r3, r0
 8008152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800815e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008162:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800816a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816e:	2100      	movs	r1, #0
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	f003 0310 	and.w	r3, r3, #16
 8008176:	60fb      	str	r3, [r7, #12]
 8008178:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800817c:	460b      	mov	r3, r1
 800817e:	4313      	orrs	r3, r2
 8008180:	d011      	beq.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008186:	3328      	adds	r3, #40	@ 0x28
 8008188:	2101      	movs	r1, #1
 800818a:	4618      	mov	r0, r3
 800818c:	f001 fa7c 	bl	8009688 <RCCEx_PLL3_Config>
 8008190:	4603      	mov	r3, r0
 8008192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800819a:	2b00      	cmp	r3, #0
 800819c:	d003      	beq.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800819e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80081a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ae:	2100      	movs	r1, #0
 80081b0:	6039      	str	r1, [r7, #0]
 80081b2:	f003 0320 	and.w	r3, r3, #32
 80081b6:	607b      	str	r3, [r7, #4]
 80081b8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80081bc:	460b      	mov	r3, r1
 80081be:	4313      	orrs	r3, r2
 80081c0:	d011      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081c6:	3328      	adds	r3, #40	@ 0x28
 80081c8:	2102      	movs	r1, #2
 80081ca:	4618      	mov	r0, r3
 80081cc:	f001 fa5c 	bl	8009688 <RCCEx_PLL3_Config>
 80081d0:	4603      	mov	r3, r0
 80081d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80081d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d003      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80081e6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d101      	bne.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	e000      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80081fa:	46bd      	mov	sp, r7
 80081fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008200:	58024400 	.word	0x58024400

08008204 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b090      	sub	sp, #64	@ 0x40
 8008208:	af00      	add	r7, sp, #0
 800820a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800820e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008212:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008216:	430b      	orrs	r3, r1
 8008218:	f040 8094 	bne.w	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800821c:	4b9e      	ldr	r3, [pc, #632]	@ (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800821e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008220:	f003 0307 	and.w	r3, r3, #7
 8008224:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008228:	2b04      	cmp	r3, #4
 800822a:	f200 8087 	bhi.w	800833c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800822e:	a201      	add	r2, pc, #4	@ (adr r2, 8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008234:	08008249 	.word	0x08008249
 8008238:	08008271 	.word	0x08008271
 800823c:	08008299 	.word	0x08008299
 8008240:	08008335 	.word	0x08008335
 8008244:	080082c1 	.word	0x080082c1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008248:	4b93      	ldr	r3, [pc, #588]	@ (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008250:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008254:	d108      	bne.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008256:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800825a:	4618      	mov	r0, r3
 800825c:	f001 f810 	bl	8009280 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008264:	f000 bd45 	b.w	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008268:	2300      	movs	r3, #0
 800826a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800826c:	f000 bd41 	b.w	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008270:	4b89      	ldr	r3, [pc, #548]	@ (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008278:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800827c:	d108      	bne.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800827e:	f107 0318 	add.w	r3, r7, #24
 8008282:	4618      	mov	r0, r3
 8008284:	f000 fd54 	bl	8008d30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800828c:	f000 bd31 	b.w	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008290:	2300      	movs	r3, #0
 8008292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008294:	f000 bd2d 	b.w	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008298:	4b7f      	ldr	r3, [pc, #508]	@ (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082a4:	d108      	bne.n	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082a6:	f107 030c 	add.w	r3, r7, #12
 80082aa:	4618      	mov	r0, r3
 80082ac:	f000 fe94 	bl	8008fd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082b4:	f000 bd1d 	b.w	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082bc:	f000 bd19 	b.w	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082c0:	4b75      	ldr	r3, [pc, #468]	@ (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80082c8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082ca:	4b73      	ldr	r3, [pc, #460]	@ (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0304 	and.w	r3, r3, #4
 80082d2:	2b04      	cmp	r3, #4
 80082d4:	d10c      	bne.n	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80082d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d109      	bne.n	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082dc:	4b6e      	ldr	r3, [pc, #440]	@ (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	08db      	lsrs	r3, r3, #3
 80082e2:	f003 0303 	and.w	r3, r3, #3
 80082e6:	4a6d      	ldr	r2, [pc, #436]	@ (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80082e8:	fa22 f303 	lsr.w	r3, r2, r3
 80082ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082ee:	e01f      	b.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082f0:	4b69      	ldr	r3, [pc, #420]	@ (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082fc:	d106      	bne.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80082fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008300:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008304:	d102      	bne.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008306:	4b66      	ldr	r3, [pc, #408]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008308:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800830a:	e011      	b.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800830c:	4b62      	ldr	r3, [pc, #392]	@ (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008314:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008318:	d106      	bne.n	8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800831a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800831c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008320:	d102      	bne.n	8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008322:	4b60      	ldr	r3, [pc, #384]	@ (80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008324:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008326:	e003      	b.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008328:	2300      	movs	r3, #0
 800832a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800832c:	f000 bce1 	b.w	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008330:	f000 bcdf 	b.w	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008334:	4b5c      	ldr	r3, [pc, #368]	@ (80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008338:	f000 bcdb 	b.w	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800833c:	2300      	movs	r3, #0
 800833e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008340:	f000 bcd7 	b.w	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008344:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008348:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800834c:	430b      	orrs	r3, r1
 800834e:	f040 80ad 	bne.w	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008352:	4b51      	ldr	r3, [pc, #324]	@ (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008356:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800835a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800835c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008362:	d056      	beq.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800836a:	f200 8090 	bhi.w	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800836e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008370:	2bc0      	cmp	r3, #192	@ 0xc0
 8008372:	f000 8088 	beq.w	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008378:	2bc0      	cmp	r3, #192	@ 0xc0
 800837a:	f200 8088 	bhi.w	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800837e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008380:	2b80      	cmp	r3, #128	@ 0x80
 8008382:	d032      	beq.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008386:	2b80      	cmp	r3, #128	@ 0x80
 8008388:	f200 8081 	bhi.w	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800838c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838e:	2b00      	cmp	r3, #0
 8008390:	d003      	beq.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008394:	2b40      	cmp	r3, #64	@ 0x40
 8008396:	d014      	beq.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008398:	e079      	b.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800839a:	4b3f      	ldr	r3, [pc, #252]	@ (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083a6:	d108      	bne.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083ac:	4618      	mov	r0, r3
 80083ae:	f000 ff67 	bl	8009280 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083b6:	f000 bc9c 	b.w	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083ba:	2300      	movs	r3, #0
 80083bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083be:	f000 bc98 	b.w	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083c2:	4b35      	ldr	r3, [pc, #212]	@ (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083ce:	d108      	bne.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083d0:	f107 0318 	add.w	r3, r7, #24
 80083d4:	4618      	mov	r0, r3
 80083d6:	f000 fcab 	bl	8008d30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083de:	f000 bc88 	b.w	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083e6:	f000 bc84 	b.w	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083ea:	4b2b      	ldr	r3, [pc, #172]	@ (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083f6:	d108      	bne.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083f8:	f107 030c 	add.w	r3, r7, #12
 80083fc:	4618      	mov	r0, r3
 80083fe:	f000 fdeb 	bl	8008fd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008406:	f000 bc74 	b.w	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800840a:	2300      	movs	r3, #0
 800840c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800840e:	f000 bc70 	b.w	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008412:	4b21      	ldr	r3, [pc, #132]	@ (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008416:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800841a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800841c:	4b1e      	ldr	r3, [pc, #120]	@ (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 0304 	and.w	r3, r3, #4
 8008424:	2b04      	cmp	r3, #4
 8008426:	d10c      	bne.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800842a:	2b00      	cmp	r3, #0
 800842c:	d109      	bne.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800842e:	4b1a      	ldr	r3, [pc, #104]	@ (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	08db      	lsrs	r3, r3, #3
 8008434:	f003 0303 	and.w	r3, r3, #3
 8008438:	4a18      	ldr	r2, [pc, #96]	@ (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800843a:	fa22 f303 	lsr.w	r3, r2, r3
 800843e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008440:	e01f      	b.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008442:	4b15      	ldr	r3, [pc, #84]	@ (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800844a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800844e:	d106      	bne.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008452:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008456:	d102      	bne.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008458:	4b11      	ldr	r3, [pc, #68]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800845a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800845c:	e011      	b.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800845e:	4b0e      	ldr	r3, [pc, #56]	@ (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008466:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800846a:	d106      	bne.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800846c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800846e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008472:	d102      	bne.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008474:	4b0b      	ldr	r3, [pc, #44]	@ (80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008476:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008478:	e003      	b.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800847a:	2300      	movs	r3, #0
 800847c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800847e:	f000 bc38 	b.w	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008482:	f000 bc36 	b.w	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008486:	4b08      	ldr	r3, [pc, #32]	@ (80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800848a:	f000 bc32 	b.w	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800848e:	2300      	movs	r3, #0
 8008490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008492:	f000 bc2e 	b.w	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008496:	bf00      	nop
 8008498:	58024400 	.word	0x58024400
 800849c:	03d09000 	.word	0x03d09000
 80084a0:	003d0900 	.word	0x003d0900
 80084a4:	017d7840 	.word	0x017d7840
 80084a8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80084ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084b0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80084b4:	430b      	orrs	r3, r1
 80084b6:	f040 809c 	bne.w	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80084ba:	4b9e      	ldr	r3, [pc, #632]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084be:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80084c2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80084c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80084ca:	d054      	beq.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80084cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80084d2:	f200 808b 	bhi.w	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80084d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80084dc:	f000 8083 	beq.w	80085e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80084e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80084e6:	f200 8081 	bhi.w	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80084ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084f0:	d02f      	beq.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80084f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084f8:	d878      	bhi.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80084fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d004      	beq.n	800850a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008502:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008506:	d012      	beq.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008508:	e070      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800850a:	4b8a      	ldr	r3, [pc, #552]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008512:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008516:	d107      	bne.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008518:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800851c:	4618      	mov	r0, r3
 800851e:	f000 feaf 	bl	8009280 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008526:	e3e4      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008528:	2300      	movs	r3, #0
 800852a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800852c:	e3e1      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800852e:	4b81      	ldr	r3, [pc, #516]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008536:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800853a:	d107      	bne.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800853c:	f107 0318 	add.w	r3, r7, #24
 8008540:	4618      	mov	r0, r3
 8008542:	f000 fbf5 	bl	8008d30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800854a:	e3d2      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800854c:	2300      	movs	r3, #0
 800854e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008550:	e3cf      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008552:	4b78      	ldr	r3, [pc, #480]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800855a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800855e:	d107      	bne.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008560:	f107 030c 	add.w	r3, r7, #12
 8008564:	4618      	mov	r0, r3
 8008566:	f000 fd37 	bl	8008fd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800856e:	e3c0      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008574:	e3bd      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008576:	4b6f      	ldr	r3, [pc, #444]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800857a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800857e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008580:	4b6c      	ldr	r3, [pc, #432]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0304 	and.w	r3, r3, #4
 8008588:	2b04      	cmp	r3, #4
 800858a:	d10c      	bne.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800858c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800858e:	2b00      	cmp	r3, #0
 8008590:	d109      	bne.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008592:	4b68      	ldr	r3, [pc, #416]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	08db      	lsrs	r3, r3, #3
 8008598:	f003 0303 	and.w	r3, r3, #3
 800859c:	4a66      	ldr	r2, [pc, #408]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800859e:	fa22 f303 	lsr.w	r3, r2, r3
 80085a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085a4:	e01e      	b.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085a6:	4b63      	ldr	r3, [pc, #396]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085b2:	d106      	bne.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80085b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085ba:	d102      	bne.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085bc:	4b5f      	ldr	r3, [pc, #380]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80085be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085c0:	e010      	b.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085c2:	4b5c      	ldr	r3, [pc, #368]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085ce:	d106      	bne.n	80085de <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80085d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085d6:	d102      	bne.n	80085de <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085d8:	4b59      	ldr	r3, [pc, #356]	@ (8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80085da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085dc:	e002      	b.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085de:	2300      	movs	r3, #0
 80085e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80085e2:	e386      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085e4:	e385      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80085e6:	4b57      	ldr	r3, [pc, #348]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80085e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ea:	e382      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80085ec:	2300      	movs	r3, #0
 80085ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f0:	e37f      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80085f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085f6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80085fa:	430b      	orrs	r3, r1
 80085fc:	f040 80a7 	bne.w	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008600:	4b4c      	ldr	r3, [pc, #304]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008604:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008608:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800860a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008610:	d055      	beq.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008614:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008618:	f200 8096 	bhi.w	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800861c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008622:	f000 8084 	beq.w	800872e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008628:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800862c:	f200 808c 	bhi.w	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008632:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008636:	d030      	beq.n	800869a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800863e:	f200 8083 	bhi.w	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008644:	2b00      	cmp	r3, #0
 8008646:	d004      	beq.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800864e:	d012      	beq.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008650:	e07a      	b.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008652:	4b38      	ldr	r3, [pc, #224]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800865a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800865e:	d107      	bne.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008660:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008664:	4618      	mov	r0, r3
 8008666:	f000 fe0b 	bl	8009280 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800866a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800866c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800866e:	e340      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008670:	2300      	movs	r3, #0
 8008672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008674:	e33d      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008676:	4b2f      	ldr	r3, [pc, #188]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800867e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008682:	d107      	bne.n	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008684:	f107 0318 	add.w	r3, r7, #24
 8008688:	4618      	mov	r0, r3
 800868a:	f000 fb51 	bl	8008d30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008692:	e32e      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008694:	2300      	movs	r3, #0
 8008696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008698:	e32b      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800869a:	4b26      	ldr	r3, [pc, #152]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086a6:	d107      	bne.n	80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086a8:	f107 030c 	add.w	r3, r7, #12
 80086ac:	4618      	mov	r0, r3
 80086ae:	f000 fc93 	bl	8008fd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086b6:	e31c      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086b8:	2300      	movs	r3, #0
 80086ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086bc:	e319      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086be:	4b1d      	ldr	r3, [pc, #116]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80086c6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086c8:	4b1a      	ldr	r3, [pc, #104]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 0304 	and.w	r3, r3, #4
 80086d0:	2b04      	cmp	r3, #4
 80086d2:	d10c      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80086d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d109      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086da:	4b16      	ldr	r3, [pc, #88]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	08db      	lsrs	r3, r3, #3
 80086e0:	f003 0303 	and.w	r3, r3, #3
 80086e4:	4a14      	ldr	r2, [pc, #80]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80086e6:	fa22 f303 	lsr.w	r3, r2, r3
 80086ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086ec:	e01e      	b.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086ee:	4b11      	ldr	r3, [pc, #68]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086fa:	d106      	bne.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80086fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008702:	d102      	bne.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008704:	4b0d      	ldr	r3, [pc, #52]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008706:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008708:	e010      	b.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800870a:	4b0a      	ldr	r3, [pc, #40]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008712:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008716:	d106      	bne.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800871a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800871e:	d102      	bne.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008720:	4b07      	ldr	r3, [pc, #28]	@ (8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008722:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008724:	e002      	b.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008726:	2300      	movs	r3, #0
 8008728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800872a:	e2e2      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800872c:	e2e1      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800872e:	4b05      	ldr	r3, [pc, #20]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008732:	e2de      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008734:	58024400 	.word	0x58024400
 8008738:	03d09000 	.word	0x03d09000
 800873c:	003d0900 	.word	0x003d0900
 8008740:	017d7840 	.word	0x017d7840
 8008744:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008748:	2300      	movs	r3, #0
 800874a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800874c:	e2d1      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800874e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008752:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008756:	430b      	orrs	r3, r1
 8008758:	f040 809c 	bne.w	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800875c:	4b93      	ldr	r3, [pc, #588]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800875e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008760:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008764:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008768:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800876c:	d054      	beq.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800876e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008770:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008774:	f200 808b 	bhi.w	800888e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800877e:	f000 8083 	beq.w	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008784:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008788:	f200 8081 	bhi.w	800888e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800878c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800878e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008792:	d02f      	beq.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008796:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800879a:	d878      	bhi.n	800888e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800879c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d004      	beq.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80087a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087a8:	d012      	beq.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80087aa:	e070      	b.n	800888e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087ac:	4b7f      	ldr	r3, [pc, #508]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087b8:	d107      	bne.n	80087ca <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 fd5e 	bl	8009280 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087c8:	e293      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087ca:	2300      	movs	r3, #0
 80087cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087ce:	e290      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087d0:	4b76      	ldr	r3, [pc, #472]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087dc:	d107      	bne.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087de:	f107 0318 	add.w	r3, r7, #24
 80087e2:	4618      	mov	r0, r3
 80087e4:	f000 faa4 	bl	8008d30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087ec:	e281      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087ee:	2300      	movs	r3, #0
 80087f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087f2:	e27e      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087f4:	4b6d      	ldr	r3, [pc, #436]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008800:	d107      	bne.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008802:	f107 030c 	add.w	r3, r7, #12
 8008806:	4618      	mov	r0, r3
 8008808:	f000 fbe6 	bl	8008fd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008810:	e26f      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008812:	2300      	movs	r3, #0
 8008814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008816:	e26c      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008818:	4b64      	ldr	r3, [pc, #400]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800881a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800881c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008820:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008822:	4b62      	ldr	r3, [pc, #392]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0304 	and.w	r3, r3, #4
 800882a:	2b04      	cmp	r3, #4
 800882c:	d10c      	bne.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800882e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008830:	2b00      	cmp	r3, #0
 8008832:	d109      	bne.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008834:	4b5d      	ldr	r3, [pc, #372]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	08db      	lsrs	r3, r3, #3
 800883a:	f003 0303 	and.w	r3, r3, #3
 800883e:	4a5c      	ldr	r2, [pc, #368]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008840:	fa22 f303 	lsr.w	r3, r2, r3
 8008844:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008846:	e01e      	b.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008848:	4b58      	ldr	r3, [pc, #352]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008850:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008854:	d106      	bne.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008858:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800885c:	d102      	bne.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800885e:	4b55      	ldr	r3, [pc, #340]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008860:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008862:	e010      	b.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008864:	4b51      	ldr	r3, [pc, #324]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800886c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008870:	d106      	bne.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008874:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008878:	d102      	bne.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800887a:	4b4f      	ldr	r3, [pc, #316]	@ (80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800887c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800887e:	e002      	b.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008880:	2300      	movs	r3, #0
 8008882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008884:	e235      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008886:	e234      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008888:	4b4c      	ldr	r3, [pc, #304]	@ (80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800888a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800888c:	e231      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800888e:	2300      	movs	r3, #0
 8008890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008892:	e22e      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008894:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008898:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800889c:	430b      	orrs	r3, r1
 800889e:	f040 808f 	bne.w	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80088a2:	4b42      	ldr	r3, [pc, #264]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088a6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80088aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80088ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80088b2:	d06b      	beq.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80088b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80088ba:	d874      	bhi.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80088c2:	d056      	beq.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80088c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80088ca:	d86c      	bhi.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80088d2:	d03b      	beq.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80088d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80088da:	d864      	bhi.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088e2:	d021      	beq.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80088e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088ea:	d85c      	bhi.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d004      	beq.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80088f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088f8:	d004      	beq.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80088fa:	e054      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80088fc:	f7fe fa4c 	bl	8006d98 <HAL_RCC_GetPCLK1Freq>
 8008900:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008902:	e1f6      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008904:	4b29      	ldr	r3, [pc, #164]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800890c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008910:	d107      	bne.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008912:	f107 0318 	add.w	r3, r7, #24
 8008916:	4618      	mov	r0, r3
 8008918:	f000 fa0a 	bl	8008d30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008920:	e1e7      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008922:	2300      	movs	r3, #0
 8008924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008926:	e1e4      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008928:	4b20      	ldr	r3, [pc, #128]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008930:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008934:	d107      	bne.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008936:	f107 030c 	add.w	r3, r7, #12
 800893a:	4618      	mov	r0, r3
 800893c:	f000 fb4c 	bl	8008fd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008944:	e1d5      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008946:	2300      	movs	r3, #0
 8008948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800894a:	e1d2      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800894c:	4b17      	ldr	r3, [pc, #92]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 0304 	and.w	r3, r3, #4
 8008954:	2b04      	cmp	r3, #4
 8008956:	d109      	bne.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008958:	4b14      	ldr	r3, [pc, #80]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	08db      	lsrs	r3, r3, #3
 800895e:	f003 0303 	and.w	r3, r3, #3
 8008962:	4a13      	ldr	r2, [pc, #76]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008964:	fa22 f303 	lsr.w	r3, r2, r3
 8008968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800896a:	e1c2      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800896c:	2300      	movs	r3, #0
 800896e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008970:	e1bf      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008972:	4b0e      	ldr	r3, [pc, #56]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800897a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800897e:	d102      	bne.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008980:	4b0c      	ldr	r3, [pc, #48]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008984:	e1b5      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008986:	2300      	movs	r3, #0
 8008988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800898a:	e1b2      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800898c:	4b07      	ldr	r3, [pc, #28]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008994:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008998:	d102      	bne.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800899a:	4b07      	ldr	r3, [pc, #28]	@ (80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800899c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800899e:	e1a8      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089a0:	2300      	movs	r3, #0
 80089a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089a4:	e1a5      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80089a6:	2300      	movs	r3, #0
 80089a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089aa:	e1a2      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089ac:	58024400 	.word	0x58024400
 80089b0:	03d09000 	.word	0x03d09000
 80089b4:	003d0900 	.word	0x003d0900
 80089b8:	017d7840 	.word	0x017d7840
 80089bc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80089c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089c4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80089c8:	430b      	orrs	r3, r1
 80089ca:	d173      	bne.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80089cc:	4b9c      	ldr	r3, [pc, #624]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80089d4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80089d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089dc:	d02f      	beq.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80089de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089e4:	d863      	bhi.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80089e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d004      	beq.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80089ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089f2:	d012      	beq.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80089f4:	e05b      	b.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089f6:	4b92      	ldr	r3, [pc, #584]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a02:	d107      	bne.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a04:	f107 0318 	add.w	r3, r7, #24
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 f991 	bl	8008d30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a12:	e16e      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a14:	2300      	movs	r3, #0
 8008a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a18:	e16b      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a1a:	4b89      	ldr	r3, [pc, #548]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a26:	d107      	bne.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a28:	f107 030c 	add.w	r3, r7, #12
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f000 fad3 	bl	8008fd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a36:	e15c      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a3c:	e159      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a3e:	4b80      	ldr	r3, [pc, #512]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a42:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008a46:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a48:	4b7d      	ldr	r3, [pc, #500]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 0304 	and.w	r3, r3, #4
 8008a50:	2b04      	cmp	r3, #4
 8008a52:	d10c      	bne.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d109      	bne.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a5a:	4b79      	ldr	r3, [pc, #484]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	08db      	lsrs	r3, r3, #3
 8008a60:	f003 0303 	and.w	r3, r3, #3
 8008a64:	4a77      	ldr	r2, [pc, #476]	@ (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008a66:	fa22 f303 	lsr.w	r3, r2, r3
 8008a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a6c:	e01e      	b.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a6e:	4b74      	ldr	r3, [pc, #464]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a7a:	d106      	bne.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a82:	d102      	bne.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008a84:	4b70      	ldr	r3, [pc, #448]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a88:	e010      	b.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a8a:	4b6d      	ldr	r3, [pc, #436]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a96:	d106      	bne.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a9e:	d102      	bne.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008aa0:	4b6a      	ldr	r3, [pc, #424]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008aa4:	e002      	b.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008aaa:	e122      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008aac:	e121      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ab2:	e11e      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008ab4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ab8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008abc:	430b      	orrs	r3, r1
 8008abe:	d133      	bne.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008ac0:	4b5f      	ldr	r3, [pc, #380]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ac8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d004      	beq.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ad6:	d012      	beq.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008ad8:	e023      	b.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ada:	4b59      	ldr	r3, [pc, #356]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ae2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ae6:	d107      	bne.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ae8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008aec:	4618      	mov	r0, r3
 8008aee:	f000 fbc7 	bl	8009280 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008af6:	e0fc      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008af8:	2300      	movs	r3, #0
 8008afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008afc:	e0f9      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008afe:	4b50      	ldr	r3, [pc, #320]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b0a:	d107      	bne.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b0c:	f107 0318 	add.w	r3, r7, #24
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 f90d 	bl	8008d30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008b16:	6a3b      	ldr	r3, [r7, #32]
 8008b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b1a:	e0ea      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b20:	e0e7      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008b22:	2300      	movs	r3, #0
 8008b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b26:	e0e4      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b2c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008b30:	430b      	orrs	r3, r1
 8008b32:	f040 808d 	bne.w	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008b36:	4b42      	ldr	r3, [pc, #264]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b3a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008b3e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b46:	d06b      	beq.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b4e:	d874      	bhi.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b56:	d056      	beq.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b5e:	d86c      	bhi.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b66:	d03b      	beq.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b6e:	d864      	bhi.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b76:	d021      	beq.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b7e:	d85c      	bhi.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d004      	beq.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b8c:	d004      	beq.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008b8e:	e054      	b.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008b90:	f000 f8b8 	bl	8008d04 <HAL_RCCEx_GetD3PCLK1Freq>
 8008b94:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008b96:	e0ac      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b98:	4b29      	ldr	r3, [pc, #164]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ba0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ba4:	d107      	bne.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ba6:	f107 0318 	add.w	r3, r7, #24
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 f8c0 	bl	8008d30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bb4:	e09d      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bba:	e09a      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bbc:	4b20      	ldr	r3, [pc, #128]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bc8:	d107      	bne.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bca:	f107 030c 	add.w	r3, r7, #12
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f000 fa02 	bl	8008fd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bd8:	e08b      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bde:	e088      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008be0:	4b17      	ldr	r3, [pc, #92]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f003 0304 	and.w	r3, r3, #4
 8008be8:	2b04      	cmp	r3, #4
 8008bea:	d109      	bne.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bec:	4b14      	ldr	r3, [pc, #80]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	08db      	lsrs	r3, r3, #3
 8008bf2:	f003 0303 	and.w	r3, r3, #3
 8008bf6:	4a13      	ldr	r2, [pc, #76]	@ (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bfe:	e078      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c00:	2300      	movs	r3, #0
 8008c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c04:	e075      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008c06:	4b0e      	ldr	r3, [pc, #56]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c12:	d102      	bne.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008c14:	4b0c      	ldr	r3, [pc, #48]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c18:	e06b      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c1e:	e068      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c20:	4b07      	ldr	r3, [pc, #28]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c2c:	d102      	bne.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008c2e:	4b07      	ldr	r3, [pc, #28]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c32:	e05e      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c34:	2300      	movs	r3, #0
 8008c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c38:	e05b      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c3e:	e058      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c40:	58024400 	.word	0x58024400
 8008c44:	03d09000 	.word	0x03d09000
 8008c48:	003d0900 	.word	0x003d0900
 8008c4c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c54:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008c58:	430b      	orrs	r3, r1
 8008c5a:	d148      	bne.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008c5c:	4b27      	ldr	r3, [pc, #156]	@ (8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008c64:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c6c:	d02a      	beq.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c74:	d838      	bhi.n	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d004      	beq.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c82:	d00d      	beq.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008c84:	e030      	b.n	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c86:	4b1d      	ldr	r3, [pc, #116]	@ (8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c92:	d102      	bne.n	8008c9a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008c94:	4b1a      	ldr	r3, [pc, #104]	@ (8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c98:	e02b      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c9e:	e028      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ca0:	4b16      	ldr	r3, [pc, #88]	@ (8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ca8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008cac:	d107      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f000 fae4 	bl	8009280 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cbc:	e019      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cc2:	e016      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ccc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cd0:	d107      	bne.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cd2:	f107 0318 	add.w	r3, r7, #24
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f000 f82a 	bl	8008d30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ce0:	e007      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ce6:	e004      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cec:	e001      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3740      	adds	r7, #64	@ 0x40
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	58024400 	.word	0x58024400
 8008d00:	017d7840 	.word	0x017d7840

08008d04 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008d08:	f7fe f816 	bl	8006d38 <HAL_RCC_GetHCLKFreq>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	4b06      	ldr	r3, [pc, #24]	@ (8008d28 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008d10:	6a1b      	ldr	r3, [r3, #32]
 8008d12:	091b      	lsrs	r3, r3, #4
 8008d14:	f003 0307 	and.w	r3, r3, #7
 8008d18:	4904      	ldr	r1, [pc, #16]	@ (8008d2c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008d1a:	5ccb      	ldrb	r3, [r1, r3]
 8008d1c:	f003 031f 	and.w	r3, r3, #31
 8008d20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	58024400 	.word	0x58024400
 8008d2c:	0800d14c 	.word	0x0800d14c

08008d30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b089      	sub	sp, #36	@ 0x24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d38:	4ba1      	ldr	r3, [pc, #644]	@ (8008fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d3c:	f003 0303 	and.w	r3, r3, #3
 8008d40:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008d42:	4b9f      	ldr	r3, [pc, #636]	@ (8008fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d46:	0b1b      	lsrs	r3, r3, #12
 8008d48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d4c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008d4e:	4b9c      	ldr	r3, [pc, #624]	@ (8008fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d52:	091b      	lsrs	r3, r3, #4
 8008d54:	f003 0301 	and.w	r3, r3, #1
 8008d58:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008d5a:	4b99      	ldr	r3, [pc, #612]	@ (8008fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d5e:	08db      	lsrs	r3, r3, #3
 8008d60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	fb02 f303 	mul.w	r3, r2, r3
 8008d6a:	ee07 3a90 	vmov	s15, r3
 8008d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f000 8111 	beq.w	8008fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	f000 8083 	beq.w	8008e8c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	f200 80a1 	bhi.w	8008ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d003      	beq.n	8008d9c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d056      	beq.n	8008e48 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008d9a:	e099      	b.n	8008ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d9c:	4b88      	ldr	r3, [pc, #544]	@ (8008fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 0320 	and.w	r3, r3, #32
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d02d      	beq.n	8008e04 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008da8:	4b85      	ldr	r3, [pc, #532]	@ (8008fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	08db      	lsrs	r3, r3, #3
 8008dae:	f003 0303 	and.w	r3, r3, #3
 8008db2:	4a84      	ldr	r2, [pc, #528]	@ (8008fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008db4:	fa22 f303 	lsr.w	r3, r2, r3
 8008db8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	ee07 3a90 	vmov	s15, r3
 8008dc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	ee07 3a90 	vmov	s15, r3
 8008dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dd2:	4b7b      	ldr	r3, [pc, #492]	@ (8008fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dda:	ee07 3a90 	vmov	s15, r3
 8008dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008de6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008df2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dfe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008e02:	e087      	b.n	8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	ee07 3a90 	vmov	s15, r3
 8008e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e0e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008fcc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e16:	4b6a      	ldr	r3, [pc, #424]	@ (8008fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e1e:	ee07 3a90 	vmov	s15, r3
 8008e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e2a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e46:	e065      	b.n	8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	ee07 3a90 	vmov	s15, r3
 8008e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e52:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e5a:	4b59      	ldr	r3, [pc, #356]	@ (8008fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e62:	ee07 3a90 	vmov	s15, r3
 8008e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e6e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e8a:	e043      	b.n	8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	ee07 3a90 	vmov	s15, r3
 8008e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e96:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e9e:	4b48      	ldr	r3, [pc, #288]	@ (8008fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ea6:	ee07 3a90 	vmov	s15, r3
 8008eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eb2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ece:	e021      	b.n	8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	ee07 3a90 	vmov	s15, r3
 8008ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eda:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ee2:	4b37      	ldr	r3, [pc, #220]	@ (8008fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eea:	ee07 3a90 	vmov	s15, r3
 8008eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ef2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ef6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f12:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008f14:	4b2a      	ldr	r3, [pc, #168]	@ (8008fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f18:	0a5b      	lsrs	r3, r3, #9
 8008f1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f1e:	ee07 3a90 	vmov	s15, r3
 8008f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f3a:	ee17 2a90 	vmov	r2, s15
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008f42:	4b1f      	ldr	r3, [pc, #124]	@ (8008fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f46:	0c1b      	lsrs	r3, r3, #16
 8008f48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f4c:	ee07 3a90 	vmov	s15, r3
 8008f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f68:	ee17 2a90 	vmov	r2, s15
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008f70:	4b13      	ldr	r3, [pc, #76]	@ (8008fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f74:	0e1b      	lsrs	r3, r3, #24
 8008f76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f7a:	ee07 3a90 	vmov	s15, r3
 8008f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f96:	ee17 2a90 	vmov	r2, s15
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008f9e:	e008      	b.n	8008fb2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	609a      	str	r2, [r3, #8]
}
 8008fb2:	bf00      	nop
 8008fb4:	3724      	adds	r7, #36	@ 0x24
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	58024400 	.word	0x58024400
 8008fc4:	03d09000 	.word	0x03d09000
 8008fc8:	46000000 	.word	0x46000000
 8008fcc:	4c742400 	.word	0x4c742400
 8008fd0:	4a742400 	.word	0x4a742400
 8008fd4:	4bbebc20 	.word	0x4bbebc20

08008fd8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b089      	sub	sp, #36	@ 0x24
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fe0:	4ba1      	ldr	r3, [pc, #644]	@ (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe4:	f003 0303 	and.w	r3, r3, #3
 8008fe8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008fea:	4b9f      	ldr	r3, [pc, #636]	@ (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fee:	0d1b      	lsrs	r3, r3, #20
 8008ff0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ff4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008ff6:	4b9c      	ldr	r3, [pc, #624]	@ (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffa:	0a1b      	lsrs	r3, r3, #8
 8008ffc:	f003 0301 	and.w	r3, r3, #1
 8009000:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009002:	4b99      	ldr	r3, [pc, #612]	@ (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009006:	08db      	lsrs	r3, r3, #3
 8009008:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800900c:	693a      	ldr	r2, [r7, #16]
 800900e:	fb02 f303 	mul.w	r3, r2, r3
 8009012:	ee07 3a90 	vmov	s15, r3
 8009016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800901a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	2b00      	cmp	r3, #0
 8009022:	f000 8111 	beq.w	8009248 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	2b02      	cmp	r3, #2
 800902a:	f000 8083 	beq.w	8009134 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	2b02      	cmp	r3, #2
 8009032:	f200 80a1 	bhi.w	8009178 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d003      	beq.n	8009044 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d056      	beq.n	80090f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009042:	e099      	b.n	8009178 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009044:	4b88      	ldr	r3, [pc, #544]	@ (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 0320 	and.w	r3, r3, #32
 800904c:	2b00      	cmp	r3, #0
 800904e:	d02d      	beq.n	80090ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009050:	4b85      	ldr	r3, [pc, #532]	@ (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	08db      	lsrs	r3, r3, #3
 8009056:	f003 0303 	and.w	r3, r3, #3
 800905a:	4a84      	ldr	r2, [pc, #528]	@ (800926c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800905c:	fa22 f303 	lsr.w	r3, r2, r3
 8009060:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	ee07 3a90 	vmov	s15, r3
 8009068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	ee07 3a90 	vmov	s15, r3
 8009072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800907a:	4b7b      	ldr	r3, [pc, #492]	@ (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800907c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800907e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009082:	ee07 3a90 	vmov	s15, r3
 8009086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800908a:	ed97 6a03 	vldr	s12, [r7, #12]
 800908e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800909a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800909e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80090aa:	e087      	b.n	80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	ee07 3a90 	vmov	s15, r3
 80090b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090b6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009274 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80090ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090be:	4b6a      	ldr	r3, [pc, #424]	@ (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090c6:	ee07 3a90 	vmov	s15, r3
 80090ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80090d2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090ee:	e065      	b.n	80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	ee07 3a90 	vmov	s15, r3
 80090f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090fa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009278 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80090fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009102:	4b59      	ldr	r3, [pc, #356]	@ (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800910a:	ee07 3a90 	vmov	s15, r3
 800910e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009112:	ed97 6a03 	vldr	s12, [r7, #12]
 8009116:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800911a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800911e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009122:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800912a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800912e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009132:	e043      	b.n	80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	ee07 3a90 	vmov	s15, r3
 800913a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800913e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800927c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009146:	4b48      	ldr	r3, [pc, #288]	@ (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800914a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800914e:	ee07 3a90 	vmov	s15, r3
 8009152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009156:	ed97 6a03 	vldr	s12, [r7, #12]
 800915a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800915e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800916a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800916e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009176:	e021      	b.n	80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	ee07 3a90 	vmov	s15, r3
 800917e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009182:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009278 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800918a:	4b37      	ldr	r3, [pc, #220]	@ (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800918c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800918e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009192:	ee07 3a90 	vmov	s15, r3
 8009196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800919a:	ed97 6a03 	vldr	s12, [r7, #12]
 800919e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80091bc:	4b2a      	ldr	r3, [pc, #168]	@ (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091c0:	0a5b      	lsrs	r3, r3, #9
 80091c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091c6:	ee07 3a90 	vmov	s15, r3
 80091ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80091da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091e2:	ee17 2a90 	vmov	r2, s15
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80091ea:	4b1f      	ldr	r3, [pc, #124]	@ (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ee:	0c1b      	lsrs	r3, r3, #16
 80091f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091f4:	ee07 3a90 	vmov	s15, r3
 80091f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009200:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009204:	edd7 6a07 	vldr	s13, [r7, #28]
 8009208:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800920c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009210:	ee17 2a90 	vmov	r2, s15
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009218:	4b13      	ldr	r3, [pc, #76]	@ (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800921a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800921c:	0e1b      	lsrs	r3, r3, #24
 800921e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009222:	ee07 3a90 	vmov	s15, r3
 8009226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800922a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800922e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009232:	edd7 6a07 	vldr	s13, [r7, #28]
 8009236:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800923a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800923e:	ee17 2a90 	vmov	r2, s15
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009246:	e008      	b.n	800925a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	609a      	str	r2, [r3, #8]
}
 800925a:	bf00      	nop
 800925c:	3724      	adds	r7, #36	@ 0x24
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	58024400 	.word	0x58024400
 800926c:	03d09000 	.word	0x03d09000
 8009270:	46000000 	.word	0x46000000
 8009274:	4c742400 	.word	0x4c742400
 8009278:	4a742400 	.word	0x4a742400
 800927c:	4bbebc20 	.word	0x4bbebc20

08009280 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009280:	b480      	push	{r7}
 8009282:	b089      	sub	sp, #36	@ 0x24
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009288:	4ba0      	ldr	r3, [pc, #640]	@ (800950c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800928a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800928c:	f003 0303 	and.w	r3, r3, #3
 8009290:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009292:	4b9e      	ldr	r3, [pc, #632]	@ (800950c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009296:	091b      	lsrs	r3, r3, #4
 8009298:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800929c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800929e:	4b9b      	ldr	r3, [pc, #620]	@ (800950c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a2:	f003 0301 	and.w	r3, r3, #1
 80092a6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80092a8:	4b98      	ldr	r3, [pc, #608]	@ (800950c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092ac:	08db      	lsrs	r3, r3, #3
 80092ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	fb02 f303 	mul.w	r3, r2, r3
 80092b8:	ee07 3a90 	vmov	s15, r3
 80092bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f000 8111 	beq.w	80094ee <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	f000 8083 	beq.w	80093da <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	f200 80a1 	bhi.w	800941e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d003      	beq.n	80092ea <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d056      	beq.n	8009396 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80092e8:	e099      	b.n	800941e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092ea:	4b88      	ldr	r3, [pc, #544]	@ (800950c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f003 0320 	and.w	r3, r3, #32
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d02d      	beq.n	8009352 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092f6:	4b85      	ldr	r3, [pc, #532]	@ (800950c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	08db      	lsrs	r3, r3, #3
 80092fc:	f003 0303 	and.w	r3, r3, #3
 8009300:	4a83      	ldr	r2, [pc, #524]	@ (8009510 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009302:	fa22 f303 	lsr.w	r3, r2, r3
 8009306:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	ee07 3a90 	vmov	s15, r3
 800930e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	ee07 3a90 	vmov	s15, r3
 8009318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800931c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009320:	4b7a      	ldr	r3, [pc, #488]	@ (800950c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009328:	ee07 3a90 	vmov	s15, r3
 800932c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009330:	ed97 6a03 	vldr	s12, [r7, #12]
 8009334:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009514 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009338:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800933c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009340:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009344:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800934c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009350:	e087      	b.n	8009462 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	ee07 3a90 	vmov	s15, r3
 8009358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800935c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009518 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009360:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009364:	4b69      	ldr	r3, [pc, #420]	@ (800950c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800936c:	ee07 3a90 	vmov	s15, r3
 8009370:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009374:	ed97 6a03 	vldr	s12, [r7, #12]
 8009378:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009514 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800937c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009380:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009384:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009388:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800938c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009390:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009394:	e065      	b.n	8009462 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	ee07 3a90 	vmov	s15, r3
 800939c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800951c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80093a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093a8:	4b58      	ldr	r3, [pc, #352]	@ (800950c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093b0:	ee07 3a90 	vmov	s15, r3
 80093b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80093bc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009514 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093d8:	e043      	b.n	8009462 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	ee07 3a90 	vmov	s15, r3
 80093e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009520 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80093e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ec:	4b47      	ldr	r3, [pc, #284]	@ (800950c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093f4:	ee07 3a90 	vmov	s15, r3
 80093f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009400:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009514 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009404:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009408:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800940c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009410:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009418:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800941c:	e021      	b.n	8009462 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	ee07 3a90 	vmov	s15, r3
 8009424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009428:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009518 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800942c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009430:	4b36      	ldr	r3, [pc, #216]	@ (800950c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009438:	ee07 3a90 	vmov	s15, r3
 800943c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009440:	ed97 6a03 	vldr	s12, [r7, #12]
 8009444:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009514 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009448:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800944c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009450:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009454:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800945c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009460:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009462:	4b2a      	ldr	r3, [pc, #168]	@ (800950c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009466:	0a5b      	lsrs	r3, r3, #9
 8009468:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800946c:	ee07 3a90 	vmov	s15, r3
 8009470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009474:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009478:	ee37 7a87 	vadd.f32	s14, s15, s14
 800947c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009480:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009484:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009488:	ee17 2a90 	vmov	r2, s15
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009490:	4b1e      	ldr	r3, [pc, #120]	@ (800950c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009494:	0c1b      	lsrs	r3, r3, #16
 8009496:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800949a:	ee07 3a90 	vmov	s15, r3
 800949e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80094ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094b6:	ee17 2a90 	vmov	r2, s15
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80094be:	4b13      	ldr	r3, [pc, #76]	@ (800950c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094c2:	0e1b      	lsrs	r3, r3, #24
 80094c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094c8:	ee07 3a90 	vmov	s15, r3
 80094cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80094dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094e4:	ee17 2a90 	vmov	r2, s15
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80094ec:	e008      	b.n	8009500 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	609a      	str	r2, [r3, #8]
}
 8009500:	bf00      	nop
 8009502:	3724      	adds	r7, #36	@ 0x24
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr
 800950c:	58024400 	.word	0x58024400
 8009510:	03d09000 	.word	0x03d09000
 8009514:	46000000 	.word	0x46000000
 8009518:	4c742400 	.word	0x4c742400
 800951c:	4a742400 	.word	0x4a742400
 8009520:	4bbebc20 	.word	0x4bbebc20

08009524 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800952e:	2300      	movs	r3, #0
 8009530:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009532:	4b53      	ldr	r3, [pc, #332]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 8009534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009536:	f003 0303 	and.w	r3, r3, #3
 800953a:	2b03      	cmp	r3, #3
 800953c:	d101      	bne.n	8009542 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	e099      	b.n	8009676 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009542:	4b4f      	ldr	r3, [pc, #316]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a4e      	ldr	r2, [pc, #312]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 8009548:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800954c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800954e:	f7f8 f921 	bl	8001794 <HAL_GetTick>
 8009552:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009554:	e008      	b.n	8009568 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009556:	f7f8 f91d 	bl	8001794 <HAL_GetTick>
 800955a:	4602      	mov	r2, r0
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	1ad3      	subs	r3, r2, r3
 8009560:	2b02      	cmp	r3, #2
 8009562:	d901      	bls.n	8009568 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009564:	2303      	movs	r3, #3
 8009566:	e086      	b.n	8009676 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009568:	4b45      	ldr	r3, [pc, #276]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1f0      	bne.n	8009556 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009574:	4b42      	ldr	r3, [pc, #264]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 8009576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009578:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	031b      	lsls	r3, r3, #12
 8009582:	493f      	ldr	r1, [pc, #252]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 8009584:	4313      	orrs	r3, r2
 8009586:	628b      	str	r3, [r1, #40]	@ 0x28
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	3b01      	subs	r3, #1
 800958e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	3b01      	subs	r3, #1
 8009598:	025b      	lsls	r3, r3, #9
 800959a:	b29b      	uxth	r3, r3
 800959c:	431a      	orrs	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	3b01      	subs	r3, #1
 80095a4:	041b      	lsls	r3, r3, #16
 80095a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80095aa:	431a      	orrs	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	691b      	ldr	r3, [r3, #16]
 80095b0:	3b01      	subs	r3, #1
 80095b2:	061b      	lsls	r3, r3, #24
 80095b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80095b8:	4931      	ldr	r1, [pc, #196]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 80095ba:	4313      	orrs	r3, r2
 80095bc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80095be:	4b30      	ldr	r3, [pc, #192]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 80095c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	695b      	ldr	r3, [r3, #20]
 80095ca:	492d      	ldr	r1, [pc, #180]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 80095cc:	4313      	orrs	r3, r2
 80095ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80095d0:	4b2b      	ldr	r3, [pc, #172]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 80095d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d4:	f023 0220 	bic.w	r2, r3, #32
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	699b      	ldr	r3, [r3, #24]
 80095dc:	4928      	ldr	r1, [pc, #160]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 80095de:	4313      	orrs	r3, r2
 80095e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80095e2:	4b27      	ldr	r3, [pc, #156]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 80095e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e6:	4a26      	ldr	r2, [pc, #152]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 80095e8:	f023 0310 	bic.w	r3, r3, #16
 80095ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80095ee:	4b24      	ldr	r3, [pc, #144]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 80095f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095f2:	4b24      	ldr	r3, [pc, #144]	@ (8009684 <RCCEx_PLL2_Config+0x160>)
 80095f4:	4013      	ands	r3, r2
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	69d2      	ldr	r2, [r2, #28]
 80095fa:	00d2      	lsls	r2, r2, #3
 80095fc:	4920      	ldr	r1, [pc, #128]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 80095fe:	4313      	orrs	r3, r2
 8009600:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009602:	4b1f      	ldr	r3, [pc, #124]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 8009604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009606:	4a1e      	ldr	r2, [pc, #120]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 8009608:	f043 0310 	orr.w	r3, r3, #16
 800960c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d106      	bne.n	8009622 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009614:	4b1a      	ldr	r3, [pc, #104]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 8009616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009618:	4a19      	ldr	r2, [pc, #100]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 800961a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800961e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009620:	e00f      	b.n	8009642 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d106      	bne.n	8009636 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009628:	4b15      	ldr	r3, [pc, #84]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 800962a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800962c:	4a14      	ldr	r2, [pc, #80]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 800962e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009632:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009634:	e005      	b.n	8009642 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009636:	4b12      	ldr	r3, [pc, #72]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 8009638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800963a:	4a11      	ldr	r2, [pc, #68]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 800963c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009640:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009642:	4b0f      	ldr	r3, [pc, #60]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a0e      	ldr	r2, [pc, #56]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 8009648:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800964c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800964e:	f7f8 f8a1 	bl	8001794 <HAL_GetTick>
 8009652:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009654:	e008      	b.n	8009668 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009656:	f7f8 f89d 	bl	8001794 <HAL_GetTick>
 800965a:	4602      	mov	r2, r0
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	2b02      	cmp	r3, #2
 8009662:	d901      	bls.n	8009668 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009664:	2303      	movs	r3, #3
 8009666:	e006      	b.n	8009676 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009668:	4b05      	ldr	r3, [pc, #20]	@ (8009680 <RCCEx_PLL2_Config+0x15c>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009670:	2b00      	cmp	r3, #0
 8009672:	d0f0      	beq.n	8009656 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009674:	7bfb      	ldrb	r3, [r7, #15]
}
 8009676:	4618      	mov	r0, r3
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	58024400 	.word	0x58024400
 8009684:	ffff0007 	.word	0xffff0007

08009688 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009692:	2300      	movs	r3, #0
 8009694:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009696:	4b53      	ldr	r3, [pc, #332]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 8009698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800969a:	f003 0303 	and.w	r3, r3, #3
 800969e:	2b03      	cmp	r3, #3
 80096a0:	d101      	bne.n	80096a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e099      	b.n	80097da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80096a6:	4b4f      	ldr	r3, [pc, #316]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a4e      	ldr	r2, [pc, #312]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 80096ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096b2:	f7f8 f86f 	bl	8001794 <HAL_GetTick>
 80096b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80096b8:	e008      	b.n	80096cc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80096ba:	f7f8 f86b 	bl	8001794 <HAL_GetTick>
 80096be:	4602      	mov	r2, r0
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	1ad3      	subs	r3, r2, r3
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	d901      	bls.n	80096cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80096c8:	2303      	movs	r3, #3
 80096ca:	e086      	b.n	80097da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80096cc:	4b45      	ldr	r3, [pc, #276]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1f0      	bne.n	80096ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80096d8:	4b42      	ldr	r3, [pc, #264]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 80096da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096dc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	051b      	lsls	r3, r3, #20
 80096e6:	493f      	ldr	r1, [pc, #252]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 80096e8:	4313      	orrs	r3, r2
 80096ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	3b01      	subs	r3, #1
 80096f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	3b01      	subs	r3, #1
 80096fc:	025b      	lsls	r3, r3, #9
 80096fe:	b29b      	uxth	r3, r3
 8009700:	431a      	orrs	r2, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	3b01      	subs	r3, #1
 8009708:	041b      	lsls	r3, r3, #16
 800970a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800970e:	431a      	orrs	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	3b01      	subs	r3, #1
 8009716:	061b      	lsls	r3, r3, #24
 8009718:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800971c:	4931      	ldr	r1, [pc, #196]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 800971e:	4313      	orrs	r3, r2
 8009720:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009722:	4b30      	ldr	r3, [pc, #192]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 8009724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009726:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	695b      	ldr	r3, [r3, #20]
 800972e:	492d      	ldr	r1, [pc, #180]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 8009730:	4313      	orrs	r3, r2
 8009732:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009734:	4b2b      	ldr	r3, [pc, #172]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 8009736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009738:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	4928      	ldr	r1, [pc, #160]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 8009742:	4313      	orrs	r3, r2
 8009744:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009746:	4b27      	ldr	r3, [pc, #156]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 8009748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800974a:	4a26      	ldr	r2, [pc, #152]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 800974c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009750:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009752:	4b24      	ldr	r3, [pc, #144]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 8009754:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009756:	4b24      	ldr	r3, [pc, #144]	@ (80097e8 <RCCEx_PLL3_Config+0x160>)
 8009758:	4013      	ands	r3, r2
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	69d2      	ldr	r2, [r2, #28]
 800975e:	00d2      	lsls	r2, r2, #3
 8009760:	4920      	ldr	r1, [pc, #128]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 8009762:	4313      	orrs	r3, r2
 8009764:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009766:	4b1f      	ldr	r3, [pc, #124]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 8009768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800976a:	4a1e      	ldr	r2, [pc, #120]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 800976c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009770:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d106      	bne.n	8009786 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009778:	4b1a      	ldr	r3, [pc, #104]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 800977a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800977c:	4a19      	ldr	r2, [pc, #100]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 800977e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009782:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009784:	e00f      	b.n	80097a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	2b01      	cmp	r3, #1
 800978a:	d106      	bne.n	800979a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800978c:	4b15      	ldr	r3, [pc, #84]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 800978e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009790:	4a14      	ldr	r2, [pc, #80]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 8009792:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009796:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009798:	e005      	b.n	80097a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800979a:	4b12      	ldr	r3, [pc, #72]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 800979c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800979e:	4a11      	ldr	r2, [pc, #68]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 80097a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80097a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80097a6:	4b0f      	ldr	r3, [pc, #60]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a0e      	ldr	r2, [pc, #56]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 80097ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80097b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097b2:	f7f7 ffef 	bl	8001794 <HAL_GetTick>
 80097b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80097b8:	e008      	b.n	80097cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80097ba:	f7f7 ffeb 	bl	8001794 <HAL_GetTick>
 80097be:	4602      	mov	r2, r0
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	1ad3      	subs	r3, r2, r3
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d901      	bls.n	80097cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80097c8:	2303      	movs	r3, #3
 80097ca:	e006      	b.n	80097da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80097cc:	4b05      	ldr	r3, [pc, #20]	@ (80097e4 <RCCEx_PLL3_Config+0x15c>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d0f0      	beq.n	80097ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	58024400 	.word	0x58024400
 80097e8:	ffff0007 	.word	0xffff0007

080097ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d101      	bne.n	80097fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e049      	b.n	8009892 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b00      	cmp	r3, #0
 8009808:	d106      	bne.n	8009818 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2200      	movs	r2, #0
 800980e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7f7 fb4e 	bl	8000eb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2202      	movs	r2, #2
 800981c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	3304      	adds	r3, #4
 8009828:	4619      	mov	r1, r3
 800982a:	4610      	mov	r0, r2
 800982c:	f000 fad8 	bl	8009de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2201      	movs	r2, #1
 800983c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
	...

0800989c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d001      	beq.n	80098b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e04c      	b.n	800994e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2202      	movs	r2, #2
 80098b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a26      	ldr	r2, [pc, #152]	@ (800995c <HAL_TIM_Base_Start+0xc0>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d022      	beq.n	800990c <HAL_TIM_Base_Start+0x70>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098ce:	d01d      	beq.n	800990c <HAL_TIM_Base_Start+0x70>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a22      	ldr	r2, [pc, #136]	@ (8009960 <HAL_TIM_Base_Start+0xc4>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d018      	beq.n	800990c <HAL_TIM_Base_Start+0x70>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a21      	ldr	r2, [pc, #132]	@ (8009964 <HAL_TIM_Base_Start+0xc8>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d013      	beq.n	800990c <HAL_TIM_Base_Start+0x70>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a1f      	ldr	r2, [pc, #124]	@ (8009968 <HAL_TIM_Base_Start+0xcc>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d00e      	beq.n	800990c <HAL_TIM_Base_Start+0x70>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a1e      	ldr	r2, [pc, #120]	@ (800996c <HAL_TIM_Base_Start+0xd0>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d009      	beq.n	800990c <HAL_TIM_Base_Start+0x70>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a1c      	ldr	r2, [pc, #112]	@ (8009970 <HAL_TIM_Base_Start+0xd4>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d004      	beq.n	800990c <HAL_TIM_Base_Start+0x70>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a1b      	ldr	r2, [pc, #108]	@ (8009974 <HAL_TIM_Base_Start+0xd8>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d115      	bne.n	8009938 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	689a      	ldr	r2, [r3, #8]
 8009912:	4b19      	ldr	r3, [pc, #100]	@ (8009978 <HAL_TIM_Base_Start+0xdc>)
 8009914:	4013      	ands	r3, r2
 8009916:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2b06      	cmp	r3, #6
 800991c:	d015      	beq.n	800994a <HAL_TIM_Base_Start+0xae>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009924:	d011      	beq.n	800994a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f042 0201 	orr.w	r2, r2, #1
 8009934:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009936:	e008      	b.n	800994a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f042 0201 	orr.w	r2, r2, #1
 8009946:	601a      	str	r2, [r3, #0]
 8009948:	e000      	b.n	800994c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800994a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800994c:	2300      	movs	r3, #0
}
 800994e:	4618      	mov	r0, r3
 8009950:	3714      	adds	r7, #20
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	40010000 	.word	0x40010000
 8009960:	40000400 	.word	0x40000400
 8009964:	40000800 	.word	0x40000800
 8009968:	40000c00 	.word	0x40000c00
 800996c:	40010400 	.word	0x40010400
 8009970:	40001800 	.word	0x40001800
 8009974:	40014000 	.word	0x40014000
 8009978:	00010007 	.word	0x00010007

0800997c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	f003 0302 	and.w	r3, r3, #2
 800999a:	2b00      	cmp	r3, #0
 800999c:	d020      	beq.n	80099e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f003 0302 	and.w	r3, r3, #2
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d01b      	beq.n	80099e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f06f 0202 	mvn.w	r2, #2
 80099b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2201      	movs	r2, #1
 80099b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	699b      	ldr	r3, [r3, #24]
 80099be:	f003 0303 	and.w	r3, r3, #3
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d003      	beq.n	80099ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 f9ec 	bl	8009da4 <HAL_TIM_IC_CaptureCallback>
 80099cc:	e005      	b.n	80099da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f9de 	bl	8009d90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 f9ef 	bl	8009db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	f003 0304 	and.w	r3, r3, #4
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d020      	beq.n	8009a2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	f003 0304 	and.w	r3, r3, #4
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d01b      	beq.n	8009a2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f06f 0204 	mvn.w	r2, #4
 80099fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2202      	movs	r2, #2
 8009a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	699b      	ldr	r3, [r3, #24]
 8009a0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d003      	beq.n	8009a1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 f9c6 	bl	8009da4 <HAL_TIM_IC_CaptureCallback>
 8009a18:	e005      	b.n	8009a26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f9b8 	bl	8009d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 f9c9 	bl	8009db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	f003 0308 	and.w	r3, r3, #8
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d020      	beq.n	8009a78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f003 0308 	and.w	r3, r3, #8
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d01b      	beq.n	8009a78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f06f 0208 	mvn.w	r2, #8
 8009a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2204      	movs	r2, #4
 8009a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	69db      	ldr	r3, [r3, #28]
 8009a56:	f003 0303 	and.w	r3, r3, #3
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d003      	beq.n	8009a66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 f9a0 	bl	8009da4 <HAL_TIM_IC_CaptureCallback>
 8009a64:	e005      	b.n	8009a72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f992 	bl	8009d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 f9a3 	bl	8009db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	f003 0310 	and.w	r3, r3, #16
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d020      	beq.n	8009ac4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f003 0310 	and.w	r3, r3, #16
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d01b      	beq.n	8009ac4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f06f 0210 	mvn.w	r2, #16
 8009a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2208      	movs	r2, #8
 8009a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	69db      	ldr	r3, [r3, #28]
 8009aa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d003      	beq.n	8009ab2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 f97a 	bl	8009da4 <HAL_TIM_IC_CaptureCallback>
 8009ab0:	e005      	b.n	8009abe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 f96c 	bl	8009d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 f97d 	bl	8009db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	f003 0301 	and.w	r3, r3, #1
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00c      	beq.n	8009ae8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f003 0301 	and.w	r3, r3, #1
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d007      	beq.n	8009ae8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f06f 0201 	mvn.w	r2, #1
 8009ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f94a 	bl	8009d7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d104      	bne.n	8009afc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d00c      	beq.n	8009b16 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d007      	beq.n	8009b16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fb3b 	bl	800a18c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d00c      	beq.n	8009b3a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d007      	beq.n	8009b3a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fb33 	bl	800a1a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00c      	beq.n	8009b5e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d007      	beq.n	8009b5e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f937 	bl	8009dcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	f003 0320 	and.w	r3, r3, #32
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00c      	beq.n	8009b82 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f003 0320 	and.w	r3, r3, #32
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d007      	beq.n	8009b82 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f06f 0220 	mvn.w	r2, #32
 8009b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 fafb 	bl	800a178 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b82:	bf00      	nop
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
	...

08009b8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b96:	2300      	movs	r3, #0
 8009b98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d101      	bne.n	8009ba8 <HAL_TIM_ConfigClockSource+0x1c>
 8009ba4:	2302      	movs	r3, #2
 8009ba6:	e0dc      	b.n	8009d62 <HAL_TIM_ConfigClockSource+0x1d6>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2202      	movs	r2, #2
 8009bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009bc0:	68ba      	ldr	r2, [r7, #8]
 8009bc2:	4b6a      	ldr	r3, [pc, #424]	@ (8009d6c <HAL_TIM_ConfigClockSource+0x1e0>)
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009bce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a64      	ldr	r2, [pc, #400]	@ (8009d70 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	f000 80a9 	beq.w	8009d36 <HAL_TIM_ConfigClockSource+0x1aa>
 8009be4:	4a62      	ldr	r2, [pc, #392]	@ (8009d70 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	f200 80ae 	bhi.w	8009d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009bec:	4a61      	ldr	r2, [pc, #388]	@ (8009d74 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	f000 80a1 	beq.w	8009d36 <HAL_TIM_ConfigClockSource+0x1aa>
 8009bf4:	4a5f      	ldr	r2, [pc, #380]	@ (8009d74 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	f200 80a6 	bhi.w	8009d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009bfc:	4a5e      	ldr	r2, [pc, #376]	@ (8009d78 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	f000 8099 	beq.w	8009d36 <HAL_TIM_ConfigClockSource+0x1aa>
 8009c04:	4a5c      	ldr	r2, [pc, #368]	@ (8009d78 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	f200 809e 	bhi.w	8009d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c0c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009c10:	f000 8091 	beq.w	8009d36 <HAL_TIM_ConfigClockSource+0x1aa>
 8009c14:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009c18:	f200 8096 	bhi.w	8009d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c20:	f000 8089 	beq.w	8009d36 <HAL_TIM_ConfigClockSource+0x1aa>
 8009c24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c28:	f200 808e 	bhi.w	8009d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c30:	d03e      	beq.n	8009cb0 <HAL_TIM_ConfigClockSource+0x124>
 8009c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c36:	f200 8087 	bhi.w	8009d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c3e:	f000 8086 	beq.w	8009d4e <HAL_TIM_ConfigClockSource+0x1c2>
 8009c42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c46:	d87f      	bhi.n	8009d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c48:	2b70      	cmp	r3, #112	@ 0x70
 8009c4a:	d01a      	beq.n	8009c82 <HAL_TIM_ConfigClockSource+0xf6>
 8009c4c:	2b70      	cmp	r3, #112	@ 0x70
 8009c4e:	d87b      	bhi.n	8009d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c50:	2b60      	cmp	r3, #96	@ 0x60
 8009c52:	d050      	beq.n	8009cf6 <HAL_TIM_ConfigClockSource+0x16a>
 8009c54:	2b60      	cmp	r3, #96	@ 0x60
 8009c56:	d877      	bhi.n	8009d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c58:	2b50      	cmp	r3, #80	@ 0x50
 8009c5a:	d03c      	beq.n	8009cd6 <HAL_TIM_ConfigClockSource+0x14a>
 8009c5c:	2b50      	cmp	r3, #80	@ 0x50
 8009c5e:	d873      	bhi.n	8009d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c60:	2b40      	cmp	r3, #64	@ 0x40
 8009c62:	d058      	beq.n	8009d16 <HAL_TIM_ConfigClockSource+0x18a>
 8009c64:	2b40      	cmp	r3, #64	@ 0x40
 8009c66:	d86f      	bhi.n	8009d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c68:	2b30      	cmp	r3, #48	@ 0x30
 8009c6a:	d064      	beq.n	8009d36 <HAL_TIM_ConfigClockSource+0x1aa>
 8009c6c:	2b30      	cmp	r3, #48	@ 0x30
 8009c6e:	d86b      	bhi.n	8009d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c70:	2b20      	cmp	r3, #32
 8009c72:	d060      	beq.n	8009d36 <HAL_TIM_ConfigClockSource+0x1aa>
 8009c74:	2b20      	cmp	r3, #32
 8009c76:	d867      	bhi.n	8009d48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d05c      	beq.n	8009d36 <HAL_TIM_ConfigClockSource+0x1aa>
 8009c7c:	2b10      	cmp	r3, #16
 8009c7e:	d05a      	beq.n	8009d36 <HAL_TIM_ConfigClockSource+0x1aa>
 8009c80:	e062      	b.n	8009d48 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c92:	f000 f9c3 	bl	800a01c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009ca4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	609a      	str	r2, [r3, #8]
      break;
 8009cae:	e04f      	b.n	8009d50 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009cc0:	f000 f9ac 	bl	800a01c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	689a      	ldr	r2, [r3, #8]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009cd2:	609a      	str	r2, [r3, #8]
      break;
 8009cd4:	e03c      	b.n	8009d50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	f000 f91c 	bl	8009f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	2150      	movs	r1, #80	@ 0x50
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f000 f976 	bl	8009fe0 <TIM_ITRx_SetConfig>
      break;
 8009cf4:	e02c      	b.n	8009d50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d02:	461a      	mov	r2, r3
 8009d04:	f000 f93b 	bl	8009f7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2160      	movs	r1, #96	@ 0x60
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f000 f966 	bl	8009fe0 <TIM_ITRx_SetConfig>
      break;
 8009d14:	e01c      	b.n	8009d50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d22:	461a      	mov	r2, r3
 8009d24:	f000 f8fc 	bl	8009f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2140      	movs	r1, #64	@ 0x40
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f000 f956 	bl	8009fe0 <TIM_ITRx_SetConfig>
      break;
 8009d34:	e00c      	b.n	8009d50 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4619      	mov	r1, r3
 8009d40:	4610      	mov	r0, r2
 8009d42:	f000 f94d 	bl	8009fe0 <TIM_ITRx_SetConfig>
      break;
 8009d46:	e003      	b.n	8009d50 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d4c:	e000      	b.n	8009d50 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009d4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2201      	movs	r2, #1
 8009d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	ffceff88 	.word	0xffceff88
 8009d70:	00100040 	.word	0x00100040
 8009d74:	00100030 	.word	0x00100030
 8009d78:	00100020 	.word	0x00100020

08009d7c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009d84:	bf00      	nop
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d98:	bf00      	nop
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009dac:	bf00      	nop
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009dd4:	bf00      	nop
 8009dd6:	370c      	adds	r7, #12
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a43      	ldr	r2, [pc, #268]	@ (8009f00 <TIM_Base_SetConfig+0x120>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d013      	beq.n	8009e20 <TIM_Base_SetConfig+0x40>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dfe:	d00f      	beq.n	8009e20 <TIM_Base_SetConfig+0x40>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a40      	ldr	r2, [pc, #256]	@ (8009f04 <TIM_Base_SetConfig+0x124>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d00b      	beq.n	8009e20 <TIM_Base_SetConfig+0x40>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a3f      	ldr	r2, [pc, #252]	@ (8009f08 <TIM_Base_SetConfig+0x128>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d007      	beq.n	8009e20 <TIM_Base_SetConfig+0x40>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a3e      	ldr	r2, [pc, #248]	@ (8009f0c <TIM_Base_SetConfig+0x12c>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d003      	beq.n	8009e20 <TIM_Base_SetConfig+0x40>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a3d      	ldr	r2, [pc, #244]	@ (8009f10 <TIM_Base_SetConfig+0x130>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d108      	bne.n	8009e32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4a32      	ldr	r2, [pc, #200]	@ (8009f00 <TIM_Base_SetConfig+0x120>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d01f      	beq.n	8009e7a <TIM_Base_SetConfig+0x9a>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e40:	d01b      	beq.n	8009e7a <TIM_Base_SetConfig+0x9a>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4a2f      	ldr	r2, [pc, #188]	@ (8009f04 <TIM_Base_SetConfig+0x124>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d017      	beq.n	8009e7a <TIM_Base_SetConfig+0x9a>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a2e      	ldr	r2, [pc, #184]	@ (8009f08 <TIM_Base_SetConfig+0x128>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d013      	beq.n	8009e7a <TIM_Base_SetConfig+0x9a>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a2d      	ldr	r2, [pc, #180]	@ (8009f0c <TIM_Base_SetConfig+0x12c>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d00f      	beq.n	8009e7a <TIM_Base_SetConfig+0x9a>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a2c      	ldr	r2, [pc, #176]	@ (8009f10 <TIM_Base_SetConfig+0x130>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d00b      	beq.n	8009e7a <TIM_Base_SetConfig+0x9a>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4a2b      	ldr	r2, [pc, #172]	@ (8009f14 <TIM_Base_SetConfig+0x134>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d007      	beq.n	8009e7a <TIM_Base_SetConfig+0x9a>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4a2a      	ldr	r2, [pc, #168]	@ (8009f18 <TIM_Base_SetConfig+0x138>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d003      	beq.n	8009e7a <TIM_Base_SetConfig+0x9a>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	4a29      	ldr	r2, [pc, #164]	@ (8009f1c <TIM_Base_SetConfig+0x13c>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d108      	bne.n	8009e8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	695b      	ldr	r3, [r3, #20]
 8009e96:	4313      	orrs	r3, r2
 8009e98:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	689a      	ldr	r2, [r3, #8]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4a14      	ldr	r2, [pc, #80]	@ (8009f00 <TIM_Base_SetConfig+0x120>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d00f      	beq.n	8009ed2 <TIM_Base_SetConfig+0xf2>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	4a16      	ldr	r2, [pc, #88]	@ (8009f10 <TIM_Base_SetConfig+0x130>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d00b      	beq.n	8009ed2 <TIM_Base_SetConfig+0xf2>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	4a15      	ldr	r2, [pc, #84]	@ (8009f14 <TIM_Base_SetConfig+0x134>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d007      	beq.n	8009ed2 <TIM_Base_SetConfig+0xf2>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	4a14      	ldr	r2, [pc, #80]	@ (8009f18 <TIM_Base_SetConfig+0x138>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d003      	beq.n	8009ed2 <TIM_Base_SetConfig+0xf2>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4a13      	ldr	r2, [pc, #76]	@ (8009f1c <TIM_Base_SetConfig+0x13c>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d103      	bne.n	8009eda <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	691a      	ldr	r2, [r3, #16]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f043 0204 	orr.w	r2, r3, #4
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	601a      	str	r2, [r3, #0]
}
 8009ef2:	bf00      	nop
 8009ef4:	3714      	adds	r7, #20
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	40010000 	.word	0x40010000
 8009f04:	40000400 	.word	0x40000400
 8009f08:	40000800 	.word	0x40000800
 8009f0c:	40000c00 	.word	0x40000c00
 8009f10:	40010400 	.word	0x40010400
 8009f14:	40014000 	.word	0x40014000
 8009f18:	40014400 	.word	0x40014400
 8009f1c:	40014800 	.word	0x40014800

08009f20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b087      	sub	sp, #28
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6a1b      	ldr	r3, [r3, #32]
 8009f30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6a1b      	ldr	r3, [r3, #32]
 8009f36:	f023 0201 	bic.w	r2, r3, #1
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	699b      	ldr	r3, [r3, #24]
 8009f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	011b      	lsls	r3, r3, #4
 8009f50:	693a      	ldr	r2, [r7, #16]
 8009f52:	4313      	orrs	r3, r2
 8009f54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	f023 030a 	bic.w	r3, r3, #10
 8009f5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f5e:	697a      	ldr	r2, [r7, #20]
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	693a      	ldr	r2, [r7, #16]
 8009f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	697a      	ldr	r2, [r7, #20]
 8009f70:	621a      	str	r2, [r3, #32]
}
 8009f72:	bf00      	nop
 8009f74:	371c      	adds	r7, #28
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr

08009f7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f7e:	b480      	push	{r7}
 8009f80:	b087      	sub	sp, #28
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	60f8      	str	r0, [r7, #12]
 8009f86:	60b9      	str	r1, [r7, #8]
 8009f88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6a1b      	ldr	r3, [r3, #32]
 8009f8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	6a1b      	ldr	r3, [r3, #32]
 8009f94:	f023 0210 	bic.w	r2, r3, #16
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	699b      	ldr	r3, [r3, #24]
 8009fa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009fa8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	031b      	lsls	r3, r3, #12
 8009fae:	693a      	ldr	r2, [r7, #16]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009fba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	011b      	lsls	r3, r3, #4
 8009fc0:	697a      	ldr	r2, [r7, #20]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	693a      	ldr	r2, [r7, #16]
 8009fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	697a      	ldr	r2, [r7, #20]
 8009fd0:	621a      	str	r2, [r3, #32]
}
 8009fd2:	bf00      	nop
 8009fd4:	371c      	adds	r7, #28
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr
	...

08009fe0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	4b09      	ldr	r3, [pc, #36]	@ (800a018 <TIM_ITRx_SetConfig+0x38>)
 8009ff4:	4013      	ands	r3, r2
 8009ff6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ff8:	683a      	ldr	r2, [r7, #0]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	f043 0307 	orr.w	r3, r3, #7
 800a002:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	609a      	str	r2, [r3, #8]
}
 800a00a:	bf00      	nop
 800a00c:	3714      	adds	r7, #20
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop
 800a018:	ffcfff8f 	.word	0xffcfff8f

0800a01c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b087      	sub	sp, #28
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]
 800a028:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a036:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	021a      	lsls	r2, r3, #8
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	431a      	orrs	r2, r3
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	4313      	orrs	r3, r2
 800a044:	697a      	ldr	r2, [r7, #20]
 800a046:	4313      	orrs	r3, r2
 800a048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	697a      	ldr	r2, [r7, #20]
 800a04e:	609a      	str	r2, [r3, #8]
}
 800a050:	bf00      	nop
 800a052:	371c      	adds	r7, #28
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d101      	bne.n	800a074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a070:	2302      	movs	r3, #2
 800a072:	e06d      	b.n	800a150 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2202      	movs	r2, #2
 800a080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a30      	ldr	r2, [pc, #192]	@ (800a15c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d004      	beq.n	800a0a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a2f      	ldr	r2, [pc, #188]	@ (800a160 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d108      	bne.n	800a0ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a0ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68fa      	ldr	r2, [r7, #12]
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a20      	ldr	r2, [pc, #128]	@ (800a15c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d022      	beq.n	800a124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0e6:	d01d      	beq.n	800a124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a1d      	ldr	r2, [pc, #116]	@ (800a164 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d018      	beq.n	800a124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a1c      	ldr	r2, [pc, #112]	@ (800a168 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d013      	beq.n	800a124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a1a      	ldr	r2, [pc, #104]	@ (800a16c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d00e      	beq.n	800a124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a15      	ldr	r2, [pc, #84]	@ (800a160 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d009      	beq.n	800a124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a16      	ldr	r2, [pc, #88]	@ (800a170 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d004      	beq.n	800a124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a15      	ldr	r2, [pc, #84]	@ (800a174 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d10c      	bne.n	800a13e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a12a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	68ba      	ldr	r2, [r7, #8]
 800a132:	4313      	orrs	r3, r2
 800a134:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2201      	movs	r2, #1
 800a142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3714      	adds	r7, #20
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr
 800a15c:	40010000 	.word	0x40010000
 800a160:	40010400 	.word	0x40010400
 800a164:	40000400 	.word	0x40000400
 800a168:	40000800 	.word	0x40000800
 800a16c:	40000c00 	.word	0x40000c00
 800a170:	40001800 	.word	0x40001800
 800a174:	40014000 	.word	0x40014000

0800a178 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a180:	bf00      	nop
 800a182:	370c      	adds	r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a194:	bf00      	nop
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a1a8:	bf00      	nop
 800a1aa:	370c      	adds	r7, #12
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d101      	bne.n	800a1c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e042      	b.n	800a24c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d106      	bne.n	800a1de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 f83b 	bl	800a254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2224      	movs	r2, #36	@ 0x24
 800a1e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f022 0201 	bic.w	r2, r2, #1
 800a1f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d002      	beq.n	800a204 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 fe28 	bl	800ae54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 f8bd 	bl	800a384 <UART_SetConfig>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d101      	bne.n	800a214 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a210:	2301      	movs	r3, #1
 800a212:	e01b      	b.n	800a24c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	685a      	ldr	r2, [r3, #4]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	689a      	ldr	r2, [r3, #8]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a232:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f042 0201 	orr.w	r2, r2, #1
 800a242:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 fea7 	bl	800af98 <UART_CheckIdleState>
 800a24a:	4603      	mov	r3, r0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3708      	adds	r7, #8
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b08a      	sub	sp, #40	@ 0x28
 800a26c:	af02      	add	r7, sp, #8
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	603b      	str	r3, [r7, #0]
 800a274:	4613      	mov	r3, r2
 800a276:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a27e:	2b20      	cmp	r3, #32
 800a280:	d17b      	bne.n	800a37a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d002      	beq.n	800a28e <HAL_UART_Transmit+0x26>
 800a288:	88fb      	ldrh	r3, [r7, #6]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d101      	bne.n	800a292 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	e074      	b.n	800a37c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2200      	movs	r2, #0
 800a296:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2221      	movs	r2, #33	@ 0x21
 800a29e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a2a2:	f7f7 fa77 	bl	8001794 <HAL_GetTick>
 800a2a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	88fa      	ldrh	r2, [r7, #6]
 800a2ac:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	88fa      	ldrh	r2, [r7, #6]
 800a2b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2c0:	d108      	bne.n	800a2d4 <HAL_UART_Transmit+0x6c>
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	691b      	ldr	r3, [r3, #16]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d104      	bne.n	800a2d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	61bb      	str	r3, [r7, #24]
 800a2d2:	e003      	b.n	800a2dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a2dc:	e030      	b.n	800a340 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	9300      	str	r3, [sp, #0]
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	2180      	movs	r1, #128	@ 0x80
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f000 feff 	bl	800b0ec <UART_WaitOnFlagUntilTimeout>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d005      	beq.n	800a300 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2220      	movs	r2, #32
 800a2f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	e03d      	b.n	800a37c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a300:	69fb      	ldr	r3, [r7, #28]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10b      	bne.n	800a31e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	881b      	ldrh	r3, [r3, #0]
 800a30a:	461a      	mov	r2, r3
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a314:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	3302      	adds	r3, #2
 800a31a:	61bb      	str	r3, [r7, #24]
 800a31c:	e007      	b.n	800a32e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	781a      	ldrb	r2, [r3, #0]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	3301      	adds	r3, #1
 800a32c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a334:	b29b      	uxth	r3, r3
 800a336:	3b01      	subs	r3, #1
 800a338:	b29a      	uxth	r2, r3
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a346:	b29b      	uxth	r3, r3
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d1c8      	bne.n	800a2de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	9300      	str	r3, [sp, #0]
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	2200      	movs	r2, #0
 800a354:	2140      	movs	r1, #64	@ 0x40
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f000 fec8 	bl	800b0ec <UART_WaitOnFlagUntilTimeout>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d005      	beq.n	800a36e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2220      	movs	r2, #32
 800a366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a36a:	2303      	movs	r3, #3
 800a36c:	e006      	b.n	800a37c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2220      	movs	r2, #32
 800a372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a376:	2300      	movs	r3, #0
 800a378:	e000      	b.n	800a37c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a37a:	2302      	movs	r3, #2
  }
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3720      	adds	r7, #32
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a388:	b092      	sub	sp, #72	@ 0x48
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a38e:	2300      	movs	r3, #0
 800a390:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	689a      	ldr	r2, [r3, #8]
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	691b      	ldr	r3, [r3, #16]
 800a39c:	431a      	orrs	r2, r3
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	695b      	ldr	r3, [r3, #20]
 800a3a2:	431a      	orrs	r2, r3
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	69db      	ldr	r3, [r3, #28]
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	4bbe      	ldr	r3, [pc, #760]	@ (800a6ac <UART_SetConfig+0x328>)
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	6812      	ldr	r2, [r2, #0]
 800a3ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a3bc:	430b      	orrs	r3, r1
 800a3be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	68da      	ldr	r2, [r3, #12]
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	430a      	orrs	r2, r1
 800a3d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	699b      	ldr	r3, [r3, #24]
 800a3da:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4ab3      	ldr	r2, [pc, #716]	@ (800a6b0 <UART_SetConfig+0x32c>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d004      	beq.n	800a3f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	6a1b      	ldr	r3, [r3, #32]
 800a3ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	689a      	ldr	r2, [r3, #8]
 800a3f6:	4baf      	ldr	r3, [pc, #700]	@ (800a6b4 <UART_SetConfig+0x330>)
 800a3f8:	4013      	ands	r3, r2
 800a3fa:	697a      	ldr	r2, [r7, #20]
 800a3fc:	6812      	ldr	r2, [r2, #0]
 800a3fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a400:	430b      	orrs	r3, r1
 800a402:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a40a:	f023 010f 	bic.w	r1, r3, #15
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	430a      	orrs	r2, r1
 800a418:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4aa6      	ldr	r2, [pc, #664]	@ (800a6b8 <UART_SetConfig+0x334>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d177      	bne.n	800a514 <UART_SetConfig+0x190>
 800a424:	4ba5      	ldr	r3, [pc, #660]	@ (800a6bc <UART_SetConfig+0x338>)
 800a426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a428:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a42c:	2b28      	cmp	r3, #40	@ 0x28
 800a42e:	d86d      	bhi.n	800a50c <UART_SetConfig+0x188>
 800a430:	a201      	add	r2, pc, #4	@ (adr r2, 800a438 <UART_SetConfig+0xb4>)
 800a432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a436:	bf00      	nop
 800a438:	0800a4dd 	.word	0x0800a4dd
 800a43c:	0800a50d 	.word	0x0800a50d
 800a440:	0800a50d 	.word	0x0800a50d
 800a444:	0800a50d 	.word	0x0800a50d
 800a448:	0800a50d 	.word	0x0800a50d
 800a44c:	0800a50d 	.word	0x0800a50d
 800a450:	0800a50d 	.word	0x0800a50d
 800a454:	0800a50d 	.word	0x0800a50d
 800a458:	0800a4e5 	.word	0x0800a4e5
 800a45c:	0800a50d 	.word	0x0800a50d
 800a460:	0800a50d 	.word	0x0800a50d
 800a464:	0800a50d 	.word	0x0800a50d
 800a468:	0800a50d 	.word	0x0800a50d
 800a46c:	0800a50d 	.word	0x0800a50d
 800a470:	0800a50d 	.word	0x0800a50d
 800a474:	0800a50d 	.word	0x0800a50d
 800a478:	0800a4ed 	.word	0x0800a4ed
 800a47c:	0800a50d 	.word	0x0800a50d
 800a480:	0800a50d 	.word	0x0800a50d
 800a484:	0800a50d 	.word	0x0800a50d
 800a488:	0800a50d 	.word	0x0800a50d
 800a48c:	0800a50d 	.word	0x0800a50d
 800a490:	0800a50d 	.word	0x0800a50d
 800a494:	0800a50d 	.word	0x0800a50d
 800a498:	0800a4f5 	.word	0x0800a4f5
 800a49c:	0800a50d 	.word	0x0800a50d
 800a4a0:	0800a50d 	.word	0x0800a50d
 800a4a4:	0800a50d 	.word	0x0800a50d
 800a4a8:	0800a50d 	.word	0x0800a50d
 800a4ac:	0800a50d 	.word	0x0800a50d
 800a4b0:	0800a50d 	.word	0x0800a50d
 800a4b4:	0800a50d 	.word	0x0800a50d
 800a4b8:	0800a4fd 	.word	0x0800a4fd
 800a4bc:	0800a50d 	.word	0x0800a50d
 800a4c0:	0800a50d 	.word	0x0800a50d
 800a4c4:	0800a50d 	.word	0x0800a50d
 800a4c8:	0800a50d 	.word	0x0800a50d
 800a4cc:	0800a50d 	.word	0x0800a50d
 800a4d0:	0800a50d 	.word	0x0800a50d
 800a4d4:	0800a50d 	.word	0x0800a50d
 800a4d8:	0800a505 	.word	0x0800a505
 800a4dc:	2301      	movs	r3, #1
 800a4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4e2:	e222      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a4e4:	2304      	movs	r3, #4
 800a4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ea:	e21e      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a4ec:	2308      	movs	r3, #8
 800a4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4f2:	e21a      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a4f4:	2310      	movs	r3, #16
 800a4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4fa:	e216      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a4fc:	2320      	movs	r3, #32
 800a4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a502:	e212      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a504:	2340      	movs	r3, #64	@ 0x40
 800a506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a50a:	e20e      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a50c:	2380      	movs	r3, #128	@ 0x80
 800a50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a512:	e20a      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a69      	ldr	r2, [pc, #420]	@ (800a6c0 <UART_SetConfig+0x33c>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d130      	bne.n	800a580 <UART_SetConfig+0x1fc>
 800a51e:	4b67      	ldr	r3, [pc, #412]	@ (800a6bc <UART_SetConfig+0x338>)
 800a520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a522:	f003 0307 	and.w	r3, r3, #7
 800a526:	2b05      	cmp	r3, #5
 800a528:	d826      	bhi.n	800a578 <UART_SetConfig+0x1f4>
 800a52a:	a201      	add	r2, pc, #4	@ (adr r2, 800a530 <UART_SetConfig+0x1ac>)
 800a52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a530:	0800a549 	.word	0x0800a549
 800a534:	0800a551 	.word	0x0800a551
 800a538:	0800a559 	.word	0x0800a559
 800a53c:	0800a561 	.word	0x0800a561
 800a540:	0800a569 	.word	0x0800a569
 800a544:	0800a571 	.word	0x0800a571
 800a548:	2300      	movs	r3, #0
 800a54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a54e:	e1ec      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a550:	2304      	movs	r3, #4
 800a552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a556:	e1e8      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a558:	2308      	movs	r3, #8
 800a55a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a55e:	e1e4      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a560:	2310      	movs	r3, #16
 800a562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a566:	e1e0      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a568:	2320      	movs	r3, #32
 800a56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a56e:	e1dc      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a570:	2340      	movs	r3, #64	@ 0x40
 800a572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a576:	e1d8      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a578:	2380      	movs	r3, #128	@ 0x80
 800a57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a57e:	e1d4      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a4f      	ldr	r2, [pc, #316]	@ (800a6c4 <UART_SetConfig+0x340>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d130      	bne.n	800a5ec <UART_SetConfig+0x268>
 800a58a:	4b4c      	ldr	r3, [pc, #304]	@ (800a6bc <UART_SetConfig+0x338>)
 800a58c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a58e:	f003 0307 	and.w	r3, r3, #7
 800a592:	2b05      	cmp	r3, #5
 800a594:	d826      	bhi.n	800a5e4 <UART_SetConfig+0x260>
 800a596:	a201      	add	r2, pc, #4	@ (adr r2, 800a59c <UART_SetConfig+0x218>)
 800a598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a59c:	0800a5b5 	.word	0x0800a5b5
 800a5a0:	0800a5bd 	.word	0x0800a5bd
 800a5a4:	0800a5c5 	.word	0x0800a5c5
 800a5a8:	0800a5cd 	.word	0x0800a5cd
 800a5ac:	0800a5d5 	.word	0x0800a5d5
 800a5b0:	0800a5dd 	.word	0x0800a5dd
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ba:	e1b6      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a5bc:	2304      	movs	r3, #4
 800a5be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5c2:	e1b2      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a5c4:	2308      	movs	r3, #8
 800a5c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ca:	e1ae      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a5cc:	2310      	movs	r3, #16
 800a5ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5d2:	e1aa      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a5d4:	2320      	movs	r3, #32
 800a5d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5da:	e1a6      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a5dc:	2340      	movs	r3, #64	@ 0x40
 800a5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5e2:	e1a2      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a5e4:	2380      	movs	r3, #128	@ 0x80
 800a5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ea:	e19e      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a35      	ldr	r2, [pc, #212]	@ (800a6c8 <UART_SetConfig+0x344>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d130      	bne.n	800a658 <UART_SetConfig+0x2d4>
 800a5f6:	4b31      	ldr	r3, [pc, #196]	@ (800a6bc <UART_SetConfig+0x338>)
 800a5f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5fa:	f003 0307 	and.w	r3, r3, #7
 800a5fe:	2b05      	cmp	r3, #5
 800a600:	d826      	bhi.n	800a650 <UART_SetConfig+0x2cc>
 800a602:	a201      	add	r2, pc, #4	@ (adr r2, 800a608 <UART_SetConfig+0x284>)
 800a604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a608:	0800a621 	.word	0x0800a621
 800a60c:	0800a629 	.word	0x0800a629
 800a610:	0800a631 	.word	0x0800a631
 800a614:	0800a639 	.word	0x0800a639
 800a618:	0800a641 	.word	0x0800a641
 800a61c:	0800a649 	.word	0x0800a649
 800a620:	2300      	movs	r3, #0
 800a622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a626:	e180      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a628:	2304      	movs	r3, #4
 800a62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a62e:	e17c      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a630:	2308      	movs	r3, #8
 800a632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a636:	e178      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a638:	2310      	movs	r3, #16
 800a63a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a63e:	e174      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a640:	2320      	movs	r3, #32
 800a642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a646:	e170      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a648:	2340      	movs	r3, #64	@ 0x40
 800a64a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a64e:	e16c      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a650:	2380      	movs	r3, #128	@ 0x80
 800a652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a656:	e168      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a1b      	ldr	r2, [pc, #108]	@ (800a6cc <UART_SetConfig+0x348>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d142      	bne.n	800a6e8 <UART_SetConfig+0x364>
 800a662:	4b16      	ldr	r3, [pc, #88]	@ (800a6bc <UART_SetConfig+0x338>)
 800a664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a666:	f003 0307 	and.w	r3, r3, #7
 800a66a:	2b05      	cmp	r3, #5
 800a66c:	d838      	bhi.n	800a6e0 <UART_SetConfig+0x35c>
 800a66e:	a201      	add	r2, pc, #4	@ (adr r2, 800a674 <UART_SetConfig+0x2f0>)
 800a670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a674:	0800a68d 	.word	0x0800a68d
 800a678:	0800a695 	.word	0x0800a695
 800a67c:	0800a69d 	.word	0x0800a69d
 800a680:	0800a6a5 	.word	0x0800a6a5
 800a684:	0800a6d1 	.word	0x0800a6d1
 800a688:	0800a6d9 	.word	0x0800a6d9
 800a68c:	2300      	movs	r3, #0
 800a68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a692:	e14a      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a694:	2304      	movs	r3, #4
 800a696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a69a:	e146      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a69c:	2308      	movs	r3, #8
 800a69e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6a2:	e142      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a6a4:	2310      	movs	r3, #16
 800a6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6aa:	e13e      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a6ac:	cfff69f3 	.word	0xcfff69f3
 800a6b0:	58000c00 	.word	0x58000c00
 800a6b4:	11fff4ff 	.word	0x11fff4ff
 800a6b8:	40011000 	.word	0x40011000
 800a6bc:	58024400 	.word	0x58024400
 800a6c0:	40004400 	.word	0x40004400
 800a6c4:	40004800 	.word	0x40004800
 800a6c8:	40004c00 	.word	0x40004c00
 800a6cc:	40005000 	.word	0x40005000
 800a6d0:	2320      	movs	r3, #32
 800a6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6d6:	e128      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a6d8:	2340      	movs	r3, #64	@ 0x40
 800a6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6de:	e124      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a6e0:	2380      	movs	r3, #128	@ 0x80
 800a6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6e6:	e120      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4acb      	ldr	r2, [pc, #812]	@ (800aa1c <UART_SetConfig+0x698>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d176      	bne.n	800a7e0 <UART_SetConfig+0x45c>
 800a6f2:	4bcb      	ldr	r3, [pc, #812]	@ (800aa20 <UART_SetConfig+0x69c>)
 800a6f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a6fa:	2b28      	cmp	r3, #40	@ 0x28
 800a6fc:	d86c      	bhi.n	800a7d8 <UART_SetConfig+0x454>
 800a6fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a704 <UART_SetConfig+0x380>)
 800a700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a704:	0800a7a9 	.word	0x0800a7a9
 800a708:	0800a7d9 	.word	0x0800a7d9
 800a70c:	0800a7d9 	.word	0x0800a7d9
 800a710:	0800a7d9 	.word	0x0800a7d9
 800a714:	0800a7d9 	.word	0x0800a7d9
 800a718:	0800a7d9 	.word	0x0800a7d9
 800a71c:	0800a7d9 	.word	0x0800a7d9
 800a720:	0800a7d9 	.word	0x0800a7d9
 800a724:	0800a7b1 	.word	0x0800a7b1
 800a728:	0800a7d9 	.word	0x0800a7d9
 800a72c:	0800a7d9 	.word	0x0800a7d9
 800a730:	0800a7d9 	.word	0x0800a7d9
 800a734:	0800a7d9 	.word	0x0800a7d9
 800a738:	0800a7d9 	.word	0x0800a7d9
 800a73c:	0800a7d9 	.word	0x0800a7d9
 800a740:	0800a7d9 	.word	0x0800a7d9
 800a744:	0800a7b9 	.word	0x0800a7b9
 800a748:	0800a7d9 	.word	0x0800a7d9
 800a74c:	0800a7d9 	.word	0x0800a7d9
 800a750:	0800a7d9 	.word	0x0800a7d9
 800a754:	0800a7d9 	.word	0x0800a7d9
 800a758:	0800a7d9 	.word	0x0800a7d9
 800a75c:	0800a7d9 	.word	0x0800a7d9
 800a760:	0800a7d9 	.word	0x0800a7d9
 800a764:	0800a7c1 	.word	0x0800a7c1
 800a768:	0800a7d9 	.word	0x0800a7d9
 800a76c:	0800a7d9 	.word	0x0800a7d9
 800a770:	0800a7d9 	.word	0x0800a7d9
 800a774:	0800a7d9 	.word	0x0800a7d9
 800a778:	0800a7d9 	.word	0x0800a7d9
 800a77c:	0800a7d9 	.word	0x0800a7d9
 800a780:	0800a7d9 	.word	0x0800a7d9
 800a784:	0800a7c9 	.word	0x0800a7c9
 800a788:	0800a7d9 	.word	0x0800a7d9
 800a78c:	0800a7d9 	.word	0x0800a7d9
 800a790:	0800a7d9 	.word	0x0800a7d9
 800a794:	0800a7d9 	.word	0x0800a7d9
 800a798:	0800a7d9 	.word	0x0800a7d9
 800a79c:	0800a7d9 	.word	0x0800a7d9
 800a7a0:	0800a7d9 	.word	0x0800a7d9
 800a7a4:	0800a7d1 	.word	0x0800a7d1
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ae:	e0bc      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a7b0:	2304      	movs	r3, #4
 800a7b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7b6:	e0b8      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a7b8:	2308      	movs	r3, #8
 800a7ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7be:	e0b4      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a7c0:	2310      	movs	r3, #16
 800a7c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7c6:	e0b0      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a7c8:	2320      	movs	r3, #32
 800a7ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ce:	e0ac      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a7d0:	2340      	movs	r3, #64	@ 0x40
 800a7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7d6:	e0a8      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a7d8:	2380      	movs	r3, #128	@ 0x80
 800a7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7de:	e0a4      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a8f      	ldr	r2, [pc, #572]	@ (800aa24 <UART_SetConfig+0x6a0>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d130      	bne.n	800a84c <UART_SetConfig+0x4c8>
 800a7ea:	4b8d      	ldr	r3, [pc, #564]	@ (800aa20 <UART_SetConfig+0x69c>)
 800a7ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7ee:	f003 0307 	and.w	r3, r3, #7
 800a7f2:	2b05      	cmp	r3, #5
 800a7f4:	d826      	bhi.n	800a844 <UART_SetConfig+0x4c0>
 800a7f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a7fc <UART_SetConfig+0x478>)
 800a7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7fc:	0800a815 	.word	0x0800a815
 800a800:	0800a81d 	.word	0x0800a81d
 800a804:	0800a825 	.word	0x0800a825
 800a808:	0800a82d 	.word	0x0800a82d
 800a80c:	0800a835 	.word	0x0800a835
 800a810:	0800a83d 	.word	0x0800a83d
 800a814:	2300      	movs	r3, #0
 800a816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a81a:	e086      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a81c:	2304      	movs	r3, #4
 800a81e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a822:	e082      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a824:	2308      	movs	r3, #8
 800a826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a82a:	e07e      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a82c:	2310      	movs	r3, #16
 800a82e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a832:	e07a      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a834:	2320      	movs	r3, #32
 800a836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a83a:	e076      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a83c:	2340      	movs	r3, #64	@ 0x40
 800a83e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a842:	e072      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a844:	2380      	movs	r3, #128	@ 0x80
 800a846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a84a:	e06e      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a75      	ldr	r2, [pc, #468]	@ (800aa28 <UART_SetConfig+0x6a4>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d130      	bne.n	800a8b8 <UART_SetConfig+0x534>
 800a856:	4b72      	ldr	r3, [pc, #456]	@ (800aa20 <UART_SetConfig+0x69c>)
 800a858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a85a:	f003 0307 	and.w	r3, r3, #7
 800a85e:	2b05      	cmp	r3, #5
 800a860:	d826      	bhi.n	800a8b0 <UART_SetConfig+0x52c>
 800a862:	a201      	add	r2, pc, #4	@ (adr r2, 800a868 <UART_SetConfig+0x4e4>)
 800a864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a868:	0800a881 	.word	0x0800a881
 800a86c:	0800a889 	.word	0x0800a889
 800a870:	0800a891 	.word	0x0800a891
 800a874:	0800a899 	.word	0x0800a899
 800a878:	0800a8a1 	.word	0x0800a8a1
 800a87c:	0800a8a9 	.word	0x0800a8a9
 800a880:	2300      	movs	r3, #0
 800a882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a886:	e050      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a888:	2304      	movs	r3, #4
 800a88a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a88e:	e04c      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a890:	2308      	movs	r3, #8
 800a892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a896:	e048      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a898:	2310      	movs	r3, #16
 800a89a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a89e:	e044      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a8a0:	2320      	movs	r3, #32
 800a8a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8a6:	e040      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a8a8:	2340      	movs	r3, #64	@ 0x40
 800a8aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ae:	e03c      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a8b0:	2380      	movs	r3, #128	@ 0x80
 800a8b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8b6:	e038      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a5b      	ldr	r2, [pc, #364]	@ (800aa2c <UART_SetConfig+0x6a8>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d130      	bne.n	800a924 <UART_SetConfig+0x5a0>
 800a8c2:	4b57      	ldr	r3, [pc, #348]	@ (800aa20 <UART_SetConfig+0x69c>)
 800a8c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8c6:	f003 0307 	and.w	r3, r3, #7
 800a8ca:	2b05      	cmp	r3, #5
 800a8cc:	d826      	bhi.n	800a91c <UART_SetConfig+0x598>
 800a8ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a8d4 <UART_SetConfig+0x550>)
 800a8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d4:	0800a8ed 	.word	0x0800a8ed
 800a8d8:	0800a8f5 	.word	0x0800a8f5
 800a8dc:	0800a8fd 	.word	0x0800a8fd
 800a8e0:	0800a905 	.word	0x0800a905
 800a8e4:	0800a90d 	.word	0x0800a90d
 800a8e8:	0800a915 	.word	0x0800a915
 800a8ec:	2302      	movs	r3, #2
 800a8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8f2:	e01a      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a8f4:	2304      	movs	r3, #4
 800a8f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8fa:	e016      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a8fc:	2308      	movs	r3, #8
 800a8fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a902:	e012      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a904:	2310      	movs	r3, #16
 800a906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a90a:	e00e      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a90c:	2320      	movs	r3, #32
 800a90e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a912:	e00a      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a914:	2340      	movs	r3, #64	@ 0x40
 800a916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a91a:	e006      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a91c:	2380      	movs	r3, #128	@ 0x80
 800a91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a922:	e002      	b.n	800a92a <UART_SetConfig+0x5a6>
 800a924:	2380      	movs	r3, #128	@ 0x80
 800a926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a3f      	ldr	r2, [pc, #252]	@ (800aa2c <UART_SetConfig+0x6a8>)
 800a930:	4293      	cmp	r3, r2
 800a932:	f040 80f8 	bne.w	800ab26 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a936:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a93a:	2b20      	cmp	r3, #32
 800a93c:	dc46      	bgt.n	800a9cc <UART_SetConfig+0x648>
 800a93e:	2b02      	cmp	r3, #2
 800a940:	f2c0 8082 	blt.w	800aa48 <UART_SetConfig+0x6c4>
 800a944:	3b02      	subs	r3, #2
 800a946:	2b1e      	cmp	r3, #30
 800a948:	d87e      	bhi.n	800aa48 <UART_SetConfig+0x6c4>
 800a94a:	a201      	add	r2, pc, #4	@ (adr r2, 800a950 <UART_SetConfig+0x5cc>)
 800a94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a950:	0800a9d3 	.word	0x0800a9d3
 800a954:	0800aa49 	.word	0x0800aa49
 800a958:	0800a9db 	.word	0x0800a9db
 800a95c:	0800aa49 	.word	0x0800aa49
 800a960:	0800aa49 	.word	0x0800aa49
 800a964:	0800aa49 	.word	0x0800aa49
 800a968:	0800a9eb 	.word	0x0800a9eb
 800a96c:	0800aa49 	.word	0x0800aa49
 800a970:	0800aa49 	.word	0x0800aa49
 800a974:	0800aa49 	.word	0x0800aa49
 800a978:	0800aa49 	.word	0x0800aa49
 800a97c:	0800aa49 	.word	0x0800aa49
 800a980:	0800aa49 	.word	0x0800aa49
 800a984:	0800aa49 	.word	0x0800aa49
 800a988:	0800a9fb 	.word	0x0800a9fb
 800a98c:	0800aa49 	.word	0x0800aa49
 800a990:	0800aa49 	.word	0x0800aa49
 800a994:	0800aa49 	.word	0x0800aa49
 800a998:	0800aa49 	.word	0x0800aa49
 800a99c:	0800aa49 	.word	0x0800aa49
 800a9a0:	0800aa49 	.word	0x0800aa49
 800a9a4:	0800aa49 	.word	0x0800aa49
 800a9a8:	0800aa49 	.word	0x0800aa49
 800a9ac:	0800aa49 	.word	0x0800aa49
 800a9b0:	0800aa49 	.word	0x0800aa49
 800a9b4:	0800aa49 	.word	0x0800aa49
 800a9b8:	0800aa49 	.word	0x0800aa49
 800a9bc:	0800aa49 	.word	0x0800aa49
 800a9c0:	0800aa49 	.word	0x0800aa49
 800a9c4:	0800aa49 	.word	0x0800aa49
 800a9c8:	0800aa3b 	.word	0x0800aa3b
 800a9cc:	2b40      	cmp	r3, #64	@ 0x40
 800a9ce:	d037      	beq.n	800aa40 <UART_SetConfig+0x6bc>
 800a9d0:	e03a      	b.n	800aa48 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a9d2:	f7fe f997 	bl	8008d04 <HAL_RCCEx_GetD3PCLK1Freq>
 800a9d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a9d8:	e03c      	b.n	800aa54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7fe f9a6 	bl	8008d30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a9e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9e8:	e034      	b.n	800aa54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9ea:	f107 0318 	add.w	r3, r7, #24
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7fe faf2 	bl	8008fd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9f8:	e02c      	b.n	800aa54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9fa:	4b09      	ldr	r3, [pc, #36]	@ (800aa20 <UART_SetConfig+0x69c>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f003 0320 	and.w	r3, r3, #32
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d016      	beq.n	800aa34 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa06:	4b06      	ldr	r3, [pc, #24]	@ (800aa20 <UART_SetConfig+0x69c>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	08db      	lsrs	r3, r3, #3
 800aa0c:	f003 0303 	and.w	r3, r3, #3
 800aa10:	4a07      	ldr	r2, [pc, #28]	@ (800aa30 <UART_SetConfig+0x6ac>)
 800aa12:	fa22 f303 	lsr.w	r3, r2, r3
 800aa16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa18:	e01c      	b.n	800aa54 <UART_SetConfig+0x6d0>
 800aa1a:	bf00      	nop
 800aa1c:	40011400 	.word	0x40011400
 800aa20:	58024400 	.word	0x58024400
 800aa24:	40007800 	.word	0x40007800
 800aa28:	40007c00 	.word	0x40007c00
 800aa2c:	58000c00 	.word	0x58000c00
 800aa30:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800aa34:	4b9d      	ldr	r3, [pc, #628]	@ (800acac <UART_SetConfig+0x928>)
 800aa36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa38:	e00c      	b.n	800aa54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa3a:	4b9d      	ldr	r3, [pc, #628]	@ (800acb0 <UART_SetConfig+0x92c>)
 800aa3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa3e:	e009      	b.n	800aa54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa46:	e005      	b.n	800aa54 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aa52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aa54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	f000 81de 	beq.w	800ae18 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa60:	4a94      	ldr	r2, [pc, #592]	@ (800acb4 <UART_SetConfig+0x930>)
 800aa62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa66:	461a      	mov	r2, r3
 800aa68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa6a:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa6e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	685a      	ldr	r2, [r3, #4]
 800aa74:	4613      	mov	r3, r2
 800aa76:	005b      	lsls	r3, r3, #1
 800aa78:	4413      	add	r3, r2
 800aa7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d305      	bcc.n	800aa8c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d903      	bls.n	800aa94 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800aa92:	e1c1      	b.n	800ae18 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa96:	2200      	movs	r2, #0
 800aa98:	60bb      	str	r3, [r7, #8]
 800aa9a:	60fa      	str	r2, [r7, #12]
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaa0:	4a84      	ldr	r2, [pc, #528]	@ (800acb4 <UART_SetConfig+0x930>)
 800aaa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	603b      	str	r3, [r7, #0]
 800aaac:	607a      	str	r2, [r7, #4]
 800aaae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aab2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aab6:	f7f5 fcc3 	bl	8000440 <__aeabi_uldivmod>
 800aaba:	4602      	mov	r2, r0
 800aabc:	460b      	mov	r3, r1
 800aabe:	4610      	mov	r0, r2
 800aac0:	4619      	mov	r1, r3
 800aac2:	f04f 0200 	mov.w	r2, #0
 800aac6:	f04f 0300 	mov.w	r3, #0
 800aaca:	020b      	lsls	r3, r1, #8
 800aacc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aad0:	0202      	lsls	r2, r0, #8
 800aad2:	6979      	ldr	r1, [r7, #20]
 800aad4:	6849      	ldr	r1, [r1, #4]
 800aad6:	0849      	lsrs	r1, r1, #1
 800aad8:	2000      	movs	r0, #0
 800aada:	460c      	mov	r4, r1
 800aadc:	4605      	mov	r5, r0
 800aade:	eb12 0804 	adds.w	r8, r2, r4
 800aae2:	eb43 0905 	adc.w	r9, r3, r5
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	469a      	mov	sl, r3
 800aaee:	4693      	mov	fp, r2
 800aaf0:	4652      	mov	r2, sl
 800aaf2:	465b      	mov	r3, fp
 800aaf4:	4640      	mov	r0, r8
 800aaf6:	4649      	mov	r1, r9
 800aaf8:	f7f5 fca2 	bl	8000440 <__aeabi_uldivmod>
 800aafc:	4602      	mov	r2, r0
 800aafe:	460b      	mov	r3, r1
 800ab00:	4613      	mov	r3, r2
 800ab02:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ab04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab0a:	d308      	bcc.n	800ab1e <UART_SetConfig+0x79a>
 800ab0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab12:	d204      	bcs.n	800ab1e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ab1a:	60da      	str	r2, [r3, #12]
 800ab1c:	e17c      	b.n	800ae18 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ab24:	e178      	b.n	800ae18 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	69db      	ldr	r3, [r3, #28]
 800ab2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab2e:	f040 80c5 	bne.w	800acbc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ab32:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ab36:	2b20      	cmp	r3, #32
 800ab38:	dc48      	bgt.n	800abcc <UART_SetConfig+0x848>
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	db7b      	blt.n	800ac36 <UART_SetConfig+0x8b2>
 800ab3e:	2b20      	cmp	r3, #32
 800ab40:	d879      	bhi.n	800ac36 <UART_SetConfig+0x8b2>
 800ab42:	a201      	add	r2, pc, #4	@ (adr r2, 800ab48 <UART_SetConfig+0x7c4>)
 800ab44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab48:	0800abd3 	.word	0x0800abd3
 800ab4c:	0800abdb 	.word	0x0800abdb
 800ab50:	0800ac37 	.word	0x0800ac37
 800ab54:	0800ac37 	.word	0x0800ac37
 800ab58:	0800abe3 	.word	0x0800abe3
 800ab5c:	0800ac37 	.word	0x0800ac37
 800ab60:	0800ac37 	.word	0x0800ac37
 800ab64:	0800ac37 	.word	0x0800ac37
 800ab68:	0800abf3 	.word	0x0800abf3
 800ab6c:	0800ac37 	.word	0x0800ac37
 800ab70:	0800ac37 	.word	0x0800ac37
 800ab74:	0800ac37 	.word	0x0800ac37
 800ab78:	0800ac37 	.word	0x0800ac37
 800ab7c:	0800ac37 	.word	0x0800ac37
 800ab80:	0800ac37 	.word	0x0800ac37
 800ab84:	0800ac37 	.word	0x0800ac37
 800ab88:	0800ac03 	.word	0x0800ac03
 800ab8c:	0800ac37 	.word	0x0800ac37
 800ab90:	0800ac37 	.word	0x0800ac37
 800ab94:	0800ac37 	.word	0x0800ac37
 800ab98:	0800ac37 	.word	0x0800ac37
 800ab9c:	0800ac37 	.word	0x0800ac37
 800aba0:	0800ac37 	.word	0x0800ac37
 800aba4:	0800ac37 	.word	0x0800ac37
 800aba8:	0800ac37 	.word	0x0800ac37
 800abac:	0800ac37 	.word	0x0800ac37
 800abb0:	0800ac37 	.word	0x0800ac37
 800abb4:	0800ac37 	.word	0x0800ac37
 800abb8:	0800ac37 	.word	0x0800ac37
 800abbc:	0800ac37 	.word	0x0800ac37
 800abc0:	0800ac37 	.word	0x0800ac37
 800abc4:	0800ac37 	.word	0x0800ac37
 800abc8:	0800ac29 	.word	0x0800ac29
 800abcc:	2b40      	cmp	r3, #64	@ 0x40
 800abce:	d02e      	beq.n	800ac2e <UART_SetConfig+0x8aa>
 800abd0:	e031      	b.n	800ac36 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abd2:	f7fc f8e1 	bl	8006d98 <HAL_RCC_GetPCLK1Freq>
 800abd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800abd8:	e033      	b.n	800ac42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abda:	f7fc f8f3 	bl	8006dc4 <HAL_RCC_GetPCLK2Freq>
 800abde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800abe0:	e02f      	b.n	800ac42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7fe f8a2 	bl	8008d30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800abec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abf0:	e027      	b.n	800ac42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abf2:	f107 0318 	add.w	r3, r7, #24
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7fe f9ee 	bl	8008fd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac00:	e01f      	b.n	800ac42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac02:	4b2d      	ldr	r3, [pc, #180]	@ (800acb8 <UART_SetConfig+0x934>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f003 0320 	and.w	r3, r3, #32
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d009      	beq.n	800ac22 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac0e:	4b2a      	ldr	r3, [pc, #168]	@ (800acb8 <UART_SetConfig+0x934>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	08db      	lsrs	r3, r3, #3
 800ac14:	f003 0303 	and.w	r3, r3, #3
 800ac18:	4a24      	ldr	r2, [pc, #144]	@ (800acac <UART_SetConfig+0x928>)
 800ac1a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac20:	e00f      	b.n	800ac42 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ac22:	4b22      	ldr	r3, [pc, #136]	@ (800acac <UART_SetConfig+0x928>)
 800ac24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac26:	e00c      	b.n	800ac42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac28:	4b21      	ldr	r3, [pc, #132]	@ (800acb0 <UART_SetConfig+0x92c>)
 800ac2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac2c:	e009      	b.n	800ac42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac34:	e005      	b.n	800ac42 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ac36:	2300      	movs	r3, #0
 800ac38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ac40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f000 80e7 	beq.w	800ae18 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac4e:	4a19      	ldr	r2, [pc, #100]	@ (800acb4 <UART_SetConfig+0x930>)
 800ac50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac54:	461a      	mov	r2, r3
 800ac56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac58:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac5c:	005a      	lsls	r2, r3, #1
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	085b      	lsrs	r3, r3, #1
 800ac64:	441a      	add	r2, r3
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac72:	2b0f      	cmp	r3, #15
 800ac74:	d916      	bls.n	800aca4 <UART_SetConfig+0x920>
 800ac76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac7c:	d212      	bcs.n	800aca4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	f023 030f 	bic.w	r3, r3, #15
 800ac86:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac8a:	085b      	lsrs	r3, r3, #1
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	f003 0307 	and.w	r3, r3, #7
 800ac92:	b29a      	uxth	r2, r3
 800ac94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ac96:	4313      	orrs	r3, r2
 800ac98:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800aca0:	60da      	str	r2, [r3, #12]
 800aca2:	e0b9      	b.n	800ae18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800aca4:	2301      	movs	r3, #1
 800aca6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800acaa:	e0b5      	b.n	800ae18 <UART_SetConfig+0xa94>
 800acac:	03d09000 	.word	0x03d09000
 800acb0:	003d0900 	.word	0x003d0900
 800acb4:	0800d170 	.word	0x0800d170
 800acb8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800acbc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800acc0:	2b20      	cmp	r3, #32
 800acc2:	dc49      	bgt.n	800ad58 <UART_SetConfig+0x9d4>
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	db7c      	blt.n	800adc2 <UART_SetConfig+0xa3e>
 800acc8:	2b20      	cmp	r3, #32
 800acca:	d87a      	bhi.n	800adc2 <UART_SetConfig+0xa3e>
 800accc:	a201      	add	r2, pc, #4	@ (adr r2, 800acd4 <UART_SetConfig+0x950>)
 800acce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd2:	bf00      	nop
 800acd4:	0800ad5f 	.word	0x0800ad5f
 800acd8:	0800ad67 	.word	0x0800ad67
 800acdc:	0800adc3 	.word	0x0800adc3
 800ace0:	0800adc3 	.word	0x0800adc3
 800ace4:	0800ad6f 	.word	0x0800ad6f
 800ace8:	0800adc3 	.word	0x0800adc3
 800acec:	0800adc3 	.word	0x0800adc3
 800acf0:	0800adc3 	.word	0x0800adc3
 800acf4:	0800ad7f 	.word	0x0800ad7f
 800acf8:	0800adc3 	.word	0x0800adc3
 800acfc:	0800adc3 	.word	0x0800adc3
 800ad00:	0800adc3 	.word	0x0800adc3
 800ad04:	0800adc3 	.word	0x0800adc3
 800ad08:	0800adc3 	.word	0x0800adc3
 800ad0c:	0800adc3 	.word	0x0800adc3
 800ad10:	0800adc3 	.word	0x0800adc3
 800ad14:	0800ad8f 	.word	0x0800ad8f
 800ad18:	0800adc3 	.word	0x0800adc3
 800ad1c:	0800adc3 	.word	0x0800adc3
 800ad20:	0800adc3 	.word	0x0800adc3
 800ad24:	0800adc3 	.word	0x0800adc3
 800ad28:	0800adc3 	.word	0x0800adc3
 800ad2c:	0800adc3 	.word	0x0800adc3
 800ad30:	0800adc3 	.word	0x0800adc3
 800ad34:	0800adc3 	.word	0x0800adc3
 800ad38:	0800adc3 	.word	0x0800adc3
 800ad3c:	0800adc3 	.word	0x0800adc3
 800ad40:	0800adc3 	.word	0x0800adc3
 800ad44:	0800adc3 	.word	0x0800adc3
 800ad48:	0800adc3 	.word	0x0800adc3
 800ad4c:	0800adc3 	.word	0x0800adc3
 800ad50:	0800adc3 	.word	0x0800adc3
 800ad54:	0800adb5 	.word	0x0800adb5
 800ad58:	2b40      	cmp	r3, #64	@ 0x40
 800ad5a:	d02e      	beq.n	800adba <UART_SetConfig+0xa36>
 800ad5c:	e031      	b.n	800adc2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad5e:	f7fc f81b 	bl	8006d98 <HAL_RCC_GetPCLK1Freq>
 800ad62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad64:	e033      	b.n	800adce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad66:	f7fc f82d 	bl	8006dc4 <HAL_RCC_GetPCLK2Freq>
 800ad6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad6c:	e02f      	b.n	800adce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7fd ffdc 	bl	8008d30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad7c:	e027      	b.n	800adce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad7e:	f107 0318 	add.w	r3, r7, #24
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7fe f928 	bl	8008fd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad8c:	e01f      	b.n	800adce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad8e:	4b2d      	ldr	r3, [pc, #180]	@ (800ae44 <UART_SetConfig+0xac0>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 0320 	and.w	r3, r3, #32
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d009      	beq.n	800adae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad9a:	4b2a      	ldr	r3, [pc, #168]	@ (800ae44 <UART_SetConfig+0xac0>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	08db      	lsrs	r3, r3, #3
 800ada0:	f003 0303 	and.w	r3, r3, #3
 800ada4:	4a28      	ldr	r2, [pc, #160]	@ (800ae48 <UART_SetConfig+0xac4>)
 800ada6:	fa22 f303 	lsr.w	r3, r2, r3
 800adaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800adac:	e00f      	b.n	800adce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800adae:	4b26      	ldr	r3, [pc, #152]	@ (800ae48 <UART_SetConfig+0xac4>)
 800adb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adb2:	e00c      	b.n	800adce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800adb4:	4b25      	ldr	r3, [pc, #148]	@ (800ae4c <UART_SetConfig+0xac8>)
 800adb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adb8:	e009      	b.n	800adce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800adbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adc0:	e005      	b.n	800adce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800adc2:	2300      	movs	r3, #0
 800adc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800adc6:	2301      	movs	r3, #1
 800adc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800adcc:	bf00      	nop
    }

    if (pclk != 0U)
 800adce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800add0:	2b00      	cmp	r3, #0
 800add2:	d021      	beq.n	800ae18 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800add8:	4a1d      	ldr	r2, [pc, #116]	@ (800ae50 <UART_SetConfig+0xacc>)
 800adda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adde:	461a      	mov	r2, r3
 800ade0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ade2:	fbb3 f2f2 	udiv	r2, r3, r2
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	085b      	lsrs	r3, r3, #1
 800adec:	441a      	add	r2, r3
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800adf6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800adf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adfa:	2b0f      	cmp	r3, #15
 800adfc:	d909      	bls.n	800ae12 <UART_SetConfig+0xa8e>
 800adfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae04:	d205      	bcs.n	800ae12 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ae06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae08:	b29a      	uxth	r2, r3
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	60da      	str	r2, [r3, #12]
 800ae10:	e002      	b.n	800ae18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ae12:	2301      	movs	r3, #1
 800ae14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	2201      	movs	r2, #1
 800ae24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	2200      	movs	r2, #0
 800ae32:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ae34:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3748      	adds	r7, #72	@ 0x48
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae42:	bf00      	nop
 800ae44:	58024400 	.word	0x58024400
 800ae48:	03d09000 	.word	0x03d09000
 800ae4c:	003d0900 	.word	0x003d0900
 800ae50:	0800d170 	.word	0x0800d170

0800ae54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae60:	f003 0308 	and.w	r3, r3, #8
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d00a      	beq.n	800ae7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	430a      	orrs	r2, r1
 800ae7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae82:	f003 0301 	and.w	r3, r3, #1
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d00a      	beq.n	800aea0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	430a      	orrs	r2, r1
 800ae9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aea4:	f003 0302 	and.w	r3, r3, #2
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d00a      	beq.n	800aec2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	430a      	orrs	r2, r1
 800aec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aec6:	f003 0304 	and.w	r3, r3, #4
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d00a      	beq.n	800aee4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	430a      	orrs	r2, r1
 800aee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aee8:	f003 0310 	and.w	r3, r3, #16
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d00a      	beq.n	800af06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	430a      	orrs	r2, r1
 800af04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af0a:	f003 0320 	and.w	r3, r3, #32
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d00a      	beq.n	800af28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	430a      	orrs	r2, r1
 800af26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af30:	2b00      	cmp	r3, #0
 800af32:	d01a      	beq.n	800af6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	430a      	orrs	r2, r1
 800af48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af52:	d10a      	bne.n	800af6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	430a      	orrs	r2, r1
 800af68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00a      	beq.n	800af8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	430a      	orrs	r2, r1
 800af8a:	605a      	str	r2, [r3, #4]
  }
}
 800af8c:	bf00      	nop
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b098      	sub	sp, #96	@ 0x60
 800af9c:	af02      	add	r7, sp, #8
 800af9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800afa8:	f7f6 fbf4 	bl	8001794 <HAL_GetTick>
 800afac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f003 0308 	and.w	r3, r3, #8
 800afb8:	2b08      	cmp	r3, #8
 800afba:	d12f      	bne.n	800b01c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800afbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800afc0:	9300      	str	r3, [sp, #0]
 800afc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afc4:	2200      	movs	r2, #0
 800afc6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 f88e 	bl	800b0ec <UART_WaitOnFlagUntilTimeout>
 800afd0:	4603      	mov	r3, r0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d022      	beq.n	800b01c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afde:	e853 3f00 	ldrex	r3, [r3]
 800afe2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800afe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800afea:	653b      	str	r3, [r7, #80]	@ 0x50
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	461a      	mov	r2, r3
 800aff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aff4:	647b      	str	r3, [r7, #68]	@ 0x44
 800aff6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800affa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800affc:	e841 2300 	strex	r3, r2, [r1]
 800b000:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b004:	2b00      	cmp	r3, #0
 800b006:	d1e6      	bne.n	800afd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2220      	movs	r2, #32
 800b00c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2200      	movs	r2, #0
 800b014:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b018:	2303      	movs	r3, #3
 800b01a:	e063      	b.n	800b0e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f003 0304 	and.w	r3, r3, #4
 800b026:	2b04      	cmp	r3, #4
 800b028:	d149      	bne.n	800b0be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b02a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b02e:	9300      	str	r3, [sp, #0]
 800b030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b032:	2200      	movs	r2, #0
 800b034:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 f857 	bl	800b0ec <UART_WaitOnFlagUntilTimeout>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d03c      	beq.n	800b0be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b04c:	e853 3f00 	ldrex	r3, [r3]
 800b050:	623b      	str	r3, [r7, #32]
   return(result);
 800b052:	6a3b      	ldr	r3, [r7, #32]
 800b054:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b058:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	461a      	mov	r2, r3
 800b060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b062:	633b      	str	r3, [r7, #48]	@ 0x30
 800b064:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b066:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b068:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b06a:	e841 2300 	strex	r3, r2, [r1]
 800b06e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b072:	2b00      	cmp	r3, #0
 800b074:	d1e6      	bne.n	800b044 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	3308      	adds	r3, #8
 800b07c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	e853 3f00 	ldrex	r3, [r3]
 800b084:	60fb      	str	r3, [r7, #12]
   return(result);
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f023 0301 	bic.w	r3, r3, #1
 800b08c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	3308      	adds	r3, #8
 800b094:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b096:	61fa      	str	r2, [r7, #28]
 800b098:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b09a:	69b9      	ldr	r1, [r7, #24]
 800b09c:	69fa      	ldr	r2, [r7, #28]
 800b09e:	e841 2300 	strex	r3, r2, [r1]
 800b0a2:	617b      	str	r3, [r7, #20]
   return(result);
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d1e5      	bne.n	800b076 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2220      	movs	r2, #32
 800b0ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0ba:	2303      	movs	r3, #3
 800b0bc:	e012      	b.n	800b0e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2220      	movs	r2, #32
 800b0c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2220      	movs	r2, #32
 800b0ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b0e2:	2300      	movs	r3, #0
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3758      	adds	r7, #88	@ 0x58
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	603b      	str	r3, [r7, #0]
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0fc:	e04f      	b.n	800b19e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0fe:	69bb      	ldr	r3, [r7, #24]
 800b100:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b104:	d04b      	beq.n	800b19e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b106:	f7f6 fb45 	bl	8001794 <HAL_GetTick>
 800b10a:	4602      	mov	r2, r0
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	1ad3      	subs	r3, r2, r3
 800b110:	69ba      	ldr	r2, [r7, #24]
 800b112:	429a      	cmp	r2, r3
 800b114:	d302      	bcc.n	800b11c <UART_WaitOnFlagUntilTimeout+0x30>
 800b116:	69bb      	ldr	r3, [r7, #24]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d101      	bne.n	800b120 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b11c:	2303      	movs	r3, #3
 800b11e:	e04e      	b.n	800b1be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f003 0304 	and.w	r3, r3, #4
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d037      	beq.n	800b19e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	2b80      	cmp	r3, #128	@ 0x80
 800b132:	d034      	beq.n	800b19e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	2b40      	cmp	r3, #64	@ 0x40
 800b138:	d031      	beq.n	800b19e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	69db      	ldr	r3, [r3, #28]
 800b140:	f003 0308 	and.w	r3, r3, #8
 800b144:	2b08      	cmp	r3, #8
 800b146:	d110      	bne.n	800b16a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2208      	movs	r2, #8
 800b14e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	f000 f839 	bl	800b1c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2208      	movs	r2, #8
 800b15a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2200      	movs	r2, #0
 800b162:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b166:	2301      	movs	r3, #1
 800b168:	e029      	b.n	800b1be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	69db      	ldr	r3, [r3, #28]
 800b170:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b174:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b178:	d111      	bne.n	800b19e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b182:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b184:	68f8      	ldr	r0, [r7, #12]
 800b186:	f000 f81f 	bl	800b1c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2220      	movs	r2, #32
 800b18e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2200      	movs	r2, #0
 800b196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b19a:	2303      	movs	r3, #3
 800b19c:	e00f      	b.n	800b1be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	69da      	ldr	r2, [r3, #28]
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	4013      	ands	r3, r2
 800b1a8:	68ba      	ldr	r2, [r7, #8]
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	bf0c      	ite	eq
 800b1ae:	2301      	moveq	r3, #1
 800b1b0:	2300      	movne	r3, #0
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	79fb      	ldrb	r3, [r7, #7]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d0a0      	beq.n	800b0fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b1bc:	2300      	movs	r3, #0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3710      	adds	r7, #16
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
	...

0800b1c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b095      	sub	sp, #84	@ 0x54
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1d8:	e853 3f00 	ldrex	r3, [r3]
 800b1dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b1e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1ee:	643b      	str	r3, [r7, #64]	@ 0x40
 800b1f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b1f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b1f6:	e841 2300 	strex	r3, r2, [r1]
 800b1fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d1e6      	bne.n	800b1d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	3308      	adds	r3, #8
 800b208:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b20a:	6a3b      	ldr	r3, [r7, #32]
 800b20c:	e853 3f00 	ldrex	r3, [r3]
 800b210:	61fb      	str	r3, [r7, #28]
   return(result);
 800b212:	69fa      	ldr	r2, [r7, #28]
 800b214:	4b1e      	ldr	r3, [pc, #120]	@ (800b290 <UART_EndRxTransfer+0xc8>)
 800b216:	4013      	ands	r3, r2
 800b218:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	3308      	adds	r3, #8
 800b220:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b222:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b224:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b226:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b228:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b22a:	e841 2300 	strex	r3, r2, [r1]
 800b22e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1e5      	bne.n	800b202 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d118      	bne.n	800b270 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	e853 3f00 	ldrex	r3, [r3]
 800b24a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	f023 0310 	bic.w	r3, r3, #16
 800b252:	647b      	str	r3, [r7, #68]	@ 0x44
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	461a      	mov	r2, r3
 800b25a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b25c:	61bb      	str	r3, [r7, #24]
 800b25e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b260:	6979      	ldr	r1, [r7, #20]
 800b262:	69ba      	ldr	r2, [r7, #24]
 800b264:	e841 2300 	strex	r3, r2, [r1]
 800b268:	613b      	str	r3, [r7, #16]
   return(result);
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d1e6      	bne.n	800b23e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2220      	movs	r2, #32
 800b274:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2200      	movs	r2, #0
 800b282:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b284:	bf00      	nop
 800b286:	3754      	adds	r7, #84	@ 0x54
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr
 800b290:	effffffe 	.word	0xeffffffe

0800b294 <arm_rfft_fast_init_f32>:
 800b294:	084b      	lsrs	r3, r1, #1
 800b296:	2b80      	cmp	r3, #128	@ 0x80
 800b298:	b430      	push	{r4, r5}
 800b29a:	8201      	strh	r1, [r0, #16]
 800b29c:	8003      	strh	r3, [r0, #0]
 800b29e:	d06f      	beq.n	800b380 <arm_rfft_fast_init_f32+0xec>
 800b2a0:	d916      	bls.n	800b2d0 <arm_rfft_fast_init_f32+0x3c>
 800b2a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2a6:	d05e      	beq.n	800b366 <arm_rfft_fast_init_f32+0xd2>
 800b2a8:	d935      	bls.n	800b316 <arm_rfft_fast_init_f32+0x82>
 800b2aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2ae:	d025      	beq.n	800b2fc <arm_rfft_fast_init_f32+0x68>
 800b2b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2b4:	d112      	bne.n	800b2dc <arm_rfft_fast_init_f32+0x48>
 800b2b6:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 800b2ba:	4c37      	ldr	r4, [pc, #220]	@ (800b398 <arm_rfft_fast_init_f32+0x104>)
 800b2bc:	4937      	ldr	r1, [pc, #220]	@ (800b39c <arm_rfft_fast_init_f32+0x108>)
 800b2be:	2300      	movs	r3, #0
 800b2c0:	4a37      	ldr	r2, [pc, #220]	@ (800b3a0 <arm_rfft_fast_init_f32+0x10c>)
 800b2c2:	8185      	strh	r5, [r0, #12]
 800b2c4:	6084      	str	r4, [r0, #8]
 800b2c6:	6041      	str	r1, [r0, #4]
 800b2c8:	6142      	str	r2, [r0, #20]
 800b2ca:	b258      	sxtb	r0, r3
 800b2cc:	bc30      	pop	{r4, r5}
 800b2ce:	4770      	bx	lr
 800b2d0:	2b20      	cmp	r3, #32
 800b2d2:	d030      	beq.n	800b336 <arm_rfft_fast_init_f32+0xa2>
 800b2d4:	2b40      	cmp	r3, #64	@ 0x40
 800b2d6:	d005      	beq.n	800b2e4 <arm_rfft_fast_init_f32+0x50>
 800b2d8:	2b10      	cmp	r3, #16
 800b2da:	d038      	beq.n	800b34e <arm_rfft_fast_init_f32+0xba>
 800b2dc:	23ff      	movs	r3, #255	@ 0xff
 800b2de:	bc30      	pop	{r4, r5}
 800b2e0:	b258      	sxtb	r0, r3
 800b2e2:	4770      	bx	lr
 800b2e4:	2538      	movs	r5, #56	@ 0x38
 800b2e6:	4c2f      	ldr	r4, [pc, #188]	@ (800b3a4 <arm_rfft_fast_init_f32+0x110>)
 800b2e8:	492f      	ldr	r1, [pc, #188]	@ (800b3a8 <arm_rfft_fast_init_f32+0x114>)
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	4a2f      	ldr	r2, [pc, #188]	@ (800b3ac <arm_rfft_fast_init_f32+0x118>)
 800b2ee:	8185      	strh	r5, [r0, #12]
 800b2f0:	6084      	str	r4, [r0, #8]
 800b2f2:	6041      	str	r1, [r0, #4]
 800b2f4:	6142      	str	r2, [r0, #20]
 800b2f6:	b258      	sxtb	r0, r3
 800b2f8:	bc30      	pop	{r4, r5}
 800b2fa:	4770      	bx	lr
 800b2fc:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 800b300:	4c2b      	ldr	r4, [pc, #172]	@ (800b3b0 <arm_rfft_fast_init_f32+0x11c>)
 800b302:	492c      	ldr	r1, [pc, #176]	@ (800b3b4 <arm_rfft_fast_init_f32+0x120>)
 800b304:	2300      	movs	r3, #0
 800b306:	4a2c      	ldr	r2, [pc, #176]	@ (800b3b8 <arm_rfft_fast_init_f32+0x124>)
 800b308:	8185      	strh	r5, [r0, #12]
 800b30a:	6084      	str	r4, [r0, #8]
 800b30c:	6041      	str	r1, [r0, #4]
 800b30e:	6142      	str	r2, [r0, #20]
 800b310:	b258      	sxtb	r0, r3
 800b312:	bc30      	pop	{r4, r5}
 800b314:	4770      	bx	lr
 800b316:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b31a:	d1df      	bne.n	800b2dc <arm_rfft_fast_init_f32+0x48>
 800b31c:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 800b320:	4c26      	ldr	r4, [pc, #152]	@ (800b3bc <arm_rfft_fast_init_f32+0x128>)
 800b322:	4927      	ldr	r1, [pc, #156]	@ (800b3c0 <arm_rfft_fast_init_f32+0x12c>)
 800b324:	2300      	movs	r3, #0
 800b326:	4a27      	ldr	r2, [pc, #156]	@ (800b3c4 <arm_rfft_fast_init_f32+0x130>)
 800b328:	8185      	strh	r5, [r0, #12]
 800b32a:	6084      	str	r4, [r0, #8]
 800b32c:	6041      	str	r1, [r0, #4]
 800b32e:	6142      	str	r2, [r0, #20]
 800b330:	b258      	sxtb	r0, r3
 800b332:	bc30      	pop	{r4, r5}
 800b334:	4770      	bx	lr
 800b336:	2530      	movs	r5, #48	@ 0x30
 800b338:	4c23      	ldr	r4, [pc, #140]	@ (800b3c8 <arm_rfft_fast_init_f32+0x134>)
 800b33a:	4924      	ldr	r1, [pc, #144]	@ (800b3cc <arm_rfft_fast_init_f32+0x138>)
 800b33c:	2300      	movs	r3, #0
 800b33e:	4a24      	ldr	r2, [pc, #144]	@ (800b3d0 <arm_rfft_fast_init_f32+0x13c>)
 800b340:	8185      	strh	r5, [r0, #12]
 800b342:	6084      	str	r4, [r0, #8]
 800b344:	6041      	str	r1, [r0, #4]
 800b346:	6142      	str	r2, [r0, #20]
 800b348:	b258      	sxtb	r0, r3
 800b34a:	bc30      	pop	{r4, r5}
 800b34c:	4770      	bx	lr
 800b34e:	2514      	movs	r5, #20
 800b350:	4c20      	ldr	r4, [pc, #128]	@ (800b3d4 <arm_rfft_fast_init_f32+0x140>)
 800b352:	4921      	ldr	r1, [pc, #132]	@ (800b3d8 <arm_rfft_fast_init_f32+0x144>)
 800b354:	2300      	movs	r3, #0
 800b356:	4a21      	ldr	r2, [pc, #132]	@ (800b3dc <arm_rfft_fast_init_f32+0x148>)
 800b358:	8185      	strh	r5, [r0, #12]
 800b35a:	6084      	str	r4, [r0, #8]
 800b35c:	6041      	str	r1, [r0, #4]
 800b35e:	6142      	str	r2, [r0, #20]
 800b360:	b258      	sxtb	r0, r3
 800b362:	bc30      	pop	{r4, r5}
 800b364:	4770      	bx	lr
 800b366:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 800b36a:	4c1d      	ldr	r4, [pc, #116]	@ (800b3e0 <arm_rfft_fast_init_f32+0x14c>)
 800b36c:	491d      	ldr	r1, [pc, #116]	@ (800b3e4 <arm_rfft_fast_init_f32+0x150>)
 800b36e:	2300      	movs	r3, #0
 800b370:	4a1d      	ldr	r2, [pc, #116]	@ (800b3e8 <arm_rfft_fast_init_f32+0x154>)
 800b372:	8185      	strh	r5, [r0, #12]
 800b374:	6084      	str	r4, [r0, #8]
 800b376:	6041      	str	r1, [r0, #4]
 800b378:	6142      	str	r2, [r0, #20]
 800b37a:	b258      	sxtb	r0, r3
 800b37c:	bc30      	pop	{r4, r5}
 800b37e:	4770      	bx	lr
 800b380:	25d0      	movs	r5, #208	@ 0xd0
 800b382:	4c1a      	ldr	r4, [pc, #104]	@ (800b3ec <arm_rfft_fast_init_f32+0x158>)
 800b384:	491a      	ldr	r1, [pc, #104]	@ (800b3f0 <arm_rfft_fast_init_f32+0x15c>)
 800b386:	2300      	movs	r3, #0
 800b388:	4a1a      	ldr	r2, [pc, #104]	@ (800b3f4 <arm_rfft_fast_init_f32+0x160>)
 800b38a:	8185      	strh	r5, [r0, #12]
 800b38c:	6084      	str	r4, [r0, #8]
 800b38e:	6041      	str	r1, [r0, #4]
 800b390:	6142      	str	r2, [r0, #20]
 800b392:	b258      	sxtb	r0, r3
 800b394:	bc30      	pop	{r4, r5}
 800b396:	4770      	bx	lr
 800b398:	0801bf90 	.word	0x0801bf90
 800b39c:	0800d188 	.word	0x0800d188
 800b3a0:	080132f8 	.word	0x080132f8
 800b3a4:	08011288 	.word	0x08011288
 800b3a8:	0801dd50 	.word	0x0801dd50
 800b3ac:	08020240 	.word	0x08020240
 800b3b0:	08019c78 	.word	0x08019c78
 800b3b4:	08017b78 	.word	0x08017b78
 800b3b8:	080112f8 	.word	0x080112f8
 800b3bc:	0801fed0 	.word	0x0801fed0
 800b3c0:	080172f8 	.word	0x080172f8
 800b3c4:	0801df50 	.word	0x0801df50
 800b3c8:	0801ab30 	.word	0x0801ab30
 800b3cc:	08019b78 	.word	0x08019b78
 800b3d0:	08011188 	.word	0x08011188
 800b3d4:	0801aa88 	.word	0x0801aa88
 800b3d8:	08017af8 	.word	0x08017af8
 800b3dc:	0801aab0 	.word	0x0801aab0
 800b3e0:	0801e750 	.word	0x0801e750
 800b3e4:	0801af90 	.word	0x0801af90
 800b3e8:	0801ead0 	.word	0x0801ead0
 800b3ec:	08020440 	.word	0x08020440
 800b3f0:	0801ab90 	.word	0x0801ab90
 800b3f4:	0801fad0 	.word	0x0801fad0

0800b3f8 <arm_rfft_fast_f32>:
 800b3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3fc:	8a05      	ldrh	r5, [r0, #16]
 800b3fe:	4606      	mov	r6, r0
 800b400:	4690      	mov	r8, r2
 800b402:	460c      	mov	r4, r1
 800b404:	086d      	lsrs	r5, r5, #1
 800b406:	8005      	strh	r5, [r0, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d15e      	bne.n	800b4ca <arm_rfft_fast_f32+0xd2>
 800b40c:	461a      	mov	r2, r3
 800b40e:	2301      	movs	r3, #1
 800b410:	f000 fbe0 	bl	800bbd4 <arm_cfft_f32>
 800b414:	edd4 7a00 	vldr	s15, [r4]
 800b418:	ed94 7a01 	vldr	s14, [r4, #4]
 800b41c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b420:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b424:	8837      	ldrh	r7, [r6, #0]
 800b426:	ee37 7a07 	vadd.f32	s14, s14, s14
 800b42a:	6975      	ldr	r5, [r6, #20]
 800b42c:	3f01      	subs	r7, #1
 800b42e:	eef0 3a46 	vmov.f32	s7, s12
 800b432:	3510      	adds	r5, #16
 800b434:	f108 0610 	add.w	r6, r8, #16
 800b438:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b43c:	eb04 00c7 	add.w	r0, r4, r7, lsl #3
 800b440:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b444:	f104 0310 	add.w	r3, r4, #16
 800b448:	3808      	subs	r0, #8
 800b44a:	ee26 7a86 	vmul.f32	s14, s13, s12
 800b44e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b452:	ed88 7a00 	vstr	s14, [r8]
 800b456:	edc8 7a01 	vstr	s15, [r8, #4]
 800b45a:	edd0 6a02 	vldr	s13, [r0, #8]
 800b45e:	3f01      	subs	r7, #1
 800b460:	ed13 5a02 	vldr	s10, [r3, #-8]
 800b464:	f1a0 0008 	sub.w	r0, r0, #8
 800b468:	ed13 7a01 	vldr	s14, [r3, #-4]
 800b46c:	f105 0508 	add.w	r5, r5, #8
 800b470:	ee76 7ac5 	vsub.f32	s15, s13, s10
 800b474:	ed15 6a04 	vldr	s12, [r5, #-16]
 800b478:	edd0 5a05 	vldr	s11, [r0, #20]
 800b47c:	ee36 5a85 	vadd.f32	s10, s13, s10
 800b480:	ed55 6a03 	vldr	s13, [r5, #-12]
 800b484:	f103 0308 	add.w	r3, r3, #8
 800b488:	ee35 4a87 	vadd.f32	s8, s11, s14
 800b48c:	f106 0608 	add.w	r6, r6, #8
 800b490:	ee66 4a27 	vmul.f32	s9, s12, s15
 800b494:	ee77 5a65 	vsub.f32	s11, s14, s11
 800b498:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800b49c:	ee34 5a85 	vadd.f32	s10, s9, s10
 800b4a0:	ee26 6a04 	vmul.f32	s12, s12, s8
 800b4a4:	ee66 6a84 	vmul.f32	s13, s13, s8
 800b4a8:	ee77 7a25 	vadd.f32	s15, s14, s11
 800b4ac:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b4b0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b4b4:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800b4b8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800b4bc:	ed46 6a04 	vstr	s13, [r6, #-16]
 800b4c0:	ed46 7a03 	vstr	s15, [r6, #-12]
 800b4c4:	d1c9      	bne.n	800b45a <arm_rfft_fast_f32+0x62>
 800b4c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4ca:	edd1 7a00 	vldr	s15, [r1]
 800b4ce:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800b4d2:	edd1 6a01 	vldr	s13, [r1, #4]
 800b4d6:	1e68      	subs	r0, r5, #1
 800b4d8:	6975      	ldr	r5, [r6, #20]
 800b4da:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b4de:	00c1      	lsls	r1, r0, #3
 800b4e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b4e4:	ee27 7a23 	vmul.f32	s14, s14, s7
 800b4e8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800b4ec:	ed82 7a00 	vstr	s14, [r2]
 800b4f0:	edc2 7a01 	vstr	s15, [r2, #4]
 800b4f4:	b3e0      	cbz	r0, 800b570 <arm_rfft_fast_f32+0x178>
 800b4f6:	3908      	subs	r1, #8
 800b4f8:	f104 0210 	add.w	r2, r4, #16
 800b4fc:	3510      	adds	r5, #16
 800b4fe:	440c      	add	r4, r1
 800b500:	f108 0110 	add.w	r1, r8, #16
 800b504:	ed94 7a02 	vldr	s14, [r4, #8]
 800b508:	3801      	subs	r0, #1
 800b50a:	ed52 6a02 	vldr	s13, [r2, #-8]
 800b50e:	f1a4 0408 	sub.w	r4, r4, #8
 800b512:	ed15 6a02 	vldr	s12, [r5, #-8]
 800b516:	f102 0208 	add.w	r2, r2, #8
 800b51a:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800b51e:	ed94 4a05 	vldr	s8, [r4, #20]
 800b522:	ed12 5a03 	vldr	s10, [r2, #-12]
 800b526:	ee77 6a26 	vadd.f32	s13, s14, s13
 800b52a:	ed55 5a01 	vldr	s11, [r5, #-4]
 800b52e:	f101 0108 	add.w	r1, r1, #8
 800b532:	ee26 3a27 	vmul.f32	s6, s12, s15
 800b536:	f105 0508 	add.w	r5, r5, #8
 800b53a:	ee74 4a05 	vadd.f32	s9, s8, s10
 800b53e:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800b542:	ee35 5a44 	vsub.f32	s10, s10, s8
 800b546:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800b54a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800b54e:	ee77 7a05 	vadd.f32	s15, s14, s10
 800b552:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800b556:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b55a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800b55e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800b562:	ee27 7a23 	vmul.f32	s14, s14, s7
 800b566:	ed41 7a03 	vstr	s15, [r1, #-12]
 800b56a:	ed01 7a04 	vstr	s14, [r1, #-16]
 800b56e:	d1c9      	bne.n	800b504 <arm_rfft_fast_f32+0x10c>
 800b570:	4630      	mov	r0, r6
 800b572:	4641      	mov	r1, r8
 800b574:	461a      	mov	r2, r3
 800b576:	2301      	movs	r3, #1
 800b578:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b57c:	f000 bb2a 	b.w	800bbd4 <arm_cfft_f32>

0800b580 <arm_cfft_radix8by2_f32>:
 800b580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b584:	ed2d 8b06 	vpush	{d8-d10}
 800b588:	f8b0 e000 	ldrh.w	lr, [r0]
 800b58c:	4607      	mov	r7, r0
 800b58e:	6842      	ldr	r2, [r0, #4]
 800b590:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 800b594:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 800b598:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800b59c:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800b5a0:	f000 80af 	beq.w	800b702 <arm_cfft_radix8by2_f32+0x182>
 800b5a4:	3310      	adds	r3, #16
 800b5a6:	3210      	adds	r2, #16
 800b5a8:	f101 0610 	add.w	r6, r1, #16
 800b5ac:	f108 0510 	add.w	r5, r8, #16
 800b5b0:	18cc      	adds	r4, r1, r3
 800b5b2:	4443      	add	r3, r8
 800b5b4:	ed55 6a04 	vldr	s13, [r5, #-16]
 800b5b8:	f1be 0e01 	subs.w	lr, lr, #1
 800b5bc:	ed56 4a04 	vldr	s9, [r6, #-16]
 800b5c0:	f104 0410 	add.w	r4, r4, #16
 800b5c4:	ed55 7a02 	vldr	s15, [r5, #-8]
 800b5c8:	f106 0610 	add.w	r6, r6, #16
 800b5cc:	ee74 9aa6 	vadd.f32	s19, s9, s13
 800b5d0:	ed53 0a04 	vldr	s1, [r3, #-16]
 800b5d4:	ed13 5a03 	vldr	s10, [r3, #-12]
 800b5d8:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800b5dc:	ed13 3a02 	vldr	s6, [r3, #-8]
 800b5e0:	f102 0210 	add.w	r2, r2, #16
 800b5e4:	ed15 7a03 	vldr	s14, [r5, #-12]
 800b5e8:	f103 0310 	add.w	r3, r3, #16
 800b5ec:	ed55 2a01 	vldr	s5, [r5, #-4]
 800b5f0:	f105 0510 	add.w	r5, r5, #16
 800b5f4:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 800b5f8:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 800b5fc:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 800b600:	ee33 8a83 	vadd.f32	s16, s7, s6
 800b604:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 800b608:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 800b60c:	ee34 0a06 	vadd.f32	s0, s8, s12
 800b610:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 800b614:	ee76 aa87 	vadd.f32	s21, s13, s14
 800b618:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 800b61c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b620:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 800b624:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800b628:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 800b62c:	ee71 8a05 	vadd.f32	s17, s2, s10
 800b630:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800b634:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 800b638:	ee72 9a22 	vadd.f32	s19, s4, s5
 800b63c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800b640:	ee35 5a41 	vsub.f32	s10, s10, s2
 800b644:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 800b648:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 800b64c:	ee36 6a44 	vsub.f32	s12, s12, s8
 800b650:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 800b654:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800b658:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 800b65c:	ee72 7a62 	vsub.f32	s15, s4, s5
 800b660:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 800b664:	ee73 2a63 	vsub.f32	s5, s6, s7
 800b668:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 800b66c:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 800b670:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 800b674:	ee24 3a84 	vmul.f32	s6, s9, s8
 800b678:	ee27 2a26 	vmul.f32	s4, s14, s13
 800b67c:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800b680:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800b684:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b688:	ee65 5a84 	vmul.f32	s11, s11, s8
 800b68c:	ee65 6a26 	vmul.f32	s13, s10, s13
 800b690:	ee25 5a04 	vmul.f32	s10, s10, s8
 800b694:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b698:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800b69c:	ee33 4a02 	vadd.f32	s8, s6, s4
 800b6a0:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800b6a4:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 800b6a8:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 800b6ac:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 800b6b0:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 800b6b4:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 800b6b8:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 800b6bc:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800b6c0:	ee27 4a87 	vmul.f32	s8, s15, s14
 800b6c4:	ee61 5a87 	vmul.f32	s11, s3, s14
 800b6c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b6cc:	ee22 5a87 	vmul.f32	s10, s5, s14
 800b6d0:	ee26 7a07 	vmul.f32	s14, s12, s14
 800b6d4:	ee26 6a26 	vmul.f32	s12, s12, s13
 800b6d8:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800b6dc:	ee74 4a84 	vadd.f32	s9, s9, s8
 800b6e0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b6e4:	ee35 6a46 	vsub.f32	s12, s10, s12
 800b6e8:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b6ec:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 800b6f0:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 800b6f4:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 800b6f8:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 800b6fc:	f47f af5a 	bne.w	800b5b4 <arm_cfft_radix8by2_f32+0x34>
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	fa1f f48c 	uxth.w	r4, ip
 800b706:	4608      	mov	r0, r1
 800b708:	2302      	movs	r3, #2
 800b70a:	4621      	mov	r1, r4
 800b70c:	f000 fada 	bl	800bcc4 <arm_radix8_butterfly_f32>
 800b710:	4640      	mov	r0, r8
 800b712:	4621      	mov	r1, r4
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	2302      	movs	r3, #2
 800b718:	ecbd 8b06 	vpop	{d8-d10}
 800b71c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b720:	f000 bad0 	b.w	800bcc4 <arm_radix8_butterfly_f32>

0800b724 <arm_cfft_radix8by4_f32>:
 800b724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b728:	ed2d 8b06 	vpush	{d8-d10}
 800b72c:	8804      	ldrh	r4, [r0, #0]
 800b72e:	b08f      	sub	sp, #60	@ 0x3c
 800b730:	ed91 6a00 	vldr	s12, [r1]
 800b734:	460a      	mov	r2, r1
 800b736:	0864      	lsrs	r4, r4, #1
 800b738:	ed91 7a01 	vldr	s14, [r1, #4]
 800b73c:	9101      	str	r1, [sp, #4]
 800b73e:	00a3      	lsls	r3, r4, #2
 800b740:	9104      	str	r1, [sp, #16]
 800b742:	0864      	lsrs	r4, r4, #1
 800b744:	6841      	ldr	r1, [r0, #4]
 800b746:	900c      	str	r0, [sp, #48]	@ 0x30
 800b748:	4625      	mov	r5, r4
 800b74a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b74c:	f101 0408 	add.w	r4, r1, #8
 800b750:	f101 0610 	add.w	r6, r1, #16
 800b754:	9406      	str	r4, [sp, #24]
 800b756:	18d4      	adds	r4, r2, r3
 800b758:	1eaa      	subs	r2, r5, #2
 800b75a:	f101 0518 	add.w	r5, r1, #24
 800b75e:	18e0      	adds	r0, r4, r3
 800b760:	ed94 4a00 	vldr	s8, [r4]
 800b764:	edd4 3a01 	vldr	s7, [r4, #4]
 800b768:	46a6      	mov	lr, r4
 800b76a:	edd0 6a00 	vldr	s13, [r0]
 800b76e:	18c7      	adds	r7, r0, r3
 800b770:	edd0 7a01 	vldr	s15, [r0, #4]
 800b774:	46a0      	mov	r8, r4
 800b776:	ee76 5a26 	vadd.f32	s11, s12, s13
 800b77a:	edd7 4a00 	vldr	s9, [r7]
 800b77e:	9402      	str	r4, [sp, #8]
 800b780:	4604      	mov	r4, r0
 800b782:	9507      	str	r5, [sp, #28]
 800b784:	4605      	mov	r5, r0
 800b786:	ee75 2a84 	vadd.f32	s5, s11, s8
 800b78a:	900a      	str	r0, [sp, #40]	@ 0x28
 800b78c:	9801      	ldr	r0, [sp, #4]
 800b78e:	ee76 6a66 	vsub.f32	s13, s12, s13
 800b792:	ee37 6a27 	vadd.f32	s12, s14, s15
 800b796:	ed97 5a01 	vldr	s10, [r7, #4]
 800b79a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800b79e:	46bc      	mov	ip, r7
 800b7a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7a4:	9605      	str	r6, [sp, #20]
 800b7a6:	ee36 7a63 	vsub.f32	s14, s12, s7
 800b7aa:	9703      	str	r7, [sp, #12]
 800b7ac:	ee12 9a90 	vmov	r9, s5
 800b7b0:	ee33 3aa6 	vadd.f32	s6, s7, s13
 800b7b4:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800b7b8:	1f3e      	subs	r6, r7, #4
 800b7ba:	f840 9b08 	str.w	r9, [r0], #8
 800b7be:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800b7c2:	edde 2a01 	vldr	s5, [lr, #4]
 800b7c6:	ee77 3ac4 	vsub.f32	s7, s15, s8
 800b7ca:	ee77 7a84 	vadd.f32	s15, s15, s8
 800b7ce:	ed9c 4a01 	vldr	s8, [ip, #4]
 800b7d2:	ee36 6a22 	vadd.f32	s12, s12, s5
 800b7d6:	9001      	str	r0, [sp, #4]
 800b7d8:	ee37 7a45 	vsub.f32	s14, s14, s10
 800b7dc:	9804      	ldr	r0, [sp, #16]
 800b7de:	ee75 6a26 	vadd.f32	s13, s10, s13
 800b7e2:	f1ae 0704 	sub.w	r7, lr, #4
 800b7e6:	ee36 6a04 	vadd.f32	s12, s12, s8
 800b7ea:	ee33 4a45 	vsub.f32	s8, s6, s10
 800b7ee:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800b7f2:	ee33 5aa4 	vadd.f32	s10, s7, s9
 800b7f6:	ed80 6a01 	vstr	s12, [r0, #4]
 800b7fa:	ee14 9a10 	vmov	r9, s8
 800b7fe:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800b802:	f848 9b08 	str.w	r9, [r8], #8
 800b806:	ed8e 5a01 	vstr	s10, [lr, #4]
 800b80a:	ee15 ea90 	vmov	lr, s11
 800b80e:	f844 eb08 	str.w	lr, [r4], #8
 800b812:	ee16 ea90 	vmov	lr, s13
 800b816:	9408      	str	r4, [sp, #32]
 800b818:	462c      	mov	r4, r5
 800b81a:	ed85 7a01 	vstr	s14, [r5, #4]
 800b81e:	9d03      	ldr	r5, [sp, #12]
 800b820:	f84c eb08 	str.w	lr, [ip], #8
 800b824:	edc5 7a01 	vstr	s15, [r5, #4]
 800b828:	0855      	lsrs	r5, r2, #1
 800b82a:	9509      	str	r5, [sp, #36]	@ 0x24
 800b82c:	f000 8130 	beq.w	800ba90 <arm_cfft_radix8by4_f32+0x36c>
 800b830:	9804      	ldr	r0, [sp, #16]
 800b832:	3b08      	subs	r3, #8
 800b834:	46ab      	mov	fp, r5
 800b836:	f1a4 020c 	sub.w	r2, r4, #12
 800b83a:	f100 0510 	add.w	r5, r0, #16
 800b83e:	f101 0920 	add.w	r9, r1, #32
 800b842:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 800b846:	f8dd a014 	ldr.w	sl, [sp, #20]
 800b84a:	4433      	add	r3, r6
 800b84c:	3410      	adds	r4, #16
 800b84e:	4660      	mov	r0, ip
 800b850:	4641      	mov	r1, r8
 800b852:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 800b856:	ed54 6a02 	vldr	s13, [r4, #-8]
 800b85a:	f1bb 0b01 	subs.w	fp, fp, #1
 800b85e:	ed55 5a02 	vldr	s11, [r5, #-8]
 800b862:	f10a 0a08 	add.w	sl, sl, #8
 800b866:	edd1 7a00 	vldr	s15, [r1]
 800b86a:	f105 0508 	add.w	r5, r5, #8
 800b86e:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800b872:	edd0 2a00 	vldr	s5, [r0]
 800b876:	ed14 7a01 	vldr	s14, [r4, #-4]
 800b87a:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800b87e:	ed55 6a03 	vldr	s13, [r5, #-12]
 800b882:	f1a2 0208 	sub.w	r2, r2, #8
 800b886:	ee73 4aa7 	vadd.f32	s9, s7, s15
 800b88a:	ed90 2a01 	vldr	s4, [r0, #4]
 800b88e:	ee36 5a87 	vadd.f32	s10, s13, s14
 800b892:	ed91 6a01 	vldr	s12, [r1, #4]
 800b896:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b89a:	f109 0910 	add.w	r9, r9, #16
 800b89e:	ee72 6aa4 	vadd.f32	s13, s5, s9
 800b8a2:	f104 0408 	add.w	r4, r4, #8
 800b8a6:	ee73 3ae7 	vsub.f32	s7, s7, s15
 800b8aa:	f10e 0e18 	add.w	lr, lr, #24
 800b8ae:	ee37 3a67 	vsub.f32	s6, s14, s15
 800b8b2:	f1a3 0308 	sub.w	r3, r3, #8
 800b8b6:	ed45 6a04 	vstr	s13, [r5, #-16]
 800b8ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b8be:	edd1 6a01 	vldr	s13, [r1, #4]
 800b8c2:	ee76 1a25 	vadd.f32	s3, s12, s11
 800b8c6:	edd0 4a01 	vldr	s9, [r0, #4]
 800b8ca:	ee33 3a22 	vadd.f32	s6, s6, s5
 800b8ce:	ee75 6a26 	vadd.f32	s13, s10, s13
 800b8d2:	ee35 5a46 	vsub.f32	s10, s10, s12
 800b8d6:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800b8da:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b8de:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800b8e2:	ee35 5a42 	vsub.f32	s10, s10, s4
 800b8e6:	ed45 6a03 	vstr	s13, [r5, #-12]
 800b8ea:	ee32 2a06 	vadd.f32	s4, s4, s12
 800b8ee:	edd6 7a00 	vldr	s15, [r6]
 800b8f2:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800b8f6:	ed97 1a00 	vldr	s2, [r7]
 800b8fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 800b8fe:	ed92 8a04 	vldr	s16, [r2, #16]
 800b902:	ee71 8a27 	vadd.f32	s17, s2, s15
 800b906:	ed93 aa04 	vldr	s20, [r3, #16]
 800b90a:	ed16 7a01 	vldr	s14, [r6, #-4]
 800b90e:	ee71 7a67 	vsub.f32	s15, s2, s15
 800b912:	ed57 0a01 	vldr	s1, [r7, #-4]
 800b916:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800b91a:	ee38 6a88 	vadd.f32	s12, s17, s16
 800b91e:	edd3 9a03 	vldr	s19, [r3, #12]
 800b922:	ee30 0a87 	vadd.f32	s0, s1, s14
 800b926:	ed92 9a03 	vldr	s18, [r2, #12]
 800b92a:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800b92e:	ee3a 6a06 	vadd.f32	s12, s20, s12
 800b932:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800b936:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800b93a:	ee16 ca10 	vmov	ip, s12
 800b93e:	ee30 6a49 	vsub.f32	s12, s0, s18
 800b942:	ee71 4a07 	vadd.f32	s9, s2, s14
 800b946:	f847 c908 	str.w	ip, [r7], #-8
 800b94a:	ee34 4a29 	vadd.f32	s8, s8, s19
 800b94e:	edd2 8a03 	vldr	s17, [r2, #12]
 800b952:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800b956:	ed93 8a03 	vldr	s16, [r3, #12]
 800b95a:	ee71 0a47 	vsub.f32	s1, s2, s14
 800b95e:	ee30 0a28 	vadd.f32	s0, s0, s17
 800b962:	ee39 1a67 	vsub.f32	s2, s18, s15
 800b966:	ee36 6a69 	vsub.f32	s12, s12, s19
 800b96a:	ee30 0a08 	vadd.f32	s0, s0, s16
 800b96e:	ee75 5aca 	vsub.f32	s11, s11, s20
 800b972:	ed87 0a01 	vstr	s0, [r7, #4]
 800b976:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800b97a:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800b97e:	ee21 8a80 	vmul.f32	s16, s3, s0
 800b982:	ee23 7a26 	vmul.f32	s14, s6, s13
 800b986:	ee64 7a26 	vmul.f32	s15, s8, s13
 800b98a:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800b98e:	ee24 4a00 	vmul.f32	s8, s8, s0
 800b992:	ee23 3a00 	vmul.f32	s6, s6, s0
 800b996:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800b99a:	ee24 0a80 	vmul.f32	s0, s9, s0
 800b99e:	ee38 7a07 	vadd.f32	s14, s16, s14
 800b9a2:	ee76 6a84 	vadd.f32	s13, s13, s8
 800b9a6:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b9aa:	ee33 3a61 	vsub.f32	s6, s6, s3
 800b9ae:	ee17 ca10 	vmov	ip, s14
 800b9b2:	f841 cb08 	str.w	ip, [r1], #8
 800b9b6:	ed01 3a01 	vstr	s6, [r1, #-4]
 800b9ba:	ed82 0a04 	vstr	s0, [r2, #16]
 800b9be:	edc2 6a03 	vstr	s13, [r2, #12]
 800b9c2:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 800b9c6:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 800b9ca:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800b9ce:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800b9d2:	ee65 4a27 	vmul.f32	s9, s10, s15
 800b9d6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800b9da:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800b9de:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b9e2:	ee25 5a26 	vmul.f32	s10, s10, s13
 800b9e6:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b9ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9ee:	ee34 6a24 	vadd.f32	s12, s8, s9
 800b9f2:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800b9f6:	ee35 5a63 	vsub.f32	s10, s10, s7
 800b9fa:	ee17 ca90 	vmov	ip, s15
 800b9fe:	ed04 6a04 	vstr	s12, [r4, #-16]
 800ba02:	ed04 5a03 	vstr	s10, [r4, #-12]
 800ba06:	f846 c908 	str.w	ip, [r6], #-8
 800ba0a:	edc6 6a01 	vstr	s13, [r6, #4]
 800ba0e:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 800ba12:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 800ba16:	ee62 5a27 	vmul.f32	s11, s4, s15
 800ba1a:	ee22 6a87 	vmul.f32	s12, s5, s14
 800ba1e:	ee22 2a07 	vmul.f32	s4, s4, s14
 800ba22:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800ba26:	ee61 6a07 	vmul.f32	s13, s2, s14
 800ba2a:	ee20 7a87 	vmul.f32	s14, s1, s14
 800ba2e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800ba32:	ee61 7a27 	vmul.f32	s15, s2, s15
 800ba36:	ee35 6a86 	vadd.f32	s12, s11, s12
 800ba3a:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800ba3e:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800ba42:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba46:	ee16 ca10 	vmov	ip, s12
 800ba4a:	f840 cb08 	str.w	ip, [r0], #8
 800ba4e:	ed40 2a01 	vstr	s5, [r0, #-4]
 800ba52:	edc3 0a04 	vstr	s1, [r3, #16]
 800ba56:	edc3 7a03 	vstr	s15, [r3, #12]
 800ba5a:	f47f aefc 	bne.w	800b856 <arm_cfft_radix8by4_f32+0x132>
 800ba5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ba60:	9805      	ldr	r0, [sp, #20]
 800ba62:	00cb      	lsls	r3, r1, #3
 800ba64:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 800ba68:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800ba6c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800ba70:	4498      	add	r8, r3
 800ba72:	449c      	add	ip, r3
 800ba74:	9105      	str	r1, [sp, #20]
 800ba76:	9901      	ldr	r1, [sp, #4]
 800ba78:	4419      	add	r1, r3
 800ba7a:	9101      	str	r1, [sp, #4]
 800ba7c:	9906      	ldr	r1, [sp, #24]
 800ba7e:	4419      	add	r1, r3
 800ba80:	9106      	str	r1, [sp, #24]
 800ba82:	9908      	ldr	r1, [sp, #32]
 800ba84:	4419      	add	r1, r3
 800ba86:	9b07      	ldr	r3, [sp, #28]
 800ba88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba8c:	9108      	str	r1, [sp, #32]
 800ba8e:	9307      	str	r3, [sp, #28]
 800ba90:	9a01      	ldr	r2, [sp, #4]
 800ba92:	2304      	movs	r3, #4
 800ba94:	9e08      	ldr	r6, [sp, #32]
 800ba96:	edd2 6a00 	vldr	s13, [r2]
 800ba9a:	ed96 4a00 	vldr	s8, [r6]
 800ba9e:	edd8 7a00 	vldr	s15, [r8]
 800baa2:	ee36 6a84 	vadd.f32	s12, s13, s8
 800baa6:	eddc 2a00 	vldr	s5, [ip]
 800baaa:	ed96 7a01 	vldr	s14, [r6, #4]
 800baae:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800bab2:	edd2 6a01 	vldr	s13, [r2, #4]
 800bab6:	ee76 4a27 	vadd.f32	s9, s12, s15
 800baba:	ed98 2a01 	vldr	s4, [r8, #4]
 800babe:	ee76 5a87 	vadd.f32	s11, s13, s14
 800bac2:	ed9c 5a01 	vldr	s10, [ip, #4]
 800bac6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800baca:	9d05      	ldr	r5, [sp, #20]
 800bacc:	ee72 6aa4 	vadd.f32	s13, s5, s9
 800bad0:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 800bad4:	ee72 3a04 	vadd.f32	s7, s4, s8
 800bad8:	9804      	ldr	r0, [sp, #16]
 800bada:	ee77 4a67 	vsub.f32	s9, s14, s15
 800bade:	4621      	mov	r1, r4
 800bae0:	edc2 6a00 	vstr	s13, [r2]
 800bae4:	ee76 6a67 	vsub.f32	s13, s12, s15
 800bae8:	ed98 3a01 	vldr	s6, [r8, #4]
 800baec:	ee35 6ac2 	vsub.f32	s12, s11, s4
 800baf0:	eddc 1a01 	vldr	s3, [ip, #4]
 800baf4:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800baf8:	ee35 3a83 	vadd.f32	s6, s11, s6
 800bafc:	ee34 4a42 	vsub.f32	s8, s8, s4
 800bb00:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800bb04:	ee73 5a21 	vadd.f32	s11, s6, s3
 800bb08:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb0c:	ee36 6a45 	vsub.f32	s12, s12, s10
 800bb10:	edc2 5a01 	vstr	s11, [r2, #4]
 800bb14:	ee35 5a04 	vadd.f32	s10, s10, s8
 800bb18:	9a06      	ldr	r2, [sp, #24]
 800bb1a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800bb1e:	edd2 7a00 	vldr	s15, [r2]
 800bb22:	edd2 5a01 	vldr	s11, [r2, #4]
 800bb26:	ee23 4aa7 	vmul.f32	s8, s7, s15
 800bb2a:	ee63 3aa5 	vmul.f32	s7, s7, s11
 800bb2e:	ee64 5aa5 	vmul.f32	s11, s9, s11
 800bb32:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800bb36:	ee77 7a62 	vsub.f32	s15, s14, s5
 800bb3a:	ee74 5a25 	vadd.f32	s11, s8, s11
 800bb3e:	ee74 4ae3 	vsub.f32	s9, s9, s7
 800bb42:	edc8 5a00 	vstr	s11, [r8]
 800bb46:	edc8 4a01 	vstr	s9, [r8, #4]
 800bb4a:	edd5 4a01 	vldr	s9, [r5, #4]
 800bb4e:	ed95 7a00 	vldr	s14, [r5]
 800bb52:	9d07      	ldr	r5, [sp, #28]
 800bb54:	ee66 5a87 	vmul.f32	s11, s13, s14
 800bb58:	ee66 6aa4 	vmul.f32	s13, s13, s9
 800bb5c:	ee26 7a07 	vmul.f32	s14, s12, s14
 800bb60:	ee26 6a24 	vmul.f32	s12, s12, s9
 800bb64:	ee77 6a66 	vsub.f32	s13, s14, s13
 800bb68:	ee35 6a86 	vadd.f32	s12, s11, s12
 800bb6c:	edc6 6a01 	vstr	s13, [r6, #4]
 800bb70:	ed86 6a00 	vstr	s12, [r6]
 800bb74:	ed95 6a01 	vldr	s12, [r5, #4]
 800bb78:	ed95 7a00 	vldr	s14, [r5]
 800bb7c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bb7e:	ee65 6a07 	vmul.f32	s13, s10, s14
 800bb82:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bb86:	ee25 5a06 	vmul.f32	s10, s10, s12
 800bb8a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bb8e:	ee37 5a45 	vsub.f32	s10, s14, s10
 800bb92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb96:	ed8c 5a01 	vstr	s10, [ip, #4]
 800bb9a:	edcc 7a00 	vstr	s15, [ip]
 800bb9e:	6872      	ldr	r2, [r6, #4]
 800bba0:	f000 f890 	bl	800bcc4 <arm_radix8_butterfly_f32>
 800bba4:	9802      	ldr	r0, [sp, #8]
 800bba6:	4621      	mov	r1, r4
 800bba8:	6872      	ldr	r2, [r6, #4]
 800bbaa:	2304      	movs	r3, #4
 800bbac:	f000 f88a 	bl	800bcc4 <arm_radix8_butterfly_f32>
 800bbb0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bbb2:	4621      	mov	r1, r4
 800bbb4:	6872      	ldr	r2, [r6, #4]
 800bbb6:	2304      	movs	r3, #4
 800bbb8:	f000 f884 	bl	800bcc4 <arm_radix8_butterfly_f32>
 800bbbc:	9803      	ldr	r0, [sp, #12]
 800bbbe:	4621      	mov	r1, r4
 800bbc0:	6872      	ldr	r2, [r6, #4]
 800bbc2:	2304      	movs	r3, #4
 800bbc4:	b00f      	add	sp, #60	@ 0x3c
 800bbc6:	ecbd 8b06 	vpop	{d8-d10}
 800bbca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbce:	f000 b879 	b.w	800bcc4 <arm_radix8_butterfly_f32>
 800bbd2:	bf00      	nop

0800bbd4 <arm_cfft_f32>:
 800bbd4:	2a01      	cmp	r2, #1
 800bbd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbda:	4606      	mov	r6, r0
 800bbdc:	4617      	mov	r7, r2
 800bbde:	460c      	mov	r4, r1
 800bbe0:	4698      	mov	r8, r3
 800bbe2:	8805      	ldrh	r5, [r0, #0]
 800bbe4:	d053      	beq.n	800bc8e <arm_cfft_f32+0xba>
 800bbe6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800bbea:	d04b      	beq.n	800bc84 <arm_cfft_f32+0xb0>
 800bbec:	d916      	bls.n	800bc1c <arm_cfft_f32+0x48>
 800bbee:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800bbf2:	d01a      	beq.n	800bc2a <arm_cfft_f32+0x56>
 800bbf4:	d95a      	bls.n	800bcac <arm_cfft_f32+0xd8>
 800bbf6:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800bbfa:	d043      	beq.n	800bc84 <arm_cfft_f32+0xb0>
 800bbfc:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800bc00:	d105      	bne.n	800bc0e <arm_cfft_f32+0x3a>
 800bc02:	4620      	mov	r0, r4
 800bc04:	4629      	mov	r1, r5
 800bc06:	6872      	ldr	r2, [r6, #4]
 800bc08:	2301      	movs	r3, #1
 800bc0a:	f000 f85b 	bl	800bcc4 <arm_radix8_butterfly_f32>
 800bc0e:	f1b8 0f00 	cmp.w	r8, #0
 800bc12:	d111      	bne.n	800bc38 <arm_cfft_f32+0x64>
 800bc14:	2f01      	cmp	r7, #1
 800bc16:	d016      	beq.n	800bc46 <arm_cfft_f32+0x72>
 800bc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc1c:	2d20      	cmp	r5, #32
 800bc1e:	d031      	beq.n	800bc84 <arm_cfft_f32+0xb0>
 800bc20:	d948      	bls.n	800bcb4 <arm_cfft_f32+0xe0>
 800bc22:	2d40      	cmp	r5, #64	@ 0x40
 800bc24:	d0ed      	beq.n	800bc02 <arm_cfft_f32+0x2e>
 800bc26:	2d80      	cmp	r5, #128	@ 0x80
 800bc28:	d1f1      	bne.n	800bc0e <arm_cfft_f32+0x3a>
 800bc2a:	4630      	mov	r0, r6
 800bc2c:	4621      	mov	r1, r4
 800bc2e:	f7ff fca7 	bl	800b580 <arm_cfft_radix8by2_f32>
 800bc32:	f1b8 0f00 	cmp.w	r8, #0
 800bc36:	d0ed      	beq.n	800bc14 <arm_cfft_f32+0x40>
 800bc38:	4620      	mov	r0, r4
 800bc3a:	89b1      	ldrh	r1, [r6, #12]
 800bc3c:	68b2      	ldr	r2, [r6, #8]
 800bc3e:	f7f4 fb4f 	bl	80002e0 <arm_bitreversal_32>
 800bc42:	2f01      	cmp	r7, #1
 800bc44:	d1e8      	bne.n	800bc18 <arm_cfft_f32+0x44>
 800bc46:	ee07 5a90 	vmov	s15, r5
 800bc4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc4e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800bc52:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800bc56:	2d00      	cmp	r5, #0
 800bc58:	d0de      	beq.n	800bc18 <arm_cfft_f32+0x44>
 800bc5a:	f104 0108 	add.w	r1, r4, #8
 800bc5e:	2300      	movs	r3, #0
 800bc60:	ed11 7a02 	vldr	s14, [r1, #-8]
 800bc64:	3301      	adds	r3, #1
 800bc66:	ed51 7a01 	vldr	s15, [r1, #-4]
 800bc6a:	3108      	adds	r1, #8
 800bc6c:	429d      	cmp	r5, r3
 800bc6e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800bc72:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800bc76:	ed01 7a04 	vstr	s14, [r1, #-16]
 800bc7a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800bc7e:	d1ef      	bne.n	800bc60 <arm_cfft_f32+0x8c>
 800bc80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc84:	4630      	mov	r0, r6
 800bc86:	4621      	mov	r1, r4
 800bc88:	f7ff fd4c 	bl	800b724 <arm_cfft_radix8by4_f32>
 800bc8c:	e7bf      	b.n	800bc0e <arm_cfft_f32+0x3a>
 800bc8e:	b1a5      	cbz	r5, 800bcba <arm_cfft_f32+0xe6>
 800bc90:	f101 030c 	add.w	r3, r1, #12
 800bc94:	2200      	movs	r2, #0
 800bc96:	ed53 7a02 	vldr	s15, [r3, #-8]
 800bc9a:	3201      	adds	r2, #1
 800bc9c:	3308      	adds	r3, #8
 800bc9e:	eef1 7a67 	vneg.f32	s15, s15
 800bca2:	4295      	cmp	r5, r2
 800bca4:	ed43 7a04 	vstr	s15, [r3, #-16]
 800bca8:	d1f5      	bne.n	800bc96 <arm_cfft_f32+0xc2>
 800bcaa:	e79c      	b.n	800bbe6 <arm_cfft_f32+0x12>
 800bcac:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800bcb0:	d0a7      	beq.n	800bc02 <arm_cfft_f32+0x2e>
 800bcb2:	e7ac      	b.n	800bc0e <arm_cfft_f32+0x3a>
 800bcb4:	2d10      	cmp	r5, #16
 800bcb6:	d0b8      	beq.n	800bc2a <arm_cfft_f32+0x56>
 800bcb8:	e7a9      	b.n	800bc0e <arm_cfft_f32+0x3a>
 800bcba:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800bcbe:	d896      	bhi.n	800bbee <arm_cfft_f32+0x1a>
 800bcc0:	e7ac      	b.n	800bc1c <arm_cfft_f32+0x48>
 800bcc2:	bf00      	nop

0800bcc4 <arm_radix8_butterfly_f32>:
 800bcc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc8:	469e      	mov	lr, r3
 800bcca:	1d03      	adds	r3, r0, #4
 800bccc:	4683      	mov	fp, r0
 800bcce:	468a      	mov	sl, r1
 800bcd0:	4688      	mov	r8, r1
 800bcd2:	469c      	mov	ip, r3
 800bcd4:	ed2d 8b10 	vpush	{d8-d15}
 800bcd8:	ed9f 9ac4 	vldr	s18, [pc, #784]	@ 800bfec <arm_radix8_butterfly_f32+0x328>
 800bcdc:	b09f      	sub	sp, #124	@ 0x7c
 800bcde:	921c      	str	r2, [sp, #112]	@ 0x70
 800bce0:	931d      	str	r3, [sp, #116]	@ 0x74
 800bce2:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 800bce6:	f04f 0900 	mov.w	r9, #0
 800bcea:	461a      	mov	r2, r3
 800bcec:	930e      	str	r3, [sp, #56]	@ 0x38
 800bcee:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800bcf2:	0051      	lsls	r1, r2, #1
 800bcf4:	4608      	mov	r0, r1
 800bcf6:	9103      	str	r1, [sp, #12]
 800bcf8:	00d1      	lsls	r1, r2, #3
 800bcfa:	1885      	adds	r5, r0, r2
 800bcfc:	0110      	lsls	r0, r2, #4
 800bcfe:	eb0b 0601 	add.w	r6, fp, r1
 800bd02:	9101      	str	r1, [sp, #4]
 800bd04:	18ac      	adds	r4, r5, r2
 800bd06:	9002      	str	r0, [sp, #8]
 800bd08:	1877      	adds	r7, r6, r1
 800bd0a:	4611      	mov	r1, r2
 800bd0c:	4422      	add	r2, r4
 800bd0e:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800bd12:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800bd16:	1850      	adds	r0, r2, r1
 800bd18:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 800bd1c:	4401      	add	r1, r0
 800bd1e:	3204      	adds	r2, #4
 800bd20:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 800bd24:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 800bd28:	3104      	adds	r1, #4
 800bd2a:	ed1c 7a01 	vldr	s14, [ip, #-4]
 800bd2e:	44c1      	add	r9, r8
 800bd30:	edd4 6a00 	vldr	s13, [r4]
 800bd34:	ed97 6a00 	vldr	s12, [r7]
 800bd38:	45ca      	cmp	sl, r9
 800bd3a:	edd0 7a00 	vldr	s15, [r0]
 800bd3e:	ee37 5a66 	vsub.f32	s10, s14, s13
 800bd42:	edd6 5a00 	vldr	s11, [r6]
 800bd46:	ee37 2a26 	vadd.f32	s4, s14, s13
 800bd4a:	ee76 2a67 	vsub.f32	s5, s12, s15
 800bd4e:	edd5 6a00 	vldr	s13, [r5]
 800bd52:	ed12 7a01 	vldr	s14, [r2, #-4]
 800bd56:	ee76 4a27 	vadd.f32	s9, s12, s15
 800bd5a:	ed11 6a01 	vldr	s12, [r1, #-4]
 800bd5e:	ee75 1a87 	vadd.f32	s3, s11, s14
 800bd62:	ee36 4a86 	vadd.f32	s8, s13, s12
 800bd66:	ee72 7a24 	vadd.f32	s15, s4, s9
 800bd6a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800bd6e:	ee76 5ac6 	vsub.f32	s11, s13, s12
 800bd72:	ee31 6a84 	vadd.f32	s12, s3, s8
 800bd76:	ee32 2a64 	vsub.f32	s4, s4, s9
 800bd7a:	ee77 6a65 	vsub.f32	s13, s14, s11
 800bd7e:	ee77 4a86 	vadd.f32	s9, s15, s12
 800bd82:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800bd86:	ee37 7a25 	vadd.f32	s14, s14, s11
 800bd8a:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800bd8e:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800bd92:	edc4 7a00 	vstr	s15, [r4]
 800bd96:	ee66 6a89 	vmul.f32	s13, s13, s18
 800bd9a:	edd6 5a01 	vldr	s11, [r6, #4]
 800bd9e:	ee27 6a09 	vmul.f32	s12, s14, s18
 800bda2:	edd5 3a01 	vldr	s7, [r5, #4]
 800bda6:	ed92 4a00 	vldr	s8, [r2]
 800bdaa:	ee35 1a26 	vadd.f32	s2, s10, s13
 800bdae:	edd1 4a00 	vldr	s9, [r1]
 800bdb2:	ee75 6a66 	vsub.f32	s13, s10, s13
 800bdb6:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800bdba:	ed94 0a01 	vldr	s0, [r4, #4]
 800bdbe:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800bdc2:	ed9c 7a00 	vldr	s14, [ip]
 800bdc6:	edd0 0a01 	vldr	s1, [r0, #4]
 800bdca:	ee35 4a84 	vadd.f32	s8, s11, s8
 800bdce:	ed97 5a01 	vldr	s10, [r7, #4]
 800bdd2:	ee73 4aa4 	vadd.f32	s9, s7, s9
 800bdd6:	ee73 5a27 	vadd.f32	s11, s6, s15
 800bdda:	ee77 3a00 	vadd.f32	s7, s14, s0
 800bdde:	ee33 3a67 	vsub.f32	s6, s6, s15
 800bde2:	ee37 7a40 	vsub.f32	s14, s14, s0
 800bde6:	ee35 0a20 	vadd.f32	s0, s10, s1
 800bdea:	ee63 7a09 	vmul.f32	s15, s6, s18
 800bdee:	ee35 5a60 	vsub.f32	s10, s10, s1
 800bdf2:	ee33 3a80 	vadd.f32	s6, s7, s0
 800bdf6:	ee74 0a24 	vadd.f32	s1, s8, s9
 800bdfa:	ee65 5a89 	vmul.f32	s11, s11, s18
 800bdfe:	ee74 4a64 	vsub.f32	s9, s8, s9
 800be02:	ee33 4ac0 	vsub.f32	s8, s7, s0
 800be06:	ee75 3a25 	vadd.f32	s7, s10, s11
 800be0a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800be0e:	ee37 5a27 	vadd.f32	s10, s14, s15
 800be12:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be16:	ee32 7a86 	vadd.f32	s14, s5, s12
 800be1a:	ee32 6ac6 	vsub.f32	s12, s5, s12
 800be1e:	ee73 2a20 	vadd.f32	s5, s6, s1
 800be22:	ee33 3a60 	vsub.f32	s6, s6, s1
 800be26:	ee72 0a24 	vadd.f32	s1, s4, s9
 800be2a:	edcc 2a00 	vstr	s5, [ip]
 800be2e:	ee72 4a64 	vsub.f32	s9, s4, s9
 800be32:	ed84 3a01 	vstr	s6, [r4, #4]
 800be36:	ee74 2a61 	vsub.f32	s5, s8, s3
 800be3a:	ee31 3a23 	vadd.f32	s6, s2, s7
 800be3e:	edc7 0a00 	vstr	s1, [r7]
 800be42:	ee31 1a63 	vsub.f32	s2, s2, s7
 800be46:	edc0 4a00 	vstr	s9, [r0]
 800be4a:	ee76 3aa5 	vadd.f32	s7, s13, s11
 800be4e:	edc7 2a01 	vstr	s5, [r7, #4]
 800be52:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800be56:	441c      	add	r4, r3
 800be58:	ee75 5a47 	vsub.f32	s11, s10, s14
 800be5c:	449c      	add	ip, r3
 800be5e:	ee35 5a07 	vadd.f32	s10, s10, s14
 800be62:	441f      	add	r7, r3
 800be64:	ee37 7ac6 	vsub.f32	s14, s15, s12
 800be68:	ee34 4a21 	vadd.f32	s8, s8, s3
 800be6c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800be70:	ed80 4a01 	vstr	s8, [r0, #4]
 800be74:	4418      	add	r0, r3
 800be76:	ed86 3a00 	vstr	s6, [r6]
 800be7a:	ed01 1a01 	vstr	s2, [r1, #-4]
 800be7e:	ed42 3a01 	vstr	s7, [r2, #-4]
 800be82:	edc5 6a00 	vstr	s13, [r5]
 800be86:	edc6 5a01 	vstr	s11, [r6, #4]
 800be8a:	441e      	add	r6, r3
 800be8c:	ed81 5a00 	vstr	s10, [r1]
 800be90:	4419      	add	r1, r3
 800be92:	ed82 7a00 	vstr	s14, [r2]
 800be96:	441a      	add	r2, r3
 800be98:	edc5 7a01 	vstr	s15, [r5, #4]
 800be9c:	441d      	add	r5, r3
 800be9e:	f63f af44 	bhi.w	800bd2a <arm_radix8_butterfly_f32+0x66>
 800bea2:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800bea4:	2f07      	cmp	r7, #7
 800bea6:	f240 81e8 	bls.w	800c27a <arm_radix8_butterfly_f32+0x5b6>
 800beaa:	9903      	ldr	r1, [sp, #12]
 800beac:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 800beb0:	9e01      	ldr	r6, [sp, #4]
 800beb2:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 800beb6:	19ca      	adds	r2, r1, r7
 800beb8:	1c4c      	adds	r4, r1, #1
 800beba:	eb05 010e 	add.w	r1, r5, lr
 800bebe:	00ed      	lsls	r5, r5, #3
 800bec0:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800bec4:	3608      	adds	r6, #8
 800bec6:	950f      	str	r5, [sp, #60]	@ 0x3c
 800bec8:	eb01 050e 	add.w	r5, r1, lr
 800becc:	00c9      	lsls	r1, r1, #3
 800bece:	443c      	add	r4, r7
 800bed0:	9618      	str	r6, [sp, #96]	@ 0x60
 800bed2:	00ee      	lsls	r6, r5, #3
 800bed4:	460f      	mov	r7, r1
 800bed6:	9114      	str	r1, [sp, #80]	@ 0x50
 800bed8:	9902      	ldr	r1, [sp, #8]
 800beda:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800bede:	9611      	str	r6, [sp, #68]	@ 0x44
 800bee0:	00c0      	lsls	r0, r0, #3
 800bee2:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800bee4:	3108      	adds	r1, #8
 800bee6:	3404      	adds	r4, #4
 800bee8:	f04f 0901 	mov.w	r9, #1
 800beec:	9119      	str	r1, [sp, #100]	@ 0x64
 800beee:	eb05 010e 	add.w	r1, r5, lr
 800bef2:	4635      	mov	r5, r6
 800bef4:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bef6:	9301      	str	r3, [sp, #4]
 800bef8:	443d      	add	r5, r7
 800befa:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800befc:	9507      	str	r5, [sp, #28]
 800befe:	eb01 050e 	add.w	r5, r1, lr
 800bf02:	00c9      	lsls	r1, r1, #3
 800bf04:	19f7      	adds	r7, r6, r7
 800bf06:	00ed      	lsls	r5, r5, #3
 800bf08:	9110      	str	r1, [sp, #64]	@ 0x40
 800bf0a:	00d1      	lsls	r1, r2, #3
 800bf0c:	970a      	str	r7, [sp, #40]	@ 0x28
 800bf0e:	462f      	mov	r7, r5
 800bf10:	9515      	str	r5, [sp, #84]	@ 0x54
 800bf12:	0112      	lsls	r2, r2, #4
 800bf14:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800bf16:	19f4      	adds	r4, r6, r7
 800bf18:	320c      	adds	r2, #12
 800bf1a:	3108      	adds	r1, #8
 800bf1c:	1975      	adds	r5, r6, r5
 800bf1e:	9408      	str	r4, [sp, #32]
 800bf20:	9217      	str	r2, [sp, #92]	@ 0x5c
 800bf22:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800bf26:	9509      	str	r5, [sp, #36]	@ 0x24
 800bf28:	f100 020c 	add.w	r2, r0, #12
 800bf2c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800bf2e:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800bf30:	1975      	adds	r5, r6, r5
 800bf32:	9216      	str	r2, [sp, #88]	@ 0x58
 800bf34:	1932      	adds	r2, r6, r4
 800bf36:	911b      	str	r1, [sp, #108]	@ 0x6c
 800bf38:	9505      	str	r5, [sp, #20]
 800bf3a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 800bf3e:	0179      	lsls	r1, r7, #5
 800bf40:	9204      	str	r2, [sp, #16]
 800bf42:	1972      	adds	r2, r6, r5
 800bf44:	9412      	str	r4, [sp, #72]	@ 0x48
 800bf46:	9513      	str	r5, [sp, #76]	@ 0x4c
 800bf48:	9206      	str	r2, [sp, #24]
 800bf4a:	f101 0208 	add.w	r2, r1, #8
 800bf4e:	921a      	str	r2, [sp, #104]	@ 0x68
 800bf50:	2200      	movs	r2, #0
 800bf52:	f102 0108 	add.w	r1, r2, #8
 800bf56:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bf58:	46cc      	mov	ip, r9
 800bf5a:	460f      	mov	r7, r1
 800bf5c:	910c      	str	r1, [sp, #48]	@ 0x30
 800bf5e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf60:	eb0b 0e07 	add.w	lr, fp, r7
 800bf64:	9f04      	ldr	r7, [sp, #16]
 800bf66:	188e      	adds	r6, r1, r2
 800bf68:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800bf6a:	edd7 fa00 	vldr	s31, [r7]
 800bf6e:	9f06      	ldr	r7, [sp, #24]
 800bf70:	188d      	adds	r5, r1, r2
 800bf72:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800bf74:	445e      	add	r6, fp
 800bf76:	ed97 fa00 	vldr	s30, [r7]
 800bf7a:	445d      	add	r5, fp
 800bf7c:	9f05      	ldr	r7, [sp, #20]
 800bf7e:	188c      	adds	r4, r1, r2
 800bf80:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800bf82:	edd7 ea00 	vldr	s29, [r7]
 800bf86:	445c      	add	r4, fp
 800bf88:	9f07      	ldr	r7, [sp, #28]
 800bf8a:	1888      	adds	r0, r1, r2
 800bf8c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800bf8e:	ed97 ea00 	vldr	s28, [r7]
 800bf92:	4458      	add	r0, fp
 800bf94:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800bf96:	4411      	add	r1, r2
 800bf98:	441a      	add	r2, r3
 800bf9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf9c:	edd7 da00 	vldr	s27, [r7]
 800bfa0:	4459      	add	r1, fp
 800bfa2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800bfa4:	445a      	add	r2, fp
 800bfa6:	930d      	str	r3, [sp, #52]	@ 0x34
 800bfa8:	ed97 da00 	vldr	s26, [r7]
 800bfac:	9f08      	ldr	r7, [sp, #32]
 800bfae:	edd7 ca00 	vldr	s25, [r7]
 800bfb2:	9f04      	ldr	r7, [sp, #16]
 800bfb4:	ed97 ca01 	vldr	s24, [r7, #4]
 800bfb8:	9f06      	ldr	r7, [sp, #24]
 800bfba:	edd7 ba01 	vldr	s23, [r7, #4]
 800bfbe:	9f05      	ldr	r7, [sp, #20]
 800bfc0:	ed97 ba01 	vldr	s22, [r7, #4]
 800bfc4:	9f07      	ldr	r7, [sp, #28]
 800bfc6:	edd7 aa01 	vldr	s21, [r7, #4]
 800bfca:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800bfcc:	ed97 aa01 	vldr	s20, [r7, #4]
 800bfd0:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800bfd2:	9b01      	ldr	r3, [sp, #4]
 800bfd4:	edd7 7a01 	vldr	s15, [r7, #4]
 800bfd8:	9f08      	ldr	r7, [sp, #32]
 800bfda:	edcd 7a02 	vstr	s15, [sp, #8]
 800bfde:	edd7 7a01 	vldr	s15, [r7, #4]
 800bfe2:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 800bfe4:	edcd 7a03 	vstr	s15, [sp, #12]
 800bfe8:	e002      	b.n	800bff0 <arm_radix8_butterfly_f32+0x32c>
 800bfea:	bf00      	nop
 800bfec:	3f3504f3 	.word	0x3f3504f3
 800bff0:	ed90 2a00 	vldr	s4, [r0]
 800bff4:	44c4      	add	ip, r8
 800bff6:	ed96 7a00 	vldr	s14, [r6]
 800bffa:	ed94 8a00 	vldr	s16, [r4]
 800bffe:	45e2      	cmp	sl, ip
 800c000:	ed52 7a01 	vldr	s15, [r2, #-4]
 800c004:	ed95 5a00 	vldr	s10, [r5]
 800c008:	ed51 5a01 	vldr	s11, [r1, #-4]
 800c00c:	ee38 6a27 	vadd.f32	s12, s16, s15
 800c010:	ed9e 1a00 	vldr	s2, [lr]
 800c014:	ee78 2a67 	vsub.f32	s5, s16, s15
 800c018:	ed17 4a01 	vldr	s8, [r7, #-4]
 800c01c:	ee75 3a25 	vadd.f32	s7, s10, s11
 800c020:	ee31 3a07 	vadd.f32	s6, s2, s14
 800c024:	edde 4a01 	vldr	s9, [lr, #4]
 800c028:	ee72 6a04 	vadd.f32	s13, s4, s8
 800c02c:	ee75 5a65 	vsub.f32	s11, s10, s11
 800c030:	ee73 1a06 	vadd.f32	s3, s6, s12
 800c034:	ee33 5aa6 	vadd.f32	s10, s7, s13
 800c038:	ee32 4a44 	vsub.f32	s8, s4, s8
 800c03c:	ee31 1a47 	vsub.f32	s2, s2, s14
 800c040:	ee31 7a85 	vadd.f32	s14, s3, s10
 800c044:	ee75 7a84 	vadd.f32	s15, s11, s8
 800c048:	ee33 3a46 	vsub.f32	s6, s6, s12
 800c04c:	ed8e 7a00 	vstr	s14, [lr]
 800c050:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800c054:	ee67 7a89 	vmul.f32	s15, s15, s18
 800c058:	ed90 2a01 	vldr	s4, [r0, #4]
 800c05c:	ed95 7a01 	vldr	s14, [r5, #4]
 800c060:	ee35 4ac4 	vsub.f32	s8, s11, s8
 800c064:	ed91 6a00 	vldr	s12, [r1]
 800c068:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800c06c:	edd7 8a00 	vldr	s17, [r7]
 800c070:	ee32 8ae7 	vsub.f32	s16, s5, s15
 800c074:	ee72 5aa7 	vadd.f32	s11, s5, s15
 800c078:	edd2 0a00 	vldr	s1, [r2]
 800c07c:	ee72 6a68 	vsub.f32	s13, s4, s17
 800c080:	edd6 7a01 	vldr	s15, [r6, #4]
 800c084:	ee77 2a46 	vsub.f32	s5, s14, s12
 800c088:	ee37 0a06 	vadd.f32	s0, s14, s12
 800c08c:	ed94 7a01 	vldr	s14, [r4, #4]
 800c090:	ee32 6a28 	vadd.f32	s12, s4, s17
 800c094:	ee72 9ae6 	vsub.f32	s19, s5, s13
 800c098:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800c09c:	ee72 2aa6 	vadd.f32	s5, s5, s13
 800c0a0:	ee77 6a20 	vadd.f32	s13, s14, s1
 800c0a4:	ee74 4ae7 	vsub.f32	s9, s9, s15
 800c0a8:	ee37 7a60 	vsub.f32	s14, s14, s1
 800c0ac:	ee24 4a09 	vmul.f32	s8, s8, s18
 800c0b0:	ee70 0a06 	vadd.f32	s1, s0, s12
 800c0b4:	ee69 7a89 	vmul.f32	s15, s19, s18
 800c0b8:	ee62 2a89 	vmul.f32	s5, s5, s18
 800c0bc:	ee30 6a46 	vsub.f32	s12, s0, s12
 800c0c0:	ee32 0a26 	vadd.f32	s0, s4, s13
 800c0c4:	ee72 6a66 	vsub.f32	s13, s4, s13
 800c0c8:	ee77 8a62 	vsub.f32	s17, s14, s5
 800c0cc:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800c0d0:	ee74 7ae7 	vsub.f32	s15, s9, s15
 800c0d4:	ee77 4a22 	vadd.f32	s9, s14, s5
 800c0d8:	ee71 2a04 	vadd.f32	s5, s2, s8
 800c0dc:	ee31 7a44 	vsub.f32	s14, s2, s8
 800c0e0:	ee30 1a60 	vsub.f32	s2, s0, s1
 800c0e4:	ee73 1a06 	vadd.f32	s3, s6, s12
 800c0e8:	ee33 6a46 	vsub.f32	s12, s6, s12
 800c0ec:	ee36 3ae3 	vsub.f32	s6, s13, s7
 800c0f0:	ee37 4ac8 	vsub.f32	s8, s15, s16
 800c0f4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800c0f8:	ee77 7a88 	vadd.f32	s15, s15, s16
 800c0fc:	ee72 3a65 	vsub.f32	s7, s4, s11
 800c100:	ee2a 8a81 	vmul.f32	s16, s21, s2
 800c104:	ee72 5a25 	vadd.f32	s11, s4, s11
 800c108:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800c10c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800c110:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800c114:	ee77 2a28 	vadd.f32	s5, s14, s17
 800c118:	ee37 7a68 	vsub.f32	s14, s14, s17
 800c11c:	ee6e 8a05 	vmul.f32	s17, s28, s10
 800c120:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800c124:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800c128:	ee70 0a20 	vadd.f32	s1, s0, s1
 800c12c:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800c130:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800c134:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800c138:	edce 0a01 	vstr	s1, [lr, #4]
 800c13c:	ee38 8a88 	vadd.f32	s16, s17, s16
 800c140:	449e      	add	lr, r3
 800c142:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800c146:	ee31 5a45 	vsub.f32	s10, s2, s10
 800c14a:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800c14e:	ed86 8a00 	vstr	s16, [r6]
 800c152:	ee39 0a80 	vadd.f32	s0, s19, s0
 800c156:	ee33 3a61 	vsub.f32	s6, s6, s3
 800c15a:	ed86 5a01 	vstr	s10, [r6, #4]
 800c15e:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800c162:	edcd 3a01 	vstr	s7, [sp, #4]
 800c166:	ed9d 5a03 	vldr	s10, [sp, #12]
 800c16a:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800c16e:	eddd 3a02 	vldr	s7, [sp, #8]
 800c172:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800c176:	ed84 0a00 	vstr	s0, [r4]
 800c17a:	ee65 4a24 	vmul.f32	s9, s10, s9
 800c17e:	ed84 3a01 	vstr	s6, [r4, #4]
 800c182:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800c186:	ee23 6a86 	vmul.f32	s12, s7, s12
 800c18a:	eddd 3a01 	vldr	s7, [sp, #4]
 800c18e:	ee25 5a25 	vmul.f32	s10, s10, s11
 800c192:	441e      	add	r6, r3
 800c194:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800c198:	441c      	add	r4, r3
 800c19a:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800c19e:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800c1a2:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800c1a6:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800c1aa:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800c1ae:	ee6d 6a26 	vmul.f32	s13, s26, s13
 800c1b2:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800c1b6:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800c1ba:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800c1be:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800c1c2:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800c1c6:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800c1ca:	ee38 8a01 	vadd.f32	s16, s16, s2
 800c1ce:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800c1d2:	ee39 5a85 	vadd.f32	s10, s19, s10
 800c1d6:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800c1da:	ed02 8a01 	vstr	s16, [r2, #-4]
 800c1de:	ee30 0a21 	vadd.f32	s0, s0, s3
 800c1e2:	ed82 6a00 	vstr	s12, [r2]
 800c1e6:	ee74 2a62 	vsub.f32	s5, s8, s5
 800c1ea:	edc5 0a00 	vstr	s1, [r5]
 800c1ee:	ee33 3a28 	vadd.f32	s6, s6, s17
 800c1f2:	edc5 3a01 	vstr	s7, [r5, #4]
 800c1f6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c1fa:	ed07 5a01 	vstr	s10, [r7, #-4]
 800c1fe:	edc7 4a00 	vstr	s9, [r7]
 800c202:	441d      	add	r5, r3
 800c204:	ed01 0a01 	vstr	s0, [r1, #-4]
 800c208:	441a      	add	r2, r3
 800c20a:	edc1 2a00 	vstr	s5, [r1]
 800c20e:	441f      	add	r7, r3
 800c210:	ed80 3a00 	vstr	s6, [r0]
 800c214:	4419      	add	r1, r3
 800c216:	ed80 7a01 	vstr	s14, [r0, #4]
 800c21a:	4418      	add	r0, r3
 800c21c:	f63f aee8 	bhi.w	800bff0 <arm_radix8_butterfly_f32+0x32c>
 800c220:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c222:	f109 0901 	add.w	r9, r9, #1
 800c226:	9301      	str	r3, [sp, #4]
 800c228:	9b04      	ldr	r3, [sp, #16]
 800c22a:	4413      	add	r3, r2
 800c22c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c22e:	9304      	str	r3, [sp, #16]
 800c230:	9b06      	ldr	r3, [sp, #24]
 800c232:	4413      	add	r3, r2
 800c234:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c236:	9306      	str	r3, [sp, #24]
 800c238:	9b05      	ldr	r3, [sp, #20]
 800c23a:	4413      	add	r3, r2
 800c23c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c23e:	9305      	str	r3, [sp, #20]
 800c240:	9b07      	ldr	r3, [sp, #28]
 800c242:	4413      	add	r3, r2
 800c244:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c246:	9307      	str	r3, [sp, #28]
 800c248:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c24a:	4413      	add	r3, r2
 800c24c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800c24e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c252:	4413      	add	r3, r2
 800c254:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800c256:	9309      	str	r3, [sp, #36]	@ 0x24
 800c258:	9b08      	ldr	r3, [sp, #32]
 800c25a:	4413      	add	r3, r2
 800c25c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c25e:	9308      	str	r3, [sp, #32]
 800c260:	3208      	adds	r2, #8
 800c262:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c264:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c266:	4599      	cmp	r9, r3
 800c268:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c26a:	f47f ae72 	bne.w	800bf52 <arm_radix8_butterfly_f32+0x28e>
 800c26e:	f8bd e048 	ldrh.w	lr, [sp, #72]	@ 0x48
 800c272:	46c8      	mov	r8, r9
 800c274:	f8dd c074 	ldr.w	ip, [sp, #116]	@ 0x74
 800c278:	e533      	b.n	800bce2 <arm_radix8_butterfly_f32+0x1e>
 800c27a:	b01f      	add	sp, #124	@ 0x7c
 800c27c:	ecbd 8b10 	vpop	{d8-d15}
 800c280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c284 <std>:
 800c284:	2300      	movs	r3, #0
 800c286:	b510      	push	{r4, lr}
 800c288:	4604      	mov	r4, r0
 800c28a:	e9c0 3300 	strd	r3, r3, [r0]
 800c28e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c292:	6083      	str	r3, [r0, #8]
 800c294:	8181      	strh	r1, [r0, #12]
 800c296:	6643      	str	r3, [r0, #100]	@ 0x64
 800c298:	81c2      	strh	r2, [r0, #14]
 800c29a:	6183      	str	r3, [r0, #24]
 800c29c:	4619      	mov	r1, r3
 800c29e:	2208      	movs	r2, #8
 800c2a0:	305c      	adds	r0, #92	@ 0x5c
 800c2a2:	f000 f8c3 	bl	800c42c <memset>
 800c2a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c2dc <std+0x58>)
 800c2a8:	6263      	str	r3, [r4, #36]	@ 0x24
 800c2aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c2e0 <std+0x5c>)
 800c2ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c2ae:	4b0d      	ldr	r3, [pc, #52]	@ (800c2e4 <std+0x60>)
 800c2b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c2b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c2e8 <std+0x64>)
 800c2b4:	6323      	str	r3, [r4, #48]	@ 0x30
 800c2b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c2ec <std+0x68>)
 800c2b8:	6224      	str	r4, [r4, #32]
 800c2ba:	429c      	cmp	r4, r3
 800c2bc:	d006      	beq.n	800c2cc <std+0x48>
 800c2be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c2c2:	4294      	cmp	r4, r2
 800c2c4:	d002      	beq.n	800c2cc <std+0x48>
 800c2c6:	33d0      	adds	r3, #208	@ 0xd0
 800c2c8:	429c      	cmp	r4, r3
 800c2ca:	d105      	bne.n	800c2d8 <std+0x54>
 800c2cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c2d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2d4:	f000 b8dc 	b.w	800c490 <__retarget_lock_init_recursive>
 800c2d8:	bd10      	pop	{r4, pc}
 800c2da:	bf00      	nop
 800c2dc:	0800cce9 	.word	0x0800cce9
 800c2e0:	0800cd0b 	.word	0x0800cd0b
 800c2e4:	0800cd43 	.word	0x0800cd43
 800c2e8:	0800cd67 	.word	0x0800cd67
 800c2ec:	24004aa0 	.word	0x24004aa0

0800c2f0 <stdio_exit_handler>:
 800c2f0:	4a02      	ldr	r2, [pc, #8]	@ (800c2fc <stdio_exit_handler+0xc>)
 800c2f2:	4903      	ldr	r1, [pc, #12]	@ (800c300 <stdio_exit_handler+0x10>)
 800c2f4:	4803      	ldr	r0, [pc, #12]	@ (800c304 <stdio_exit_handler+0x14>)
 800c2f6:	f000 b869 	b.w	800c3cc <_fwalk_sglue>
 800c2fa:	bf00      	nop
 800c2fc:	2400002c 	.word	0x2400002c
 800c300:	0800cc81 	.word	0x0800cc81
 800c304:	2400003c 	.word	0x2400003c

0800c308 <cleanup_stdio>:
 800c308:	6841      	ldr	r1, [r0, #4]
 800c30a:	4b0c      	ldr	r3, [pc, #48]	@ (800c33c <cleanup_stdio+0x34>)
 800c30c:	4299      	cmp	r1, r3
 800c30e:	b510      	push	{r4, lr}
 800c310:	4604      	mov	r4, r0
 800c312:	d001      	beq.n	800c318 <cleanup_stdio+0x10>
 800c314:	f000 fcb4 	bl	800cc80 <_fflush_r>
 800c318:	68a1      	ldr	r1, [r4, #8]
 800c31a:	4b09      	ldr	r3, [pc, #36]	@ (800c340 <cleanup_stdio+0x38>)
 800c31c:	4299      	cmp	r1, r3
 800c31e:	d002      	beq.n	800c326 <cleanup_stdio+0x1e>
 800c320:	4620      	mov	r0, r4
 800c322:	f000 fcad 	bl	800cc80 <_fflush_r>
 800c326:	68e1      	ldr	r1, [r4, #12]
 800c328:	4b06      	ldr	r3, [pc, #24]	@ (800c344 <cleanup_stdio+0x3c>)
 800c32a:	4299      	cmp	r1, r3
 800c32c:	d004      	beq.n	800c338 <cleanup_stdio+0x30>
 800c32e:	4620      	mov	r0, r4
 800c330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c334:	f000 bca4 	b.w	800cc80 <_fflush_r>
 800c338:	bd10      	pop	{r4, pc}
 800c33a:	bf00      	nop
 800c33c:	24004aa0 	.word	0x24004aa0
 800c340:	24004b08 	.word	0x24004b08
 800c344:	24004b70 	.word	0x24004b70

0800c348 <global_stdio_init.part.0>:
 800c348:	b510      	push	{r4, lr}
 800c34a:	4b0b      	ldr	r3, [pc, #44]	@ (800c378 <global_stdio_init.part.0+0x30>)
 800c34c:	4c0b      	ldr	r4, [pc, #44]	@ (800c37c <global_stdio_init.part.0+0x34>)
 800c34e:	4a0c      	ldr	r2, [pc, #48]	@ (800c380 <global_stdio_init.part.0+0x38>)
 800c350:	601a      	str	r2, [r3, #0]
 800c352:	4620      	mov	r0, r4
 800c354:	2200      	movs	r2, #0
 800c356:	2104      	movs	r1, #4
 800c358:	f7ff ff94 	bl	800c284 <std>
 800c35c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c360:	2201      	movs	r2, #1
 800c362:	2109      	movs	r1, #9
 800c364:	f7ff ff8e 	bl	800c284 <std>
 800c368:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c36c:	2202      	movs	r2, #2
 800c36e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c372:	2112      	movs	r1, #18
 800c374:	f7ff bf86 	b.w	800c284 <std>
 800c378:	24004bd8 	.word	0x24004bd8
 800c37c:	24004aa0 	.word	0x24004aa0
 800c380:	0800c2f1 	.word	0x0800c2f1

0800c384 <__sfp_lock_acquire>:
 800c384:	4801      	ldr	r0, [pc, #4]	@ (800c38c <__sfp_lock_acquire+0x8>)
 800c386:	f000 b884 	b.w	800c492 <__retarget_lock_acquire_recursive>
 800c38a:	bf00      	nop
 800c38c:	24004bdd 	.word	0x24004bdd

0800c390 <__sfp_lock_release>:
 800c390:	4801      	ldr	r0, [pc, #4]	@ (800c398 <__sfp_lock_release+0x8>)
 800c392:	f000 b87f 	b.w	800c494 <__retarget_lock_release_recursive>
 800c396:	bf00      	nop
 800c398:	24004bdd 	.word	0x24004bdd

0800c39c <__sinit>:
 800c39c:	b510      	push	{r4, lr}
 800c39e:	4604      	mov	r4, r0
 800c3a0:	f7ff fff0 	bl	800c384 <__sfp_lock_acquire>
 800c3a4:	6a23      	ldr	r3, [r4, #32]
 800c3a6:	b11b      	cbz	r3, 800c3b0 <__sinit+0x14>
 800c3a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3ac:	f7ff bff0 	b.w	800c390 <__sfp_lock_release>
 800c3b0:	4b04      	ldr	r3, [pc, #16]	@ (800c3c4 <__sinit+0x28>)
 800c3b2:	6223      	str	r3, [r4, #32]
 800c3b4:	4b04      	ldr	r3, [pc, #16]	@ (800c3c8 <__sinit+0x2c>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d1f5      	bne.n	800c3a8 <__sinit+0xc>
 800c3bc:	f7ff ffc4 	bl	800c348 <global_stdio_init.part.0>
 800c3c0:	e7f2      	b.n	800c3a8 <__sinit+0xc>
 800c3c2:	bf00      	nop
 800c3c4:	0800c309 	.word	0x0800c309
 800c3c8:	24004bd8 	.word	0x24004bd8

0800c3cc <_fwalk_sglue>:
 800c3cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3d0:	4607      	mov	r7, r0
 800c3d2:	4688      	mov	r8, r1
 800c3d4:	4614      	mov	r4, r2
 800c3d6:	2600      	movs	r6, #0
 800c3d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c3dc:	f1b9 0901 	subs.w	r9, r9, #1
 800c3e0:	d505      	bpl.n	800c3ee <_fwalk_sglue+0x22>
 800c3e2:	6824      	ldr	r4, [r4, #0]
 800c3e4:	2c00      	cmp	r4, #0
 800c3e6:	d1f7      	bne.n	800c3d8 <_fwalk_sglue+0xc>
 800c3e8:	4630      	mov	r0, r6
 800c3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3ee:	89ab      	ldrh	r3, [r5, #12]
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	d907      	bls.n	800c404 <_fwalk_sglue+0x38>
 800c3f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	d003      	beq.n	800c404 <_fwalk_sglue+0x38>
 800c3fc:	4629      	mov	r1, r5
 800c3fe:	4638      	mov	r0, r7
 800c400:	47c0      	blx	r8
 800c402:	4306      	orrs	r6, r0
 800c404:	3568      	adds	r5, #104	@ 0x68
 800c406:	e7e9      	b.n	800c3dc <_fwalk_sglue+0x10>

0800c408 <iprintf>:
 800c408:	b40f      	push	{r0, r1, r2, r3}
 800c40a:	b507      	push	{r0, r1, r2, lr}
 800c40c:	4906      	ldr	r1, [pc, #24]	@ (800c428 <iprintf+0x20>)
 800c40e:	ab04      	add	r3, sp, #16
 800c410:	6808      	ldr	r0, [r1, #0]
 800c412:	f853 2b04 	ldr.w	r2, [r3], #4
 800c416:	6881      	ldr	r1, [r0, #8]
 800c418:	9301      	str	r3, [sp, #4]
 800c41a:	f000 f865 	bl	800c4e8 <_vfiprintf_r>
 800c41e:	b003      	add	sp, #12
 800c420:	f85d eb04 	ldr.w	lr, [sp], #4
 800c424:	b004      	add	sp, #16
 800c426:	4770      	bx	lr
 800c428:	24000038 	.word	0x24000038

0800c42c <memset>:
 800c42c:	4402      	add	r2, r0
 800c42e:	4603      	mov	r3, r0
 800c430:	4293      	cmp	r3, r2
 800c432:	d100      	bne.n	800c436 <memset+0xa>
 800c434:	4770      	bx	lr
 800c436:	f803 1b01 	strb.w	r1, [r3], #1
 800c43a:	e7f9      	b.n	800c430 <memset+0x4>

0800c43c <__errno>:
 800c43c:	4b01      	ldr	r3, [pc, #4]	@ (800c444 <__errno+0x8>)
 800c43e:	6818      	ldr	r0, [r3, #0]
 800c440:	4770      	bx	lr
 800c442:	bf00      	nop
 800c444:	24000038 	.word	0x24000038

0800c448 <__libc_init_array>:
 800c448:	b570      	push	{r4, r5, r6, lr}
 800c44a:	4d0d      	ldr	r5, [pc, #52]	@ (800c480 <__libc_init_array+0x38>)
 800c44c:	4c0d      	ldr	r4, [pc, #52]	@ (800c484 <__libc_init_array+0x3c>)
 800c44e:	1b64      	subs	r4, r4, r5
 800c450:	10a4      	asrs	r4, r4, #2
 800c452:	2600      	movs	r6, #0
 800c454:	42a6      	cmp	r6, r4
 800c456:	d109      	bne.n	800c46c <__libc_init_array+0x24>
 800c458:	4d0b      	ldr	r5, [pc, #44]	@ (800c488 <__libc_init_array+0x40>)
 800c45a:	4c0c      	ldr	r4, [pc, #48]	@ (800c48c <__libc_init_array+0x44>)
 800c45c:	f000 fe62 	bl	800d124 <_init>
 800c460:	1b64      	subs	r4, r4, r5
 800c462:	10a4      	asrs	r4, r4, #2
 800c464:	2600      	movs	r6, #0
 800c466:	42a6      	cmp	r6, r4
 800c468:	d105      	bne.n	800c476 <__libc_init_array+0x2e>
 800c46a:	bd70      	pop	{r4, r5, r6, pc}
 800c46c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c470:	4798      	blx	r3
 800c472:	3601      	adds	r6, #1
 800c474:	e7ee      	b.n	800c454 <__libc_init_array+0xc>
 800c476:	f855 3b04 	ldr.w	r3, [r5], #4
 800c47a:	4798      	blx	r3
 800c47c:	3601      	adds	r6, #1
 800c47e:	e7f2      	b.n	800c466 <__libc_init_array+0x1e>
 800c480:	0802061c 	.word	0x0802061c
 800c484:	0802061c 	.word	0x0802061c
 800c488:	0802061c 	.word	0x0802061c
 800c48c:	08020620 	.word	0x08020620

0800c490 <__retarget_lock_init_recursive>:
 800c490:	4770      	bx	lr

0800c492 <__retarget_lock_acquire_recursive>:
 800c492:	4770      	bx	lr

0800c494 <__retarget_lock_release_recursive>:
 800c494:	4770      	bx	lr

0800c496 <__sfputc_r>:
 800c496:	6893      	ldr	r3, [r2, #8]
 800c498:	3b01      	subs	r3, #1
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	b410      	push	{r4}
 800c49e:	6093      	str	r3, [r2, #8]
 800c4a0:	da08      	bge.n	800c4b4 <__sfputc_r+0x1e>
 800c4a2:	6994      	ldr	r4, [r2, #24]
 800c4a4:	42a3      	cmp	r3, r4
 800c4a6:	db01      	blt.n	800c4ac <__sfputc_r+0x16>
 800c4a8:	290a      	cmp	r1, #10
 800c4aa:	d103      	bne.n	800c4b4 <__sfputc_r+0x1e>
 800c4ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4b0:	f000 bc5d 	b.w	800cd6e <__swbuf_r>
 800c4b4:	6813      	ldr	r3, [r2, #0]
 800c4b6:	1c58      	adds	r0, r3, #1
 800c4b8:	6010      	str	r0, [r2, #0]
 800c4ba:	7019      	strb	r1, [r3, #0]
 800c4bc:	4608      	mov	r0, r1
 800c4be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4c2:	4770      	bx	lr

0800c4c4 <__sfputs_r>:
 800c4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c6:	4606      	mov	r6, r0
 800c4c8:	460f      	mov	r7, r1
 800c4ca:	4614      	mov	r4, r2
 800c4cc:	18d5      	adds	r5, r2, r3
 800c4ce:	42ac      	cmp	r4, r5
 800c4d0:	d101      	bne.n	800c4d6 <__sfputs_r+0x12>
 800c4d2:	2000      	movs	r0, #0
 800c4d4:	e007      	b.n	800c4e6 <__sfputs_r+0x22>
 800c4d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4da:	463a      	mov	r2, r7
 800c4dc:	4630      	mov	r0, r6
 800c4de:	f7ff ffda 	bl	800c496 <__sfputc_r>
 800c4e2:	1c43      	adds	r3, r0, #1
 800c4e4:	d1f3      	bne.n	800c4ce <__sfputs_r+0xa>
 800c4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c4e8 <_vfiprintf_r>:
 800c4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ec:	460d      	mov	r5, r1
 800c4ee:	b09d      	sub	sp, #116	@ 0x74
 800c4f0:	4614      	mov	r4, r2
 800c4f2:	4698      	mov	r8, r3
 800c4f4:	4606      	mov	r6, r0
 800c4f6:	b118      	cbz	r0, 800c500 <_vfiprintf_r+0x18>
 800c4f8:	6a03      	ldr	r3, [r0, #32]
 800c4fa:	b90b      	cbnz	r3, 800c500 <_vfiprintf_r+0x18>
 800c4fc:	f7ff ff4e 	bl	800c39c <__sinit>
 800c500:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c502:	07d9      	lsls	r1, r3, #31
 800c504:	d405      	bmi.n	800c512 <_vfiprintf_r+0x2a>
 800c506:	89ab      	ldrh	r3, [r5, #12]
 800c508:	059a      	lsls	r2, r3, #22
 800c50a:	d402      	bmi.n	800c512 <_vfiprintf_r+0x2a>
 800c50c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c50e:	f7ff ffc0 	bl	800c492 <__retarget_lock_acquire_recursive>
 800c512:	89ab      	ldrh	r3, [r5, #12]
 800c514:	071b      	lsls	r3, r3, #28
 800c516:	d501      	bpl.n	800c51c <_vfiprintf_r+0x34>
 800c518:	692b      	ldr	r3, [r5, #16]
 800c51a:	b99b      	cbnz	r3, 800c544 <_vfiprintf_r+0x5c>
 800c51c:	4629      	mov	r1, r5
 800c51e:	4630      	mov	r0, r6
 800c520:	f000 fc64 	bl	800cdec <__swsetup_r>
 800c524:	b170      	cbz	r0, 800c544 <_vfiprintf_r+0x5c>
 800c526:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c528:	07dc      	lsls	r4, r3, #31
 800c52a:	d504      	bpl.n	800c536 <_vfiprintf_r+0x4e>
 800c52c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c530:	b01d      	add	sp, #116	@ 0x74
 800c532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c536:	89ab      	ldrh	r3, [r5, #12]
 800c538:	0598      	lsls	r0, r3, #22
 800c53a:	d4f7      	bmi.n	800c52c <_vfiprintf_r+0x44>
 800c53c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c53e:	f7ff ffa9 	bl	800c494 <__retarget_lock_release_recursive>
 800c542:	e7f3      	b.n	800c52c <_vfiprintf_r+0x44>
 800c544:	2300      	movs	r3, #0
 800c546:	9309      	str	r3, [sp, #36]	@ 0x24
 800c548:	2320      	movs	r3, #32
 800c54a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c54e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c552:	2330      	movs	r3, #48	@ 0x30
 800c554:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c704 <_vfiprintf_r+0x21c>
 800c558:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c55c:	f04f 0901 	mov.w	r9, #1
 800c560:	4623      	mov	r3, r4
 800c562:	469a      	mov	sl, r3
 800c564:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c568:	b10a      	cbz	r2, 800c56e <_vfiprintf_r+0x86>
 800c56a:	2a25      	cmp	r2, #37	@ 0x25
 800c56c:	d1f9      	bne.n	800c562 <_vfiprintf_r+0x7a>
 800c56e:	ebba 0b04 	subs.w	fp, sl, r4
 800c572:	d00b      	beq.n	800c58c <_vfiprintf_r+0xa4>
 800c574:	465b      	mov	r3, fp
 800c576:	4622      	mov	r2, r4
 800c578:	4629      	mov	r1, r5
 800c57a:	4630      	mov	r0, r6
 800c57c:	f7ff ffa2 	bl	800c4c4 <__sfputs_r>
 800c580:	3001      	adds	r0, #1
 800c582:	f000 80a7 	beq.w	800c6d4 <_vfiprintf_r+0x1ec>
 800c586:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c588:	445a      	add	r2, fp
 800c58a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c58c:	f89a 3000 	ldrb.w	r3, [sl]
 800c590:	2b00      	cmp	r3, #0
 800c592:	f000 809f 	beq.w	800c6d4 <_vfiprintf_r+0x1ec>
 800c596:	2300      	movs	r3, #0
 800c598:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c59c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5a0:	f10a 0a01 	add.w	sl, sl, #1
 800c5a4:	9304      	str	r3, [sp, #16]
 800c5a6:	9307      	str	r3, [sp, #28]
 800c5a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c5ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800c5ae:	4654      	mov	r4, sl
 800c5b0:	2205      	movs	r2, #5
 800c5b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5b6:	4853      	ldr	r0, [pc, #332]	@ (800c704 <_vfiprintf_r+0x21c>)
 800c5b8:	f7f3 fef2 	bl	80003a0 <memchr>
 800c5bc:	9a04      	ldr	r2, [sp, #16]
 800c5be:	b9d8      	cbnz	r0, 800c5f8 <_vfiprintf_r+0x110>
 800c5c0:	06d1      	lsls	r1, r2, #27
 800c5c2:	bf44      	itt	mi
 800c5c4:	2320      	movmi	r3, #32
 800c5c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5ca:	0713      	lsls	r3, r2, #28
 800c5cc:	bf44      	itt	mi
 800c5ce:	232b      	movmi	r3, #43	@ 0x2b
 800c5d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c5d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5da:	d015      	beq.n	800c608 <_vfiprintf_r+0x120>
 800c5dc:	9a07      	ldr	r2, [sp, #28]
 800c5de:	4654      	mov	r4, sl
 800c5e0:	2000      	movs	r0, #0
 800c5e2:	f04f 0c0a 	mov.w	ip, #10
 800c5e6:	4621      	mov	r1, r4
 800c5e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5ec:	3b30      	subs	r3, #48	@ 0x30
 800c5ee:	2b09      	cmp	r3, #9
 800c5f0:	d94b      	bls.n	800c68a <_vfiprintf_r+0x1a2>
 800c5f2:	b1b0      	cbz	r0, 800c622 <_vfiprintf_r+0x13a>
 800c5f4:	9207      	str	r2, [sp, #28]
 800c5f6:	e014      	b.n	800c622 <_vfiprintf_r+0x13a>
 800c5f8:	eba0 0308 	sub.w	r3, r0, r8
 800c5fc:	fa09 f303 	lsl.w	r3, r9, r3
 800c600:	4313      	orrs	r3, r2
 800c602:	9304      	str	r3, [sp, #16]
 800c604:	46a2      	mov	sl, r4
 800c606:	e7d2      	b.n	800c5ae <_vfiprintf_r+0xc6>
 800c608:	9b03      	ldr	r3, [sp, #12]
 800c60a:	1d19      	adds	r1, r3, #4
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	9103      	str	r1, [sp, #12]
 800c610:	2b00      	cmp	r3, #0
 800c612:	bfbb      	ittet	lt
 800c614:	425b      	neglt	r3, r3
 800c616:	f042 0202 	orrlt.w	r2, r2, #2
 800c61a:	9307      	strge	r3, [sp, #28]
 800c61c:	9307      	strlt	r3, [sp, #28]
 800c61e:	bfb8      	it	lt
 800c620:	9204      	strlt	r2, [sp, #16]
 800c622:	7823      	ldrb	r3, [r4, #0]
 800c624:	2b2e      	cmp	r3, #46	@ 0x2e
 800c626:	d10a      	bne.n	800c63e <_vfiprintf_r+0x156>
 800c628:	7863      	ldrb	r3, [r4, #1]
 800c62a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c62c:	d132      	bne.n	800c694 <_vfiprintf_r+0x1ac>
 800c62e:	9b03      	ldr	r3, [sp, #12]
 800c630:	1d1a      	adds	r2, r3, #4
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	9203      	str	r2, [sp, #12]
 800c636:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c63a:	3402      	adds	r4, #2
 800c63c:	9305      	str	r3, [sp, #20]
 800c63e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c714 <_vfiprintf_r+0x22c>
 800c642:	7821      	ldrb	r1, [r4, #0]
 800c644:	2203      	movs	r2, #3
 800c646:	4650      	mov	r0, sl
 800c648:	f7f3 feaa 	bl	80003a0 <memchr>
 800c64c:	b138      	cbz	r0, 800c65e <_vfiprintf_r+0x176>
 800c64e:	9b04      	ldr	r3, [sp, #16]
 800c650:	eba0 000a 	sub.w	r0, r0, sl
 800c654:	2240      	movs	r2, #64	@ 0x40
 800c656:	4082      	lsls	r2, r0
 800c658:	4313      	orrs	r3, r2
 800c65a:	3401      	adds	r4, #1
 800c65c:	9304      	str	r3, [sp, #16]
 800c65e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c662:	4829      	ldr	r0, [pc, #164]	@ (800c708 <_vfiprintf_r+0x220>)
 800c664:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c668:	2206      	movs	r2, #6
 800c66a:	f7f3 fe99 	bl	80003a0 <memchr>
 800c66e:	2800      	cmp	r0, #0
 800c670:	d03f      	beq.n	800c6f2 <_vfiprintf_r+0x20a>
 800c672:	4b26      	ldr	r3, [pc, #152]	@ (800c70c <_vfiprintf_r+0x224>)
 800c674:	bb1b      	cbnz	r3, 800c6be <_vfiprintf_r+0x1d6>
 800c676:	9b03      	ldr	r3, [sp, #12]
 800c678:	3307      	adds	r3, #7
 800c67a:	f023 0307 	bic.w	r3, r3, #7
 800c67e:	3308      	adds	r3, #8
 800c680:	9303      	str	r3, [sp, #12]
 800c682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c684:	443b      	add	r3, r7
 800c686:	9309      	str	r3, [sp, #36]	@ 0x24
 800c688:	e76a      	b.n	800c560 <_vfiprintf_r+0x78>
 800c68a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c68e:	460c      	mov	r4, r1
 800c690:	2001      	movs	r0, #1
 800c692:	e7a8      	b.n	800c5e6 <_vfiprintf_r+0xfe>
 800c694:	2300      	movs	r3, #0
 800c696:	3401      	adds	r4, #1
 800c698:	9305      	str	r3, [sp, #20]
 800c69a:	4619      	mov	r1, r3
 800c69c:	f04f 0c0a 	mov.w	ip, #10
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6a6:	3a30      	subs	r2, #48	@ 0x30
 800c6a8:	2a09      	cmp	r2, #9
 800c6aa:	d903      	bls.n	800c6b4 <_vfiprintf_r+0x1cc>
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d0c6      	beq.n	800c63e <_vfiprintf_r+0x156>
 800c6b0:	9105      	str	r1, [sp, #20]
 800c6b2:	e7c4      	b.n	800c63e <_vfiprintf_r+0x156>
 800c6b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6b8:	4604      	mov	r4, r0
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	e7f0      	b.n	800c6a0 <_vfiprintf_r+0x1b8>
 800c6be:	ab03      	add	r3, sp, #12
 800c6c0:	9300      	str	r3, [sp, #0]
 800c6c2:	462a      	mov	r2, r5
 800c6c4:	4b12      	ldr	r3, [pc, #72]	@ (800c710 <_vfiprintf_r+0x228>)
 800c6c6:	a904      	add	r1, sp, #16
 800c6c8:	4630      	mov	r0, r6
 800c6ca:	f3af 8000 	nop.w
 800c6ce:	4607      	mov	r7, r0
 800c6d0:	1c78      	adds	r0, r7, #1
 800c6d2:	d1d6      	bne.n	800c682 <_vfiprintf_r+0x19a>
 800c6d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6d6:	07d9      	lsls	r1, r3, #31
 800c6d8:	d405      	bmi.n	800c6e6 <_vfiprintf_r+0x1fe>
 800c6da:	89ab      	ldrh	r3, [r5, #12]
 800c6dc:	059a      	lsls	r2, r3, #22
 800c6de:	d402      	bmi.n	800c6e6 <_vfiprintf_r+0x1fe>
 800c6e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6e2:	f7ff fed7 	bl	800c494 <__retarget_lock_release_recursive>
 800c6e6:	89ab      	ldrh	r3, [r5, #12]
 800c6e8:	065b      	lsls	r3, r3, #25
 800c6ea:	f53f af1f 	bmi.w	800c52c <_vfiprintf_r+0x44>
 800c6ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c6f0:	e71e      	b.n	800c530 <_vfiprintf_r+0x48>
 800c6f2:	ab03      	add	r3, sp, #12
 800c6f4:	9300      	str	r3, [sp, #0]
 800c6f6:	462a      	mov	r2, r5
 800c6f8:	4b05      	ldr	r3, [pc, #20]	@ (800c710 <_vfiprintf_r+0x228>)
 800c6fa:	a904      	add	r1, sp, #16
 800c6fc:	4630      	mov	r0, r6
 800c6fe:	f000 f91b 	bl	800c938 <_printf_i>
 800c702:	e7e4      	b.n	800c6ce <_vfiprintf_r+0x1e6>
 800c704:	080205e0 	.word	0x080205e0
 800c708:	080205ea 	.word	0x080205ea
 800c70c:	00000000 	.word	0x00000000
 800c710:	0800c4c5 	.word	0x0800c4c5
 800c714:	080205e6 	.word	0x080205e6

0800c718 <sbrk_aligned>:
 800c718:	b570      	push	{r4, r5, r6, lr}
 800c71a:	4e0f      	ldr	r6, [pc, #60]	@ (800c758 <sbrk_aligned+0x40>)
 800c71c:	460c      	mov	r4, r1
 800c71e:	6831      	ldr	r1, [r6, #0]
 800c720:	4605      	mov	r5, r0
 800c722:	b911      	cbnz	r1, 800c72a <sbrk_aligned+0x12>
 800c724:	f000 fc70 	bl	800d008 <_sbrk_r>
 800c728:	6030      	str	r0, [r6, #0]
 800c72a:	4621      	mov	r1, r4
 800c72c:	4628      	mov	r0, r5
 800c72e:	f000 fc6b 	bl	800d008 <_sbrk_r>
 800c732:	1c43      	adds	r3, r0, #1
 800c734:	d103      	bne.n	800c73e <sbrk_aligned+0x26>
 800c736:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c73a:	4620      	mov	r0, r4
 800c73c:	bd70      	pop	{r4, r5, r6, pc}
 800c73e:	1cc4      	adds	r4, r0, #3
 800c740:	f024 0403 	bic.w	r4, r4, #3
 800c744:	42a0      	cmp	r0, r4
 800c746:	d0f8      	beq.n	800c73a <sbrk_aligned+0x22>
 800c748:	1a21      	subs	r1, r4, r0
 800c74a:	4628      	mov	r0, r5
 800c74c:	f000 fc5c 	bl	800d008 <_sbrk_r>
 800c750:	3001      	adds	r0, #1
 800c752:	d1f2      	bne.n	800c73a <sbrk_aligned+0x22>
 800c754:	e7ef      	b.n	800c736 <sbrk_aligned+0x1e>
 800c756:	bf00      	nop
 800c758:	24004be0 	.word	0x24004be0

0800c75c <_malloc_r>:
 800c75c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c760:	1ccd      	adds	r5, r1, #3
 800c762:	f025 0503 	bic.w	r5, r5, #3
 800c766:	3508      	adds	r5, #8
 800c768:	2d0c      	cmp	r5, #12
 800c76a:	bf38      	it	cc
 800c76c:	250c      	movcc	r5, #12
 800c76e:	2d00      	cmp	r5, #0
 800c770:	4606      	mov	r6, r0
 800c772:	db01      	blt.n	800c778 <_malloc_r+0x1c>
 800c774:	42a9      	cmp	r1, r5
 800c776:	d904      	bls.n	800c782 <_malloc_r+0x26>
 800c778:	230c      	movs	r3, #12
 800c77a:	6033      	str	r3, [r6, #0]
 800c77c:	2000      	movs	r0, #0
 800c77e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c782:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c858 <_malloc_r+0xfc>
 800c786:	f000 faa3 	bl	800ccd0 <__malloc_lock>
 800c78a:	f8d8 3000 	ldr.w	r3, [r8]
 800c78e:	461c      	mov	r4, r3
 800c790:	bb44      	cbnz	r4, 800c7e4 <_malloc_r+0x88>
 800c792:	4629      	mov	r1, r5
 800c794:	4630      	mov	r0, r6
 800c796:	f7ff ffbf 	bl	800c718 <sbrk_aligned>
 800c79a:	1c43      	adds	r3, r0, #1
 800c79c:	4604      	mov	r4, r0
 800c79e:	d158      	bne.n	800c852 <_malloc_r+0xf6>
 800c7a0:	f8d8 4000 	ldr.w	r4, [r8]
 800c7a4:	4627      	mov	r7, r4
 800c7a6:	2f00      	cmp	r7, #0
 800c7a8:	d143      	bne.n	800c832 <_malloc_r+0xd6>
 800c7aa:	2c00      	cmp	r4, #0
 800c7ac:	d04b      	beq.n	800c846 <_malloc_r+0xea>
 800c7ae:	6823      	ldr	r3, [r4, #0]
 800c7b0:	4639      	mov	r1, r7
 800c7b2:	4630      	mov	r0, r6
 800c7b4:	eb04 0903 	add.w	r9, r4, r3
 800c7b8:	f000 fc26 	bl	800d008 <_sbrk_r>
 800c7bc:	4581      	cmp	r9, r0
 800c7be:	d142      	bne.n	800c846 <_malloc_r+0xea>
 800c7c0:	6821      	ldr	r1, [r4, #0]
 800c7c2:	1a6d      	subs	r5, r5, r1
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	4630      	mov	r0, r6
 800c7c8:	f7ff ffa6 	bl	800c718 <sbrk_aligned>
 800c7cc:	3001      	adds	r0, #1
 800c7ce:	d03a      	beq.n	800c846 <_malloc_r+0xea>
 800c7d0:	6823      	ldr	r3, [r4, #0]
 800c7d2:	442b      	add	r3, r5
 800c7d4:	6023      	str	r3, [r4, #0]
 800c7d6:	f8d8 3000 	ldr.w	r3, [r8]
 800c7da:	685a      	ldr	r2, [r3, #4]
 800c7dc:	bb62      	cbnz	r2, 800c838 <_malloc_r+0xdc>
 800c7de:	f8c8 7000 	str.w	r7, [r8]
 800c7e2:	e00f      	b.n	800c804 <_malloc_r+0xa8>
 800c7e4:	6822      	ldr	r2, [r4, #0]
 800c7e6:	1b52      	subs	r2, r2, r5
 800c7e8:	d420      	bmi.n	800c82c <_malloc_r+0xd0>
 800c7ea:	2a0b      	cmp	r2, #11
 800c7ec:	d917      	bls.n	800c81e <_malloc_r+0xc2>
 800c7ee:	1961      	adds	r1, r4, r5
 800c7f0:	42a3      	cmp	r3, r4
 800c7f2:	6025      	str	r5, [r4, #0]
 800c7f4:	bf18      	it	ne
 800c7f6:	6059      	strne	r1, [r3, #4]
 800c7f8:	6863      	ldr	r3, [r4, #4]
 800c7fa:	bf08      	it	eq
 800c7fc:	f8c8 1000 	streq.w	r1, [r8]
 800c800:	5162      	str	r2, [r4, r5]
 800c802:	604b      	str	r3, [r1, #4]
 800c804:	4630      	mov	r0, r6
 800c806:	f000 fa69 	bl	800ccdc <__malloc_unlock>
 800c80a:	f104 000b 	add.w	r0, r4, #11
 800c80e:	1d23      	adds	r3, r4, #4
 800c810:	f020 0007 	bic.w	r0, r0, #7
 800c814:	1ac2      	subs	r2, r0, r3
 800c816:	bf1c      	itt	ne
 800c818:	1a1b      	subne	r3, r3, r0
 800c81a:	50a3      	strne	r3, [r4, r2]
 800c81c:	e7af      	b.n	800c77e <_malloc_r+0x22>
 800c81e:	6862      	ldr	r2, [r4, #4]
 800c820:	42a3      	cmp	r3, r4
 800c822:	bf0c      	ite	eq
 800c824:	f8c8 2000 	streq.w	r2, [r8]
 800c828:	605a      	strne	r2, [r3, #4]
 800c82a:	e7eb      	b.n	800c804 <_malloc_r+0xa8>
 800c82c:	4623      	mov	r3, r4
 800c82e:	6864      	ldr	r4, [r4, #4]
 800c830:	e7ae      	b.n	800c790 <_malloc_r+0x34>
 800c832:	463c      	mov	r4, r7
 800c834:	687f      	ldr	r7, [r7, #4]
 800c836:	e7b6      	b.n	800c7a6 <_malloc_r+0x4a>
 800c838:	461a      	mov	r2, r3
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	42a3      	cmp	r3, r4
 800c83e:	d1fb      	bne.n	800c838 <_malloc_r+0xdc>
 800c840:	2300      	movs	r3, #0
 800c842:	6053      	str	r3, [r2, #4]
 800c844:	e7de      	b.n	800c804 <_malloc_r+0xa8>
 800c846:	230c      	movs	r3, #12
 800c848:	6033      	str	r3, [r6, #0]
 800c84a:	4630      	mov	r0, r6
 800c84c:	f000 fa46 	bl	800ccdc <__malloc_unlock>
 800c850:	e794      	b.n	800c77c <_malloc_r+0x20>
 800c852:	6005      	str	r5, [r0, #0]
 800c854:	e7d6      	b.n	800c804 <_malloc_r+0xa8>
 800c856:	bf00      	nop
 800c858:	24004be4 	.word	0x24004be4

0800c85c <_printf_common>:
 800c85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c860:	4616      	mov	r6, r2
 800c862:	4698      	mov	r8, r3
 800c864:	688a      	ldr	r2, [r1, #8]
 800c866:	690b      	ldr	r3, [r1, #16]
 800c868:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c86c:	4293      	cmp	r3, r2
 800c86e:	bfb8      	it	lt
 800c870:	4613      	movlt	r3, r2
 800c872:	6033      	str	r3, [r6, #0]
 800c874:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c878:	4607      	mov	r7, r0
 800c87a:	460c      	mov	r4, r1
 800c87c:	b10a      	cbz	r2, 800c882 <_printf_common+0x26>
 800c87e:	3301      	adds	r3, #1
 800c880:	6033      	str	r3, [r6, #0]
 800c882:	6823      	ldr	r3, [r4, #0]
 800c884:	0699      	lsls	r1, r3, #26
 800c886:	bf42      	ittt	mi
 800c888:	6833      	ldrmi	r3, [r6, #0]
 800c88a:	3302      	addmi	r3, #2
 800c88c:	6033      	strmi	r3, [r6, #0]
 800c88e:	6825      	ldr	r5, [r4, #0]
 800c890:	f015 0506 	ands.w	r5, r5, #6
 800c894:	d106      	bne.n	800c8a4 <_printf_common+0x48>
 800c896:	f104 0a19 	add.w	sl, r4, #25
 800c89a:	68e3      	ldr	r3, [r4, #12]
 800c89c:	6832      	ldr	r2, [r6, #0]
 800c89e:	1a9b      	subs	r3, r3, r2
 800c8a0:	42ab      	cmp	r3, r5
 800c8a2:	dc26      	bgt.n	800c8f2 <_printf_common+0x96>
 800c8a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c8a8:	6822      	ldr	r2, [r4, #0]
 800c8aa:	3b00      	subs	r3, #0
 800c8ac:	bf18      	it	ne
 800c8ae:	2301      	movne	r3, #1
 800c8b0:	0692      	lsls	r2, r2, #26
 800c8b2:	d42b      	bmi.n	800c90c <_printf_common+0xb0>
 800c8b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c8b8:	4641      	mov	r1, r8
 800c8ba:	4638      	mov	r0, r7
 800c8bc:	47c8      	blx	r9
 800c8be:	3001      	adds	r0, #1
 800c8c0:	d01e      	beq.n	800c900 <_printf_common+0xa4>
 800c8c2:	6823      	ldr	r3, [r4, #0]
 800c8c4:	6922      	ldr	r2, [r4, #16]
 800c8c6:	f003 0306 	and.w	r3, r3, #6
 800c8ca:	2b04      	cmp	r3, #4
 800c8cc:	bf02      	ittt	eq
 800c8ce:	68e5      	ldreq	r5, [r4, #12]
 800c8d0:	6833      	ldreq	r3, [r6, #0]
 800c8d2:	1aed      	subeq	r5, r5, r3
 800c8d4:	68a3      	ldr	r3, [r4, #8]
 800c8d6:	bf0c      	ite	eq
 800c8d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8dc:	2500      	movne	r5, #0
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	bfc4      	itt	gt
 800c8e2:	1a9b      	subgt	r3, r3, r2
 800c8e4:	18ed      	addgt	r5, r5, r3
 800c8e6:	2600      	movs	r6, #0
 800c8e8:	341a      	adds	r4, #26
 800c8ea:	42b5      	cmp	r5, r6
 800c8ec:	d11a      	bne.n	800c924 <_printf_common+0xc8>
 800c8ee:	2000      	movs	r0, #0
 800c8f0:	e008      	b.n	800c904 <_printf_common+0xa8>
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	4652      	mov	r2, sl
 800c8f6:	4641      	mov	r1, r8
 800c8f8:	4638      	mov	r0, r7
 800c8fa:	47c8      	blx	r9
 800c8fc:	3001      	adds	r0, #1
 800c8fe:	d103      	bne.n	800c908 <_printf_common+0xac>
 800c900:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c908:	3501      	adds	r5, #1
 800c90a:	e7c6      	b.n	800c89a <_printf_common+0x3e>
 800c90c:	18e1      	adds	r1, r4, r3
 800c90e:	1c5a      	adds	r2, r3, #1
 800c910:	2030      	movs	r0, #48	@ 0x30
 800c912:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c916:	4422      	add	r2, r4
 800c918:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c91c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c920:	3302      	adds	r3, #2
 800c922:	e7c7      	b.n	800c8b4 <_printf_common+0x58>
 800c924:	2301      	movs	r3, #1
 800c926:	4622      	mov	r2, r4
 800c928:	4641      	mov	r1, r8
 800c92a:	4638      	mov	r0, r7
 800c92c:	47c8      	blx	r9
 800c92e:	3001      	adds	r0, #1
 800c930:	d0e6      	beq.n	800c900 <_printf_common+0xa4>
 800c932:	3601      	adds	r6, #1
 800c934:	e7d9      	b.n	800c8ea <_printf_common+0x8e>
	...

0800c938 <_printf_i>:
 800c938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c93c:	7e0f      	ldrb	r7, [r1, #24]
 800c93e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c940:	2f78      	cmp	r7, #120	@ 0x78
 800c942:	4691      	mov	r9, r2
 800c944:	4680      	mov	r8, r0
 800c946:	460c      	mov	r4, r1
 800c948:	469a      	mov	sl, r3
 800c94a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c94e:	d807      	bhi.n	800c960 <_printf_i+0x28>
 800c950:	2f62      	cmp	r7, #98	@ 0x62
 800c952:	d80a      	bhi.n	800c96a <_printf_i+0x32>
 800c954:	2f00      	cmp	r7, #0
 800c956:	f000 80d2 	beq.w	800cafe <_printf_i+0x1c6>
 800c95a:	2f58      	cmp	r7, #88	@ 0x58
 800c95c:	f000 80b9 	beq.w	800cad2 <_printf_i+0x19a>
 800c960:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c964:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c968:	e03a      	b.n	800c9e0 <_printf_i+0xa8>
 800c96a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c96e:	2b15      	cmp	r3, #21
 800c970:	d8f6      	bhi.n	800c960 <_printf_i+0x28>
 800c972:	a101      	add	r1, pc, #4	@ (adr r1, 800c978 <_printf_i+0x40>)
 800c974:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c978:	0800c9d1 	.word	0x0800c9d1
 800c97c:	0800c9e5 	.word	0x0800c9e5
 800c980:	0800c961 	.word	0x0800c961
 800c984:	0800c961 	.word	0x0800c961
 800c988:	0800c961 	.word	0x0800c961
 800c98c:	0800c961 	.word	0x0800c961
 800c990:	0800c9e5 	.word	0x0800c9e5
 800c994:	0800c961 	.word	0x0800c961
 800c998:	0800c961 	.word	0x0800c961
 800c99c:	0800c961 	.word	0x0800c961
 800c9a0:	0800c961 	.word	0x0800c961
 800c9a4:	0800cae5 	.word	0x0800cae5
 800c9a8:	0800ca0f 	.word	0x0800ca0f
 800c9ac:	0800ca9f 	.word	0x0800ca9f
 800c9b0:	0800c961 	.word	0x0800c961
 800c9b4:	0800c961 	.word	0x0800c961
 800c9b8:	0800cb07 	.word	0x0800cb07
 800c9bc:	0800c961 	.word	0x0800c961
 800c9c0:	0800ca0f 	.word	0x0800ca0f
 800c9c4:	0800c961 	.word	0x0800c961
 800c9c8:	0800c961 	.word	0x0800c961
 800c9cc:	0800caa7 	.word	0x0800caa7
 800c9d0:	6833      	ldr	r3, [r6, #0]
 800c9d2:	1d1a      	adds	r2, r3, #4
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	6032      	str	r2, [r6, #0]
 800c9d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c9dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	e09d      	b.n	800cb20 <_printf_i+0x1e8>
 800c9e4:	6833      	ldr	r3, [r6, #0]
 800c9e6:	6820      	ldr	r0, [r4, #0]
 800c9e8:	1d19      	adds	r1, r3, #4
 800c9ea:	6031      	str	r1, [r6, #0]
 800c9ec:	0606      	lsls	r6, r0, #24
 800c9ee:	d501      	bpl.n	800c9f4 <_printf_i+0xbc>
 800c9f0:	681d      	ldr	r5, [r3, #0]
 800c9f2:	e003      	b.n	800c9fc <_printf_i+0xc4>
 800c9f4:	0645      	lsls	r5, r0, #25
 800c9f6:	d5fb      	bpl.n	800c9f0 <_printf_i+0xb8>
 800c9f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c9fc:	2d00      	cmp	r5, #0
 800c9fe:	da03      	bge.n	800ca08 <_printf_i+0xd0>
 800ca00:	232d      	movs	r3, #45	@ 0x2d
 800ca02:	426d      	negs	r5, r5
 800ca04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca08:	4859      	ldr	r0, [pc, #356]	@ (800cb70 <_printf_i+0x238>)
 800ca0a:	230a      	movs	r3, #10
 800ca0c:	e011      	b.n	800ca32 <_printf_i+0xfa>
 800ca0e:	6821      	ldr	r1, [r4, #0]
 800ca10:	6833      	ldr	r3, [r6, #0]
 800ca12:	0608      	lsls	r0, r1, #24
 800ca14:	f853 5b04 	ldr.w	r5, [r3], #4
 800ca18:	d402      	bmi.n	800ca20 <_printf_i+0xe8>
 800ca1a:	0649      	lsls	r1, r1, #25
 800ca1c:	bf48      	it	mi
 800ca1e:	b2ad      	uxthmi	r5, r5
 800ca20:	2f6f      	cmp	r7, #111	@ 0x6f
 800ca22:	4853      	ldr	r0, [pc, #332]	@ (800cb70 <_printf_i+0x238>)
 800ca24:	6033      	str	r3, [r6, #0]
 800ca26:	bf14      	ite	ne
 800ca28:	230a      	movne	r3, #10
 800ca2a:	2308      	moveq	r3, #8
 800ca2c:	2100      	movs	r1, #0
 800ca2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ca32:	6866      	ldr	r6, [r4, #4]
 800ca34:	60a6      	str	r6, [r4, #8]
 800ca36:	2e00      	cmp	r6, #0
 800ca38:	bfa2      	ittt	ge
 800ca3a:	6821      	ldrge	r1, [r4, #0]
 800ca3c:	f021 0104 	bicge.w	r1, r1, #4
 800ca40:	6021      	strge	r1, [r4, #0]
 800ca42:	b90d      	cbnz	r5, 800ca48 <_printf_i+0x110>
 800ca44:	2e00      	cmp	r6, #0
 800ca46:	d04b      	beq.n	800cae0 <_printf_i+0x1a8>
 800ca48:	4616      	mov	r6, r2
 800ca4a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ca4e:	fb03 5711 	mls	r7, r3, r1, r5
 800ca52:	5dc7      	ldrb	r7, [r0, r7]
 800ca54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ca58:	462f      	mov	r7, r5
 800ca5a:	42bb      	cmp	r3, r7
 800ca5c:	460d      	mov	r5, r1
 800ca5e:	d9f4      	bls.n	800ca4a <_printf_i+0x112>
 800ca60:	2b08      	cmp	r3, #8
 800ca62:	d10b      	bne.n	800ca7c <_printf_i+0x144>
 800ca64:	6823      	ldr	r3, [r4, #0]
 800ca66:	07df      	lsls	r7, r3, #31
 800ca68:	d508      	bpl.n	800ca7c <_printf_i+0x144>
 800ca6a:	6923      	ldr	r3, [r4, #16]
 800ca6c:	6861      	ldr	r1, [r4, #4]
 800ca6e:	4299      	cmp	r1, r3
 800ca70:	bfde      	ittt	le
 800ca72:	2330      	movle	r3, #48	@ 0x30
 800ca74:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ca78:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ca7c:	1b92      	subs	r2, r2, r6
 800ca7e:	6122      	str	r2, [r4, #16]
 800ca80:	f8cd a000 	str.w	sl, [sp]
 800ca84:	464b      	mov	r3, r9
 800ca86:	aa03      	add	r2, sp, #12
 800ca88:	4621      	mov	r1, r4
 800ca8a:	4640      	mov	r0, r8
 800ca8c:	f7ff fee6 	bl	800c85c <_printf_common>
 800ca90:	3001      	adds	r0, #1
 800ca92:	d14a      	bne.n	800cb2a <_printf_i+0x1f2>
 800ca94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca98:	b004      	add	sp, #16
 800ca9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca9e:	6823      	ldr	r3, [r4, #0]
 800caa0:	f043 0320 	orr.w	r3, r3, #32
 800caa4:	6023      	str	r3, [r4, #0]
 800caa6:	4833      	ldr	r0, [pc, #204]	@ (800cb74 <_printf_i+0x23c>)
 800caa8:	2778      	movs	r7, #120	@ 0x78
 800caaa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800caae:	6823      	ldr	r3, [r4, #0]
 800cab0:	6831      	ldr	r1, [r6, #0]
 800cab2:	061f      	lsls	r7, r3, #24
 800cab4:	f851 5b04 	ldr.w	r5, [r1], #4
 800cab8:	d402      	bmi.n	800cac0 <_printf_i+0x188>
 800caba:	065f      	lsls	r7, r3, #25
 800cabc:	bf48      	it	mi
 800cabe:	b2ad      	uxthmi	r5, r5
 800cac0:	6031      	str	r1, [r6, #0]
 800cac2:	07d9      	lsls	r1, r3, #31
 800cac4:	bf44      	itt	mi
 800cac6:	f043 0320 	orrmi.w	r3, r3, #32
 800caca:	6023      	strmi	r3, [r4, #0]
 800cacc:	b11d      	cbz	r5, 800cad6 <_printf_i+0x19e>
 800cace:	2310      	movs	r3, #16
 800cad0:	e7ac      	b.n	800ca2c <_printf_i+0xf4>
 800cad2:	4827      	ldr	r0, [pc, #156]	@ (800cb70 <_printf_i+0x238>)
 800cad4:	e7e9      	b.n	800caaa <_printf_i+0x172>
 800cad6:	6823      	ldr	r3, [r4, #0]
 800cad8:	f023 0320 	bic.w	r3, r3, #32
 800cadc:	6023      	str	r3, [r4, #0]
 800cade:	e7f6      	b.n	800cace <_printf_i+0x196>
 800cae0:	4616      	mov	r6, r2
 800cae2:	e7bd      	b.n	800ca60 <_printf_i+0x128>
 800cae4:	6833      	ldr	r3, [r6, #0]
 800cae6:	6825      	ldr	r5, [r4, #0]
 800cae8:	6961      	ldr	r1, [r4, #20]
 800caea:	1d18      	adds	r0, r3, #4
 800caec:	6030      	str	r0, [r6, #0]
 800caee:	062e      	lsls	r6, r5, #24
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	d501      	bpl.n	800caf8 <_printf_i+0x1c0>
 800caf4:	6019      	str	r1, [r3, #0]
 800caf6:	e002      	b.n	800cafe <_printf_i+0x1c6>
 800caf8:	0668      	lsls	r0, r5, #25
 800cafa:	d5fb      	bpl.n	800caf4 <_printf_i+0x1bc>
 800cafc:	8019      	strh	r1, [r3, #0]
 800cafe:	2300      	movs	r3, #0
 800cb00:	6123      	str	r3, [r4, #16]
 800cb02:	4616      	mov	r6, r2
 800cb04:	e7bc      	b.n	800ca80 <_printf_i+0x148>
 800cb06:	6833      	ldr	r3, [r6, #0]
 800cb08:	1d1a      	adds	r2, r3, #4
 800cb0a:	6032      	str	r2, [r6, #0]
 800cb0c:	681e      	ldr	r6, [r3, #0]
 800cb0e:	6862      	ldr	r2, [r4, #4]
 800cb10:	2100      	movs	r1, #0
 800cb12:	4630      	mov	r0, r6
 800cb14:	f7f3 fc44 	bl	80003a0 <memchr>
 800cb18:	b108      	cbz	r0, 800cb1e <_printf_i+0x1e6>
 800cb1a:	1b80      	subs	r0, r0, r6
 800cb1c:	6060      	str	r0, [r4, #4]
 800cb1e:	6863      	ldr	r3, [r4, #4]
 800cb20:	6123      	str	r3, [r4, #16]
 800cb22:	2300      	movs	r3, #0
 800cb24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb28:	e7aa      	b.n	800ca80 <_printf_i+0x148>
 800cb2a:	6923      	ldr	r3, [r4, #16]
 800cb2c:	4632      	mov	r2, r6
 800cb2e:	4649      	mov	r1, r9
 800cb30:	4640      	mov	r0, r8
 800cb32:	47d0      	blx	sl
 800cb34:	3001      	adds	r0, #1
 800cb36:	d0ad      	beq.n	800ca94 <_printf_i+0x15c>
 800cb38:	6823      	ldr	r3, [r4, #0]
 800cb3a:	079b      	lsls	r3, r3, #30
 800cb3c:	d413      	bmi.n	800cb66 <_printf_i+0x22e>
 800cb3e:	68e0      	ldr	r0, [r4, #12]
 800cb40:	9b03      	ldr	r3, [sp, #12]
 800cb42:	4298      	cmp	r0, r3
 800cb44:	bfb8      	it	lt
 800cb46:	4618      	movlt	r0, r3
 800cb48:	e7a6      	b.n	800ca98 <_printf_i+0x160>
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	4632      	mov	r2, r6
 800cb4e:	4649      	mov	r1, r9
 800cb50:	4640      	mov	r0, r8
 800cb52:	47d0      	blx	sl
 800cb54:	3001      	adds	r0, #1
 800cb56:	d09d      	beq.n	800ca94 <_printf_i+0x15c>
 800cb58:	3501      	adds	r5, #1
 800cb5a:	68e3      	ldr	r3, [r4, #12]
 800cb5c:	9903      	ldr	r1, [sp, #12]
 800cb5e:	1a5b      	subs	r3, r3, r1
 800cb60:	42ab      	cmp	r3, r5
 800cb62:	dcf2      	bgt.n	800cb4a <_printf_i+0x212>
 800cb64:	e7eb      	b.n	800cb3e <_printf_i+0x206>
 800cb66:	2500      	movs	r5, #0
 800cb68:	f104 0619 	add.w	r6, r4, #25
 800cb6c:	e7f5      	b.n	800cb5a <_printf_i+0x222>
 800cb6e:	bf00      	nop
 800cb70:	080205f1 	.word	0x080205f1
 800cb74:	08020602 	.word	0x08020602

0800cb78 <__sflush_r>:
 800cb78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb80:	0716      	lsls	r6, r2, #28
 800cb82:	4605      	mov	r5, r0
 800cb84:	460c      	mov	r4, r1
 800cb86:	d454      	bmi.n	800cc32 <__sflush_r+0xba>
 800cb88:	684b      	ldr	r3, [r1, #4]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	dc02      	bgt.n	800cb94 <__sflush_r+0x1c>
 800cb8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	dd48      	ble.n	800cc26 <__sflush_r+0xae>
 800cb94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb96:	2e00      	cmp	r6, #0
 800cb98:	d045      	beq.n	800cc26 <__sflush_r+0xae>
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cba0:	682f      	ldr	r7, [r5, #0]
 800cba2:	6a21      	ldr	r1, [r4, #32]
 800cba4:	602b      	str	r3, [r5, #0]
 800cba6:	d030      	beq.n	800cc0a <__sflush_r+0x92>
 800cba8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cbaa:	89a3      	ldrh	r3, [r4, #12]
 800cbac:	0759      	lsls	r1, r3, #29
 800cbae:	d505      	bpl.n	800cbbc <__sflush_r+0x44>
 800cbb0:	6863      	ldr	r3, [r4, #4]
 800cbb2:	1ad2      	subs	r2, r2, r3
 800cbb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cbb6:	b10b      	cbz	r3, 800cbbc <__sflush_r+0x44>
 800cbb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cbba:	1ad2      	subs	r2, r2, r3
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cbc0:	6a21      	ldr	r1, [r4, #32]
 800cbc2:	4628      	mov	r0, r5
 800cbc4:	47b0      	blx	r6
 800cbc6:	1c43      	adds	r3, r0, #1
 800cbc8:	89a3      	ldrh	r3, [r4, #12]
 800cbca:	d106      	bne.n	800cbda <__sflush_r+0x62>
 800cbcc:	6829      	ldr	r1, [r5, #0]
 800cbce:	291d      	cmp	r1, #29
 800cbd0:	d82b      	bhi.n	800cc2a <__sflush_r+0xb2>
 800cbd2:	4a2a      	ldr	r2, [pc, #168]	@ (800cc7c <__sflush_r+0x104>)
 800cbd4:	410a      	asrs	r2, r1
 800cbd6:	07d6      	lsls	r6, r2, #31
 800cbd8:	d427      	bmi.n	800cc2a <__sflush_r+0xb2>
 800cbda:	2200      	movs	r2, #0
 800cbdc:	6062      	str	r2, [r4, #4]
 800cbde:	04d9      	lsls	r1, r3, #19
 800cbe0:	6922      	ldr	r2, [r4, #16]
 800cbe2:	6022      	str	r2, [r4, #0]
 800cbe4:	d504      	bpl.n	800cbf0 <__sflush_r+0x78>
 800cbe6:	1c42      	adds	r2, r0, #1
 800cbe8:	d101      	bne.n	800cbee <__sflush_r+0x76>
 800cbea:	682b      	ldr	r3, [r5, #0]
 800cbec:	b903      	cbnz	r3, 800cbf0 <__sflush_r+0x78>
 800cbee:	6560      	str	r0, [r4, #84]	@ 0x54
 800cbf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cbf2:	602f      	str	r7, [r5, #0]
 800cbf4:	b1b9      	cbz	r1, 800cc26 <__sflush_r+0xae>
 800cbf6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cbfa:	4299      	cmp	r1, r3
 800cbfc:	d002      	beq.n	800cc04 <__sflush_r+0x8c>
 800cbfe:	4628      	mov	r0, r5
 800cc00:	f000 fa24 	bl	800d04c <_free_r>
 800cc04:	2300      	movs	r3, #0
 800cc06:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc08:	e00d      	b.n	800cc26 <__sflush_r+0xae>
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	4628      	mov	r0, r5
 800cc0e:	47b0      	blx	r6
 800cc10:	4602      	mov	r2, r0
 800cc12:	1c50      	adds	r0, r2, #1
 800cc14:	d1c9      	bne.n	800cbaa <__sflush_r+0x32>
 800cc16:	682b      	ldr	r3, [r5, #0]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d0c6      	beq.n	800cbaa <__sflush_r+0x32>
 800cc1c:	2b1d      	cmp	r3, #29
 800cc1e:	d001      	beq.n	800cc24 <__sflush_r+0xac>
 800cc20:	2b16      	cmp	r3, #22
 800cc22:	d11e      	bne.n	800cc62 <__sflush_r+0xea>
 800cc24:	602f      	str	r7, [r5, #0]
 800cc26:	2000      	movs	r0, #0
 800cc28:	e022      	b.n	800cc70 <__sflush_r+0xf8>
 800cc2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc2e:	b21b      	sxth	r3, r3
 800cc30:	e01b      	b.n	800cc6a <__sflush_r+0xf2>
 800cc32:	690f      	ldr	r7, [r1, #16]
 800cc34:	2f00      	cmp	r7, #0
 800cc36:	d0f6      	beq.n	800cc26 <__sflush_r+0xae>
 800cc38:	0793      	lsls	r3, r2, #30
 800cc3a:	680e      	ldr	r6, [r1, #0]
 800cc3c:	bf08      	it	eq
 800cc3e:	694b      	ldreq	r3, [r1, #20]
 800cc40:	600f      	str	r7, [r1, #0]
 800cc42:	bf18      	it	ne
 800cc44:	2300      	movne	r3, #0
 800cc46:	eba6 0807 	sub.w	r8, r6, r7
 800cc4a:	608b      	str	r3, [r1, #8]
 800cc4c:	f1b8 0f00 	cmp.w	r8, #0
 800cc50:	dde9      	ble.n	800cc26 <__sflush_r+0xae>
 800cc52:	6a21      	ldr	r1, [r4, #32]
 800cc54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cc56:	4643      	mov	r3, r8
 800cc58:	463a      	mov	r2, r7
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	47b0      	blx	r6
 800cc5e:	2800      	cmp	r0, #0
 800cc60:	dc08      	bgt.n	800cc74 <__sflush_r+0xfc>
 800cc62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc6a:	81a3      	strh	r3, [r4, #12]
 800cc6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc74:	4407      	add	r7, r0
 800cc76:	eba8 0800 	sub.w	r8, r8, r0
 800cc7a:	e7e7      	b.n	800cc4c <__sflush_r+0xd4>
 800cc7c:	dfbffffe 	.word	0xdfbffffe

0800cc80 <_fflush_r>:
 800cc80:	b538      	push	{r3, r4, r5, lr}
 800cc82:	690b      	ldr	r3, [r1, #16]
 800cc84:	4605      	mov	r5, r0
 800cc86:	460c      	mov	r4, r1
 800cc88:	b913      	cbnz	r3, 800cc90 <_fflush_r+0x10>
 800cc8a:	2500      	movs	r5, #0
 800cc8c:	4628      	mov	r0, r5
 800cc8e:	bd38      	pop	{r3, r4, r5, pc}
 800cc90:	b118      	cbz	r0, 800cc9a <_fflush_r+0x1a>
 800cc92:	6a03      	ldr	r3, [r0, #32]
 800cc94:	b90b      	cbnz	r3, 800cc9a <_fflush_r+0x1a>
 800cc96:	f7ff fb81 	bl	800c39c <__sinit>
 800cc9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d0f3      	beq.n	800cc8a <_fflush_r+0xa>
 800cca2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cca4:	07d0      	lsls	r0, r2, #31
 800cca6:	d404      	bmi.n	800ccb2 <_fflush_r+0x32>
 800cca8:	0599      	lsls	r1, r3, #22
 800ccaa:	d402      	bmi.n	800ccb2 <_fflush_r+0x32>
 800ccac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccae:	f7ff fbf0 	bl	800c492 <__retarget_lock_acquire_recursive>
 800ccb2:	4628      	mov	r0, r5
 800ccb4:	4621      	mov	r1, r4
 800ccb6:	f7ff ff5f 	bl	800cb78 <__sflush_r>
 800ccba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ccbc:	07da      	lsls	r2, r3, #31
 800ccbe:	4605      	mov	r5, r0
 800ccc0:	d4e4      	bmi.n	800cc8c <_fflush_r+0xc>
 800ccc2:	89a3      	ldrh	r3, [r4, #12]
 800ccc4:	059b      	lsls	r3, r3, #22
 800ccc6:	d4e1      	bmi.n	800cc8c <_fflush_r+0xc>
 800ccc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccca:	f7ff fbe3 	bl	800c494 <__retarget_lock_release_recursive>
 800ccce:	e7dd      	b.n	800cc8c <_fflush_r+0xc>

0800ccd0 <__malloc_lock>:
 800ccd0:	4801      	ldr	r0, [pc, #4]	@ (800ccd8 <__malloc_lock+0x8>)
 800ccd2:	f7ff bbde 	b.w	800c492 <__retarget_lock_acquire_recursive>
 800ccd6:	bf00      	nop
 800ccd8:	24004bdc 	.word	0x24004bdc

0800ccdc <__malloc_unlock>:
 800ccdc:	4801      	ldr	r0, [pc, #4]	@ (800cce4 <__malloc_unlock+0x8>)
 800ccde:	f7ff bbd9 	b.w	800c494 <__retarget_lock_release_recursive>
 800cce2:	bf00      	nop
 800cce4:	24004bdc 	.word	0x24004bdc

0800cce8 <__sread>:
 800cce8:	b510      	push	{r4, lr}
 800ccea:	460c      	mov	r4, r1
 800ccec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccf0:	f000 f978 	bl	800cfe4 <_read_r>
 800ccf4:	2800      	cmp	r0, #0
 800ccf6:	bfab      	itete	ge
 800ccf8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ccfa:	89a3      	ldrhlt	r3, [r4, #12]
 800ccfc:	181b      	addge	r3, r3, r0
 800ccfe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cd02:	bfac      	ite	ge
 800cd04:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cd06:	81a3      	strhlt	r3, [r4, #12]
 800cd08:	bd10      	pop	{r4, pc}

0800cd0a <__swrite>:
 800cd0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd0e:	461f      	mov	r7, r3
 800cd10:	898b      	ldrh	r3, [r1, #12]
 800cd12:	05db      	lsls	r3, r3, #23
 800cd14:	4605      	mov	r5, r0
 800cd16:	460c      	mov	r4, r1
 800cd18:	4616      	mov	r6, r2
 800cd1a:	d505      	bpl.n	800cd28 <__swrite+0x1e>
 800cd1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd20:	2302      	movs	r3, #2
 800cd22:	2200      	movs	r2, #0
 800cd24:	f000 f94c 	bl	800cfc0 <_lseek_r>
 800cd28:	89a3      	ldrh	r3, [r4, #12]
 800cd2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cd32:	81a3      	strh	r3, [r4, #12]
 800cd34:	4632      	mov	r2, r6
 800cd36:	463b      	mov	r3, r7
 800cd38:	4628      	mov	r0, r5
 800cd3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd3e:	f000 b973 	b.w	800d028 <_write_r>

0800cd42 <__sseek>:
 800cd42:	b510      	push	{r4, lr}
 800cd44:	460c      	mov	r4, r1
 800cd46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd4a:	f000 f939 	bl	800cfc0 <_lseek_r>
 800cd4e:	1c43      	adds	r3, r0, #1
 800cd50:	89a3      	ldrh	r3, [r4, #12]
 800cd52:	bf15      	itete	ne
 800cd54:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cd56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cd5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cd5e:	81a3      	strheq	r3, [r4, #12]
 800cd60:	bf18      	it	ne
 800cd62:	81a3      	strhne	r3, [r4, #12]
 800cd64:	bd10      	pop	{r4, pc}

0800cd66 <__sclose>:
 800cd66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd6a:	f000 b8f7 	b.w	800cf5c <_close_r>

0800cd6e <__swbuf_r>:
 800cd6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd70:	460e      	mov	r6, r1
 800cd72:	4614      	mov	r4, r2
 800cd74:	4605      	mov	r5, r0
 800cd76:	b118      	cbz	r0, 800cd80 <__swbuf_r+0x12>
 800cd78:	6a03      	ldr	r3, [r0, #32]
 800cd7a:	b90b      	cbnz	r3, 800cd80 <__swbuf_r+0x12>
 800cd7c:	f7ff fb0e 	bl	800c39c <__sinit>
 800cd80:	69a3      	ldr	r3, [r4, #24]
 800cd82:	60a3      	str	r3, [r4, #8]
 800cd84:	89a3      	ldrh	r3, [r4, #12]
 800cd86:	071a      	lsls	r2, r3, #28
 800cd88:	d501      	bpl.n	800cd8e <__swbuf_r+0x20>
 800cd8a:	6923      	ldr	r3, [r4, #16]
 800cd8c:	b943      	cbnz	r3, 800cda0 <__swbuf_r+0x32>
 800cd8e:	4621      	mov	r1, r4
 800cd90:	4628      	mov	r0, r5
 800cd92:	f000 f82b 	bl	800cdec <__swsetup_r>
 800cd96:	b118      	cbz	r0, 800cda0 <__swbuf_r+0x32>
 800cd98:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800cd9c:	4638      	mov	r0, r7
 800cd9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cda0:	6823      	ldr	r3, [r4, #0]
 800cda2:	6922      	ldr	r2, [r4, #16]
 800cda4:	1a98      	subs	r0, r3, r2
 800cda6:	6963      	ldr	r3, [r4, #20]
 800cda8:	b2f6      	uxtb	r6, r6
 800cdaa:	4283      	cmp	r3, r0
 800cdac:	4637      	mov	r7, r6
 800cdae:	dc05      	bgt.n	800cdbc <__swbuf_r+0x4e>
 800cdb0:	4621      	mov	r1, r4
 800cdb2:	4628      	mov	r0, r5
 800cdb4:	f7ff ff64 	bl	800cc80 <_fflush_r>
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	d1ed      	bne.n	800cd98 <__swbuf_r+0x2a>
 800cdbc:	68a3      	ldr	r3, [r4, #8]
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	60a3      	str	r3, [r4, #8]
 800cdc2:	6823      	ldr	r3, [r4, #0]
 800cdc4:	1c5a      	adds	r2, r3, #1
 800cdc6:	6022      	str	r2, [r4, #0]
 800cdc8:	701e      	strb	r6, [r3, #0]
 800cdca:	6962      	ldr	r2, [r4, #20]
 800cdcc:	1c43      	adds	r3, r0, #1
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d004      	beq.n	800cddc <__swbuf_r+0x6e>
 800cdd2:	89a3      	ldrh	r3, [r4, #12]
 800cdd4:	07db      	lsls	r3, r3, #31
 800cdd6:	d5e1      	bpl.n	800cd9c <__swbuf_r+0x2e>
 800cdd8:	2e0a      	cmp	r6, #10
 800cdda:	d1df      	bne.n	800cd9c <__swbuf_r+0x2e>
 800cddc:	4621      	mov	r1, r4
 800cdde:	4628      	mov	r0, r5
 800cde0:	f7ff ff4e 	bl	800cc80 <_fflush_r>
 800cde4:	2800      	cmp	r0, #0
 800cde6:	d0d9      	beq.n	800cd9c <__swbuf_r+0x2e>
 800cde8:	e7d6      	b.n	800cd98 <__swbuf_r+0x2a>
	...

0800cdec <__swsetup_r>:
 800cdec:	b538      	push	{r3, r4, r5, lr}
 800cdee:	4b29      	ldr	r3, [pc, #164]	@ (800ce94 <__swsetup_r+0xa8>)
 800cdf0:	4605      	mov	r5, r0
 800cdf2:	6818      	ldr	r0, [r3, #0]
 800cdf4:	460c      	mov	r4, r1
 800cdf6:	b118      	cbz	r0, 800ce00 <__swsetup_r+0x14>
 800cdf8:	6a03      	ldr	r3, [r0, #32]
 800cdfa:	b90b      	cbnz	r3, 800ce00 <__swsetup_r+0x14>
 800cdfc:	f7ff face 	bl	800c39c <__sinit>
 800ce00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce04:	0719      	lsls	r1, r3, #28
 800ce06:	d422      	bmi.n	800ce4e <__swsetup_r+0x62>
 800ce08:	06da      	lsls	r2, r3, #27
 800ce0a:	d407      	bmi.n	800ce1c <__swsetup_r+0x30>
 800ce0c:	2209      	movs	r2, #9
 800ce0e:	602a      	str	r2, [r5, #0]
 800ce10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce14:	81a3      	strh	r3, [r4, #12]
 800ce16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce1a:	e033      	b.n	800ce84 <__swsetup_r+0x98>
 800ce1c:	0758      	lsls	r0, r3, #29
 800ce1e:	d512      	bpl.n	800ce46 <__swsetup_r+0x5a>
 800ce20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ce22:	b141      	cbz	r1, 800ce36 <__swsetup_r+0x4a>
 800ce24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ce28:	4299      	cmp	r1, r3
 800ce2a:	d002      	beq.n	800ce32 <__swsetup_r+0x46>
 800ce2c:	4628      	mov	r0, r5
 800ce2e:	f000 f90d 	bl	800d04c <_free_r>
 800ce32:	2300      	movs	r3, #0
 800ce34:	6363      	str	r3, [r4, #52]	@ 0x34
 800ce36:	89a3      	ldrh	r3, [r4, #12]
 800ce38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ce3c:	81a3      	strh	r3, [r4, #12]
 800ce3e:	2300      	movs	r3, #0
 800ce40:	6063      	str	r3, [r4, #4]
 800ce42:	6923      	ldr	r3, [r4, #16]
 800ce44:	6023      	str	r3, [r4, #0]
 800ce46:	89a3      	ldrh	r3, [r4, #12]
 800ce48:	f043 0308 	orr.w	r3, r3, #8
 800ce4c:	81a3      	strh	r3, [r4, #12]
 800ce4e:	6923      	ldr	r3, [r4, #16]
 800ce50:	b94b      	cbnz	r3, 800ce66 <__swsetup_r+0x7a>
 800ce52:	89a3      	ldrh	r3, [r4, #12]
 800ce54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ce58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce5c:	d003      	beq.n	800ce66 <__swsetup_r+0x7a>
 800ce5e:	4621      	mov	r1, r4
 800ce60:	4628      	mov	r0, r5
 800ce62:	f000 f83f 	bl	800cee4 <__smakebuf_r>
 800ce66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce6a:	f013 0201 	ands.w	r2, r3, #1
 800ce6e:	d00a      	beq.n	800ce86 <__swsetup_r+0x9a>
 800ce70:	2200      	movs	r2, #0
 800ce72:	60a2      	str	r2, [r4, #8]
 800ce74:	6962      	ldr	r2, [r4, #20]
 800ce76:	4252      	negs	r2, r2
 800ce78:	61a2      	str	r2, [r4, #24]
 800ce7a:	6922      	ldr	r2, [r4, #16]
 800ce7c:	b942      	cbnz	r2, 800ce90 <__swsetup_r+0xa4>
 800ce7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ce82:	d1c5      	bne.n	800ce10 <__swsetup_r+0x24>
 800ce84:	bd38      	pop	{r3, r4, r5, pc}
 800ce86:	0799      	lsls	r1, r3, #30
 800ce88:	bf58      	it	pl
 800ce8a:	6962      	ldrpl	r2, [r4, #20]
 800ce8c:	60a2      	str	r2, [r4, #8]
 800ce8e:	e7f4      	b.n	800ce7a <__swsetup_r+0x8e>
 800ce90:	2000      	movs	r0, #0
 800ce92:	e7f7      	b.n	800ce84 <__swsetup_r+0x98>
 800ce94:	24000038 	.word	0x24000038

0800ce98 <__swhatbuf_r>:
 800ce98:	b570      	push	{r4, r5, r6, lr}
 800ce9a:	460c      	mov	r4, r1
 800ce9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cea0:	2900      	cmp	r1, #0
 800cea2:	b096      	sub	sp, #88	@ 0x58
 800cea4:	4615      	mov	r5, r2
 800cea6:	461e      	mov	r6, r3
 800cea8:	da0d      	bge.n	800cec6 <__swhatbuf_r+0x2e>
 800ceaa:	89a3      	ldrh	r3, [r4, #12]
 800ceac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ceb0:	f04f 0100 	mov.w	r1, #0
 800ceb4:	bf14      	ite	ne
 800ceb6:	2340      	movne	r3, #64	@ 0x40
 800ceb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cebc:	2000      	movs	r0, #0
 800cebe:	6031      	str	r1, [r6, #0]
 800cec0:	602b      	str	r3, [r5, #0]
 800cec2:	b016      	add	sp, #88	@ 0x58
 800cec4:	bd70      	pop	{r4, r5, r6, pc}
 800cec6:	466a      	mov	r2, sp
 800cec8:	f000 f858 	bl	800cf7c <_fstat_r>
 800cecc:	2800      	cmp	r0, #0
 800cece:	dbec      	blt.n	800ceaa <__swhatbuf_r+0x12>
 800ced0:	9901      	ldr	r1, [sp, #4]
 800ced2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ced6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ceda:	4259      	negs	r1, r3
 800cedc:	4159      	adcs	r1, r3
 800cede:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cee2:	e7eb      	b.n	800cebc <__swhatbuf_r+0x24>

0800cee4 <__smakebuf_r>:
 800cee4:	898b      	ldrh	r3, [r1, #12]
 800cee6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cee8:	079d      	lsls	r5, r3, #30
 800ceea:	4606      	mov	r6, r0
 800ceec:	460c      	mov	r4, r1
 800ceee:	d507      	bpl.n	800cf00 <__smakebuf_r+0x1c>
 800cef0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cef4:	6023      	str	r3, [r4, #0]
 800cef6:	6123      	str	r3, [r4, #16]
 800cef8:	2301      	movs	r3, #1
 800cefa:	6163      	str	r3, [r4, #20]
 800cefc:	b003      	add	sp, #12
 800cefe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf00:	ab01      	add	r3, sp, #4
 800cf02:	466a      	mov	r2, sp
 800cf04:	f7ff ffc8 	bl	800ce98 <__swhatbuf_r>
 800cf08:	9f00      	ldr	r7, [sp, #0]
 800cf0a:	4605      	mov	r5, r0
 800cf0c:	4639      	mov	r1, r7
 800cf0e:	4630      	mov	r0, r6
 800cf10:	f7ff fc24 	bl	800c75c <_malloc_r>
 800cf14:	b948      	cbnz	r0, 800cf2a <__smakebuf_r+0x46>
 800cf16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf1a:	059a      	lsls	r2, r3, #22
 800cf1c:	d4ee      	bmi.n	800cefc <__smakebuf_r+0x18>
 800cf1e:	f023 0303 	bic.w	r3, r3, #3
 800cf22:	f043 0302 	orr.w	r3, r3, #2
 800cf26:	81a3      	strh	r3, [r4, #12]
 800cf28:	e7e2      	b.n	800cef0 <__smakebuf_r+0xc>
 800cf2a:	89a3      	ldrh	r3, [r4, #12]
 800cf2c:	6020      	str	r0, [r4, #0]
 800cf2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf32:	81a3      	strh	r3, [r4, #12]
 800cf34:	9b01      	ldr	r3, [sp, #4]
 800cf36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cf3a:	b15b      	cbz	r3, 800cf54 <__smakebuf_r+0x70>
 800cf3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf40:	4630      	mov	r0, r6
 800cf42:	f000 f82d 	bl	800cfa0 <_isatty_r>
 800cf46:	b128      	cbz	r0, 800cf54 <__smakebuf_r+0x70>
 800cf48:	89a3      	ldrh	r3, [r4, #12]
 800cf4a:	f023 0303 	bic.w	r3, r3, #3
 800cf4e:	f043 0301 	orr.w	r3, r3, #1
 800cf52:	81a3      	strh	r3, [r4, #12]
 800cf54:	89a3      	ldrh	r3, [r4, #12]
 800cf56:	431d      	orrs	r5, r3
 800cf58:	81a5      	strh	r5, [r4, #12]
 800cf5a:	e7cf      	b.n	800cefc <__smakebuf_r+0x18>

0800cf5c <_close_r>:
 800cf5c:	b538      	push	{r3, r4, r5, lr}
 800cf5e:	4d06      	ldr	r5, [pc, #24]	@ (800cf78 <_close_r+0x1c>)
 800cf60:	2300      	movs	r3, #0
 800cf62:	4604      	mov	r4, r0
 800cf64:	4608      	mov	r0, r1
 800cf66:	602b      	str	r3, [r5, #0]
 800cf68:	f7f4 f85b 	bl	8001022 <_close>
 800cf6c:	1c43      	adds	r3, r0, #1
 800cf6e:	d102      	bne.n	800cf76 <_close_r+0x1a>
 800cf70:	682b      	ldr	r3, [r5, #0]
 800cf72:	b103      	cbz	r3, 800cf76 <_close_r+0x1a>
 800cf74:	6023      	str	r3, [r4, #0]
 800cf76:	bd38      	pop	{r3, r4, r5, pc}
 800cf78:	24004be8 	.word	0x24004be8

0800cf7c <_fstat_r>:
 800cf7c:	b538      	push	{r3, r4, r5, lr}
 800cf7e:	4d07      	ldr	r5, [pc, #28]	@ (800cf9c <_fstat_r+0x20>)
 800cf80:	2300      	movs	r3, #0
 800cf82:	4604      	mov	r4, r0
 800cf84:	4608      	mov	r0, r1
 800cf86:	4611      	mov	r1, r2
 800cf88:	602b      	str	r3, [r5, #0]
 800cf8a:	f7f4 f856 	bl	800103a <_fstat>
 800cf8e:	1c43      	adds	r3, r0, #1
 800cf90:	d102      	bne.n	800cf98 <_fstat_r+0x1c>
 800cf92:	682b      	ldr	r3, [r5, #0]
 800cf94:	b103      	cbz	r3, 800cf98 <_fstat_r+0x1c>
 800cf96:	6023      	str	r3, [r4, #0]
 800cf98:	bd38      	pop	{r3, r4, r5, pc}
 800cf9a:	bf00      	nop
 800cf9c:	24004be8 	.word	0x24004be8

0800cfa0 <_isatty_r>:
 800cfa0:	b538      	push	{r3, r4, r5, lr}
 800cfa2:	4d06      	ldr	r5, [pc, #24]	@ (800cfbc <_isatty_r+0x1c>)
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	4608      	mov	r0, r1
 800cfaa:	602b      	str	r3, [r5, #0]
 800cfac:	f7f4 f855 	bl	800105a <_isatty>
 800cfb0:	1c43      	adds	r3, r0, #1
 800cfb2:	d102      	bne.n	800cfba <_isatty_r+0x1a>
 800cfb4:	682b      	ldr	r3, [r5, #0]
 800cfb6:	b103      	cbz	r3, 800cfba <_isatty_r+0x1a>
 800cfb8:	6023      	str	r3, [r4, #0]
 800cfba:	bd38      	pop	{r3, r4, r5, pc}
 800cfbc:	24004be8 	.word	0x24004be8

0800cfc0 <_lseek_r>:
 800cfc0:	b538      	push	{r3, r4, r5, lr}
 800cfc2:	4d07      	ldr	r5, [pc, #28]	@ (800cfe0 <_lseek_r+0x20>)
 800cfc4:	4604      	mov	r4, r0
 800cfc6:	4608      	mov	r0, r1
 800cfc8:	4611      	mov	r1, r2
 800cfca:	2200      	movs	r2, #0
 800cfcc:	602a      	str	r2, [r5, #0]
 800cfce:	461a      	mov	r2, r3
 800cfd0:	f7f4 f84e 	bl	8001070 <_lseek>
 800cfd4:	1c43      	adds	r3, r0, #1
 800cfd6:	d102      	bne.n	800cfde <_lseek_r+0x1e>
 800cfd8:	682b      	ldr	r3, [r5, #0]
 800cfda:	b103      	cbz	r3, 800cfde <_lseek_r+0x1e>
 800cfdc:	6023      	str	r3, [r4, #0]
 800cfde:	bd38      	pop	{r3, r4, r5, pc}
 800cfe0:	24004be8 	.word	0x24004be8

0800cfe4 <_read_r>:
 800cfe4:	b538      	push	{r3, r4, r5, lr}
 800cfe6:	4d07      	ldr	r5, [pc, #28]	@ (800d004 <_read_r+0x20>)
 800cfe8:	4604      	mov	r4, r0
 800cfea:	4608      	mov	r0, r1
 800cfec:	4611      	mov	r1, r2
 800cfee:	2200      	movs	r2, #0
 800cff0:	602a      	str	r2, [r5, #0]
 800cff2:	461a      	mov	r2, r3
 800cff4:	f7f3 ffdc 	bl	8000fb0 <_read>
 800cff8:	1c43      	adds	r3, r0, #1
 800cffa:	d102      	bne.n	800d002 <_read_r+0x1e>
 800cffc:	682b      	ldr	r3, [r5, #0]
 800cffe:	b103      	cbz	r3, 800d002 <_read_r+0x1e>
 800d000:	6023      	str	r3, [r4, #0]
 800d002:	bd38      	pop	{r3, r4, r5, pc}
 800d004:	24004be8 	.word	0x24004be8

0800d008 <_sbrk_r>:
 800d008:	b538      	push	{r3, r4, r5, lr}
 800d00a:	4d06      	ldr	r5, [pc, #24]	@ (800d024 <_sbrk_r+0x1c>)
 800d00c:	2300      	movs	r3, #0
 800d00e:	4604      	mov	r4, r0
 800d010:	4608      	mov	r0, r1
 800d012:	602b      	str	r3, [r5, #0]
 800d014:	f7f4 f83a 	bl	800108c <_sbrk>
 800d018:	1c43      	adds	r3, r0, #1
 800d01a:	d102      	bne.n	800d022 <_sbrk_r+0x1a>
 800d01c:	682b      	ldr	r3, [r5, #0]
 800d01e:	b103      	cbz	r3, 800d022 <_sbrk_r+0x1a>
 800d020:	6023      	str	r3, [r4, #0]
 800d022:	bd38      	pop	{r3, r4, r5, pc}
 800d024:	24004be8 	.word	0x24004be8

0800d028 <_write_r>:
 800d028:	b538      	push	{r3, r4, r5, lr}
 800d02a:	4d07      	ldr	r5, [pc, #28]	@ (800d048 <_write_r+0x20>)
 800d02c:	4604      	mov	r4, r0
 800d02e:	4608      	mov	r0, r1
 800d030:	4611      	mov	r1, r2
 800d032:	2200      	movs	r2, #0
 800d034:	602a      	str	r2, [r5, #0]
 800d036:	461a      	mov	r2, r3
 800d038:	f7f3 ffd7 	bl	8000fea <_write>
 800d03c:	1c43      	adds	r3, r0, #1
 800d03e:	d102      	bne.n	800d046 <_write_r+0x1e>
 800d040:	682b      	ldr	r3, [r5, #0]
 800d042:	b103      	cbz	r3, 800d046 <_write_r+0x1e>
 800d044:	6023      	str	r3, [r4, #0]
 800d046:	bd38      	pop	{r3, r4, r5, pc}
 800d048:	24004be8 	.word	0x24004be8

0800d04c <_free_r>:
 800d04c:	b538      	push	{r3, r4, r5, lr}
 800d04e:	4605      	mov	r5, r0
 800d050:	2900      	cmp	r1, #0
 800d052:	d041      	beq.n	800d0d8 <_free_r+0x8c>
 800d054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d058:	1f0c      	subs	r4, r1, #4
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	bfb8      	it	lt
 800d05e:	18e4      	addlt	r4, r4, r3
 800d060:	f7ff fe36 	bl	800ccd0 <__malloc_lock>
 800d064:	4a1d      	ldr	r2, [pc, #116]	@ (800d0dc <_free_r+0x90>)
 800d066:	6813      	ldr	r3, [r2, #0]
 800d068:	b933      	cbnz	r3, 800d078 <_free_r+0x2c>
 800d06a:	6063      	str	r3, [r4, #4]
 800d06c:	6014      	str	r4, [r2, #0]
 800d06e:	4628      	mov	r0, r5
 800d070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d074:	f7ff be32 	b.w	800ccdc <__malloc_unlock>
 800d078:	42a3      	cmp	r3, r4
 800d07a:	d908      	bls.n	800d08e <_free_r+0x42>
 800d07c:	6820      	ldr	r0, [r4, #0]
 800d07e:	1821      	adds	r1, r4, r0
 800d080:	428b      	cmp	r3, r1
 800d082:	bf01      	itttt	eq
 800d084:	6819      	ldreq	r1, [r3, #0]
 800d086:	685b      	ldreq	r3, [r3, #4]
 800d088:	1809      	addeq	r1, r1, r0
 800d08a:	6021      	streq	r1, [r4, #0]
 800d08c:	e7ed      	b.n	800d06a <_free_r+0x1e>
 800d08e:	461a      	mov	r2, r3
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	b10b      	cbz	r3, 800d098 <_free_r+0x4c>
 800d094:	42a3      	cmp	r3, r4
 800d096:	d9fa      	bls.n	800d08e <_free_r+0x42>
 800d098:	6811      	ldr	r1, [r2, #0]
 800d09a:	1850      	adds	r0, r2, r1
 800d09c:	42a0      	cmp	r0, r4
 800d09e:	d10b      	bne.n	800d0b8 <_free_r+0x6c>
 800d0a0:	6820      	ldr	r0, [r4, #0]
 800d0a2:	4401      	add	r1, r0
 800d0a4:	1850      	adds	r0, r2, r1
 800d0a6:	4283      	cmp	r3, r0
 800d0a8:	6011      	str	r1, [r2, #0]
 800d0aa:	d1e0      	bne.n	800d06e <_free_r+0x22>
 800d0ac:	6818      	ldr	r0, [r3, #0]
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	6053      	str	r3, [r2, #4]
 800d0b2:	4408      	add	r0, r1
 800d0b4:	6010      	str	r0, [r2, #0]
 800d0b6:	e7da      	b.n	800d06e <_free_r+0x22>
 800d0b8:	d902      	bls.n	800d0c0 <_free_r+0x74>
 800d0ba:	230c      	movs	r3, #12
 800d0bc:	602b      	str	r3, [r5, #0]
 800d0be:	e7d6      	b.n	800d06e <_free_r+0x22>
 800d0c0:	6820      	ldr	r0, [r4, #0]
 800d0c2:	1821      	adds	r1, r4, r0
 800d0c4:	428b      	cmp	r3, r1
 800d0c6:	bf04      	itt	eq
 800d0c8:	6819      	ldreq	r1, [r3, #0]
 800d0ca:	685b      	ldreq	r3, [r3, #4]
 800d0cc:	6063      	str	r3, [r4, #4]
 800d0ce:	bf04      	itt	eq
 800d0d0:	1809      	addeq	r1, r1, r0
 800d0d2:	6021      	streq	r1, [r4, #0]
 800d0d4:	6054      	str	r4, [r2, #4]
 800d0d6:	e7ca      	b.n	800d06e <_free_r+0x22>
 800d0d8:	bd38      	pop	{r3, r4, r5, pc}
 800d0da:	bf00      	nop
 800d0dc:	24004be4 	.word	0x24004be4

0800d0e0 <sqrtf>:
 800d0e0:	b508      	push	{r3, lr}
 800d0e2:	ed2d 8b02 	vpush	{d8}
 800d0e6:	eeb0 8a40 	vmov.f32	s16, s0
 800d0ea:	f000 f817 	bl	800d11c <__ieee754_sqrtf>
 800d0ee:	eeb4 8a48 	vcmp.f32	s16, s16
 800d0f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0f6:	d60c      	bvs.n	800d112 <sqrtf+0x32>
 800d0f8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d118 <sqrtf+0x38>
 800d0fc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d104:	d505      	bpl.n	800d112 <sqrtf+0x32>
 800d106:	f7ff f999 	bl	800c43c <__errno>
 800d10a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d10e:	2321      	movs	r3, #33	@ 0x21
 800d110:	6003      	str	r3, [r0, #0]
 800d112:	ecbd 8b02 	vpop	{d8}
 800d116:	bd08      	pop	{r3, pc}
 800d118:	00000000 	.word	0x00000000

0800d11c <__ieee754_sqrtf>:
 800d11c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d120:	4770      	bx	lr
	...

0800d124 <_init>:
 800d124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d126:	bf00      	nop
 800d128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d12a:	bc08      	pop	{r3}
 800d12c:	469e      	mov	lr, r3
 800d12e:	4770      	bx	lr

0800d130 <_fini>:
 800d130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d132:	bf00      	nop
 800d134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d136:	bc08      	pop	{r3}
 800d138:	469e      	mov	lr, r3
 800d13a:	4770      	bx	lr
