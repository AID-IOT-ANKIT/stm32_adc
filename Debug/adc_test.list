
adc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009868  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08009b00  08009b00  0000ab00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009b3c  08009b3c  0000ab3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009b44  08009b44  0000ab44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009b48  08009b48  0000ab48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000002c  24000000  08009b4c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001f4  2400002c  08009b78  0000b02c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000220  08009b78  0000b220  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b02c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ad81  00000000  00000000  0000b05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002d81  00000000  00000000  00025ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014d8  00000000  00000000  00028b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000104b  00000000  00000000  0002a038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000397ef  00000000  00000000  0002b083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b97f  00000000  00000000  00064872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178ec1  00000000  00000000  000801f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f90b2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005a70  00000000  00000000  001f90f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  001feb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400002c 	.word	0x2400002c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009ae8 	.word	0x08009ae8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000030 	.word	0x24000030
 80002d4:	08009ae8 	.word	0x08009ae8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005cc:	f000 f9ec 	bl	80009a8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 fe00 	bl	80011d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f834 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f000 f9ae 	bl	8000938 <MX_GPIO_Init>
  MX_DMA_Init();
 80005dc:	f000 f98c 	bl	80008f8 <MX_DMA_Init>
  MX_ADC1_Init();
 80005e0:	f000 f8aa 	bl	8000738 <MX_ADC1_Init>
  MX_TIM8_Init();
 80005e4:	f000 f936 	bl	8000854 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80005e8:	2000      	movs	r0, #0
 80005ea:	f000 fc2b 	bl	8000e44 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f000 fc28 	bl	8000e44 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80005f4:	2002      	movs	r0, #2
 80005f6:	f000 fc25 	bl	8000e44 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80005fa:	2101      	movs	r1, #1
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 fc97 	bl	8000f30 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000602:	4b0e      	ldr	r3, [pc, #56]	@ (800063c <main+0x74>)
 8000604:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000608:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800060a:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <main+0x74>)
 800060c:	2200      	movs	r2, #0
 800060e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000610:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <main+0x74>)
 8000612:	2200      	movs	r2, #0
 8000614:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000616:	4b09      	ldr	r3, [pc, #36]	@ (800063c <main+0x74>)
 8000618:	2200      	movs	r2, #0
 800061a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800061c:	4b07      	ldr	r3, [pc, #28]	@ (800063c <main+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000622:	4906      	ldr	r1, [pc, #24]	@ (800063c <main+0x74>)
 8000624:	2000      	movs	r0, #0
 8000626:	f000 fd13 	bl	8001050 <BSP_COM_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d002      	beq.n	8000636 <main+0x6e>
  {
    Error_Handler();
 8000630:	f000 f9e6 	bl	8000a00 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	e7fd      	b.n	8000636 <main+0x6e>
 800063a:	bf00      	nop
 800063c:	24000048 	.word	0x24000048

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b09c      	sub	sp, #112	@ 0x70
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800064a:	224c      	movs	r2, #76	@ 0x4c
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f009 fa1e 	bl	8009a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2220      	movs	r2, #32
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f009 fa18 	bl	8009a90 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000660:	2002      	movs	r0, #2
 8000662:	f004 f9f9 	bl	8004a58 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	4b31      	ldr	r3, [pc, #196]	@ (8000730 <SystemClock_Config+0xf0>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	4a30      	ldr	r2, [pc, #192]	@ (8000730 <SystemClock_Config+0xf0>)
 8000670:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000674:	6193      	str	r3, [r2, #24]
 8000676:	4b2e      	ldr	r3, [pc, #184]	@ (8000730 <SystemClock_Config+0xf0>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	4b2c      	ldr	r3, [pc, #176]	@ (8000734 <SystemClock_Config+0xf4>)
 8000682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000684:	4a2b      	ldr	r2, [pc, #172]	@ (8000734 <SystemClock_Config+0xf4>)
 8000686:	f043 0301 	orr.w	r3, r3, #1
 800068a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800068c:	4b29      	ldr	r3, [pc, #164]	@ (8000734 <SystemClock_Config+0xf4>)
 800068e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000698:	bf00      	nop
 800069a:	4b25      	ldr	r3, [pc, #148]	@ (8000730 <SystemClock_Config+0xf0>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006a6:	d1f8      	bne.n	800069a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2340      	movs	r3, #64	@ 0x40
 80006b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006bc:	2304      	movs	r3, #4
 80006be:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80006c0:	233c      	movs	r3, #60	@ 0x3c
 80006c2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006d0:	230c      	movs	r3, #12
 80006d2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006e0:	4618      	mov	r0, r3
 80006e2:	f004 f9f3 	bl	8004acc <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006ec:	f000 f988 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	233f      	movs	r3, #63	@ 0x3f
 80006f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2303      	movs	r3, #3
 80006f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006fc:	2308      	movs	r3, #8
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000700:	2340      	movs	r3, #64	@ 0x40
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000704:	2340      	movs	r3, #64	@ 0x40
 8000706:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000708:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800070c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800070e:	2340      	movs	r3, #64	@ 0x40
 8000710:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2104      	movs	r1, #4
 8000716:	4618      	mov	r0, r3
 8000718:	f004 fe32 	bl	8005380 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000722:	f000 f96d 	bl	8000a00 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3770      	adds	r7, #112	@ 0x70
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	58024800 	.word	0x58024800
 8000734:	58000400 	.word	0x58000400

08000738 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	@ 0x28
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800074a:	463b      	mov	r3, r7
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
 8000758:	615a      	str	r2, [r3, #20]
 800075a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800075c:	4b39      	ldr	r3, [pc, #228]	@ (8000844 <MX_ADC1_Init+0x10c>)
 800075e:	4a3a      	ldr	r2, [pc, #232]	@ (8000848 <MX_ADC1_Init+0x110>)
 8000760:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000762:	4b38      	ldr	r3, [pc, #224]	@ (8000844 <MX_ADC1_Init+0x10c>)
 8000764:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000768:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800076a:	4b36      	ldr	r3, [pc, #216]	@ (8000844 <MX_ADC1_Init+0x10c>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000770:	4b34      	ldr	r3, [pc, #208]	@ (8000844 <MX_ADC1_Init+0x10c>)
 8000772:	2201      	movs	r2, #1
 8000774:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000776:	4b33      	ldr	r3, [pc, #204]	@ (8000844 <MX_ADC1_Init+0x10c>)
 8000778:	2208      	movs	r2, #8
 800077a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800077c:	4b31      	ldr	r3, [pc, #196]	@ (8000844 <MX_ADC1_Init+0x10c>)
 800077e:	2200      	movs	r2, #0
 8000780:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000782:	4b30      	ldr	r3, [pc, #192]	@ (8000844 <MX_ADC1_Init+0x10c>)
 8000784:	2200      	movs	r2, #0
 8000786:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000788:	4b2e      	ldr	r3, [pc, #184]	@ (8000844 <MX_ADC1_Init+0x10c>)
 800078a:	2202      	movs	r2, #2
 800078c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800078e:	4b2d      	ldr	r3, [pc, #180]	@ (8000844 <MX_ADC1_Init+0x10c>)
 8000790:	2200      	movs	r2, #0
 8000792:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO2;
 8000794:	4b2b      	ldr	r3, [pc, #172]	@ (8000844 <MX_ADC1_Init+0x10c>)
 8000796:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800079a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800079c:	4b29      	ldr	r3, [pc, #164]	@ (8000844 <MX_ADC1_Init+0x10c>)
 800079e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80007a4:	4b27      	ldr	r3, [pc, #156]	@ (8000844 <MX_ADC1_Init+0x10c>)
 80007a6:	2203      	movs	r2, #3
 80007a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007aa:	4b26      	ldr	r3, [pc, #152]	@ (8000844 <MX_ADC1_Init+0x10c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007b0:	4b24      	ldr	r3, [pc, #144]	@ (8000844 <MX_ADC1_Init+0x10c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007b6:	4b23      	ldr	r3, [pc, #140]	@ (8000844 <MX_ADC1_Init+0x10c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 80007be:	4b21      	ldr	r3, [pc, #132]	@ (8000844 <MX_ADC1_Init+0x10c>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c4:	481f      	ldr	r0, [pc, #124]	@ (8000844 <MX_ADC1_Init+0x10c>)
 80007c6:	f000 ffa3 	bl	8001710 <HAL_ADC_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80007d0:	f000 f916 	bl	8000a00 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	4819      	ldr	r0, [pc, #100]	@ (8000844 <MX_ADC1_Init+0x10c>)
 80007e0:	f001 ffe4 	bl	80027ac <HAL_ADCEx_MultiModeConfigChannel>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80007ea:	f000 f909 	bl	8000a00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80007ee:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_ADC1_Init+0x114>)
 80007f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f2:	2306      	movs	r3, #6
 80007f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007fa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80007fe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000800:	2304      	movs	r3, #4
 8000802:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080c:	463b      	mov	r3, r7
 800080e:	4619      	mov	r1, r3
 8000810:	480c      	ldr	r0, [pc, #48]	@ (8000844 <MX_ADC1_Init+0x10c>)
 8000812:	f001 fb77 	bl	8001f04 <HAL_ADC_ConfigChannel>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 800081c:	f000 f8f0 	bl	8000a00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000820:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <MX_ADC1_Init+0x118>)
 8000822:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000824:	230c      	movs	r3, #12
 8000826:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000828:	463b      	mov	r3, r7
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	@ (8000844 <MX_ADC1_Init+0x10c>)
 800082e:	f001 fb69 	bl	8001f04 <HAL_ADC_ConfigChannel>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8000838:	f000 f8e2 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	3728      	adds	r7, #40	@ 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	24000058 	.word	0x24000058
 8000848:	40022000 	.word	0x40022000
 800084c:	43210000 	.word	0x43210000
 8000850:	47520000 	.word	0x47520000

08000854 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085a:	f107 0310 	add.w	r3, r7, #16
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000872:	4b1f      	ldr	r3, [pc, #124]	@ (80008f0 <MX_TIM8_Init+0x9c>)
 8000874:	4a1f      	ldr	r2, [pc, #124]	@ (80008f4 <MX_TIM8_Init+0xa0>)
 8000876:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 6 - 1;
 8000878:	4b1d      	ldr	r3, [pc, #116]	@ (80008f0 <MX_TIM8_Init+0x9c>)
 800087a:	2205      	movs	r2, #5
 800087c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087e:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <MX_TIM8_Init+0x9c>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16 - 1;
 8000884:	4b1a      	ldr	r3, [pc, #104]	@ (80008f0 <MX_TIM8_Init+0x9c>)
 8000886:	220f      	movs	r2, #15
 8000888:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088a:	4b19      	ldr	r3, [pc, #100]	@ (80008f0 <MX_TIM8_Init+0x9c>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000890:	4b17      	ldr	r3, [pc, #92]	@ (80008f0 <MX_TIM8_Init+0x9c>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000896:	4b16      	ldr	r3, [pc, #88]	@ (80008f0 <MX_TIM8_Init+0x9c>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800089c:	4814      	ldr	r0, [pc, #80]	@ (80008f0 <MX_TIM8_Init+0x9c>)
 800089e:	f007 fdf9 	bl	8008494 <HAL_TIM_Base_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80008a8:	f000 f8aa 	bl	8000a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	4619      	mov	r1, r3
 80008b8:	480d      	ldr	r0, [pc, #52]	@ (80008f0 <MX_TIM8_Init+0x9c>)
 80008ba:	f007 fe43 	bl	8008544 <HAL_TIM_ConfigClockSource>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80008c4:	f000 f89c 	bl	8000a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008c8:	2320      	movs	r3, #32
 80008ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	4619      	mov	r1, r3
 80008d8:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <MX_TIM8_Init+0x9c>)
 80008da:	f008 f869 	bl	80089b0 <HAL_TIMEx_MasterConfigSynchronization>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80008e4:	f000 f88c 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	3720      	adds	r7, #32
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	24000134 	.word	0x24000134
 80008f4:	40010400 	.word	0x40010400

080008f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000934 <MX_DMA_Init+0x3c>)
 8000900:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000904:	4a0b      	ldr	r2, [pc, #44]	@ (8000934 <MX_DMA_Init+0x3c>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800090e:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <MX_DMA_Init+0x3c>)
 8000910:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	2100      	movs	r1, #0
 8000920:	200b      	movs	r0, #11
 8000922:	f002 f8fc 	bl	8002b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000926:	200b      	movs	r0, #11
 8000928:	f002 f913 	bl	8002b52 <HAL_NVIC_EnableIRQ>

}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	58024400 	.word	0x58024400

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <MX_GPIO_Init+0x6c>)
 8000940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000944:	4a17      	ldr	r2, [pc, #92]	@ (80009a4 <MX_GPIO_Init+0x6c>)
 8000946:	f043 0304 	orr.w	r3, r3, #4
 800094a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800094e:	4b15      	ldr	r3, [pc, #84]	@ (80009a4 <MX_GPIO_Init+0x6c>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000954:	f003 0304 	and.w	r3, r3, #4
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095c:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <MX_GPIO_Init+0x6c>)
 800095e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000962:	4a10      	ldr	r2, [pc, #64]	@ (80009a4 <MX_GPIO_Init+0x6c>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000968:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800096c:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <MX_GPIO_Init+0x6c>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b0a      	ldr	r3, [pc, #40]	@ (80009a4 <MX_GPIO_Init+0x6c>)
 800097c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000980:	4a08      	ldr	r2, [pc, #32]	@ (80009a4 <MX_GPIO_Init+0x6c>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <MX_GPIO_Init+0x6c>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000998:	bf00      	nop
 800099a:	3714      	adds	r7, #20
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	58024400 	.word	0x58024400

080009a8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009ae:	463b      	mov	r3, r7
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80009ba:	f002 f8e5 	bl	8002b88 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009be:	2301      	movs	r3, #1
 80009c0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80009ca:	231f      	movs	r3, #31
 80009cc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80009ce:	2387      	movs	r3, #135	@ 0x87
 80009d0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80009d6:	2300      	movs	r3, #0
 80009d8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009da:	2301      	movs	r3, #1
 80009dc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80009de:	2301      	movs	r3, #1
 80009e0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009ea:	463b      	mov	r3, r7
 80009ec:	4618      	mov	r0, r3
 80009ee:	f002 f903 	bl	8002bf8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009f2:	2004      	movs	r0, #4
 80009f4:	f002 f8e0 	bl	8002bb8 <HAL_MPU_Enable>

}
 80009f8:	bf00      	nop
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <Error_Handler+0x8>

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <HAL_MspInit+0x30>)
 8000a14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a18:	4a08      	ldr	r2, [pc, #32]	@ (8000a3c <HAL_MspInit+0x30>)
 8000a1a:	f043 0302 	orr.w	r3, r3, #2
 8000a1e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a22:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <HAL_MspInit+0x30>)
 8000a24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	58024400 	.word	0x58024400

08000a40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b0ba      	sub	sp, #232	@ 0xe8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	22c0      	movs	r2, #192	@ 0xc0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f009 f815 	bl	8009a90 <memset>
  if(hadc->Instance==ADC1)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a48      	ldr	r2, [pc, #288]	@ (8000b8c <HAL_ADC_MspInit+0x14c>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	f040 8088 	bne.w	8000b82 <HAL_ADC_MspInit+0x142>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a72:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000a76:	f04f 0300 	mov.w	r3, #0
 8000a7a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000a82:	230a      	movs	r3, #10
 8000a84:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a92:	23c0      	movs	r3, #192	@ 0xc0
 8000a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a96:	2320      	movs	r3, #32
 8000a98:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f004 fff5 	bl	8005a98 <HAL_RCCEx_PeriphCLKConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000ab4:	f7ff ffa4 	bl	8000a00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ab8:	4b35      	ldr	r3, [pc, #212]	@ (8000b90 <HAL_ADC_MspInit+0x150>)
 8000aba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000abe:	4a34      	ldr	r2, [pc, #208]	@ (8000b90 <HAL_ADC_MspInit+0x150>)
 8000ac0:	f043 0320 	orr.w	r3, r3, #32
 8000ac4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ac8:	4b31      	ldr	r3, [pc, #196]	@ (8000b90 <HAL_ADC_MspInit+0x150>)
 8000aca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ace:	f003 0320 	and.w	r3, r3, #32
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	4b2e      	ldr	r3, [pc, #184]	@ (8000b90 <HAL_ADC_MspInit+0x150>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000adc:	4a2c      	ldr	r2, [pc, #176]	@ (8000b90 <HAL_ADC_MspInit+0x150>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b90 <HAL_ADC_MspInit+0x150>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA1     ------> ADC1_INP17
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000af4:	2303      	movs	r3, #3
 8000af6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afa:	2303      	movs	r3, #3
 8000afc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4821      	ldr	r0, [pc, #132]	@ (8000b94 <HAL_ADC_MspInit+0x154>)
 8000b0e:	f003 fdd9 	bl	80046c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000b12:	4b21      	ldr	r3, [pc, #132]	@ (8000b98 <HAL_ADC_MspInit+0x158>)
 8000b14:	4a21      	ldr	r2, [pc, #132]	@ (8000b9c <HAL_ADC_MspInit+0x15c>)
 8000b16:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b18:	4b1f      	ldr	r3, [pc, #124]	@ (8000b98 <HAL_ADC_MspInit+0x158>)
 8000b1a:	2209      	movs	r2, #9
 8000b1c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000b98 <HAL_ADC_MspInit+0x158>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b24:	4b1c      	ldr	r3, [pc, #112]	@ (8000b98 <HAL_ADC_MspInit+0x158>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000b98 <HAL_ADC_MspInit+0x158>)
 8000b2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b30:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b32:	4b19      	ldr	r3, [pc, #100]	@ (8000b98 <HAL_ADC_MspInit+0x158>)
 8000b34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b38:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <HAL_ADC_MspInit+0x158>)
 8000b3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b40:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <HAL_ADC_MspInit+0x158>)
 8000b44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b48:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <HAL_ADC_MspInit+0x158>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b50:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <HAL_ADC_MspInit+0x158>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b56:	4810      	ldr	r0, [pc, #64]	@ (8000b98 <HAL_ADC_MspInit+0x158>)
 8000b58:	f002 f88e 	bl	8002c78 <HAL_DMA_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_ADC_MspInit+0x126>
    {
      Error_Handler();
 8000b62:	f7ff ff4d 	bl	8000a00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a0b      	ldr	r2, [pc, #44]	@ (8000b98 <HAL_ADC_MspInit+0x158>)
 8000b6a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <HAL_ADC_MspInit+0x158>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2100      	movs	r1, #0
 8000b76:	2012      	movs	r0, #18
 8000b78:	f001 ffd1 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f001 ffe8 	bl	8002b52 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b82:	bf00      	nop
 8000b84:	37e8      	adds	r7, #232	@ 0xe8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40022000 	.word	0x40022000
 8000b90:	58024400 	.word	0x58024400
 8000b94:	58020000 	.word	0x58020000
 8000b98:	240000bc 	.word	0x240000bc
 8000b9c:	40020010 	.word	0x40020010

08000ba0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0b      	ldr	r2, [pc, #44]	@ (8000bdc <HAL_TIM_Base_MspInit+0x3c>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d10e      	bne.n	8000bd0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <HAL_TIM_Base_MspInit+0x40>)
 8000bb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000bb8:	4a09      	ldr	r2, [pc, #36]	@ (8000be0 <HAL_TIM_Base_MspInit+0x40>)
 8000bba:	f043 0302 	orr.w	r3, r3, #2
 8000bbe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000bc2:	4b07      	ldr	r3, [pc, #28]	@ (8000be0 <HAL_TIM_Base_MspInit+0x40>)
 8000bc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000bc8:	f003 0302 	and.w	r3, r3, #2
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8000bd0:	bf00      	nop
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	40010400 	.word	0x40010400
 8000be0:	58024400 	.word	0x58024400

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <NMI_Handler+0x4>

08000bec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3a:	f000 fb3d 	bl	80012b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <DMA1_Stream0_IRQHandler+0x10>)
 8000c4a:	f002 fb71 	bl	8003330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	240000bc 	.word	0x240000bc

08000c58 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c5c:	4802      	ldr	r0, [pc, #8]	@ (8000c68 <ADC_IRQHandler+0x10>)
 8000c5e:	f000 fef9 	bl	8001a54 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	24000058 	.word	0x24000058

08000c6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000c70:	2000      	movs	r0, #0
 8000c72:	f000 f9cf 	bl	8001014 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c80:	4b43      	ldr	r3, [pc, #268]	@ (8000d90 <SystemInit+0x114>)
 8000c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c86:	4a42      	ldr	r2, [pc, #264]	@ (8000d90 <SystemInit+0x114>)
 8000c88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c90:	4b40      	ldr	r3, [pc, #256]	@ (8000d94 <SystemInit+0x118>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 030f 	and.w	r3, r3, #15
 8000c98:	2b06      	cmp	r3, #6
 8000c9a:	d807      	bhi.n	8000cac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c9c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d94 <SystemInit+0x118>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f023 030f 	bic.w	r3, r3, #15
 8000ca4:	4a3b      	ldr	r2, [pc, #236]	@ (8000d94 <SystemInit+0x118>)
 8000ca6:	f043 0307 	orr.w	r3, r3, #7
 8000caa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000cac:	4b3a      	ldr	r3, [pc, #232]	@ (8000d98 <SystemInit+0x11c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a39      	ldr	r2, [pc, #228]	@ (8000d98 <SystemInit+0x11c>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000cb8:	4b37      	ldr	r3, [pc, #220]	@ (8000d98 <SystemInit+0x11c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000cbe:	4b36      	ldr	r3, [pc, #216]	@ (8000d98 <SystemInit+0x11c>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	4935      	ldr	r1, [pc, #212]	@ (8000d98 <SystemInit+0x11c>)
 8000cc4:	4b35      	ldr	r3, [pc, #212]	@ (8000d9c <SystemInit+0x120>)
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cca:	4b32      	ldr	r3, [pc, #200]	@ (8000d94 <SystemInit+0x118>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 0308 	and.w	r3, r3, #8
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d007      	beq.n	8000ce6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8000d94 <SystemInit+0x118>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f023 030f 	bic.w	r3, r3, #15
 8000cde:	4a2d      	ldr	r2, [pc, #180]	@ (8000d94 <SystemInit+0x118>)
 8000ce0:	f043 0307 	orr.w	r3, r3, #7
 8000ce4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ce6:	4b2c      	ldr	r3, [pc, #176]	@ (8000d98 <SystemInit+0x11c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000cec:	4b2a      	ldr	r3, [pc, #168]	@ (8000d98 <SystemInit+0x11c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000cf2:	4b29      	ldr	r3, [pc, #164]	@ (8000d98 <SystemInit+0x11c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000cf8:	4b27      	ldr	r3, [pc, #156]	@ (8000d98 <SystemInit+0x11c>)
 8000cfa:	4a29      	ldr	r2, [pc, #164]	@ (8000da0 <SystemInit+0x124>)
 8000cfc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000cfe:	4b26      	ldr	r3, [pc, #152]	@ (8000d98 <SystemInit+0x11c>)
 8000d00:	4a28      	ldr	r2, [pc, #160]	@ (8000da4 <SystemInit+0x128>)
 8000d02:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d04:	4b24      	ldr	r3, [pc, #144]	@ (8000d98 <SystemInit+0x11c>)
 8000d06:	4a28      	ldr	r2, [pc, #160]	@ (8000da8 <SystemInit+0x12c>)
 8000d08:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d0a:	4b23      	ldr	r3, [pc, #140]	@ (8000d98 <SystemInit+0x11c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d10:	4b21      	ldr	r3, [pc, #132]	@ (8000d98 <SystemInit+0x11c>)
 8000d12:	4a25      	ldr	r2, [pc, #148]	@ (8000da8 <SystemInit+0x12c>)
 8000d14:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d16:	4b20      	ldr	r3, [pc, #128]	@ (8000d98 <SystemInit+0x11c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d98 <SystemInit+0x11c>)
 8000d1e:	4a22      	ldr	r2, [pc, #136]	@ (8000da8 <SystemInit+0x12c>)
 8000d20:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d22:	4b1d      	ldr	r3, [pc, #116]	@ (8000d98 <SystemInit+0x11c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d28:	4b1b      	ldr	r3, [pc, #108]	@ (8000d98 <SystemInit+0x11c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a1a      	ldr	r2, [pc, #104]	@ (8000d98 <SystemInit+0x11c>)
 8000d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d34:	4b18      	ldr	r3, [pc, #96]	@ (8000d98 <SystemInit+0x11c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dac <SystemInit+0x130>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000db0 <SystemInit+0x134>)
 8000d40:	4013      	ands	r3, r2
 8000d42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000d46:	d202      	bcs.n	8000d4e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000d48:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <SystemInit+0x138>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000d4e:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <SystemInit+0x11c>)
 8000d50:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d113      	bne.n	8000d84 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <SystemInit+0x11c>)
 8000d5e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d62:	4a0d      	ldr	r2, [pc, #52]	@ (8000d98 <SystemInit+0x11c>)
 8000d64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d68:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <SystemInit+0x13c>)
 8000d6e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000d72:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000d74:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <SystemInit+0x11c>)
 8000d76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d7a:	4a07      	ldr	r2, [pc, #28]	@ (8000d98 <SystemInit+0x11c>)
 8000d7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d80:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00
 8000d94:	52002000 	.word	0x52002000
 8000d98:	58024400 	.word	0x58024400
 8000d9c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000da0:	02020200 	.word	0x02020200
 8000da4:	01ff0000 	.word	0x01ff0000
 8000da8:	01010280 	.word	0x01010280
 8000dac:	5c001000 	.word	0x5c001000
 8000db0:	ffff0000 	.word	0xffff0000
 8000db4:	51008108 	.word	0x51008108
 8000db8:	52004000 	.word	0x52004000

08000dbc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000dc0:	4b09      	ldr	r3, [pc, #36]	@ (8000de8 <ExitRun0Mode+0x2c>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	4a08      	ldr	r2, [pc, #32]	@ (8000de8 <ExitRun0Mode+0x2c>)
 8000dc6:	f043 0302 	orr.w	r3, r3, #2
 8000dca:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000dcc:	bf00      	nop
 8000dce:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <ExitRun0Mode+0x2c>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d0f9      	beq.n	8000dce <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000dda:	bf00      	nop
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	58024800 	.word	0x58024800

08000dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000dec:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000e28 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000df0:	f7ff ffe4 	bl	8000dbc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000df4:	f7ff ff42 	bl	8000c7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df8:	480c      	ldr	r0, [pc, #48]	@ (8000e2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dfa:	490d      	ldr	r1, [pc, #52]	@ (8000e30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e10:	4c0a      	ldr	r4, [pc, #40]	@ (8000e3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f008 fe3f 	bl	8009aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e22:	f7ff fbd1 	bl	80005c8 <main>
  bx  lr
 8000e26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e28:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e30:	2400002c 	.word	0x2400002c
  ldr r2, =_sidata
 8000e34:	08009b4c 	.word	0x08009b4c
  ldr r2, =_sbss
 8000e38:	2400002c 	.word	0x2400002c
  ldr r4, =_ebss
 8000e3c:	24000220 	.word	0x24000220

08000e40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC3_IRQHandler>
	...

08000e44 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08c      	sub	sp, #48	@ 0x30
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d009      	beq.n	8000e6c <BSP_LED_Init+0x28>
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d006      	beq.n	8000e6c <BSP_LED_Init+0x28>
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d003      	beq.n	8000e6c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000e64:	f06f 0301 	mvn.w	r3, #1
 8000e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e6a:	e055      	b.n	8000f18 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d10f      	bne.n	8000e92 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000e72:	4b2c      	ldr	r3, [pc, #176]	@ (8000f24 <BSP_LED_Init+0xe0>)
 8000e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e78:	4a2a      	ldr	r2, [pc, #168]	@ (8000f24 <BSP_LED_Init+0xe0>)
 8000e7a:	f043 0302 	orr.w	r3, r3, #2
 8000e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e82:	4b28      	ldr	r3, [pc, #160]	@ (8000f24 <BSP_LED_Init+0xe0>)
 8000e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e88:	f003 0302 	and.w	r3, r3, #2
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	e021      	b.n	8000ed6 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d10f      	bne.n	8000eb8 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000e98:	4b22      	ldr	r3, [pc, #136]	@ (8000f24 <BSP_LED_Init+0xe0>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9e:	4a21      	ldr	r2, [pc, #132]	@ (8000f24 <BSP_LED_Init+0xe0>)
 8000ea0:	f043 0310 	orr.w	r3, r3, #16
 8000ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f24 <BSP_LED_Init+0xe0>)
 8000eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eae:	f003 0310 	and.w	r3, r3, #16
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	e00e      	b.n	8000ed6 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <BSP_LED_Init+0xe0>)
 8000eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ebe:	4a19      	ldr	r2, [pc, #100]	@ (8000f24 <BSP_LED_Init+0xe0>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ec8:	4b16      	ldr	r3, [pc, #88]	@ (8000f24 <BSP_LED_Init+0xe0>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	4a13      	ldr	r2, [pc, #76]	@ (8000f28 <BSP_LED_Init+0xe4>)
 8000eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ede:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	4a0f      	ldr	r2, [pc, #60]	@ (8000f2c <BSP_LED_Init+0xe8>)
 8000ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef4:	f107 0218 	add.w	r2, r7, #24
 8000ef8:	4611      	mov	r1, r2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f003 fbe2 	bl	80046c4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	4a0a      	ldr	r2, [pc, #40]	@ (8000f2c <BSP_LED_Init+0xe8>)
 8000f04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	4a07      	ldr	r2, [pc, #28]	@ (8000f28 <BSP_LED_Init+0xe4>)
 8000f0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f10:	2200      	movs	r2, #0
 8000f12:	4619      	mov	r1, r3
 8000f14:	f003 fd86 	bl	8004a24 <HAL_GPIO_WritePin>
  }

  return ret;
 8000f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3730      	adds	r7, #48	@ 0x30
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	58024400 	.word	0x58024400
 8000f28:	08009b10 	.word	0x08009b10
 8000f2c:	2400000c 	.word	0x2400000c

08000f30 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	460a      	mov	r2, r1
 8000f3a:	71fb      	strb	r3, [r7, #7]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000f40:	4b2e      	ldr	r3, [pc, #184]	@ (8000ffc <BSP_PB_Init+0xcc>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f46:	4a2d      	ldr	r2, [pc, #180]	@ (8000ffc <BSP_PB_Init+0xcc>)
 8000f48:	f043 0304 	orr.w	r3, r3, #4
 8000f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f50:	4b2a      	ldr	r3, [pc, #168]	@ (8000ffc <BSP_PB_Init+0xcc>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f56:	f003 0304 	and.w	r3, r3, #4
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000f5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f62:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000f64:	2302      	movs	r3, #2
 8000f66:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000f6c:	79bb      	ldrb	r3, [r7, #6]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10c      	bne.n	8000f8c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	4a21      	ldr	r2, [pc, #132]	@ (8001000 <BSP_PB_Init+0xd0>)
 8000f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7e:	f107 020c 	add.w	r2, r7, #12
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f003 fb9d 	bl	80046c4 <HAL_GPIO_Init>
 8000f8a:	e031      	b.n	8000ff0 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000f8c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f90:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	4a1a      	ldr	r2, [pc, #104]	@ (8001000 <BSP_PB_Init+0xd0>)
 8000f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9a:	f107 020c 	add.w	r2, r7, #12
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f003 fb8f 	bl	80046c4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	4a16      	ldr	r2, [pc, #88]	@ (8001004 <BSP_PB_Init+0xd4>)
 8000fac:	441a      	add	r2, r3
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	4915      	ldr	r1, [pc, #84]	@ (8001008 <BSP_PB_Init+0xd8>)
 8000fb2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4610      	mov	r0, r2
 8000fba:	f003 fb3e 	bl	800463a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	4a10      	ldr	r2, [pc, #64]	@ (8001004 <BSP_PB_Init+0xd4>)
 8000fc4:	1898      	adds	r0, r3, r2
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	4a10      	ldr	r2, [pc, #64]	@ (800100c <BSP_PB_Init+0xdc>)
 8000fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	f003 fb13 	bl	80045fc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000fd6:	2028      	movs	r0, #40	@ 0x28
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	4a0d      	ldr	r2, [pc, #52]	@ (8001010 <BSP_PB_Init+0xe0>)
 8000fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f001 fd9b 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000fe8:	2328      	movs	r3, #40	@ 0x28
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 fdb1 	bl	8002b52 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3720      	adds	r7, #32
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	58024400 	.word	0x58024400
 8001000:	24000018 	.word	0x24000018
 8001004:	24000180 	.word	0x24000180
 8001008:	08009b18 	.word	0x08009b18
 800100c:	2400001c 	.word	0x2400001c
 8001010:	24000020 	.word	0x24000020

08001014 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	4a04      	ldr	r2, [pc, #16]	@ (8001034 <BSP_PB_IRQHandler+0x20>)
 8001024:	4413      	add	r3, r2
 8001026:	4618      	mov	r0, r3
 8001028:	f003 fb1c 	bl	8004664 <HAL_EXTI_IRQHandler>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	24000180 	.word	0x24000180

08001038 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001066:	f06f 0301 	mvn.w	r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	e018      	b.n	80010a0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2294      	movs	r2, #148	@ 0x94
 8001072:	fb02 f303 	mul.w	r3, r2, r3
 8001076:	4a0d      	ldr	r2, [pc, #52]	@ (80010ac <BSP_COM_Init+0x5c>)
 8001078:	4413      	add	r3, r2
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f852 	bl	8001124 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	2294      	movs	r2, #148	@ 0x94
 8001084:	fb02 f303 	mul.w	r3, r2, r3
 8001088:	4a08      	ldr	r2, [pc, #32]	@ (80010ac <BSP_COM_Init+0x5c>)
 800108a:	4413      	add	r3, r2
 800108c:	6839      	ldr	r1, [r7, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f80e 	bl	80010b0 <MX_USART3_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d002      	beq.n	80010a0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800109a:	f06f 0303 	mvn.w	r3, #3
 800109e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80010a0:	68fb      	ldr	r3, [r7, #12]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	24000188 	.word	0x24000188

080010b0 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <MX_USART3_Init+0x60>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	220c      	movs	r2, #12
 80010ce:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	895b      	ldrh	r3, [r3, #10]
 80010d4:	461a      	mov	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	891b      	ldrh	r3, [r3, #8]
 80010e6:	461a      	mov	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	899b      	ldrh	r3, [r3, #12]
 80010f0:	461a      	mov	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80010fc:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f007 fce4 	bl	8008acc <HAL_UART_Init>
 8001104:	4603      	mov	r3, r0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	24000008 	.word	0x24000008

08001114 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001118:	2000      	movs	r0, #0
 800111a:	f7ff ff8d 	bl	8001038 <BSP_PB_Callback>
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	@ 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800112c:	4b27      	ldr	r3, [pc, #156]	@ (80011cc <COM1_MspInit+0xa8>)
 800112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001132:	4a26      	ldr	r2, [pc, #152]	@ (80011cc <COM1_MspInit+0xa8>)
 8001134:	f043 0308 	orr.w	r3, r3, #8
 8001138:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800113c:	4b23      	ldr	r3, [pc, #140]	@ (80011cc <COM1_MspInit+0xa8>)
 800113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800114a:	4b20      	ldr	r3, [pc, #128]	@ (80011cc <COM1_MspInit+0xa8>)
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001150:	4a1e      	ldr	r2, [pc, #120]	@ (80011cc <COM1_MspInit+0xa8>)
 8001152:	f043 0308 	orr.w	r3, r3, #8
 8001156:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800115a:	4b1c      	ldr	r3, [pc, #112]	@ (80011cc <COM1_MspInit+0xa8>)
 800115c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001160:	f003 0308 	and.w	r3, r3, #8
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001168:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <COM1_MspInit+0xa8>)
 800116a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800116e:	4a17      	ldr	r2, [pc, #92]	@ (80011cc <COM1_MspInit+0xa8>)
 8001170:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001174:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001178:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <COM1_MspInit+0xa8>)
 800117a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800117e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001186:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800118a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001190:	2302      	movs	r3, #2
 8001192:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001194:	2301      	movs	r3, #1
 8001196:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001198:	2307      	movs	r3, #7
 800119a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	480b      	ldr	r0, [pc, #44]	@ (80011d0 <COM1_MspInit+0xac>)
 80011a4:	f003 fa8e 	bl	80046c4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80011a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011ac:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80011b2:	2307      	movs	r3, #7
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	4804      	ldr	r0, [pc, #16]	@ (80011d0 <COM1_MspInit+0xac>)
 80011be:	f003 fa81 	bl	80046c4 <HAL_GPIO_Init>
}
 80011c2:	bf00      	nop
 80011c4:	3728      	adds	r7, #40	@ 0x28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	58024400 	.word	0x58024400
 80011d0:	58020c00 	.word	0x58020c00

080011d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011da:	2003      	movs	r0, #3
 80011dc:	f001 fc94 	bl	8002b08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011e0:	f004 fa84 	bl	80056ec <HAL_RCC_GetSysClockFreq>
 80011e4:	4602      	mov	r2, r0
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <HAL_Init+0x68>)
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	0a1b      	lsrs	r3, r3, #8
 80011ec:	f003 030f 	and.w	r3, r3, #15
 80011f0:	4913      	ldr	r1, [pc, #76]	@ (8001240 <HAL_Init+0x6c>)
 80011f2:	5ccb      	ldrb	r3, [r1, r3]
 80011f4:	f003 031f 	and.w	r3, r3, #31
 80011f8:	fa22 f303 	lsr.w	r3, r2, r3
 80011fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011fe:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <HAL_Init+0x68>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	4a0e      	ldr	r2, [pc, #56]	@ (8001240 <HAL_Init+0x6c>)
 8001208:	5cd3      	ldrb	r3, [r2, r3]
 800120a:	f003 031f 	and.w	r3, r3, #31
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	fa22 f303 	lsr.w	r3, r2, r3
 8001214:	4a0b      	ldr	r2, [pc, #44]	@ (8001244 <HAL_Init+0x70>)
 8001216:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001218:	4a0b      	ldr	r2, [pc, #44]	@ (8001248 <HAL_Init+0x74>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800121e:	2000      	movs	r0, #0
 8001220:	f000 f814 	bl	800124c <HAL_InitTick>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e002      	b.n	8001234 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800122e:	f7ff fbed 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	58024400 	.word	0x58024400
 8001240:	08009b00 	.word	0x08009b00
 8001244:	24000004 	.word	0x24000004
 8001248:	24000000 	.word	0x24000000

0800124c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001254:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <HAL_InitTick+0x60>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e021      	b.n	80012a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001260:	4b13      	ldr	r3, [pc, #76]	@ (80012b0 <HAL_InitTick+0x64>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <HAL_InitTick+0x60>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4619      	mov	r1, r3
 800126a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800126e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001272:	fbb2 f3f3 	udiv	r3, r2, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fc79 	bl	8002b6e <HAL_SYSTICK_Config>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e00e      	b.n	80012a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b0f      	cmp	r3, #15
 800128a:	d80a      	bhi.n	80012a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800128c:	2200      	movs	r2, #0
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001294:	f001 fc43 	bl	8002b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001298:	4a06      	ldr	r2, [pc, #24]	@ (80012b4 <HAL_InitTick+0x68>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	e000      	b.n	80012a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	24000028 	.word	0x24000028
 80012b0:	24000000 	.word	0x24000000
 80012b4:	24000024 	.word	0x24000024

080012b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <HAL_IncTick+0x20>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HAL_IncTick+0x24>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	4a04      	ldr	r2, [pc, #16]	@ (80012dc <HAL_IncTick+0x24>)
 80012ca:	6013      	str	r3, [r2, #0]
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	24000028 	.word	0x24000028
 80012dc:	2400021c 	.word	0x2400021c

080012e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return uwTick;
 80012e4:	4b03      	ldr	r3, [pc, #12]	@ (80012f4 <HAL_GetTick+0x14>)
 80012e6:	681b      	ldr	r3, [r3, #0]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	2400021c 	.word	0x2400021c

080012f8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012fc:	4b03      	ldr	r3, [pc, #12]	@ (800130c <HAL_GetREVID+0x14>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	0c1b      	lsrs	r3, r3, #16
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	5c001000 	.word	0x5c001000

08001310 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	431a      	orrs	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	609a      	str	r2, [r3, #8]
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	609a      	str	r2, [r3, #8]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001378:	b480      	push	{r7}
 800137a:	b087      	sub	sp, #28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001388:	2b00      	cmp	r3, #0
 800138a:	d107      	bne.n	800139c <LL_ADC_SetChannelPreselection+0x24>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	0e9b      	lsrs	r3, r3, #26
 8001390:	f003 031f 	and.w	r3, r3, #31
 8001394:	2201      	movs	r2, #1
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	e015      	b.n	80013c8 <LL_ADC_SetChannelPreselection+0x50>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	fa93 f3a3 	rbit	r3, r3
 80013a6:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 80013b2:	2320      	movs	r3, #32
 80013b4:	e003      	b.n	80013be <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	fab3 f383 	clz	r3, r3
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f003 031f 	and.w	r3, r3, #31
 80013c2:	2201      	movs	r2, #1
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	69d2      	ldr	r2, [r2, #28]
 80013cc:	431a      	orrs	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80013d2:	bf00      	nop
 80013d4:	371c      	adds	r7, #28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013de:	b480      	push	{r7}
 80013e0:	b087      	sub	sp, #28
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	60f8      	str	r0, [r7, #12]
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
 80013ea:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3360      	adds	r3, #96	@ 0x60
 80013f0:	461a      	mov	r2, r3
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	430b      	orrs	r3, r1
 800140c:	431a      	orrs	r2, r3
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001412:	bf00      	nop
 8001414:	371c      	adds	r7, #28
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800141e:	b480      	push	{r7}
 8001420:	b085      	sub	sp, #20
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	f003 031f 	and.w	r3, r3, #31
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	431a      	orrs	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	611a      	str	r2, [r3, #16]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001450:	b480      	push	{r7}
 8001452:	b087      	sub	sp, #28
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3360      	adds	r3, #96	@ 0x60
 8001460:	461a      	mov	r2, r3
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	431a      	orrs	r2, r3
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	601a      	str	r2, [r3, #0]
  }
}
 800147a:	bf00      	nop
 800147c:	371c      	adds	r7, #28
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b087      	sub	sp, #28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	3330      	adds	r3, #48	@ 0x30
 80014bc:	461a      	mov	r2, r3
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	f003 030c 	and.w	r3, r3, #12
 80014c8:	4413      	add	r3, r2
 80014ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	f003 031f 	and.w	r3, r3, #31
 80014d6:	211f      	movs	r1, #31
 80014d8:	fa01 f303 	lsl.w	r3, r1, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	401a      	ands	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	0e9b      	lsrs	r3, r3, #26
 80014e4:	f003 011f 	and.w	r1, r3, #31
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	f003 031f 	and.w	r3, r3, #31
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	431a      	orrs	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014f8:	bf00      	nop
 80014fa:	371c      	adds	r7, #28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001510:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800152a:	b480      	push	{r7}
 800152c:	b087      	sub	sp, #28
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	3314      	adds	r3, #20
 800153a:	461a      	mov	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	0e5b      	lsrs	r3, r3, #25
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	4413      	add	r3, r2
 8001548:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	0d1b      	lsrs	r3, r3, #20
 8001552:	f003 031f 	and.w	r3, r3, #31
 8001556:	2107      	movs	r1, #7
 8001558:	fa01 f303 	lsl.w	r3, r1, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	401a      	ands	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	0d1b      	lsrs	r3, r3, #20
 8001564:	f003 031f 	and.w	r3, r3, #31
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	431a      	orrs	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001574:	bf00      	nop
 8001576:	371c      	adds	r7, #28
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001598:	43db      	mvns	r3, r3
 800159a:	401a      	ands	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f003 0318 	and.w	r3, r3, #24
 80015a2:	4908      	ldr	r1, [pc, #32]	@ (80015c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80015a4:	40d9      	lsrs	r1, r3
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	400b      	ands	r3, r1
 80015aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015ae:	431a      	orrs	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80015b6:	bf00      	nop
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	000fffff 	.word	0x000fffff

080015c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 031f 	and.w	r3, r3, #31
}
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	4b04      	ldr	r3, [pc, #16]	@ (8001620 <LL_ADC_DisableDeepPowerDown+0x20>)
 800160e:	4013      	ands	r3, r2
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6093      	str	r3, [r2, #8]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	5fffffc0 	.word	0x5fffffc0

08001624 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001634:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001638:	d101      	bne.n	800163e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	4b05      	ldr	r3, [pc, #20]	@ (8001670 <LL_ADC_EnableInternalRegulator+0x24>)
 800165a:	4013      	ands	r3, r2
 800165c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	6fffffc0 	.word	0x6fffffc0

08001674 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001684:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001688:	d101      	bne.n	800168e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800168a:	2301      	movs	r3, #1
 800168c:	e000      	b.n	8001690 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <LL_ADC_IsEnabled+0x18>
 80016b0:	2301      	movs	r3, #1
 80016b2:	e000      	b.n	80016b6 <LL_ADC_IsEnabled+0x1a>
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d101      	bne.n	80016da <LL_ADC_REG_IsConversionOngoing+0x18>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	d101      	bne.n	8001700 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b089      	sub	sp, #36	@ 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800171c:	2300      	movs	r3, #0
 800171e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e18f      	b.n	8001a4a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001734:	2b00      	cmp	r3, #0
 8001736:	d109      	bne.n	800174c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff f981 	bl	8000a40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff67 	bl	8001624 <LL_ADC_IsDeepPowerDownEnabled>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d004      	beq.n	8001766 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff4d 	bl	8001600 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff ff82 	bl	8001674 <LL_ADC_IsInternalRegulatorEnabled>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d114      	bne.n	80017a0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff ff66 	bl	800164c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001780:	4b87      	ldr	r3, [pc, #540]	@ (80019a0 <HAL_ADC_Init+0x290>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	099b      	lsrs	r3, r3, #6
 8001786:	4a87      	ldr	r2, [pc, #540]	@ (80019a4 <HAL_ADC_Init+0x294>)
 8001788:	fba2 2303 	umull	r2, r3, r2, r3
 800178c:	099b      	lsrs	r3, r3, #6
 800178e:	3301      	adds	r3, #1
 8001790:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001792:	e002      	b.n	800179a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	3b01      	subs	r3, #1
 8001798:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1f9      	bne.n	8001794 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff65 	bl	8001674 <LL_ADC_IsInternalRegulatorEnabled>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10d      	bne.n	80017cc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b4:	f043 0210 	orr.w	r2, r3, #16
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c0:	f043 0201 	orr.w	r2, r3, #1
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff76 	bl	80016c2 <LL_ADC_REG_IsConversionOngoing>
 80017d6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017dc:	f003 0310 	and.w	r3, r3, #16
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f040 8129 	bne.w	8001a38 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f040 8125 	bne.w	8001a38 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017f2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80017f6:	f043 0202 	orr.w	r2, r3, #2
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ff4a 	bl	800169c <LL_ADC_IsEnabled>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d136      	bne.n	800187c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a65      	ldr	r2, [pc, #404]	@ (80019a8 <HAL_ADC_Init+0x298>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d004      	beq.n	8001822 <HAL_ADC_Init+0x112>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a63      	ldr	r2, [pc, #396]	@ (80019ac <HAL_ADC_Init+0x29c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d10e      	bne.n	8001840 <HAL_ADC_Init+0x130>
 8001822:	4861      	ldr	r0, [pc, #388]	@ (80019a8 <HAL_ADC_Init+0x298>)
 8001824:	f7ff ff3a 	bl	800169c <LL_ADC_IsEnabled>
 8001828:	4604      	mov	r4, r0
 800182a:	4860      	ldr	r0, [pc, #384]	@ (80019ac <HAL_ADC_Init+0x29c>)
 800182c:	f7ff ff36 	bl	800169c <LL_ADC_IsEnabled>
 8001830:	4603      	mov	r3, r0
 8001832:	4323      	orrs	r3, r4
 8001834:	2b00      	cmp	r3, #0
 8001836:	bf0c      	ite	eq
 8001838:	2301      	moveq	r3, #1
 800183a:	2300      	movne	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	e008      	b.n	8001852 <HAL_ADC_Init+0x142>
 8001840:	485b      	ldr	r0, [pc, #364]	@ (80019b0 <HAL_ADC_Init+0x2a0>)
 8001842:	f7ff ff2b 	bl	800169c <LL_ADC_IsEnabled>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	bf0c      	ite	eq
 800184c:	2301      	moveq	r3, #1
 800184e:	2300      	movne	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d012      	beq.n	800187c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a53      	ldr	r2, [pc, #332]	@ (80019a8 <HAL_ADC_Init+0x298>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d004      	beq.n	800186a <HAL_ADC_Init+0x15a>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a51      	ldr	r2, [pc, #324]	@ (80019ac <HAL_ADC_Init+0x29c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d101      	bne.n	800186e <HAL_ADC_Init+0x15e>
 800186a:	4a52      	ldr	r2, [pc, #328]	@ (80019b4 <HAL_ADC_Init+0x2a4>)
 800186c:	e000      	b.n	8001870 <HAL_ADC_Init+0x160>
 800186e:	4a52      	ldr	r2, [pc, #328]	@ (80019b8 <HAL_ADC_Init+0x2a8>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4619      	mov	r1, r3
 8001876:	4610      	mov	r0, r2
 8001878:	f7ff fd4a 	bl	8001310 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800187c:	f7ff fd3c 	bl	80012f8 <HAL_GetREVID>
 8001880:	4603      	mov	r3, r0
 8001882:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001886:	4293      	cmp	r3, r2
 8001888:	d914      	bls.n	80018b4 <HAL_ADC_Init+0x1a4>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b10      	cmp	r3, #16
 8001890:	d110      	bne.n	80018b4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	7d5b      	ldrb	r3, [r3, #21]
 8001896:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800189c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80018a2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	7f1b      	ldrb	r3, [r3, #28]
 80018a8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80018aa:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018ac:	f043 030c 	orr.w	r3, r3, #12
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	e00d      	b.n	80018d0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	7d5b      	ldrb	r3, [r3, #21]
 80018b8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018be:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80018c4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7f1b      	ldrb	r3, [r3, #28]
 80018ca:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	7f1b      	ldrb	r3, [r3, #28]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d106      	bne.n	80018e6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	3b01      	subs	r3, #1
 80018de:	045b      	lsls	r3, r3, #17
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d009      	beq.n	8001902 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	4b2c      	ldr	r3, [pc, #176]	@ (80019bc <HAL_ADC_Init+0x2ac>)
 800190a:	4013      	ands	r3, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	69b9      	ldr	r1, [r7, #24]
 8001912:	430b      	orrs	r3, r1
 8001914:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fed1 	bl	80016c2 <LL_ADC_REG_IsConversionOngoing>
 8001920:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fede 	bl	80016e8 <LL_ADC_INJ_IsConversionOngoing>
 800192c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d15f      	bne.n	80019f4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d15c      	bne.n	80019f4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	7d1b      	ldrb	r3, [r3, #20]
 800193e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	4b1c      	ldr	r3, [pc, #112]	@ (80019c0 <HAL_ADC_Init+0x2b0>)
 8001950:	4013      	ands	r3, r2
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	69b9      	ldr	r1, [r7, #24]
 8001958:	430b      	orrs	r3, r1
 800195a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001962:	2b01      	cmp	r3, #1
 8001964:	d130      	bne.n	80019c8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	691a      	ldr	r2, [r3, #16]
 8001972:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <HAL_ADC_Init+0x2b4>)
 8001974:	4013      	ands	r3, r2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800197a:	3a01      	subs	r2, #1
 800197c:	0411      	lsls	r1, r2, #16
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001982:	4311      	orrs	r1, r2
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001988:	4311      	orrs	r1, r2
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800198e:	430a      	orrs	r2, r1
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0201 	orr.w	r2, r2, #1
 800199a:	611a      	str	r2, [r3, #16]
 800199c:	e01c      	b.n	80019d8 <HAL_ADC_Init+0x2c8>
 800199e:	bf00      	nop
 80019a0:	24000000 	.word	0x24000000
 80019a4:	053e2d63 	.word	0x053e2d63
 80019a8:	40022000 	.word	0x40022000
 80019ac:	40022100 	.word	0x40022100
 80019b0:	58026000 	.word	0x58026000
 80019b4:	40022300 	.word	0x40022300
 80019b8:	58026300 	.word	0x58026300
 80019bc:	fff0c003 	.word	0xfff0c003
 80019c0:	ffffbffc 	.word	0xffffbffc
 80019c4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	691a      	ldr	r2, [r3, #16]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0201 	bic.w	r2, r2, #1
 80019d6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 fd78 	bl	80024e4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d10c      	bne.n	8001a16 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	f023 010f 	bic.w	r1, r3, #15
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	1e5a      	subs	r2, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a14:	e007      	b.n	8001a26 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 020f 	bic.w	r2, r2, #15
 8001a24:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a2a:	f023 0303 	bic.w	r3, r3, #3
 8001a2e:	f043 0201 	orr.w	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a36:	e007      	b.n	8001a48 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a3c:	f043 0210 	orr.w	r2, r3, #16
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a48:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	@ 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd90      	pop	{r4, r7, pc}
 8001a52:	bf00      	nop

08001a54 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	@ 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a87      	ldr	r2, [pc, #540]	@ (8001c94 <HAL_ADC_IRQHandler+0x240>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d004      	beq.n	8001a84 <HAL_ADC_IRQHandler+0x30>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a86      	ldr	r2, [pc, #536]	@ (8001c98 <HAL_ADC_IRQHandler+0x244>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d101      	bne.n	8001a88 <HAL_ADC_IRQHandler+0x34>
 8001a84:	4b85      	ldr	r3, [pc, #532]	@ (8001c9c <HAL_ADC_IRQHandler+0x248>)
 8001a86:	e000      	b.n	8001a8a <HAL_ADC_IRQHandler+0x36>
 8001a88:	4b85      	ldr	r3, [pc, #532]	@ (8001ca0 <HAL_ADC_IRQHandler+0x24c>)
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fd9c 	bl	80015c8 <LL_ADC_GetMultimode>
 8001a90:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d017      	beq.n	8001acc <HAL_ADC_IRQHandler+0x78>
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d012      	beq.n	8001acc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aaa:	f003 0310 	and.w	r3, r3, #16
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d105      	bne.n	8001abe <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 fe6a 	bl	8002798 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2202      	movs	r2, #2
 8001aca:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d004      	beq.n	8001ae0 <HAL_ADC_IRQHandler+0x8c>
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10a      	bne.n	8001af6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 8083 	beq.w	8001bf2 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d07d      	beq.n	8001bf2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d105      	bne.n	8001b0e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b06:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fcb7 	bl	8001486 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d062      	beq.n	8001be4 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a5d      	ldr	r2, [pc, #372]	@ (8001c98 <HAL_ADC_IRQHandler+0x244>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d002      	beq.n	8001b2e <HAL_ADC_IRQHandler+0xda>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	e000      	b.n	8001b30 <HAL_ADC_IRQHandler+0xdc>
 8001b2e:	4b59      	ldr	r3, [pc, #356]	@ (8001c94 <HAL_ADC_IRQHandler+0x240>)
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d008      	beq.n	8001b4a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d005      	beq.n	8001b4a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	2b05      	cmp	r3, #5
 8001b42:	d002      	beq.n	8001b4a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	2b09      	cmp	r3, #9
 8001b48:	d104      	bne.n	8001b54 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	623b      	str	r3, [r7, #32]
 8001b52:	e00c      	b.n	8001b6e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a4f      	ldr	r2, [pc, #316]	@ (8001c98 <HAL_ADC_IRQHandler+0x244>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d002      	beq.n	8001b64 <HAL_ADC_IRQHandler+0x110>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	e000      	b.n	8001b66 <HAL_ADC_IRQHandler+0x112>
 8001b64:	4b4b      	ldr	r3, [pc, #300]	@ (8001c94 <HAL_ADC_IRQHandler+0x240>)
 8001b66:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d135      	bne.n	8001be4 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d12e      	bne.n	8001be4 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fd99 	bl	80016c2 <LL_ADC_REG_IsConversionOngoing>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d11a      	bne.n	8001bcc <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 020c 	bic.w	r2, r2, #12
 8001ba4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001baa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d112      	bne.n	8001be4 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc2:	f043 0201 	orr.w	r2, r3, #1
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	655a      	str	r2, [r3, #84]	@ 0x54
 8001bca:	e00b      	b.n	8001be4 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd0:	f043 0210 	orr.w	r2, r3, #16
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bdc:	f043 0201 	orr.w	r2, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f96f 	bl	8001ec8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	220c      	movs	r2, #12
 8001bf0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	f003 0320 	and.w	r3, r3, #32
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d004      	beq.n	8001c06 <HAL_ADC_IRQHandler+0x1b2>
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10b      	bne.n	8001c1e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80a0 	beq.w	8001d52 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 809a 	beq.w	8001d52 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d105      	bne.n	8001c36 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c2e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fc62 	bl	8001504 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001c40:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fc1d 	bl	8001486 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c4c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a11      	ldr	r2, [pc, #68]	@ (8001c98 <HAL_ADC_IRQHandler+0x244>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d002      	beq.n	8001c5e <HAL_ADC_IRQHandler+0x20a>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	e000      	b.n	8001c60 <HAL_ADC_IRQHandler+0x20c>
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c94 <HAL_ADC_IRQHandler+0x240>)
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d008      	beq.n	8001c7a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d005      	beq.n	8001c7a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	2b06      	cmp	r3, #6
 8001c72:	d002      	beq.n	8001c7a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	2b07      	cmp	r3, #7
 8001c78:	d104      	bne.n	8001c84 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	623b      	str	r3, [r7, #32]
 8001c82:	e014      	b.n	8001cae <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a03      	ldr	r2, [pc, #12]	@ (8001c98 <HAL_ADC_IRQHandler+0x244>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00a      	beq.n	8001ca4 <HAL_ADC_IRQHandler+0x250>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	e008      	b.n	8001ca6 <HAL_ADC_IRQHandler+0x252>
 8001c94:	40022000 	.word	0x40022000
 8001c98:	40022100 	.word	0x40022100
 8001c9c:	40022300 	.word	0x40022300
 8001ca0:	58026300 	.word	0x58026300
 8001ca4:	4b84      	ldr	r3, [pc, #528]	@ (8001eb8 <HAL_ADC_IRQHandler+0x464>)
 8001ca6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d047      	beq.n	8001d44 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d007      	beq.n	8001cce <HAL_ADC_IRQHandler+0x27a>
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d03f      	beq.n	8001d44 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d13a      	bne.n	8001d44 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cd8:	2b40      	cmp	r3, #64	@ 0x40
 8001cda:	d133      	bne.n	8001d44 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d12e      	bne.n	8001d44 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fcfc 	bl	80016e8 <LL_ADC_INJ_IsConversionOngoing>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d11a      	bne.n	8001d2c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001d04:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d0a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d112      	bne.n	8001d44 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d22:	f043 0201 	orr.w	r2, r3, #1
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d2a:	e00b      	b.n	8001d44 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d30:	f043 0210 	orr.w	r2, r3, #16
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3c:	f043 0201 	orr.w	r2, r3, #1
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fcff 	bl	8002748 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2260      	movs	r2, #96	@ 0x60
 8001d50:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d011      	beq.n	8001d80 <HAL_ADC_IRQHandler+0x32c>
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00c      	beq.n	8001d80 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d6a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f8b2 	bl	8001edc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2280      	movs	r2, #128	@ 0x80
 8001d7e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d012      	beq.n	8001db0 <HAL_ADC_IRQHandler+0x35c>
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00d      	beq.n	8001db0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d98:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 fce5 	bl	8002770 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d012      	beq.n	8001de0 <HAL_ADC_IRQHandler+0x38c>
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00d      	beq.n	8001de0 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 fcd7 	bl	8002784 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dde:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d043      	beq.n	8001e72 <HAL_ADC_IRQHandler+0x41e>
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	f003 0310 	and.w	r3, r3, #16
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d03e      	beq.n	8001e72 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d102      	bne.n	8001e02 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e00:	e021      	b.n	8001e46 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d015      	beq.n	8001e34 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001eb8 <HAL_ADC_IRQHandler+0x464>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d004      	beq.n	8001e1c <HAL_ADC_IRQHandler+0x3c8>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a29      	ldr	r2, [pc, #164]	@ (8001ebc <HAL_ADC_IRQHandler+0x468>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d101      	bne.n	8001e20 <HAL_ADC_IRQHandler+0x3cc>
 8001e1c:	4b28      	ldr	r3, [pc, #160]	@ (8001ec0 <HAL_ADC_IRQHandler+0x46c>)
 8001e1e:	e000      	b.n	8001e22 <HAL_ADC_IRQHandler+0x3ce>
 8001e20:	4b28      	ldr	r3, [pc, #160]	@ (8001ec4 <HAL_ADC_IRQHandler+0x470>)
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fbde 	bl	80015e4 <LL_ADC_GetMultiDMATransfer>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00b      	beq.n	8001e46 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e32:	e008      	b.n	8001e46 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001e42:	2301      	movs	r3, #1
 8001e44:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d10e      	bne.n	8001e6a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e50:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5c:	f043 0202 	orr.w	r2, r3, #2
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f843 	bl	8001ef0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2210      	movs	r2, #16
 8001e70:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d018      	beq.n	8001eae <HAL_ADC_IRQHandler+0x45a>
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d013      	beq.n	8001eae <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e8a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e96:	f043 0208 	orr.w	r2, r3, #8
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ea6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 fc57 	bl	800275c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001eae:	bf00      	nop
 8001eb0:	3728      	adds	r7, #40	@ 0x28
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40022000 	.word	0x40022000
 8001ebc:	40022100 	.word	0x40022100
 8001ec0:	40022300 	.word	0x40022300
 8001ec4:	58026300 	.word	0x58026300

08001ec8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f04:	b590      	push	{r4, r7, lr}
 8001f06:	b08d      	sub	sp, #52	@ 0x34
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4a65      	ldr	r2, [pc, #404]	@ (80020b4 <HAL_ADC_ConfigChannel+0x1b0>)
 8001f1e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x2a>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e2c7      	b.n	80024be <HAL_ADC_ConfigChannel+0x5ba>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fbc1 	bl	80016c2 <LL_ADC_REG_IsConversionOngoing>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f040 82ac 	bne.w	80024a0 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	db2c      	blt.n	8001faa <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d108      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x6a>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	0e9b      	lsrs	r3, r3, #26
 8001f62:	f003 031f 	and.w	r3, r3, #31
 8001f66:	2201      	movs	r2, #1
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	e016      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x98>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	fa93 f3a3 	rbit	r3, r3
 8001f7a:	613b      	str	r3, [r7, #16]
  return result;
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8001f86:	2320      	movs	r3, #32
 8001f88:	e003      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	fab3 f383 	clz	r3, r3
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	2201      	movs	r2, #1
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	69d1      	ldr	r1, [r2, #28]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	430b      	orrs	r3, r1
 8001fa8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	6859      	ldr	r1, [r3, #4]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	f7ff fa78 	bl	80014ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fb7e 	bl	80016c2 <LL_ADC_REG_IsConversionOngoing>
 8001fc6:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fb8b 	bl	80016e8 <LL_ADC_INJ_IsConversionOngoing>
 8001fd2:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f040 80b8 	bne.w	800214c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f040 80b4 	bne.w	800214c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	6819      	ldr	r1, [r3, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	f7ff fa9a 	bl	800152a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ff6:	4b30      	ldr	r3, [pc, #192]	@ (80020b8 <HAL_ADC_ConfigChannel+0x1b4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001ffe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002002:	d10b      	bne.n	800201c <HAL_ADC_ConfigChannel+0x118>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	e01d      	b.n	8002058 <HAL_ADC_ConfigChannel+0x154>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10b      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x13e>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	089b      	lsrs	r3, r3, #2
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	e00a      	b.n	8002058 <HAL_ADC_ConfigChannel+0x154>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	2b04      	cmp	r3, #4
 8002060:	d02c      	beq.n	80020bc <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6818      	ldr	r0, [r3, #0]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6919      	ldr	r1, [r3, #16]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	f7ff f9b5 	bl	80013de <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	6919      	ldr	r1, [r3, #16]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	7e5b      	ldrb	r3, [r3, #25]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d102      	bne.n	800208a <HAL_ADC_ConfigChannel+0x186>
 8002084:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002088:	e000      	b.n	800208c <HAL_ADC_ConfigChannel+0x188>
 800208a:	2300      	movs	r3, #0
 800208c:	461a      	mov	r2, r3
 800208e:	f7ff f9df 	bl	8001450 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6818      	ldr	r0, [r3, #0]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	6919      	ldr	r1, [r3, #16]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	7e1b      	ldrb	r3, [r3, #24]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d102      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x1a4>
 80020a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020a6:	e000      	b.n	80020aa <HAL_ADC_ConfigChannel+0x1a6>
 80020a8:	2300      	movs	r3, #0
 80020aa:	461a      	mov	r2, r3
 80020ac:	f7ff f9b7 	bl	800141e <LL_ADC_SetDataRightShift>
 80020b0:	e04c      	b.n	800214c <HAL_ADC_ConfigChannel+0x248>
 80020b2:	bf00      	nop
 80020b4:	47ff0000 	.word	0x47ff0000
 80020b8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	069b      	lsls	r3, r3, #26
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d107      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020de:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	069b      	lsls	r3, r3, #26
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d107      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002102:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800210a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	069b      	lsls	r3, r3, #26
 8002114:	429a      	cmp	r2, r3
 8002116:	d107      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002126:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800212e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	069b      	lsls	r3, r3, #26
 8002138:	429a      	cmp	r2, r3
 800213a:	d107      	bne.n	800214c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800214a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff faa3 	bl	800169c <LL_ADC_IsEnabled>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	f040 81aa 	bne.w	80024b2 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	6819      	ldr	r1, [r3, #0]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	461a      	mov	r2, r3
 800216c:	f7ff fa08 	bl	8001580 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4a87      	ldr	r2, [pc, #540]	@ (8002394 <HAL_ADC_ConfigChannel+0x490>)
 8002176:	4293      	cmp	r3, r2
 8002178:	f040 809a 	bne.w	80022b0 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4984      	ldr	r1, [pc, #528]	@ (8002398 <HAL_ADC_ConfigChannel+0x494>)
 8002186:	428b      	cmp	r3, r1
 8002188:	d147      	bne.n	800221a <HAL_ADC_ConfigChannel+0x316>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4983      	ldr	r1, [pc, #524]	@ (800239c <HAL_ADC_ConfigChannel+0x498>)
 8002190:	428b      	cmp	r3, r1
 8002192:	d040      	beq.n	8002216 <HAL_ADC_ConfigChannel+0x312>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4981      	ldr	r1, [pc, #516]	@ (80023a0 <HAL_ADC_ConfigChannel+0x49c>)
 800219a:	428b      	cmp	r3, r1
 800219c:	d039      	beq.n	8002212 <HAL_ADC_ConfigChannel+0x30e>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4980      	ldr	r1, [pc, #512]	@ (80023a4 <HAL_ADC_ConfigChannel+0x4a0>)
 80021a4:	428b      	cmp	r3, r1
 80021a6:	d032      	beq.n	800220e <HAL_ADC_ConfigChannel+0x30a>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	497e      	ldr	r1, [pc, #504]	@ (80023a8 <HAL_ADC_ConfigChannel+0x4a4>)
 80021ae:	428b      	cmp	r3, r1
 80021b0:	d02b      	beq.n	800220a <HAL_ADC_ConfigChannel+0x306>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	497d      	ldr	r1, [pc, #500]	@ (80023ac <HAL_ADC_ConfigChannel+0x4a8>)
 80021b8:	428b      	cmp	r3, r1
 80021ba:	d024      	beq.n	8002206 <HAL_ADC_ConfigChannel+0x302>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	497b      	ldr	r1, [pc, #492]	@ (80023b0 <HAL_ADC_ConfigChannel+0x4ac>)
 80021c2:	428b      	cmp	r3, r1
 80021c4:	d01d      	beq.n	8002202 <HAL_ADC_ConfigChannel+0x2fe>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	497a      	ldr	r1, [pc, #488]	@ (80023b4 <HAL_ADC_ConfigChannel+0x4b0>)
 80021cc:	428b      	cmp	r3, r1
 80021ce:	d016      	beq.n	80021fe <HAL_ADC_ConfigChannel+0x2fa>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4978      	ldr	r1, [pc, #480]	@ (80023b8 <HAL_ADC_ConfigChannel+0x4b4>)
 80021d6:	428b      	cmp	r3, r1
 80021d8:	d00f      	beq.n	80021fa <HAL_ADC_ConfigChannel+0x2f6>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4977      	ldr	r1, [pc, #476]	@ (80023bc <HAL_ADC_ConfigChannel+0x4b8>)
 80021e0:	428b      	cmp	r3, r1
 80021e2:	d008      	beq.n	80021f6 <HAL_ADC_ConfigChannel+0x2f2>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4975      	ldr	r1, [pc, #468]	@ (80023c0 <HAL_ADC_ConfigChannel+0x4bc>)
 80021ea:	428b      	cmp	r3, r1
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x2ee>
 80021ee:	4b75      	ldr	r3, [pc, #468]	@ (80023c4 <HAL_ADC_ConfigChannel+0x4c0>)
 80021f0:	e05a      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x3a4>
 80021f2:	2300      	movs	r3, #0
 80021f4:	e058      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x3a4>
 80021f6:	4b74      	ldr	r3, [pc, #464]	@ (80023c8 <HAL_ADC_ConfigChannel+0x4c4>)
 80021f8:	e056      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x3a4>
 80021fa:	4b74      	ldr	r3, [pc, #464]	@ (80023cc <HAL_ADC_ConfigChannel+0x4c8>)
 80021fc:	e054      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x3a4>
 80021fe:	4b6e      	ldr	r3, [pc, #440]	@ (80023b8 <HAL_ADC_ConfigChannel+0x4b4>)
 8002200:	e052      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x3a4>
 8002202:	4b6c      	ldr	r3, [pc, #432]	@ (80023b4 <HAL_ADC_ConfigChannel+0x4b0>)
 8002204:	e050      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x3a4>
 8002206:	4b72      	ldr	r3, [pc, #456]	@ (80023d0 <HAL_ADC_ConfigChannel+0x4cc>)
 8002208:	e04e      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x3a4>
 800220a:	4b72      	ldr	r3, [pc, #456]	@ (80023d4 <HAL_ADC_ConfigChannel+0x4d0>)
 800220c:	e04c      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x3a4>
 800220e:	4b72      	ldr	r3, [pc, #456]	@ (80023d8 <HAL_ADC_ConfigChannel+0x4d4>)
 8002210:	e04a      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x3a4>
 8002212:	4b72      	ldr	r3, [pc, #456]	@ (80023dc <HAL_ADC_ConfigChannel+0x4d8>)
 8002214:	e048      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x3a4>
 8002216:	2301      	movs	r3, #1
 8002218:	e046      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x3a4>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4970      	ldr	r1, [pc, #448]	@ (80023e0 <HAL_ADC_ConfigChannel+0x4dc>)
 8002220:	428b      	cmp	r3, r1
 8002222:	d140      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x3a2>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	495c      	ldr	r1, [pc, #368]	@ (800239c <HAL_ADC_ConfigChannel+0x498>)
 800222a:	428b      	cmp	r3, r1
 800222c:	d039      	beq.n	80022a2 <HAL_ADC_ConfigChannel+0x39e>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	495b      	ldr	r1, [pc, #364]	@ (80023a0 <HAL_ADC_ConfigChannel+0x49c>)
 8002234:	428b      	cmp	r3, r1
 8002236:	d032      	beq.n	800229e <HAL_ADC_ConfigChannel+0x39a>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4959      	ldr	r1, [pc, #356]	@ (80023a4 <HAL_ADC_ConfigChannel+0x4a0>)
 800223e:	428b      	cmp	r3, r1
 8002240:	d02b      	beq.n	800229a <HAL_ADC_ConfigChannel+0x396>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4958      	ldr	r1, [pc, #352]	@ (80023a8 <HAL_ADC_ConfigChannel+0x4a4>)
 8002248:	428b      	cmp	r3, r1
 800224a:	d024      	beq.n	8002296 <HAL_ADC_ConfigChannel+0x392>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4956      	ldr	r1, [pc, #344]	@ (80023ac <HAL_ADC_ConfigChannel+0x4a8>)
 8002252:	428b      	cmp	r3, r1
 8002254:	d01d      	beq.n	8002292 <HAL_ADC_ConfigChannel+0x38e>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4955      	ldr	r1, [pc, #340]	@ (80023b0 <HAL_ADC_ConfigChannel+0x4ac>)
 800225c:	428b      	cmp	r3, r1
 800225e:	d016      	beq.n	800228e <HAL_ADC_ConfigChannel+0x38a>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4953      	ldr	r1, [pc, #332]	@ (80023b4 <HAL_ADC_ConfigChannel+0x4b0>)
 8002266:	428b      	cmp	r3, r1
 8002268:	d00f      	beq.n	800228a <HAL_ADC_ConfigChannel+0x386>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4952      	ldr	r1, [pc, #328]	@ (80023b8 <HAL_ADC_ConfigChannel+0x4b4>)
 8002270:	428b      	cmp	r3, r1
 8002272:	d008      	beq.n	8002286 <HAL_ADC_ConfigChannel+0x382>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4951      	ldr	r1, [pc, #324]	@ (80023c0 <HAL_ADC_ConfigChannel+0x4bc>)
 800227a:	428b      	cmp	r3, r1
 800227c:	d101      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x37e>
 800227e:	4b51      	ldr	r3, [pc, #324]	@ (80023c4 <HAL_ADC_ConfigChannel+0x4c0>)
 8002280:	e012      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x3a4>
 8002282:	2300      	movs	r3, #0
 8002284:	e010      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x3a4>
 8002286:	4b51      	ldr	r3, [pc, #324]	@ (80023cc <HAL_ADC_ConfigChannel+0x4c8>)
 8002288:	e00e      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x3a4>
 800228a:	4b4b      	ldr	r3, [pc, #300]	@ (80023b8 <HAL_ADC_ConfigChannel+0x4b4>)
 800228c:	e00c      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x3a4>
 800228e:	4b49      	ldr	r3, [pc, #292]	@ (80023b4 <HAL_ADC_ConfigChannel+0x4b0>)
 8002290:	e00a      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x3a4>
 8002292:	4b4f      	ldr	r3, [pc, #316]	@ (80023d0 <HAL_ADC_ConfigChannel+0x4cc>)
 8002294:	e008      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x3a4>
 8002296:	4b4f      	ldr	r3, [pc, #316]	@ (80023d4 <HAL_ADC_ConfigChannel+0x4d0>)
 8002298:	e006      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x3a4>
 800229a:	4b4f      	ldr	r3, [pc, #316]	@ (80023d8 <HAL_ADC_ConfigChannel+0x4d4>)
 800229c:	e004      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x3a4>
 800229e:	4b4f      	ldr	r3, [pc, #316]	@ (80023dc <HAL_ADC_ConfigChannel+0x4d8>)
 80022a0:	e002      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x3a4>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x3a4>
 80022a6:	2300      	movs	r3, #0
 80022a8:	4619      	mov	r1, r3
 80022aa:	4610      	mov	r0, r2
 80022ac:	f7ff f864 	bl	8001378 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f280 80fc 	bge.w	80024b2 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a36      	ldr	r2, [pc, #216]	@ (8002398 <HAL_ADC_ConfigChannel+0x494>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d004      	beq.n	80022ce <HAL_ADC_ConfigChannel+0x3ca>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a45      	ldr	r2, [pc, #276]	@ (80023e0 <HAL_ADC_ConfigChannel+0x4dc>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d101      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x3ce>
 80022ce:	4b45      	ldr	r3, [pc, #276]	@ (80023e4 <HAL_ADC_ConfigChannel+0x4e0>)
 80022d0:	e000      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x3d0>
 80022d2:	4b45      	ldr	r3, [pc, #276]	@ (80023e8 <HAL_ADC_ConfigChannel+0x4e4>)
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff f841 	bl	800135c <LL_ADC_GetCommonPathInternalCh>
 80022da:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002398 <HAL_ADC_ConfigChannel+0x494>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d004      	beq.n	80022f0 <HAL_ADC_ConfigChannel+0x3ec>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a3d      	ldr	r2, [pc, #244]	@ (80023e0 <HAL_ADC_ConfigChannel+0x4dc>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d10e      	bne.n	800230e <HAL_ADC_ConfigChannel+0x40a>
 80022f0:	4829      	ldr	r0, [pc, #164]	@ (8002398 <HAL_ADC_ConfigChannel+0x494>)
 80022f2:	f7ff f9d3 	bl	800169c <LL_ADC_IsEnabled>
 80022f6:	4604      	mov	r4, r0
 80022f8:	4839      	ldr	r0, [pc, #228]	@ (80023e0 <HAL_ADC_ConfigChannel+0x4dc>)
 80022fa:	f7ff f9cf 	bl	800169c <LL_ADC_IsEnabled>
 80022fe:	4603      	mov	r3, r0
 8002300:	4323      	orrs	r3, r4
 8002302:	2b00      	cmp	r3, #0
 8002304:	bf0c      	ite	eq
 8002306:	2301      	moveq	r3, #1
 8002308:	2300      	movne	r3, #0
 800230a:	b2db      	uxtb	r3, r3
 800230c:	e008      	b.n	8002320 <HAL_ADC_ConfigChannel+0x41c>
 800230e:	4837      	ldr	r0, [pc, #220]	@ (80023ec <HAL_ADC_ConfigChannel+0x4e8>)
 8002310:	f7ff f9c4 	bl	800169c <LL_ADC_IsEnabled>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	bf0c      	ite	eq
 800231a:	2301      	moveq	r3, #1
 800231c:	2300      	movne	r3, #0
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80b3 	beq.w	800248c <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a31      	ldr	r2, [pc, #196]	@ (80023f0 <HAL_ADC_ConfigChannel+0x4ec>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d165      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x4f8>
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d160      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a2b      	ldr	r2, [pc, #172]	@ (80023ec <HAL_ADC_ConfigChannel+0x4e8>)
 8002340:	4293      	cmp	r3, r2
 8002342:	f040 80b6 	bne.w	80024b2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a13      	ldr	r2, [pc, #76]	@ (8002398 <HAL_ADC_ConfigChannel+0x494>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d004      	beq.n	800235a <HAL_ADC_ConfigChannel+0x456>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a22      	ldr	r2, [pc, #136]	@ (80023e0 <HAL_ADC_ConfigChannel+0x4dc>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d101      	bne.n	800235e <HAL_ADC_ConfigChannel+0x45a>
 800235a:	4a22      	ldr	r2, [pc, #136]	@ (80023e4 <HAL_ADC_ConfigChannel+0x4e0>)
 800235c:	e000      	b.n	8002360 <HAL_ADC_ConfigChannel+0x45c>
 800235e:	4a22      	ldr	r2, [pc, #136]	@ (80023e8 <HAL_ADC_ConfigChannel+0x4e4>)
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002366:	4619      	mov	r1, r3
 8002368:	4610      	mov	r0, r2
 800236a:	f7fe ffe4 	bl	8001336 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800236e:	4b21      	ldr	r3, [pc, #132]	@ (80023f4 <HAL_ADC_ConfigChannel+0x4f0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	099b      	lsrs	r3, r3, #6
 8002374:	4a20      	ldr	r2, [pc, #128]	@ (80023f8 <HAL_ADC_ConfigChannel+0x4f4>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	099b      	lsrs	r3, r3, #6
 800237c:	3301      	adds	r3, #1
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002382:	e002      	b.n	800238a <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	3b01      	subs	r3, #1
 8002388:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f9      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002390:	e08f      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x5ae>
 8002392:	bf00      	nop
 8002394:	47ff0000 	.word	0x47ff0000
 8002398:	40022000 	.word	0x40022000
 800239c:	04300002 	.word	0x04300002
 80023a0:	08600004 	.word	0x08600004
 80023a4:	0c900008 	.word	0x0c900008
 80023a8:	10c00010 	.word	0x10c00010
 80023ac:	14f00020 	.word	0x14f00020
 80023b0:	2a000400 	.word	0x2a000400
 80023b4:	2e300800 	.word	0x2e300800
 80023b8:	32601000 	.word	0x32601000
 80023bc:	43210000 	.word	0x43210000
 80023c0:	4b840000 	.word	0x4b840000
 80023c4:	4fb80000 	.word	0x4fb80000
 80023c8:	47520000 	.word	0x47520000
 80023cc:	36902000 	.word	0x36902000
 80023d0:	25b00200 	.word	0x25b00200
 80023d4:	21800100 	.word	0x21800100
 80023d8:	1d500080 	.word	0x1d500080
 80023dc:	19200040 	.word	0x19200040
 80023e0:	40022100 	.word	0x40022100
 80023e4:	40022300 	.word	0x40022300
 80023e8:	58026300 	.word	0x58026300
 80023ec:	58026000 	.word	0x58026000
 80023f0:	cb840000 	.word	0xcb840000
 80023f4:	24000000 	.word	0x24000000
 80023f8:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a31      	ldr	r2, [pc, #196]	@ (80024c8 <HAL_ADC_ConfigChannel+0x5c4>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d11e      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x540>
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d119      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a2d      	ldr	r2, [pc, #180]	@ (80024cc <HAL_ADC_ConfigChannel+0x5c8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d14b      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a2c      	ldr	r2, [pc, #176]	@ (80024d0 <HAL_ADC_ConfigChannel+0x5cc>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d004      	beq.n	800242e <HAL_ADC_ConfigChannel+0x52a>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a2a      	ldr	r2, [pc, #168]	@ (80024d4 <HAL_ADC_ConfigChannel+0x5d0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d101      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x52e>
 800242e:	4a2a      	ldr	r2, [pc, #168]	@ (80024d8 <HAL_ADC_ConfigChannel+0x5d4>)
 8002430:	e000      	b.n	8002434 <HAL_ADC_ConfigChannel+0x530>
 8002432:	4a2a      	ldr	r2, [pc, #168]	@ (80024dc <HAL_ADC_ConfigChannel+0x5d8>)
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800243a:	4619      	mov	r1, r3
 800243c:	4610      	mov	r0, r2
 800243e:	f7fe ff7a 	bl	8001336 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002442:	e036      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a25      	ldr	r2, [pc, #148]	@ (80024e0 <HAL_ADC_ConfigChannel+0x5dc>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d131      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x5ae>
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d12c      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a1b      	ldr	r2, [pc, #108]	@ (80024cc <HAL_ADC_ConfigChannel+0x5c8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d127      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a1a      	ldr	r2, [pc, #104]	@ (80024d0 <HAL_ADC_ConfigChannel+0x5cc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d004      	beq.n	8002476 <HAL_ADC_ConfigChannel+0x572>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a18      	ldr	r2, [pc, #96]	@ (80024d4 <HAL_ADC_ConfigChannel+0x5d0>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d101      	bne.n	800247a <HAL_ADC_ConfigChannel+0x576>
 8002476:	4a18      	ldr	r2, [pc, #96]	@ (80024d8 <HAL_ADC_ConfigChannel+0x5d4>)
 8002478:	e000      	b.n	800247c <HAL_ADC_ConfigChannel+0x578>
 800247a:	4a18      	ldr	r2, [pc, #96]	@ (80024dc <HAL_ADC_ConfigChannel+0x5d8>)
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002482:	4619      	mov	r1, r3
 8002484:	4610      	mov	r0, r2
 8002486:	f7fe ff56 	bl	8001336 <LL_ADC_SetCommonPathInternalCh>
 800248a:	e012      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002490:	f043 0220 	orr.w	r2, r3, #32
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800249e:	e008      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a4:	f043 0220 	orr.w	r2, r3, #32
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80024ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3734      	adds	r7, #52	@ 0x34
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd90      	pop	{r4, r7, pc}
 80024c6:	bf00      	nop
 80024c8:	c7520000 	.word	0xc7520000
 80024cc:	58026000 	.word	0x58026000
 80024d0:	40022000 	.word	0x40022000
 80024d4:	40022100 	.word	0x40022100
 80024d8:	40022300 	.word	0x40022300
 80024dc:	58026300 	.word	0x58026300
 80024e0:	cfb80000 	.word	0xcfb80000

080024e4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a7a      	ldr	r2, [pc, #488]	@ (80026dc <ADC_ConfigureBoostMode+0x1f8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d004      	beq.n	8002500 <ADC_ConfigureBoostMode+0x1c>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a79      	ldr	r2, [pc, #484]	@ (80026e0 <ADC_ConfigureBoostMode+0x1fc>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d109      	bne.n	8002514 <ADC_ConfigureBoostMode+0x30>
 8002500:	4b78      	ldr	r3, [pc, #480]	@ (80026e4 <ADC_ConfigureBoostMode+0x200>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf14      	ite	ne
 800250c:	2301      	movne	r3, #1
 800250e:	2300      	moveq	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	e008      	b.n	8002526 <ADC_ConfigureBoostMode+0x42>
 8002514:	4b74      	ldr	r3, [pc, #464]	@ (80026e8 <ADC_ConfigureBoostMode+0x204>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800251c:	2b00      	cmp	r3, #0
 800251e:	bf14      	ite	ne
 8002520:	2301      	movne	r3, #1
 8002522:	2300      	moveq	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d01c      	beq.n	8002564 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800252a:	f003 fa59 	bl	80059e0 <HAL_RCC_GetHCLKFreq>
 800252e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002538:	d010      	beq.n	800255c <ADC_ConfigureBoostMode+0x78>
 800253a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800253e:	d873      	bhi.n	8002628 <ADC_ConfigureBoostMode+0x144>
 8002540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002544:	d002      	beq.n	800254c <ADC_ConfigureBoostMode+0x68>
 8002546:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800254a:	d16d      	bne.n	8002628 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	0c1b      	lsrs	r3, r3, #16
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	fbb2 f3f3 	udiv	r3, r2, r3
 8002558:	60fb      	str	r3, [r7, #12]
        break;
 800255a:	e068      	b.n	800262e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	089b      	lsrs	r3, r3, #2
 8002560:	60fb      	str	r3, [r7, #12]
        break;
 8002562:	e064      	b.n	800262e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002564:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002568:	f04f 0100 	mov.w	r1, #0
 800256c:	f004 fc9e 	bl	8006eac <HAL_RCCEx_GetPeriphCLKFreq>
 8002570:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800257a:	d051      	beq.n	8002620 <ADC_ConfigureBoostMode+0x13c>
 800257c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002580:	d854      	bhi.n	800262c <ADC_ConfigureBoostMode+0x148>
 8002582:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002586:	d047      	beq.n	8002618 <ADC_ConfigureBoostMode+0x134>
 8002588:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800258c:	d84e      	bhi.n	800262c <ADC_ConfigureBoostMode+0x148>
 800258e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002592:	d03d      	beq.n	8002610 <ADC_ConfigureBoostMode+0x12c>
 8002594:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002598:	d848      	bhi.n	800262c <ADC_ConfigureBoostMode+0x148>
 800259a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800259e:	d033      	beq.n	8002608 <ADC_ConfigureBoostMode+0x124>
 80025a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025a4:	d842      	bhi.n	800262c <ADC_ConfigureBoostMode+0x148>
 80025a6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80025aa:	d029      	beq.n	8002600 <ADC_ConfigureBoostMode+0x11c>
 80025ac:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80025b0:	d83c      	bhi.n	800262c <ADC_ConfigureBoostMode+0x148>
 80025b2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80025b6:	d01a      	beq.n	80025ee <ADC_ConfigureBoostMode+0x10a>
 80025b8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80025bc:	d836      	bhi.n	800262c <ADC_ConfigureBoostMode+0x148>
 80025be:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80025c2:	d014      	beq.n	80025ee <ADC_ConfigureBoostMode+0x10a>
 80025c4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80025c8:	d830      	bhi.n	800262c <ADC_ConfigureBoostMode+0x148>
 80025ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025ce:	d00e      	beq.n	80025ee <ADC_ConfigureBoostMode+0x10a>
 80025d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025d4:	d82a      	bhi.n	800262c <ADC_ConfigureBoostMode+0x148>
 80025d6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80025da:	d008      	beq.n	80025ee <ADC_ConfigureBoostMode+0x10a>
 80025dc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80025e0:	d824      	bhi.n	800262c <ADC_ConfigureBoostMode+0x148>
 80025e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80025e6:	d002      	beq.n	80025ee <ADC_ConfigureBoostMode+0x10a>
 80025e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80025ec:	d11e      	bne.n	800262c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	0c9b      	lsrs	r3, r3, #18
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	60fb      	str	r3, [r7, #12]
        break;
 80025fe:	e016      	b.n	800262e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	091b      	lsrs	r3, r3, #4
 8002604:	60fb      	str	r3, [r7, #12]
        break;
 8002606:	e012      	b.n	800262e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	60fb      	str	r3, [r7, #12]
        break;
 800260e:	e00e      	b.n	800262e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	099b      	lsrs	r3, r3, #6
 8002614:	60fb      	str	r3, [r7, #12]
        break;
 8002616:	e00a      	b.n	800262e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	09db      	lsrs	r3, r3, #7
 800261c:	60fb      	str	r3, [r7, #12]
        break;
 800261e:	e006      	b.n	800262e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	0a1b      	lsrs	r3, r3, #8
 8002624:	60fb      	str	r3, [r7, #12]
        break;
 8002626:	e002      	b.n	800262e <ADC_ConfigureBoostMode+0x14a>
        break;
 8002628:	bf00      	nop
 800262a:	e000      	b.n	800262e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800262c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800262e:	f7fe fe63 	bl	80012f8 <HAL_GetREVID>
 8002632:	4603      	mov	r3, r0
 8002634:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002638:	4293      	cmp	r3, r2
 800263a:	d815      	bhi.n	8002668 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4a2b      	ldr	r2, [pc, #172]	@ (80026ec <ADC_ConfigureBoostMode+0x208>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d908      	bls.n	8002656 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002652:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002654:	e03e      	b.n	80026d4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002664:	609a      	str	r2, [r3, #8]
}
 8002666:	e035      	b.n	80026d4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	085b      	lsrs	r3, r3, #1
 800266c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4a1f      	ldr	r2, [pc, #124]	@ (80026f0 <ADC_ConfigureBoostMode+0x20c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d808      	bhi.n	8002688 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002684:	609a      	str	r2, [r3, #8]
}
 8002686:	e025      	b.n	80026d4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4a1a      	ldr	r2, [pc, #104]	@ (80026f4 <ADC_ConfigureBoostMode+0x210>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d80a      	bhi.n	80026a6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026a2:	609a      	str	r2, [r3, #8]
}
 80026a4:	e016      	b.n	80026d4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4a13      	ldr	r2, [pc, #76]	@ (80026f8 <ADC_ConfigureBoostMode+0x214>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d80a      	bhi.n	80026c4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026c0:	609a      	str	r2, [r3, #8]
}
 80026c2:	e007      	b.n	80026d4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80026d2:	609a      	str	r2, [r3, #8]
}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40022000 	.word	0x40022000
 80026e0:	40022100 	.word	0x40022100
 80026e4:	40022300 	.word	0x40022300
 80026e8:	58026300 	.word	0x58026300
 80026ec:	01312d00 	.word	0x01312d00
 80026f0:	005f5e10 	.word	0x005f5e10
 80026f4:	00bebc20 	.word	0x00bebc20
 80026f8:	017d7840 	.word	0x017d7840

080026fc <LL_ADC_IsEnabled>:
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <LL_ADC_IsEnabled+0x18>
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <LL_ADC_IsEnabled+0x1a>
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <LL_ADC_REG_IsConversionOngoing>:
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	2b04      	cmp	r3, #4
 8002734:	d101      	bne.n	800273a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80027ac:	b590      	push	{r4, r7, lr}
 80027ae:	b09f      	sub	sp, #124	@ 0x7c
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e0be      	b.n	8002948 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80027d2:	2300      	movs	r3, #0
 80027d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a5c      	ldr	r2, [pc, #368]	@ (8002950 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d102      	bne.n	80027ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80027e4:	4b5b      	ldr	r3, [pc, #364]	@ (8002954 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	e001      	b.n	80027ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10b      	bne.n	800280c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f8:	f043 0220 	orr.w	r2, r3, #32
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e09d      	b.n	8002948 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff ff87 	bl	8002722 <LL_ADC_REG_IsConversionOngoing>
 8002814:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff ff81 	bl	8002722 <LL_ADC_REG_IsConversionOngoing>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d17f      	bne.n	8002926 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002826:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002828:	2b00      	cmp	r3, #0
 800282a:	d17c      	bne.n	8002926 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a47      	ldr	r2, [pc, #284]	@ (8002950 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d004      	beq.n	8002840 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a46      	ldr	r2, [pc, #280]	@ (8002954 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d101      	bne.n	8002844 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002840:	4b45      	ldr	r3, [pc, #276]	@ (8002958 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002842:	e000      	b.n	8002846 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002844:	4b45      	ldr	r3, [pc, #276]	@ (800295c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002846:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d039      	beq.n	80028c4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002850:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	431a      	orrs	r2, r3
 800285e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002860:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a3a      	ldr	r2, [pc, #232]	@ (8002950 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d004      	beq.n	8002876 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a38      	ldr	r2, [pc, #224]	@ (8002954 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d10e      	bne.n	8002894 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002876:	4836      	ldr	r0, [pc, #216]	@ (8002950 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002878:	f7ff ff40 	bl	80026fc <LL_ADC_IsEnabled>
 800287c:	4604      	mov	r4, r0
 800287e:	4835      	ldr	r0, [pc, #212]	@ (8002954 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002880:	f7ff ff3c 	bl	80026fc <LL_ADC_IsEnabled>
 8002884:	4603      	mov	r3, r0
 8002886:	4323      	orrs	r3, r4
 8002888:	2b00      	cmp	r3, #0
 800288a:	bf0c      	ite	eq
 800288c:	2301      	moveq	r3, #1
 800288e:	2300      	movne	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	e008      	b.n	80028a6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002894:	4832      	ldr	r0, [pc, #200]	@ (8002960 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002896:	f7ff ff31 	bl	80026fc <LL_ADC_IsEnabled>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf0c      	ite	eq
 80028a0:	2301      	moveq	r3, #1
 80028a2:	2300      	movne	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d047      	beq.n	800293a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80028aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002964 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	6811      	ldr	r1, [r2, #0]
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	6892      	ldr	r2, [r2, #8]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	431a      	orrs	r2, r3
 80028be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028c0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028c2:	e03a      	b.n	800293a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80028c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028ce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002950 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d004      	beq.n	80028e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a1d      	ldr	r2, [pc, #116]	@ (8002954 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d10e      	bne.n	8002902 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80028e4:	481a      	ldr	r0, [pc, #104]	@ (8002950 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80028e6:	f7ff ff09 	bl	80026fc <LL_ADC_IsEnabled>
 80028ea:	4604      	mov	r4, r0
 80028ec:	4819      	ldr	r0, [pc, #100]	@ (8002954 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80028ee:	f7ff ff05 	bl	80026fc <LL_ADC_IsEnabled>
 80028f2:	4603      	mov	r3, r0
 80028f4:	4323      	orrs	r3, r4
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	bf0c      	ite	eq
 80028fa:	2301      	moveq	r3, #1
 80028fc:	2300      	movne	r3, #0
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	e008      	b.n	8002914 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002902:	4817      	ldr	r0, [pc, #92]	@ (8002960 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002904:	f7ff fefa 	bl	80026fc <LL_ADC_IsEnabled>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	bf0c      	ite	eq
 800290e:	2301      	moveq	r3, #1
 8002910:	2300      	movne	r3, #0
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d010      	beq.n	800293a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002918:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800291e:	4013      	ands	r3, r2
 8002920:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002922:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002924:	e009      	b.n	800293a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292a:	f043 0220 	orr.w	r2, r3, #32
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002938:	e000      	b.n	800293c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800293a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002944:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002948:	4618      	mov	r0, r3
 800294a:	377c      	adds	r7, #124	@ 0x7c
 800294c:	46bd      	mov	sp, r7
 800294e:	bd90      	pop	{r4, r7, pc}
 8002950:	40022000 	.word	0x40022000
 8002954:	40022100 	.word	0x40022100
 8002958:	40022300 	.word	0x40022300
 800295c:	58026300 	.word	0x58026300
 8002960:	58026000 	.word	0x58026000
 8002964:	fffff0e0 	.word	0xfffff0e0

08002968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002978:	4b0b      	ldr	r3, [pc, #44]	@ (80029a8 <__NVIC_SetPriorityGrouping+0x40>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002984:	4013      	ands	r3, r2
 8002986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002990:	4b06      	ldr	r3, [pc, #24]	@ (80029ac <__NVIC_SetPriorityGrouping+0x44>)
 8002992:	4313      	orrs	r3, r2
 8002994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002996:	4a04      	ldr	r2, [pc, #16]	@ (80029a8 <__NVIC_SetPriorityGrouping+0x40>)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	60d3      	str	r3, [r2, #12]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000ed00 	.word	0xe000ed00
 80029ac:	05fa0000 	.word	0x05fa0000

080029b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b4:	4b04      	ldr	r3, [pc, #16]	@ (80029c8 <__NVIC_GetPriorityGrouping+0x18>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	0a1b      	lsrs	r3, r3, #8
 80029ba:	f003 0307 	and.w	r3, r3, #7
}
 80029be:	4618      	mov	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80029d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	db0b      	blt.n	80029f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029de:	88fb      	ldrh	r3, [r7, #6]
 80029e0:	f003 021f 	and.w	r2, r3, #31
 80029e4:	4907      	ldr	r1, [pc, #28]	@ (8002a04 <__NVIC_EnableIRQ+0x38>)
 80029e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	2001      	movs	r0, #1
 80029ee:	fa00 f202 	lsl.w	r2, r0, r2
 80029f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	e000e100 	.word	0xe000e100

08002a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	6039      	str	r1, [r7, #0]
 8002a12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	db0a      	blt.n	8002a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	490c      	ldr	r1, [pc, #48]	@ (8002a54 <__NVIC_SetPriority+0x4c>)
 8002a22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a26:	0112      	lsls	r2, r2, #4
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a30:	e00a      	b.n	8002a48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4908      	ldr	r1, [pc, #32]	@ (8002a58 <__NVIC_SetPriority+0x50>)
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	3b04      	subs	r3, #4
 8002a40:	0112      	lsls	r2, r2, #4
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	440b      	add	r3, r1
 8002a46:	761a      	strb	r2, [r3, #24]
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000e100 	.word	0xe000e100
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b089      	sub	sp, #36	@ 0x24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f1c3 0307 	rsb	r3, r3, #7
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	bf28      	it	cs
 8002a7a:	2304      	movcs	r3, #4
 8002a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3304      	adds	r3, #4
 8002a82:	2b06      	cmp	r3, #6
 8002a84:	d902      	bls.n	8002a8c <NVIC_EncodePriority+0x30>
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3b03      	subs	r3, #3
 8002a8a:	e000      	b.n	8002a8e <NVIC_EncodePriority+0x32>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002aae:	43d9      	mvns	r1, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab4:	4313      	orrs	r3, r2
         );
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3724      	adds	r7, #36	@ 0x24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ad4:	d301      	bcc.n	8002ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e00f      	b.n	8002afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ada:	4a0a      	ldr	r2, [pc, #40]	@ (8002b04 <SysTick_Config+0x40>)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ae2:	210f      	movs	r1, #15
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ae8:	f7ff ff8e 	bl	8002a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aec:	4b05      	ldr	r3, [pc, #20]	@ (8002b04 <SysTick_Config+0x40>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002af2:	4b04      	ldr	r3, [pc, #16]	@ (8002b04 <SysTick_Config+0x40>)
 8002af4:	2207      	movs	r2, #7
 8002af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	e000e010 	.word	0xe000e010

08002b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff ff29 	bl	8002968 <__NVIC_SetPriorityGrouping>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b086      	sub	sp, #24
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4603      	mov	r3, r0
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b2c:	f7ff ff40 	bl	80029b0 <__NVIC_GetPriorityGrouping>
 8002b30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	6978      	ldr	r0, [r7, #20]
 8002b38:	f7ff ff90 	bl	8002a5c <NVIC_EncodePriority>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b42:	4611      	mov	r1, r2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ff5f 	bl	8002a08 <__NVIC_SetPriority>
}
 8002b4a:	bf00      	nop
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4603      	mov	r3, r0
 8002b5a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff33 	bl	80029cc <__NVIC_EnableIRQ>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff ffa4 	bl	8002ac4 <SysTick_Config>
 8002b7c:	4603      	mov	r3, r0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002b8c:	f3bf 8f5f 	dmb	sy
}
 8002b90:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002b92:	4b07      	ldr	r3, [pc, #28]	@ (8002bb0 <HAL_MPU_Disable+0x28>)
 8002b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b96:	4a06      	ldr	r2, [pc, #24]	@ (8002bb0 <HAL_MPU_Disable+0x28>)
 8002b98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b9c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002b9e:	4b05      	ldr	r3, [pc, #20]	@ (8002bb4 <HAL_MPU_Disable+0x2c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	605a      	str	r2, [r3, #4]
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	e000ed00 	.word	0xe000ed00
 8002bb4:	e000ed90 	.word	0xe000ed90

08002bb8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002bc0:	4a0b      	ldr	r2, [pc, #44]	@ (8002bf0 <HAL_MPU_Enable+0x38>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002bca:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf4 <HAL_MPU_Enable+0x3c>)
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	4a09      	ldr	r2, [pc, #36]	@ (8002bf4 <HAL_MPU_Enable+0x3c>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002bd6:	f3bf 8f4f 	dsb	sy
}
 8002bda:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002bdc:	f3bf 8f6f 	isb	sy
}
 8002be0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	e000ed90 	.word	0xe000ed90
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	785a      	ldrb	r2, [r3, #1]
 8002c04:	4b1b      	ldr	r3, [pc, #108]	@ (8002c74 <HAL_MPU_ConfigRegion+0x7c>)
 8002c06:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002c08:	4b1a      	ldr	r3, [pc, #104]	@ (8002c74 <HAL_MPU_ConfigRegion+0x7c>)
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	4a19      	ldr	r2, [pc, #100]	@ (8002c74 <HAL_MPU_ConfigRegion+0x7c>)
 8002c0e:	f023 0301 	bic.w	r3, r3, #1
 8002c12:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002c14:	4a17      	ldr	r2, [pc, #92]	@ (8002c74 <HAL_MPU_ConfigRegion+0x7c>)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	7b1b      	ldrb	r3, [r3, #12]
 8002c20:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	7adb      	ldrb	r3, [r3, #11]
 8002c26:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	7a9b      	ldrb	r3, [r3, #10]
 8002c2e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	7b5b      	ldrb	r3, [r3, #13]
 8002c36:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	7b9b      	ldrb	r3, [r3, #14]
 8002c3e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	7bdb      	ldrb	r3, [r3, #15]
 8002c46:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	7a5b      	ldrb	r3, [r3, #9]
 8002c4e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	7a1b      	ldrb	r3, [r3, #8]
 8002c56:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c58:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	7812      	ldrb	r2, [r2, #0]
 8002c5e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c60:	4a04      	ldr	r2, [pc, #16]	@ (8002c74 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c62:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c64:	6113      	str	r3, [r2, #16]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	e000ed90 	.word	0xe000ed90

08002c78 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002c80:	f7fe fb2e 	bl	80012e0 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e316      	b.n	80032be <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a66      	ldr	r2, [pc, #408]	@ (8002e30 <HAL_DMA_Init+0x1b8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d04a      	beq.n	8002d30 <HAL_DMA_Init+0xb8>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a65      	ldr	r2, [pc, #404]	@ (8002e34 <HAL_DMA_Init+0x1bc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d045      	beq.n	8002d30 <HAL_DMA_Init+0xb8>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a63      	ldr	r2, [pc, #396]	@ (8002e38 <HAL_DMA_Init+0x1c0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d040      	beq.n	8002d30 <HAL_DMA_Init+0xb8>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a62      	ldr	r2, [pc, #392]	@ (8002e3c <HAL_DMA_Init+0x1c4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d03b      	beq.n	8002d30 <HAL_DMA_Init+0xb8>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a60      	ldr	r2, [pc, #384]	@ (8002e40 <HAL_DMA_Init+0x1c8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d036      	beq.n	8002d30 <HAL_DMA_Init+0xb8>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a5f      	ldr	r2, [pc, #380]	@ (8002e44 <HAL_DMA_Init+0x1cc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d031      	beq.n	8002d30 <HAL_DMA_Init+0xb8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a5d      	ldr	r2, [pc, #372]	@ (8002e48 <HAL_DMA_Init+0x1d0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d02c      	beq.n	8002d30 <HAL_DMA_Init+0xb8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a5c      	ldr	r2, [pc, #368]	@ (8002e4c <HAL_DMA_Init+0x1d4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d027      	beq.n	8002d30 <HAL_DMA_Init+0xb8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a5a      	ldr	r2, [pc, #360]	@ (8002e50 <HAL_DMA_Init+0x1d8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d022      	beq.n	8002d30 <HAL_DMA_Init+0xb8>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a59      	ldr	r2, [pc, #356]	@ (8002e54 <HAL_DMA_Init+0x1dc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d01d      	beq.n	8002d30 <HAL_DMA_Init+0xb8>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a57      	ldr	r2, [pc, #348]	@ (8002e58 <HAL_DMA_Init+0x1e0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d018      	beq.n	8002d30 <HAL_DMA_Init+0xb8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a56      	ldr	r2, [pc, #344]	@ (8002e5c <HAL_DMA_Init+0x1e4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d013      	beq.n	8002d30 <HAL_DMA_Init+0xb8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a54      	ldr	r2, [pc, #336]	@ (8002e60 <HAL_DMA_Init+0x1e8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00e      	beq.n	8002d30 <HAL_DMA_Init+0xb8>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a53      	ldr	r2, [pc, #332]	@ (8002e64 <HAL_DMA_Init+0x1ec>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d009      	beq.n	8002d30 <HAL_DMA_Init+0xb8>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a51      	ldr	r2, [pc, #324]	@ (8002e68 <HAL_DMA_Init+0x1f0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d004      	beq.n	8002d30 <HAL_DMA_Init+0xb8>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a50      	ldr	r2, [pc, #320]	@ (8002e6c <HAL_DMA_Init+0x1f4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d101      	bne.n	8002d34 <HAL_DMA_Init+0xbc>
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <HAL_DMA_Init+0xbe>
 8002d34:	2300      	movs	r3, #0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 813b 	beq.w	8002fb2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a37      	ldr	r2, [pc, #220]	@ (8002e30 <HAL_DMA_Init+0x1b8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d04a      	beq.n	8002dec <HAL_DMA_Init+0x174>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a36      	ldr	r2, [pc, #216]	@ (8002e34 <HAL_DMA_Init+0x1bc>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d045      	beq.n	8002dec <HAL_DMA_Init+0x174>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a34      	ldr	r2, [pc, #208]	@ (8002e38 <HAL_DMA_Init+0x1c0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d040      	beq.n	8002dec <HAL_DMA_Init+0x174>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a33      	ldr	r2, [pc, #204]	@ (8002e3c <HAL_DMA_Init+0x1c4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d03b      	beq.n	8002dec <HAL_DMA_Init+0x174>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a31      	ldr	r2, [pc, #196]	@ (8002e40 <HAL_DMA_Init+0x1c8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d036      	beq.n	8002dec <HAL_DMA_Init+0x174>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a30      	ldr	r2, [pc, #192]	@ (8002e44 <HAL_DMA_Init+0x1cc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d031      	beq.n	8002dec <HAL_DMA_Init+0x174>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a2e      	ldr	r2, [pc, #184]	@ (8002e48 <HAL_DMA_Init+0x1d0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d02c      	beq.n	8002dec <HAL_DMA_Init+0x174>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a2d      	ldr	r2, [pc, #180]	@ (8002e4c <HAL_DMA_Init+0x1d4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d027      	beq.n	8002dec <HAL_DMA_Init+0x174>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a2b      	ldr	r2, [pc, #172]	@ (8002e50 <HAL_DMA_Init+0x1d8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d022      	beq.n	8002dec <HAL_DMA_Init+0x174>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a2a      	ldr	r2, [pc, #168]	@ (8002e54 <HAL_DMA_Init+0x1dc>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d01d      	beq.n	8002dec <HAL_DMA_Init+0x174>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a28      	ldr	r2, [pc, #160]	@ (8002e58 <HAL_DMA_Init+0x1e0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d018      	beq.n	8002dec <HAL_DMA_Init+0x174>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a27      	ldr	r2, [pc, #156]	@ (8002e5c <HAL_DMA_Init+0x1e4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d013      	beq.n	8002dec <HAL_DMA_Init+0x174>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a25      	ldr	r2, [pc, #148]	@ (8002e60 <HAL_DMA_Init+0x1e8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00e      	beq.n	8002dec <HAL_DMA_Init+0x174>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a24      	ldr	r2, [pc, #144]	@ (8002e64 <HAL_DMA_Init+0x1ec>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d009      	beq.n	8002dec <HAL_DMA_Init+0x174>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a22      	ldr	r2, [pc, #136]	@ (8002e68 <HAL_DMA_Init+0x1f0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d004      	beq.n	8002dec <HAL_DMA_Init+0x174>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a21      	ldr	r2, [pc, #132]	@ (8002e6c <HAL_DMA_Init+0x1f4>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d108      	bne.n	8002dfe <HAL_DMA_Init+0x186>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0201 	bic.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	e007      	b.n	8002e0e <HAL_DMA_Init+0x196>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0201 	bic.w	r2, r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e0e:	e02f      	b.n	8002e70 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e10:	f7fe fa66 	bl	80012e0 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b05      	cmp	r3, #5
 8002e1c:	d928      	bls.n	8002e70 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2220      	movs	r2, #32
 8002e22:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2203      	movs	r2, #3
 8002e28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e246      	b.n	80032be <HAL_DMA_Init+0x646>
 8002e30:	40020010 	.word	0x40020010
 8002e34:	40020028 	.word	0x40020028
 8002e38:	40020040 	.word	0x40020040
 8002e3c:	40020058 	.word	0x40020058
 8002e40:	40020070 	.word	0x40020070
 8002e44:	40020088 	.word	0x40020088
 8002e48:	400200a0 	.word	0x400200a0
 8002e4c:	400200b8 	.word	0x400200b8
 8002e50:	40020410 	.word	0x40020410
 8002e54:	40020428 	.word	0x40020428
 8002e58:	40020440 	.word	0x40020440
 8002e5c:	40020458 	.word	0x40020458
 8002e60:	40020470 	.word	0x40020470
 8002e64:	40020488 	.word	0x40020488
 8002e68:	400204a0 	.word	0x400204a0
 8002e6c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1c8      	bne.n	8002e10 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	4b83      	ldr	r3, [pc, #524]	@ (8003098 <HAL_DMA_Init+0x420>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002e96:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d107      	bne.n	8002ed4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002ed4:	4b71      	ldr	r3, [pc, #452]	@ (800309c <HAL_DMA_Init+0x424>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4b71      	ldr	r3, [pc, #452]	@ (80030a0 <HAL_DMA_Init+0x428>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ee0:	d328      	bcc.n	8002f34 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b28      	cmp	r3, #40	@ 0x28
 8002ee8:	d903      	bls.n	8002ef2 <HAL_DMA_Init+0x27a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ef0:	d917      	bls.n	8002f22 <HAL_DMA_Init+0x2aa>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b3e      	cmp	r3, #62	@ 0x3e
 8002ef8:	d903      	bls.n	8002f02 <HAL_DMA_Init+0x28a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b42      	cmp	r3, #66	@ 0x42
 8002f00:	d90f      	bls.n	8002f22 <HAL_DMA_Init+0x2aa>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b46      	cmp	r3, #70	@ 0x46
 8002f08:	d903      	bls.n	8002f12 <HAL_DMA_Init+0x29a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b48      	cmp	r3, #72	@ 0x48
 8002f10:	d907      	bls.n	8002f22 <HAL_DMA_Init+0x2aa>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b4e      	cmp	r3, #78	@ 0x4e
 8002f18:	d905      	bls.n	8002f26 <HAL_DMA_Init+0x2ae>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b52      	cmp	r3, #82	@ 0x52
 8002f20:	d801      	bhi.n	8002f26 <HAL_DMA_Init+0x2ae>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <HAL_DMA_Init+0x2b0>
 8002f26:	2300      	movs	r3, #0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f32:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f023 0307 	bic.w	r3, r3, #7
 8002f4a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d117      	bne.n	8002f8e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00e      	beq.n	8002f8e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f001 f9b9 	bl	80042e8 <DMA_CheckFifoParam>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2240      	movs	r2, #64	@ 0x40
 8002f80:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e197      	b.n	80032be <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f001 f8f4 	bl	8004184 <DMA_CalcBaseAndBitshift>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa4:	f003 031f 	and.w	r3, r3, #31
 8002fa8:	223f      	movs	r2, #63	@ 0x3f
 8002faa:	409a      	lsls	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	e0cd      	b.n	800314e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a3b      	ldr	r2, [pc, #236]	@ (80030a4 <HAL_DMA_Init+0x42c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d022      	beq.n	8003002 <HAL_DMA_Init+0x38a>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a39      	ldr	r2, [pc, #228]	@ (80030a8 <HAL_DMA_Init+0x430>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d01d      	beq.n	8003002 <HAL_DMA_Init+0x38a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a38      	ldr	r2, [pc, #224]	@ (80030ac <HAL_DMA_Init+0x434>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d018      	beq.n	8003002 <HAL_DMA_Init+0x38a>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a36      	ldr	r2, [pc, #216]	@ (80030b0 <HAL_DMA_Init+0x438>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d013      	beq.n	8003002 <HAL_DMA_Init+0x38a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a35      	ldr	r2, [pc, #212]	@ (80030b4 <HAL_DMA_Init+0x43c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00e      	beq.n	8003002 <HAL_DMA_Init+0x38a>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a33      	ldr	r2, [pc, #204]	@ (80030b8 <HAL_DMA_Init+0x440>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d009      	beq.n	8003002 <HAL_DMA_Init+0x38a>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a32      	ldr	r2, [pc, #200]	@ (80030bc <HAL_DMA_Init+0x444>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d004      	beq.n	8003002 <HAL_DMA_Init+0x38a>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a30      	ldr	r2, [pc, #192]	@ (80030c0 <HAL_DMA_Init+0x448>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d101      	bne.n	8003006 <HAL_DMA_Init+0x38e>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <HAL_DMA_Init+0x390>
 8003006:	2300      	movs	r3, #0
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 8097 	beq.w	800313c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a24      	ldr	r2, [pc, #144]	@ (80030a4 <HAL_DMA_Init+0x42c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d021      	beq.n	800305c <HAL_DMA_Init+0x3e4>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a22      	ldr	r2, [pc, #136]	@ (80030a8 <HAL_DMA_Init+0x430>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d01c      	beq.n	800305c <HAL_DMA_Init+0x3e4>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a21      	ldr	r2, [pc, #132]	@ (80030ac <HAL_DMA_Init+0x434>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d017      	beq.n	800305c <HAL_DMA_Init+0x3e4>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a1f      	ldr	r2, [pc, #124]	@ (80030b0 <HAL_DMA_Init+0x438>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d012      	beq.n	800305c <HAL_DMA_Init+0x3e4>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a1e      	ldr	r2, [pc, #120]	@ (80030b4 <HAL_DMA_Init+0x43c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d00d      	beq.n	800305c <HAL_DMA_Init+0x3e4>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1c      	ldr	r2, [pc, #112]	@ (80030b8 <HAL_DMA_Init+0x440>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d008      	beq.n	800305c <HAL_DMA_Init+0x3e4>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1b      	ldr	r2, [pc, #108]	@ (80030bc <HAL_DMA_Init+0x444>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d003      	beq.n	800305c <HAL_DMA_Init+0x3e4>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a19      	ldr	r2, [pc, #100]	@ (80030c0 <HAL_DMA_Init+0x448>)
 800305a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	4b13      	ldr	r3, [pc, #76]	@ (80030c4 <HAL_DMA_Init+0x44c>)
 8003078:	4013      	ands	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b40      	cmp	r3, #64	@ 0x40
 8003082:	d021      	beq.n	80030c8 <HAL_DMA_Init+0x450>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b80      	cmp	r3, #128	@ 0x80
 800308a:	d102      	bne.n	8003092 <HAL_DMA_Init+0x41a>
 800308c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003090:	e01b      	b.n	80030ca <HAL_DMA_Init+0x452>
 8003092:	2300      	movs	r3, #0
 8003094:	e019      	b.n	80030ca <HAL_DMA_Init+0x452>
 8003096:	bf00      	nop
 8003098:	fe10803f 	.word	0xfe10803f
 800309c:	5c001000 	.word	0x5c001000
 80030a0:	ffff0000 	.word	0xffff0000
 80030a4:	58025408 	.word	0x58025408
 80030a8:	5802541c 	.word	0x5802541c
 80030ac:	58025430 	.word	0x58025430
 80030b0:	58025444 	.word	0x58025444
 80030b4:	58025458 	.word	0x58025458
 80030b8:	5802546c 	.word	0x5802546c
 80030bc:	58025480 	.word	0x58025480
 80030c0:	58025494 	.word	0x58025494
 80030c4:	fffe000f 	.word	0xfffe000f
 80030c8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68d2      	ldr	r2, [r2, #12]
 80030ce:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80030d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80030e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80030e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030f8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	461a      	mov	r2, r3
 800310e:	4b6e      	ldr	r3, [pc, #440]	@ (80032c8 <HAL_DMA_Init+0x650>)
 8003110:	4413      	add	r3, r2
 8003112:	4a6e      	ldr	r2, [pc, #440]	@ (80032cc <HAL_DMA_Init+0x654>)
 8003114:	fba2 2303 	umull	r2, r3, r2, r3
 8003118:	091b      	lsrs	r3, r3, #4
 800311a:	009a      	lsls	r2, r3, #2
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f001 f82f 	bl	8004184 <DMA_CalcBaseAndBitshift>
 8003126:	4603      	mov	r3, r0
 8003128:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312e:	f003 031f 	and.w	r3, r3, #31
 8003132:	2201      	movs	r2, #1
 8003134:	409a      	lsls	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	e008      	b.n	800314e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2240      	movs	r2, #64	@ 0x40
 8003140:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2203      	movs	r2, #3
 8003146:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e0b7      	b.n	80032be <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a5f      	ldr	r2, [pc, #380]	@ (80032d0 <HAL_DMA_Init+0x658>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d072      	beq.n	800323e <HAL_DMA_Init+0x5c6>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a5d      	ldr	r2, [pc, #372]	@ (80032d4 <HAL_DMA_Init+0x65c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d06d      	beq.n	800323e <HAL_DMA_Init+0x5c6>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a5c      	ldr	r2, [pc, #368]	@ (80032d8 <HAL_DMA_Init+0x660>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d068      	beq.n	800323e <HAL_DMA_Init+0x5c6>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a5a      	ldr	r2, [pc, #360]	@ (80032dc <HAL_DMA_Init+0x664>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d063      	beq.n	800323e <HAL_DMA_Init+0x5c6>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a59      	ldr	r2, [pc, #356]	@ (80032e0 <HAL_DMA_Init+0x668>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d05e      	beq.n	800323e <HAL_DMA_Init+0x5c6>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a57      	ldr	r2, [pc, #348]	@ (80032e4 <HAL_DMA_Init+0x66c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d059      	beq.n	800323e <HAL_DMA_Init+0x5c6>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a56      	ldr	r2, [pc, #344]	@ (80032e8 <HAL_DMA_Init+0x670>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d054      	beq.n	800323e <HAL_DMA_Init+0x5c6>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a54      	ldr	r2, [pc, #336]	@ (80032ec <HAL_DMA_Init+0x674>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d04f      	beq.n	800323e <HAL_DMA_Init+0x5c6>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a53      	ldr	r2, [pc, #332]	@ (80032f0 <HAL_DMA_Init+0x678>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d04a      	beq.n	800323e <HAL_DMA_Init+0x5c6>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a51      	ldr	r2, [pc, #324]	@ (80032f4 <HAL_DMA_Init+0x67c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d045      	beq.n	800323e <HAL_DMA_Init+0x5c6>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a50      	ldr	r2, [pc, #320]	@ (80032f8 <HAL_DMA_Init+0x680>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d040      	beq.n	800323e <HAL_DMA_Init+0x5c6>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a4e      	ldr	r2, [pc, #312]	@ (80032fc <HAL_DMA_Init+0x684>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d03b      	beq.n	800323e <HAL_DMA_Init+0x5c6>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a4d      	ldr	r2, [pc, #308]	@ (8003300 <HAL_DMA_Init+0x688>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d036      	beq.n	800323e <HAL_DMA_Init+0x5c6>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003304 <HAL_DMA_Init+0x68c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d031      	beq.n	800323e <HAL_DMA_Init+0x5c6>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a4a      	ldr	r2, [pc, #296]	@ (8003308 <HAL_DMA_Init+0x690>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d02c      	beq.n	800323e <HAL_DMA_Init+0x5c6>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a48      	ldr	r2, [pc, #288]	@ (800330c <HAL_DMA_Init+0x694>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d027      	beq.n	800323e <HAL_DMA_Init+0x5c6>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a47      	ldr	r2, [pc, #284]	@ (8003310 <HAL_DMA_Init+0x698>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d022      	beq.n	800323e <HAL_DMA_Init+0x5c6>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a45      	ldr	r2, [pc, #276]	@ (8003314 <HAL_DMA_Init+0x69c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d01d      	beq.n	800323e <HAL_DMA_Init+0x5c6>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a44      	ldr	r2, [pc, #272]	@ (8003318 <HAL_DMA_Init+0x6a0>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d018      	beq.n	800323e <HAL_DMA_Init+0x5c6>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a42      	ldr	r2, [pc, #264]	@ (800331c <HAL_DMA_Init+0x6a4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d013      	beq.n	800323e <HAL_DMA_Init+0x5c6>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a41      	ldr	r2, [pc, #260]	@ (8003320 <HAL_DMA_Init+0x6a8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00e      	beq.n	800323e <HAL_DMA_Init+0x5c6>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a3f      	ldr	r2, [pc, #252]	@ (8003324 <HAL_DMA_Init+0x6ac>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d009      	beq.n	800323e <HAL_DMA_Init+0x5c6>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a3e      	ldr	r2, [pc, #248]	@ (8003328 <HAL_DMA_Init+0x6b0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d004      	beq.n	800323e <HAL_DMA_Init+0x5c6>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a3c      	ldr	r2, [pc, #240]	@ (800332c <HAL_DMA_Init+0x6b4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d101      	bne.n	8003242 <HAL_DMA_Init+0x5ca>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <HAL_DMA_Init+0x5cc>
 8003242:	2300      	movs	r3, #0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d032      	beq.n	80032ae <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f001 f8c9 	bl	80043e0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2b80      	cmp	r3, #128	@ 0x80
 8003254:	d102      	bne.n	800325c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003270:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d010      	beq.n	800329c <HAL_DMA_Init+0x624>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b08      	cmp	r3, #8
 8003280:	d80c      	bhi.n	800329c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f001 f946 	bl	8004514 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	e008      	b.n	80032ae <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	a7fdabf8 	.word	0xa7fdabf8
 80032cc:	cccccccd 	.word	0xcccccccd
 80032d0:	40020010 	.word	0x40020010
 80032d4:	40020028 	.word	0x40020028
 80032d8:	40020040 	.word	0x40020040
 80032dc:	40020058 	.word	0x40020058
 80032e0:	40020070 	.word	0x40020070
 80032e4:	40020088 	.word	0x40020088
 80032e8:	400200a0 	.word	0x400200a0
 80032ec:	400200b8 	.word	0x400200b8
 80032f0:	40020410 	.word	0x40020410
 80032f4:	40020428 	.word	0x40020428
 80032f8:	40020440 	.word	0x40020440
 80032fc:	40020458 	.word	0x40020458
 8003300:	40020470 	.word	0x40020470
 8003304:	40020488 	.word	0x40020488
 8003308:	400204a0 	.word	0x400204a0
 800330c:	400204b8 	.word	0x400204b8
 8003310:	58025408 	.word	0x58025408
 8003314:	5802541c 	.word	0x5802541c
 8003318:	58025430 	.word	0x58025430
 800331c:	58025444 	.word	0x58025444
 8003320:	58025458 	.word	0x58025458
 8003324:	5802546c 	.word	0x5802546c
 8003328:	58025480 	.word	0x58025480
 800332c:	58025494 	.word	0x58025494

08003330 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08a      	sub	sp, #40	@ 0x28
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800333c:	4b67      	ldr	r3, [pc, #412]	@ (80034dc <HAL_DMA_IRQHandler+0x1ac>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a67      	ldr	r2, [pc, #412]	@ (80034e0 <HAL_DMA_IRQHandler+0x1b0>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	0a9b      	lsrs	r3, r3, #10
 8003348:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003354:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a5f      	ldr	r2, [pc, #380]	@ (80034e4 <HAL_DMA_IRQHandler+0x1b4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d04a      	beq.n	8003402 <HAL_DMA_IRQHandler+0xd2>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a5d      	ldr	r2, [pc, #372]	@ (80034e8 <HAL_DMA_IRQHandler+0x1b8>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d045      	beq.n	8003402 <HAL_DMA_IRQHandler+0xd2>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a5c      	ldr	r2, [pc, #368]	@ (80034ec <HAL_DMA_IRQHandler+0x1bc>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d040      	beq.n	8003402 <HAL_DMA_IRQHandler+0xd2>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a5a      	ldr	r2, [pc, #360]	@ (80034f0 <HAL_DMA_IRQHandler+0x1c0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d03b      	beq.n	8003402 <HAL_DMA_IRQHandler+0xd2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a59      	ldr	r2, [pc, #356]	@ (80034f4 <HAL_DMA_IRQHandler+0x1c4>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d036      	beq.n	8003402 <HAL_DMA_IRQHandler+0xd2>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a57      	ldr	r2, [pc, #348]	@ (80034f8 <HAL_DMA_IRQHandler+0x1c8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d031      	beq.n	8003402 <HAL_DMA_IRQHandler+0xd2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a56      	ldr	r2, [pc, #344]	@ (80034fc <HAL_DMA_IRQHandler+0x1cc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d02c      	beq.n	8003402 <HAL_DMA_IRQHandler+0xd2>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a54      	ldr	r2, [pc, #336]	@ (8003500 <HAL_DMA_IRQHandler+0x1d0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d027      	beq.n	8003402 <HAL_DMA_IRQHandler+0xd2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a53      	ldr	r2, [pc, #332]	@ (8003504 <HAL_DMA_IRQHandler+0x1d4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d022      	beq.n	8003402 <HAL_DMA_IRQHandler+0xd2>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a51      	ldr	r2, [pc, #324]	@ (8003508 <HAL_DMA_IRQHandler+0x1d8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d01d      	beq.n	8003402 <HAL_DMA_IRQHandler+0xd2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a50      	ldr	r2, [pc, #320]	@ (800350c <HAL_DMA_IRQHandler+0x1dc>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d018      	beq.n	8003402 <HAL_DMA_IRQHandler+0xd2>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a4e      	ldr	r2, [pc, #312]	@ (8003510 <HAL_DMA_IRQHandler+0x1e0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <HAL_DMA_IRQHandler+0xd2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a4d      	ldr	r2, [pc, #308]	@ (8003514 <HAL_DMA_IRQHandler+0x1e4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d00e      	beq.n	8003402 <HAL_DMA_IRQHandler+0xd2>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003518 <HAL_DMA_IRQHandler+0x1e8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d009      	beq.n	8003402 <HAL_DMA_IRQHandler+0xd2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a4a      	ldr	r2, [pc, #296]	@ (800351c <HAL_DMA_IRQHandler+0x1ec>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d004      	beq.n	8003402 <HAL_DMA_IRQHandler+0xd2>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a48      	ldr	r2, [pc, #288]	@ (8003520 <HAL_DMA_IRQHandler+0x1f0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d101      	bne.n	8003406 <HAL_DMA_IRQHandler+0xd6>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <HAL_DMA_IRQHandler+0xd8>
 8003406:	2300      	movs	r3, #0
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 842b 	beq.w	8003c64 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003412:	f003 031f 	and.w	r3, r3, #31
 8003416:	2208      	movs	r2, #8
 8003418:	409a      	lsls	r2, r3
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 80a2 	beq.w	8003568 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a2e      	ldr	r2, [pc, #184]	@ (80034e4 <HAL_DMA_IRQHandler+0x1b4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d04a      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x194>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a2d      	ldr	r2, [pc, #180]	@ (80034e8 <HAL_DMA_IRQHandler+0x1b8>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d045      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x194>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a2b      	ldr	r2, [pc, #172]	@ (80034ec <HAL_DMA_IRQHandler+0x1bc>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d040      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x194>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a2a      	ldr	r2, [pc, #168]	@ (80034f0 <HAL_DMA_IRQHandler+0x1c0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d03b      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x194>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a28      	ldr	r2, [pc, #160]	@ (80034f4 <HAL_DMA_IRQHandler+0x1c4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d036      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x194>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a27      	ldr	r2, [pc, #156]	@ (80034f8 <HAL_DMA_IRQHandler+0x1c8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d031      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x194>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a25      	ldr	r2, [pc, #148]	@ (80034fc <HAL_DMA_IRQHandler+0x1cc>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d02c      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x194>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a24      	ldr	r2, [pc, #144]	@ (8003500 <HAL_DMA_IRQHandler+0x1d0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d027      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x194>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a22      	ldr	r2, [pc, #136]	@ (8003504 <HAL_DMA_IRQHandler+0x1d4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d022      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x194>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a21      	ldr	r2, [pc, #132]	@ (8003508 <HAL_DMA_IRQHandler+0x1d8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d01d      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x194>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a1f      	ldr	r2, [pc, #124]	@ (800350c <HAL_DMA_IRQHandler+0x1dc>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d018      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x194>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a1e      	ldr	r2, [pc, #120]	@ (8003510 <HAL_DMA_IRQHandler+0x1e0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d013      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x194>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003514 <HAL_DMA_IRQHandler+0x1e4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00e      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x194>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003518 <HAL_DMA_IRQHandler+0x1e8>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d009      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x194>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a19      	ldr	r2, [pc, #100]	@ (800351c <HAL_DMA_IRQHandler+0x1ec>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d004      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x194>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a18      	ldr	r2, [pc, #96]	@ (8003520 <HAL_DMA_IRQHandler+0x1f0>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d12f      	bne.n	8003524 <HAL_DMA_IRQHandler+0x1f4>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0304 	and.w	r3, r3, #4
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	bf14      	ite	ne
 80034d2:	2301      	movne	r3, #1
 80034d4:	2300      	moveq	r3, #0
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	e02e      	b.n	8003538 <HAL_DMA_IRQHandler+0x208>
 80034da:	bf00      	nop
 80034dc:	24000000 	.word	0x24000000
 80034e0:	1b4e81b5 	.word	0x1b4e81b5
 80034e4:	40020010 	.word	0x40020010
 80034e8:	40020028 	.word	0x40020028
 80034ec:	40020040 	.word	0x40020040
 80034f0:	40020058 	.word	0x40020058
 80034f4:	40020070 	.word	0x40020070
 80034f8:	40020088 	.word	0x40020088
 80034fc:	400200a0 	.word	0x400200a0
 8003500:	400200b8 	.word	0x400200b8
 8003504:	40020410 	.word	0x40020410
 8003508:	40020428 	.word	0x40020428
 800350c:	40020440 	.word	0x40020440
 8003510:	40020458 	.word	0x40020458
 8003514:	40020470 	.word	0x40020470
 8003518:	40020488 	.word	0x40020488
 800351c:	400204a0 	.word	0x400204a0
 8003520:	400204b8 	.word	0x400204b8
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	bf14      	ite	ne
 8003532:	2301      	movne	r3, #1
 8003534:	2300      	moveq	r3, #0
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d015      	beq.n	8003568 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0204 	bic.w	r2, r2, #4
 800354a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003550:	f003 031f 	and.w	r3, r3, #31
 8003554:	2208      	movs	r2, #8
 8003556:	409a      	lsls	r2, r3
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003560:	f043 0201 	orr.w	r2, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800356c:	f003 031f 	and.w	r3, r3, #31
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	fa22 f303 	lsr.w	r3, r2, r3
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d06e      	beq.n	800365c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a69      	ldr	r2, [pc, #420]	@ (8003728 <HAL_DMA_IRQHandler+0x3f8>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d04a      	beq.n	800361e <HAL_DMA_IRQHandler+0x2ee>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a67      	ldr	r2, [pc, #412]	@ (800372c <HAL_DMA_IRQHandler+0x3fc>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d045      	beq.n	800361e <HAL_DMA_IRQHandler+0x2ee>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a66      	ldr	r2, [pc, #408]	@ (8003730 <HAL_DMA_IRQHandler+0x400>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d040      	beq.n	800361e <HAL_DMA_IRQHandler+0x2ee>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a64      	ldr	r2, [pc, #400]	@ (8003734 <HAL_DMA_IRQHandler+0x404>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d03b      	beq.n	800361e <HAL_DMA_IRQHandler+0x2ee>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a63      	ldr	r2, [pc, #396]	@ (8003738 <HAL_DMA_IRQHandler+0x408>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d036      	beq.n	800361e <HAL_DMA_IRQHandler+0x2ee>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a61      	ldr	r2, [pc, #388]	@ (800373c <HAL_DMA_IRQHandler+0x40c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d031      	beq.n	800361e <HAL_DMA_IRQHandler+0x2ee>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a60      	ldr	r2, [pc, #384]	@ (8003740 <HAL_DMA_IRQHandler+0x410>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d02c      	beq.n	800361e <HAL_DMA_IRQHandler+0x2ee>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a5e      	ldr	r2, [pc, #376]	@ (8003744 <HAL_DMA_IRQHandler+0x414>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d027      	beq.n	800361e <HAL_DMA_IRQHandler+0x2ee>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a5d      	ldr	r2, [pc, #372]	@ (8003748 <HAL_DMA_IRQHandler+0x418>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d022      	beq.n	800361e <HAL_DMA_IRQHandler+0x2ee>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a5b      	ldr	r2, [pc, #364]	@ (800374c <HAL_DMA_IRQHandler+0x41c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d01d      	beq.n	800361e <HAL_DMA_IRQHandler+0x2ee>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a5a      	ldr	r2, [pc, #360]	@ (8003750 <HAL_DMA_IRQHandler+0x420>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d018      	beq.n	800361e <HAL_DMA_IRQHandler+0x2ee>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a58      	ldr	r2, [pc, #352]	@ (8003754 <HAL_DMA_IRQHandler+0x424>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d013      	beq.n	800361e <HAL_DMA_IRQHandler+0x2ee>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a57      	ldr	r2, [pc, #348]	@ (8003758 <HAL_DMA_IRQHandler+0x428>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00e      	beq.n	800361e <HAL_DMA_IRQHandler+0x2ee>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a55      	ldr	r2, [pc, #340]	@ (800375c <HAL_DMA_IRQHandler+0x42c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d009      	beq.n	800361e <HAL_DMA_IRQHandler+0x2ee>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a54      	ldr	r2, [pc, #336]	@ (8003760 <HAL_DMA_IRQHandler+0x430>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d004      	beq.n	800361e <HAL_DMA_IRQHandler+0x2ee>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a52      	ldr	r2, [pc, #328]	@ (8003764 <HAL_DMA_IRQHandler+0x434>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d10a      	bne.n	8003634 <HAL_DMA_IRQHandler+0x304>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003628:	2b00      	cmp	r3, #0
 800362a:	bf14      	ite	ne
 800362c:	2301      	movne	r3, #1
 800362e:	2300      	moveq	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	e003      	b.n	800363c <HAL_DMA_IRQHandler+0x30c>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2300      	movs	r3, #0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00d      	beq.n	800365c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003644:	f003 031f 	and.w	r3, r3, #31
 8003648:	2201      	movs	r2, #1
 800364a:	409a      	lsls	r2, r3
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003654:	f043 0202 	orr.w	r2, r3, #2
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003660:	f003 031f 	and.w	r3, r3, #31
 8003664:	2204      	movs	r2, #4
 8003666:	409a      	lsls	r2, r3
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	4013      	ands	r3, r2
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 808f 	beq.w	8003790 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a2c      	ldr	r2, [pc, #176]	@ (8003728 <HAL_DMA_IRQHandler+0x3f8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d04a      	beq.n	8003712 <HAL_DMA_IRQHandler+0x3e2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a2a      	ldr	r2, [pc, #168]	@ (800372c <HAL_DMA_IRQHandler+0x3fc>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d045      	beq.n	8003712 <HAL_DMA_IRQHandler+0x3e2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a29      	ldr	r2, [pc, #164]	@ (8003730 <HAL_DMA_IRQHandler+0x400>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d040      	beq.n	8003712 <HAL_DMA_IRQHandler+0x3e2>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a27      	ldr	r2, [pc, #156]	@ (8003734 <HAL_DMA_IRQHandler+0x404>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d03b      	beq.n	8003712 <HAL_DMA_IRQHandler+0x3e2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a26      	ldr	r2, [pc, #152]	@ (8003738 <HAL_DMA_IRQHandler+0x408>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d036      	beq.n	8003712 <HAL_DMA_IRQHandler+0x3e2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a24      	ldr	r2, [pc, #144]	@ (800373c <HAL_DMA_IRQHandler+0x40c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d031      	beq.n	8003712 <HAL_DMA_IRQHandler+0x3e2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a23      	ldr	r2, [pc, #140]	@ (8003740 <HAL_DMA_IRQHandler+0x410>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d02c      	beq.n	8003712 <HAL_DMA_IRQHandler+0x3e2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a21      	ldr	r2, [pc, #132]	@ (8003744 <HAL_DMA_IRQHandler+0x414>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d027      	beq.n	8003712 <HAL_DMA_IRQHandler+0x3e2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a20      	ldr	r2, [pc, #128]	@ (8003748 <HAL_DMA_IRQHandler+0x418>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d022      	beq.n	8003712 <HAL_DMA_IRQHandler+0x3e2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a1e      	ldr	r2, [pc, #120]	@ (800374c <HAL_DMA_IRQHandler+0x41c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d01d      	beq.n	8003712 <HAL_DMA_IRQHandler+0x3e2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a1d      	ldr	r2, [pc, #116]	@ (8003750 <HAL_DMA_IRQHandler+0x420>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d018      	beq.n	8003712 <HAL_DMA_IRQHandler+0x3e2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003754 <HAL_DMA_IRQHandler+0x424>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d013      	beq.n	8003712 <HAL_DMA_IRQHandler+0x3e2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1a      	ldr	r2, [pc, #104]	@ (8003758 <HAL_DMA_IRQHandler+0x428>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00e      	beq.n	8003712 <HAL_DMA_IRQHandler+0x3e2>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a18      	ldr	r2, [pc, #96]	@ (800375c <HAL_DMA_IRQHandler+0x42c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d009      	beq.n	8003712 <HAL_DMA_IRQHandler+0x3e2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a17      	ldr	r2, [pc, #92]	@ (8003760 <HAL_DMA_IRQHandler+0x430>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d004      	beq.n	8003712 <HAL_DMA_IRQHandler+0x3e2>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a15      	ldr	r2, [pc, #84]	@ (8003764 <HAL_DMA_IRQHandler+0x434>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d12a      	bne.n	8003768 <HAL_DMA_IRQHandler+0x438>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	bf14      	ite	ne
 8003720:	2301      	movne	r3, #1
 8003722:	2300      	moveq	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	e023      	b.n	8003770 <HAL_DMA_IRQHandler+0x440>
 8003728:	40020010 	.word	0x40020010
 800372c:	40020028 	.word	0x40020028
 8003730:	40020040 	.word	0x40020040
 8003734:	40020058 	.word	0x40020058
 8003738:	40020070 	.word	0x40020070
 800373c:	40020088 	.word	0x40020088
 8003740:	400200a0 	.word	0x400200a0
 8003744:	400200b8 	.word	0x400200b8
 8003748:	40020410 	.word	0x40020410
 800374c:	40020428 	.word	0x40020428
 8003750:	40020440 	.word	0x40020440
 8003754:	40020458 	.word	0x40020458
 8003758:	40020470 	.word	0x40020470
 800375c:	40020488 	.word	0x40020488
 8003760:	400204a0 	.word	0x400204a0
 8003764:	400204b8 	.word	0x400204b8
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2300      	movs	r3, #0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00d      	beq.n	8003790 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	2204      	movs	r2, #4
 800377e:	409a      	lsls	r2, r3
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003788:	f043 0204 	orr.w	r2, r3, #4
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003794:	f003 031f 	and.w	r3, r3, #31
 8003798:	2210      	movs	r2, #16
 800379a:	409a      	lsls	r2, r3
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	4013      	ands	r3, r2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80a6 	beq.w	80038f2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a85      	ldr	r2, [pc, #532]	@ (80039c0 <HAL_DMA_IRQHandler+0x690>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d04a      	beq.n	8003846 <HAL_DMA_IRQHandler+0x516>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a83      	ldr	r2, [pc, #524]	@ (80039c4 <HAL_DMA_IRQHandler+0x694>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d045      	beq.n	8003846 <HAL_DMA_IRQHandler+0x516>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a82      	ldr	r2, [pc, #520]	@ (80039c8 <HAL_DMA_IRQHandler+0x698>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d040      	beq.n	8003846 <HAL_DMA_IRQHandler+0x516>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a80      	ldr	r2, [pc, #512]	@ (80039cc <HAL_DMA_IRQHandler+0x69c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d03b      	beq.n	8003846 <HAL_DMA_IRQHandler+0x516>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a7f      	ldr	r2, [pc, #508]	@ (80039d0 <HAL_DMA_IRQHandler+0x6a0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d036      	beq.n	8003846 <HAL_DMA_IRQHandler+0x516>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a7d      	ldr	r2, [pc, #500]	@ (80039d4 <HAL_DMA_IRQHandler+0x6a4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d031      	beq.n	8003846 <HAL_DMA_IRQHandler+0x516>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a7c      	ldr	r2, [pc, #496]	@ (80039d8 <HAL_DMA_IRQHandler+0x6a8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d02c      	beq.n	8003846 <HAL_DMA_IRQHandler+0x516>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a7a      	ldr	r2, [pc, #488]	@ (80039dc <HAL_DMA_IRQHandler+0x6ac>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d027      	beq.n	8003846 <HAL_DMA_IRQHandler+0x516>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a79      	ldr	r2, [pc, #484]	@ (80039e0 <HAL_DMA_IRQHandler+0x6b0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d022      	beq.n	8003846 <HAL_DMA_IRQHandler+0x516>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a77      	ldr	r2, [pc, #476]	@ (80039e4 <HAL_DMA_IRQHandler+0x6b4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d01d      	beq.n	8003846 <HAL_DMA_IRQHandler+0x516>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a76      	ldr	r2, [pc, #472]	@ (80039e8 <HAL_DMA_IRQHandler+0x6b8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d018      	beq.n	8003846 <HAL_DMA_IRQHandler+0x516>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a74      	ldr	r2, [pc, #464]	@ (80039ec <HAL_DMA_IRQHandler+0x6bc>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d013      	beq.n	8003846 <HAL_DMA_IRQHandler+0x516>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a73      	ldr	r2, [pc, #460]	@ (80039f0 <HAL_DMA_IRQHandler+0x6c0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d00e      	beq.n	8003846 <HAL_DMA_IRQHandler+0x516>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a71      	ldr	r2, [pc, #452]	@ (80039f4 <HAL_DMA_IRQHandler+0x6c4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d009      	beq.n	8003846 <HAL_DMA_IRQHandler+0x516>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a70      	ldr	r2, [pc, #448]	@ (80039f8 <HAL_DMA_IRQHandler+0x6c8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d004      	beq.n	8003846 <HAL_DMA_IRQHandler+0x516>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a6e      	ldr	r2, [pc, #440]	@ (80039fc <HAL_DMA_IRQHandler+0x6cc>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d10a      	bne.n	800385c <HAL_DMA_IRQHandler+0x52c>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	bf14      	ite	ne
 8003854:	2301      	movne	r3, #1
 8003856:	2300      	moveq	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	e009      	b.n	8003870 <HAL_DMA_IRQHandler+0x540>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	2b00      	cmp	r3, #0
 8003868:	bf14      	ite	ne
 800386a:	2301      	movne	r3, #1
 800386c:	2300      	moveq	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d03e      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	2210      	movs	r2, #16
 800387e:	409a      	lsls	r2, r3
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d018      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d108      	bne.n	80038b2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d024      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	4798      	blx	r3
 80038b0:	e01f      	b.n	80038f2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d01b      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	4798      	blx	r3
 80038c2:	e016      	b.n	80038f2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d107      	bne.n	80038e2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0208 	bic.w	r2, r2, #8
 80038e0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f6:	f003 031f 	and.w	r3, r3, #31
 80038fa:	2220      	movs	r2, #32
 80038fc:	409a      	lsls	r2, r3
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 8110 	beq.w	8003b28 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a2c      	ldr	r2, [pc, #176]	@ (80039c0 <HAL_DMA_IRQHandler+0x690>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d04a      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x678>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a2b      	ldr	r2, [pc, #172]	@ (80039c4 <HAL_DMA_IRQHandler+0x694>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d045      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x678>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a29      	ldr	r2, [pc, #164]	@ (80039c8 <HAL_DMA_IRQHandler+0x698>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d040      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x678>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a28      	ldr	r2, [pc, #160]	@ (80039cc <HAL_DMA_IRQHandler+0x69c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d03b      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x678>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a26      	ldr	r2, [pc, #152]	@ (80039d0 <HAL_DMA_IRQHandler+0x6a0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d036      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x678>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a25      	ldr	r2, [pc, #148]	@ (80039d4 <HAL_DMA_IRQHandler+0x6a4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d031      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x678>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a23      	ldr	r2, [pc, #140]	@ (80039d8 <HAL_DMA_IRQHandler+0x6a8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d02c      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x678>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a22      	ldr	r2, [pc, #136]	@ (80039dc <HAL_DMA_IRQHandler+0x6ac>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d027      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x678>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a20      	ldr	r2, [pc, #128]	@ (80039e0 <HAL_DMA_IRQHandler+0x6b0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d022      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x678>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a1f      	ldr	r2, [pc, #124]	@ (80039e4 <HAL_DMA_IRQHandler+0x6b4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d01d      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x678>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1d      	ldr	r2, [pc, #116]	@ (80039e8 <HAL_DMA_IRQHandler+0x6b8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d018      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x678>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a1c      	ldr	r2, [pc, #112]	@ (80039ec <HAL_DMA_IRQHandler+0x6bc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d013      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x678>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1a      	ldr	r2, [pc, #104]	@ (80039f0 <HAL_DMA_IRQHandler+0x6c0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00e      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x678>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a19      	ldr	r2, [pc, #100]	@ (80039f4 <HAL_DMA_IRQHandler+0x6c4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d009      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x678>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a17      	ldr	r2, [pc, #92]	@ (80039f8 <HAL_DMA_IRQHandler+0x6c8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d004      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x678>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a16      	ldr	r2, [pc, #88]	@ (80039fc <HAL_DMA_IRQHandler+0x6cc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d12b      	bne.n	8003a00 <HAL_DMA_IRQHandler+0x6d0>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0310 	and.w	r3, r3, #16
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	bf14      	ite	ne
 80039b6:	2301      	movne	r3, #1
 80039b8:	2300      	moveq	r3, #0
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	e02a      	b.n	8003a14 <HAL_DMA_IRQHandler+0x6e4>
 80039be:	bf00      	nop
 80039c0:	40020010 	.word	0x40020010
 80039c4:	40020028 	.word	0x40020028
 80039c8:	40020040 	.word	0x40020040
 80039cc:	40020058 	.word	0x40020058
 80039d0:	40020070 	.word	0x40020070
 80039d4:	40020088 	.word	0x40020088
 80039d8:	400200a0 	.word	0x400200a0
 80039dc:	400200b8 	.word	0x400200b8
 80039e0:	40020410 	.word	0x40020410
 80039e4:	40020428 	.word	0x40020428
 80039e8:	40020440 	.word	0x40020440
 80039ec:	40020458 	.word	0x40020458
 80039f0:	40020470 	.word	0x40020470
 80039f4:	40020488 	.word	0x40020488
 80039f8:	400204a0 	.word	0x400204a0
 80039fc:	400204b8 	.word	0x400204b8
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	bf14      	ite	ne
 8003a0e:	2301      	movne	r3, #1
 8003a10:	2300      	moveq	r3, #0
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 8087 	beq.w	8003b28 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a1e:	f003 031f 	and.w	r3, r3, #31
 8003a22:	2220      	movs	r2, #32
 8003a24:	409a      	lsls	r2, r3
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d139      	bne.n	8003aaa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0216 	bic.w	r2, r2, #22
 8003a44:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695a      	ldr	r2, [r3, #20]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a54:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d103      	bne.n	8003a66 <HAL_DMA_IRQHandler+0x736>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d007      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0208 	bic.w	r2, r2, #8
 8003a74:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7a:	f003 031f 	and.w	r3, r3, #31
 8003a7e:	223f      	movs	r2, #63	@ 0x3f
 8003a80:	409a      	lsls	r2, r3
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 834a 	beq.w	8004134 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	4798      	blx	r3
          }
          return;
 8003aa8:	e344      	b.n	8004134 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d018      	beq.n	8003aea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d108      	bne.n	8003ad8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d02c      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	4798      	blx	r3
 8003ad6:	e027      	b.n	8003b28 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d023      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	4798      	blx	r3
 8003ae8:	e01e      	b.n	8003b28 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10f      	bne.n	8003b18 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0210 	bic.w	r2, r2, #16
 8003b06:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 8306 	beq.w	800413e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 8088 	beq.w	8003c50 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2204      	movs	r2, #4
 8003b44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a7a      	ldr	r2, [pc, #488]	@ (8003d38 <HAL_DMA_IRQHandler+0xa08>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d04a      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x8b8>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a79      	ldr	r2, [pc, #484]	@ (8003d3c <HAL_DMA_IRQHandler+0xa0c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d045      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x8b8>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a77      	ldr	r2, [pc, #476]	@ (8003d40 <HAL_DMA_IRQHandler+0xa10>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d040      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x8b8>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a76      	ldr	r2, [pc, #472]	@ (8003d44 <HAL_DMA_IRQHandler+0xa14>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d03b      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x8b8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a74      	ldr	r2, [pc, #464]	@ (8003d48 <HAL_DMA_IRQHandler+0xa18>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d036      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x8b8>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a73      	ldr	r2, [pc, #460]	@ (8003d4c <HAL_DMA_IRQHandler+0xa1c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d031      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x8b8>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a71      	ldr	r2, [pc, #452]	@ (8003d50 <HAL_DMA_IRQHandler+0xa20>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d02c      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x8b8>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a70      	ldr	r2, [pc, #448]	@ (8003d54 <HAL_DMA_IRQHandler+0xa24>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d027      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x8b8>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a6e      	ldr	r2, [pc, #440]	@ (8003d58 <HAL_DMA_IRQHandler+0xa28>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d022      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x8b8>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a6d      	ldr	r2, [pc, #436]	@ (8003d5c <HAL_DMA_IRQHandler+0xa2c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d01d      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x8b8>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a6b      	ldr	r2, [pc, #428]	@ (8003d60 <HAL_DMA_IRQHandler+0xa30>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d018      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x8b8>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a6a      	ldr	r2, [pc, #424]	@ (8003d64 <HAL_DMA_IRQHandler+0xa34>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d013      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x8b8>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a68      	ldr	r2, [pc, #416]	@ (8003d68 <HAL_DMA_IRQHandler+0xa38>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00e      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x8b8>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a67      	ldr	r2, [pc, #412]	@ (8003d6c <HAL_DMA_IRQHandler+0xa3c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d009      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x8b8>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a65      	ldr	r2, [pc, #404]	@ (8003d70 <HAL_DMA_IRQHandler+0xa40>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d004      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x8b8>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a64      	ldr	r2, [pc, #400]	@ (8003d74 <HAL_DMA_IRQHandler+0xa44>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d108      	bne.n	8003bfa <HAL_DMA_IRQHandler+0x8ca>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0201 	bic.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	e007      	b.n	8003c0a <HAL_DMA_IRQHandler+0x8da>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0201 	bic.w	r2, r2, #1
 8003c08:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d307      	bcc.n	8003c26 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1f2      	bne.n	8003c0a <HAL_DMA_IRQHandler+0x8da>
 8003c24:	e000      	b.n	8003c28 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003c26:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d004      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2203      	movs	r2, #3
 8003c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003c3e:	e003      	b.n	8003c48 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 8272 	beq.w	800413e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	4798      	blx	r3
 8003c62:	e26c      	b.n	800413e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a43      	ldr	r2, [pc, #268]	@ (8003d78 <HAL_DMA_IRQHandler+0xa48>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d022      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x984>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a42      	ldr	r2, [pc, #264]	@ (8003d7c <HAL_DMA_IRQHandler+0xa4c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d01d      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x984>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a40      	ldr	r2, [pc, #256]	@ (8003d80 <HAL_DMA_IRQHandler+0xa50>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d018      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x984>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a3f      	ldr	r2, [pc, #252]	@ (8003d84 <HAL_DMA_IRQHandler+0xa54>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d013      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x984>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a3d      	ldr	r2, [pc, #244]	@ (8003d88 <HAL_DMA_IRQHandler+0xa58>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00e      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x984>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a3c      	ldr	r2, [pc, #240]	@ (8003d8c <HAL_DMA_IRQHandler+0xa5c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d009      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x984>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a3a      	ldr	r2, [pc, #232]	@ (8003d90 <HAL_DMA_IRQHandler+0xa60>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d004      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x984>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a39      	ldr	r2, [pc, #228]	@ (8003d94 <HAL_DMA_IRQHandler+0xa64>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d101      	bne.n	8003cb8 <HAL_DMA_IRQHandler+0x988>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e000      	b.n	8003cba <HAL_DMA_IRQHandler+0x98a>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 823f 	beq.w	800413e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	2204      	movs	r2, #4
 8003cd2:	409a      	lsls	r2, r3
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 80cd 	beq.w	8003e78 <HAL_DMA_IRQHandler+0xb48>
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 80c7 	beq.w	8003e78 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cee:	f003 031f 	and.w	r3, r3, #31
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	409a      	lsls	r2, r3
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d049      	beq.n	8003d98 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d109      	bne.n	8003d22 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 8210 	beq.w	8004138 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d20:	e20a      	b.n	8004138 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8206 	beq.w	8004138 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d34:	e200      	b.n	8004138 <HAL_DMA_IRQHandler+0xe08>
 8003d36:	bf00      	nop
 8003d38:	40020010 	.word	0x40020010
 8003d3c:	40020028 	.word	0x40020028
 8003d40:	40020040 	.word	0x40020040
 8003d44:	40020058 	.word	0x40020058
 8003d48:	40020070 	.word	0x40020070
 8003d4c:	40020088 	.word	0x40020088
 8003d50:	400200a0 	.word	0x400200a0
 8003d54:	400200b8 	.word	0x400200b8
 8003d58:	40020410 	.word	0x40020410
 8003d5c:	40020428 	.word	0x40020428
 8003d60:	40020440 	.word	0x40020440
 8003d64:	40020458 	.word	0x40020458
 8003d68:	40020470 	.word	0x40020470
 8003d6c:	40020488 	.word	0x40020488
 8003d70:	400204a0 	.word	0x400204a0
 8003d74:	400204b8 	.word	0x400204b8
 8003d78:	58025408 	.word	0x58025408
 8003d7c:	5802541c 	.word	0x5802541c
 8003d80:	58025430 	.word	0x58025430
 8003d84:	58025444 	.word	0x58025444
 8003d88:	58025458 	.word	0x58025458
 8003d8c:	5802546c 	.word	0x5802546c
 8003d90:	58025480 	.word	0x58025480
 8003d94:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d160      	bne.n	8003e64 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a7f      	ldr	r2, [pc, #508]	@ (8003fa4 <HAL_DMA_IRQHandler+0xc74>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d04a      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xb12>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a7d      	ldr	r2, [pc, #500]	@ (8003fa8 <HAL_DMA_IRQHandler+0xc78>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d045      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xb12>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a7c      	ldr	r2, [pc, #496]	@ (8003fac <HAL_DMA_IRQHandler+0xc7c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d040      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xb12>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a7a      	ldr	r2, [pc, #488]	@ (8003fb0 <HAL_DMA_IRQHandler+0xc80>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d03b      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xb12>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a79      	ldr	r2, [pc, #484]	@ (8003fb4 <HAL_DMA_IRQHandler+0xc84>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d036      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xb12>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a77      	ldr	r2, [pc, #476]	@ (8003fb8 <HAL_DMA_IRQHandler+0xc88>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d031      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xb12>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a76      	ldr	r2, [pc, #472]	@ (8003fbc <HAL_DMA_IRQHandler+0xc8c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d02c      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xb12>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a74      	ldr	r2, [pc, #464]	@ (8003fc0 <HAL_DMA_IRQHandler+0xc90>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d027      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xb12>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a73      	ldr	r2, [pc, #460]	@ (8003fc4 <HAL_DMA_IRQHandler+0xc94>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d022      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xb12>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a71      	ldr	r2, [pc, #452]	@ (8003fc8 <HAL_DMA_IRQHandler+0xc98>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d01d      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xb12>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a70      	ldr	r2, [pc, #448]	@ (8003fcc <HAL_DMA_IRQHandler+0xc9c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d018      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xb12>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a6e      	ldr	r2, [pc, #440]	@ (8003fd0 <HAL_DMA_IRQHandler+0xca0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d013      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xb12>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a6d      	ldr	r2, [pc, #436]	@ (8003fd4 <HAL_DMA_IRQHandler+0xca4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d00e      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xb12>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a6b      	ldr	r2, [pc, #428]	@ (8003fd8 <HAL_DMA_IRQHandler+0xca8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d009      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xb12>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a6a      	ldr	r2, [pc, #424]	@ (8003fdc <HAL_DMA_IRQHandler+0xcac>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d004      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xb12>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a68      	ldr	r2, [pc, #416]	@ (8003fe0 <HAL_DMA_IRQHandler+0xcb0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d108      	bne.n	8003e54 <HAL_DMA_IRQHandler+0xb24>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0208 	bic.w	r2, r2, #8
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	e007      	b.n	8003e64 <HAL_DMA_IRQHandler+0xb34>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0204 	bic.w	r2, r2, #4
 8003e62:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 8165 	beq.w	8004138 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e76:	e15f      	b.n	8004138 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	2202      	movs	r2, #2
 8003e82:	409a      	lsls	r2, r3
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 80c5 	beq.w	8004018 <HAL_DMA_IRQHandler+0xce8>
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 80bf 	beq.w	8004018 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9e:	f003 031f 	and.w	r3, r3, #31
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	409a      	lsls	r2, r3
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d018      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 813a 	beq.w	800413c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ed0:	e134      	b.n	800413c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 8130 	beq.w	800413c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ee4:	e12a      	b.n	800413c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f003 0320 	and.w	r3, r3, #32
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f040 8089 	bne.w	8004004 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a2b      	ldr	r2, [pc, #172]	@ (8003fa4 <HAL_DMA_IRQHandler+0xc74>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d04a      	beq.n	8003f92 <HAL_DMA_IRQHandler+0xc62>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a29      	ldr	r2, [pc, #164]	@ (8003fa8 <HAL_DMA_IRQHandler+0xc78>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d045      	beq.n	8003f92 <HAL_DMA_IRQHandler+0xc62>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a28      	ldr	r2, [pc, #160]	@ (8003fac <HAL_DMA_IRQHandler+0xc7c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d040      	beq.n	8003f92 <HAL_DMA_IRQHandler+0xc62>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a26      	ldr	r2, [pc, #152]	@ (8003fb0 <HAL_DMA_IRQHandler+0xc80>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d03b      	beq.n	8003f92 <HAL_DMA_IRQHandler+0xc62>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a25      	ldr	r2, [pc, #148]	@ (8003fb4 <HAL_DMA_IRQHandler+0xc84>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d036      	beq.n	8003f92 <HAL_DMA_IRQHandler+0xc62>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a23      	ldr	r2, [pc, #140]	@ (8003fb8 <HAL_DMA_IRQHandler+0xc88>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d031      	beq.n	8003f92 <HAL_DMA_IRQHandler+0xc62>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a22      	ldr	r2, [pc, #136]	@ (8003fbc <HAL_DMA_IRQHandler+0xc8c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d02c      	beq.n	8003f92 <HAL_DMA_IRQHandler+0xc62>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a20      	ldr	r2, [pc, #128]	@ (8003fc0 <HAL_DMA_IRQHandler+0xc90>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d027      	beq.n	8003f92 <HAL_DMA_IRQHandler+0xc62>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a1f      	ldr	r2, [pc, #124]	@ (8003fc4 <HAL_DMA_IRQHandler+0xc94>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d022      	beq.n	8003f92 <HAL_DMA_IRQHandler+0xc62>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a1d      	ldr	r2, [pc, #116]	@ (8003fc8 <HAL_DMA_IRQHandler+0xc98>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d01d      	beq.n	8003f92 <HAL_DMA_IRQHandler+0xc62>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8003fcc <HAL_DMA_IRQHandler+0xc9c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d018      	beq.n	8003f92 <HAL_DMA_IRQHandler+0xc62>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a1a      	ldr	r2, [pc, #104]	@ (8003fd0 <HAL_DMA_IRQHandler+0xca0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d013      	beq.n	8003f92 <HAL_DMA_IRQHandler+0xc62>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a19      	ldr	r2, [pc, #100]	@ (8003fd4 <HAL_DMA_IRQHandler+0xca4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d00e      	beq.n	8003f92 <HAL_DMA_IRQHandler+0xc62>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a17      	ldr	r2, [pc, #92]	@ (8003fd8 <HAL_DMA_IRQHandler+0xca8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d009      	beq.n	8003f92 <HAL_DMA_IRQHandler+0xc62>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a16      	ldr	r2, [pc, #88]	@ (8003fdc <HAL_DMA_IRQHandler+0xcac>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d004      	beq.n	8003f92 <HAL_DMA_IRQHandler+0xc62>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a14      	ldr	r2, [pc, #80]	@ (8003fe0 <HAL_DMA_IRQHandler+0xcb0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d128      	bne.n	8003fe4 <HAL_DMA_IRQHandler+0xcb4>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0214 	bic.w	r2, r2, #20
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	e027      	b.n	8003ff4 <HAL_DMA_IRQHandler+0xcc4>
 8003fa4:	40020010 	.word	0x40020010
 8003fa8:	40020028 	.word	0x40020028
 8003fac:	40020040 	.word	0x40020040
 8003fb0:	40020058 	.word	0x40020058
 8003fb4:	40020070 	.word	0x40020070
 8003fb8:	40020088 	.word	0x40020088
 8003fbc:	400200a0 	.word	0x400200a0
 8003fc0:	400200b8 	.word	0x400200b8
 8003fc4:	40020410 	.word	0x40020410
 8003fc8:	40020428 	.word	0x40020428
 8003fcc:	40020440 	.word	0x40020440
 8003fd0:	40020458 	.word	0x40020458
 8003fd4:	40020470 	.word	0x40020470
 8003fd8:	40020488 	.word	0x40020488
 8003fdc:	400204a0 	.word	0x400204a0
 8003fe0:	400204b8 	.word	0x400204b8
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 020a 	bic.w	r2, r2, #10
 8003ff2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 8097 	beq.w	800413c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004016:	e091      	b.n	800413c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800401c:	f003 031f 	and.w	r3, r3, #31
 8004020:	2208      	movs	r2, #8
 8004022:	409a      	lsls	r2, r3
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	4013      	ands	r3, r2
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 8088 	beq.w	800413e <HAL_DMA_IRQHandler+0xe0e>
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 8082 	beq.w	800413e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a41      	ldr	r2, [pc, #260]	@ (8004144 <HAL_DMA_IRQHandler+0xe14>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d04a      	beq.n	80040da <HAL_DMA_IRQHandler+0xdaa>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a3f      	ldr	r2, [pc, #252]	@ (8004148 <HAL_DMA_IRQHandler+0xe18>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d045      	beq.n	80040da <HAL_DMA_IRQHandler+0xdaa>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a3e      	ldr	r2, [pc, #248]	@ (800414c <HAL_DMA_IRQHandler+0xe1c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d040      	beq.n	80040da <HAL_DMA_IRQHandler+0xdaa>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a3c      	ldr	r2, [pc, #240]	@ (8004150 <HAL_DMA_IRQHandler+0xe20>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d03b      	beq.n	80040da <HAL_DMA_IRQHandler+0xdaa>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a3b      	ldr	r2, [pc, #236]	@ (8004154 <HAL_DMA_IRQHandler+0xe24>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d036      	beq.n	80040da <HAL_DMA_IRQHandler+0xdaa>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a39      	ldr	r2, [pc, #228]	@ (8004158 <HAL_DMA_IRQHandler+0xe28>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d031      	beq.n	80040da <HAL_DMA_IRQHandler+0xdaa>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a38      	ldr	r2, [pc, #224]	@ (800415c <HAL_DMA_IRQHandler+0xe2c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d02c      	beq.n	80040da <HAL_DMA_IRQHandler+0xdaa>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a36      	ldr	r2, [pc, #216]	@ (8004160 <HAL_DMA_IRQHandler+0xe30>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d027      	beq.n	80040da <HAL_DMA_IRQHandler+0xdaa>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a35      	ldr	r2, [pc, #212]	@ (8004164 <HAL_DMA_IRQHandler+0xe34>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d022      	beq.n	80040da <HAL_DMA_IRQHandler+0xdaa>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a33      	ldr	r2, [pc, #204]	@ (8004168 <HAL_DMA_IRQHandler+0xe38>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d01d      	beq.n	80040da <HAL_DMA_IRQHandler+0xdaa>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a32      	ldr	r2, [pc, #200]	@ (800416c <HAL_DMA_IRQHandler+0xe3c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d018      	beq.n	80040da <HAL_DMA_IRQHandler+0xdaa>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a30      	ldr	r2, [pc, #192]	@ (8004170 <HAL_DMA_IRQHandler+0xe40>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d013      	beq.n	80040da <HAL_DMA_IRQHandler+0xdaa>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a2f      	ldr	r2, [pc, #188]	@ (8004174 <HAL_DMA_IRQHandler+0xe44>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00e      	beq.n	80040da <HAL_DMA_IRQHandler+0xdaa>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a2d      	ldr	r2, [pc, #180]	@ (8004178 <HAL_DMA_IRQHandler+0xe48>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d009      	beq.n	80040da <HAL_DMA_IRQHandler+0xdaa>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a2c      	ldr	r2, [pc, #176]	@ (800417c <HAL_DMA_IRQHandler+0xe4c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d004      	beq.n	80040da <HAL_DMA_IRQHandler+0xdaa>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a2a      	ldr	r2, [pc, #168]	@ (8004180 <HAL_DMA_IRQHandler+0xe50>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d108      	bne.n	80040ec <HAL_DMA_IRQHandler+0xdbc>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 021c 	bic.w	r2, r2, #28
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	e007      	b.n	80040fc <HAL_DMA_IRQHandler+0xdcc>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 020e 	bic.w	r2, r2, #14
 80040fa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	2201      	movs	r2, #1
 8004106:	409a      	lsls	r2, r3
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004126:	2b00      	cmp	r3, #0
 8004128:	d009      	beq.n	800413e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	4798      	blx	r3
 8004132:	e004      	b.n	800413e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004134:	bf00      	nop
 8004136:	e002      	b.n	800413e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004138:	bf00      	nop
 800413a:	e000      	b.n	800413e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800413c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800413e:	3728      	adds	r7, #40	@ 0x28
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40020010 	.word	0x40020010
 8004148:	40020028 	.word	0x40020028
 800414c:	40020040 	.word	0x40020040
 8004150:	40020058 	.word	0x40020058
 8004154:	40020070 	.word	0x40020070
 8004158:	40020088 	.word	0x40020088
 800415c:	400200a0 	.word	0x400200a0
 8004160:	400200b8 	.word	0x400200b8
 8004164:	40020410 	.word	0x40020410
 8004168:	40020428 	.word	0x40020428
 800416c:	40020440 	.word	0x40020440
 8004170:	40020458 	.word	0x40020458
 8004174:	40020470 	.word	0x40020470
 8004178:	40020488 	.word	0x40020488
 800417c:	400204a0 	.word	0x400204a0
 8004180:	400204b8 	.word	0x400204b8

08004184 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a42      	ldr	r2, [pc, #264]	@ (800429c <DMA_CalcBaseAndBitshift+0x118>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d04a      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a41      	ldr	r2, [pc, #260]	@ (80042a0 <DMA_CalcBaseAndBitshift+0x11c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d045      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a3f      	ldr	r2, [pc, #252]	@ (80042a4 <DMA_CalcBaseAndBitshift+0x120>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d040      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a3e      	ldr	r2, [pc, #248]	@ (80042a8 <DMA_CalcBaseAndBitshift+0x124>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d03b      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a3c      	ldr	r2, [pc, #240]	@ (80042ac <DMA_CalcBaseAndBitshift+0x128>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d036      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a3b      	ldr	r2, [pc, #236]	@ (80042b0 <DMA_CalcBaseAndBitshift+0x12c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d031      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a39      	ldr	r2, [pc, #228]	@ (80042b4 <DMA_CalcBaseAndBitshift+0x130>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d02c      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a38      	ldr	r2, [pc, #224]	@ (80042b8 <DMA_CalcBaseAndBitshift+0x134>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d027      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a36      	ldr	r2, [pc, #216]	@ (80042bc <DMA_CalcBaseAndBitshift+0x138>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d022      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a35      	ldr	r2, [pc, #212]	@ (80042c0 <DMA_CalcBaseAndBitshift+0x13c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d01d      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a33      	ldr	r2, [pc, #204]	@ (80042c4 <DMA_CalcBaseAndBitshift+0x140>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d018      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a32      	ldr	r2, [pc, #200]	@ (80042c8 <DMA_CalcBaseAndBitshift+0x144>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d013      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a30      	ldr	r2, [pc, #192]	@ (80042cc <DMA_CalcBaseAndBitshift+0x148>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d00e      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a2f      	ldr	r2, [pc, #188]	@ (80042d0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d009      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a2d      	ldr	r2, [pc, #180]	@ (80042d4 <DMA_CalcBaseAndBitshift+0x150>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d004      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a2c      	ldr	r2, [pc, #176]	@ (80042d8 <DMA_CalcBaseAndBitshift+0x154>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d101      	bne.n	8004230 <DMA_CalcBaseAndBitshift+0xac>
 800422c:	2301      	movs	r3, #1
 800422e:	e000      	b.n	8004232 <DMA_CalcBaseAndBitshift+0xae>
 8004230:	2300      	movs	r3, #0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d024      	beq.n	8004280 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	3b10      	subs	r3, #16
 800423e:	4a27      	ldr	r2, [pc, #156]	@ (80042dc <DMA_CalcBaseAndBitshift+0x158>)
 8004240:	fba2 2303 	umull	r2, r3, r2, r3
 8004244:	091b      	lsrs	r3, r3, #4
 8004246:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	4a24      	ldr	r2, [pc, #144]	@ (80042e0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004250:	5cd3      	ldrb	r3, [r2, r3]
 8004252:	461a      	mov	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b03      	cmp	r3, #3
 800425c:	d908      	bls.n	8004270 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	4b1f      	ldr	r3, [pc, #124]	@ (80042e4 <DMA_CalcBaseAndBitshift+0x160>)
 8004266:	4013      	ands	r3, r2
 8004268:	1d1a      	adds	r2, r3, #4
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	659a      	str	r2, [r3, #88]	@ 0x58
 800426e:	e00d      	b.n	800428c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	4b1b      	ldr	r3, [pc, #108]	@ (80042e4 <DMA_CalcBaseAndBitshift+0x160>)
 8004278:	4013      	ands	r3, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6593      	str	r3, [r2, #88]	@ 0x58
 800427e:	e005      	b.n	800428c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	40020010 	.word	0x40020010
 80042a0:	40020028 	.word	0x40020028
 80042a4:	40020040 	.word	0x40020040
 80042a8:	40020058 	.word	0x40020058
 80042ac:	40020070 	.word	0x40020070
 80042b0:	40020088 	.word	0x40020088
 80042b4:	400200a0 	.word	0x400200a0
 80042b8:	400200b8 	.word	0x400200b8
 80042bc:	40020410 	.word	0x40020410
 80042c0:	40020428 	.word	0x40020428
 80042c4:	40020440 	.word	0x40020440
 80042c8:	40020458 	.word	0x40020458
 80042cc:	40020470 	.word	0x40020470
 80042d0:	40020488 	.word	0x40020488
 80042d4:	400204a0 	.word	0x400204a0
 80042d8:	400204b8 	.word	0x400204b8
 80042dc:	aaaaaaab 	.word	0xaaaaaaab
 80042e0:	08009b1c 	.word	0x08009b1c
 80042e4:	fffffc00 	.word	0xfffffc00

080042e8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d120      	bne.n	800433e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004300:	2b03      	cmp	r3, #3
 8004302:	d858      	bhi.n	80043b6 <DMA_CheckFifoParam+0xce>
 8004304:	a201      	add	r2, pc, #4	@ (adr r2, 800430c <DMA_CheckFifoParam+0x24>)
 8004306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430a:	bf00      	nop
 800430c:	0800431d 	.word	0x0800431d
 8004310:	0800432f 	.word	0x0800432f
 8004314:	0800431d 	.word	0x0800431d
 8004318:	080043b7 	.word	0x080043b7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004320:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d048      	beq.n	80043ba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800432c:	e045      	b.n	80043ba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004332:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004336:	d142      	bne.n	80043be <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800433c:	e03f      	b.n	80043be <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004346:	d123      	bne.n	8004390 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434c:	2b03      	cmp	r3, #3
 800434e:	d838      	bhi.n	80043c2 <DMA_CheckFifoParam+0xda>
 8004350:	a201      	add	r2, pc, #4	@ (adr r2, 8004358 <DMA_CheckFifoParam+0x70>)
 8004352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004356:	bf00      	nop
 8004358:	08004369 	.word	0x08004369
 800435c:	0800436f 	.word	0x0800436f
 8004360:	08004369 	.word	0x08004369
 8004364:	08004381 	.word	0x08004381
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	73fb      	strb	r3, [r7, #15]
        break;
 800436c:	e030      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004372:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d025      	beq.n	80043c6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800437e:	e022      	b.n	80043c6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004384:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004388:	d11f      	bne.n	80043ca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800438e:	e01c      	b.n	80043ca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004394:	2b02      	cmp	r3, #2
 8004396:	d902      	bls.n	800439e <DMA_CheckFifoParam+0xb6>
 8004398:	2b03      	cmp	r3, #3
 800439a:	d003      	beq.n	80043a4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800439c:	e018      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
        break;
 80043a2:	e015      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00e      	beq.n	80043ce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	73fb      	strb	r3, [r7, #15]
    break;
 80043b4:	e00b      	b.n	80043ce <DMA_CheckFifoParam+0xe6>
        break;
 80043b6:	bf00      	nop
 80043b8:	e00a      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
        break;
 80043ba:	bf00      	nop
 80043bc:	e008      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
        break;
 80043be:	bf00      	nop
 80043c0:	e006      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
        break;
 80043c2:	bf00      	nop
 80043c4:	e004      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
        break;
 80043c6:	bf00      	nop
 80043c8:	e002      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
        break;
 80043ca:	bf00      	nop
 80043cc:	e000      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
    break;
 80043ce:	bf00      	nop
    }
  }

  return status;
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop

080043e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a38      	ldr	r2, [pc, #224]	@ (80044d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d022      	beq.n	800443e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a36      	ldr	r2, [pc, #216]	@ (80044d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d01d      	beq.n	800443e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a35      	ldr	r2, [pc, #212]	@ (80044dc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d018      	beq.n	800443e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a33      	ldr	r2, [pc, #204]	@ (80044e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d013      	beq.n	800443e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a32      	ldr	r2, [pc, #200]	@ (80044e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00e      	beq.n	800443e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a30      	ldr	r2, [pc, #192]	@ (80044e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d009      	beq.n	800443e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a2f      	ldr	r2, [pc, #188]	@ (80044ec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d004      	beq.n	800443e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a2d      	ldr	r2, [pc, #180]	@ (80044f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d101      	bne.n	8004442 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004442:	2300      	movs	r3, #0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d01a      	beq.n	800447e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	3b08      	subs	r3, #8
 8004450:	4a28      	ldr	r2, [pc, #160]	@ (80044f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004452:	fba2 2303 	umull	r2, r3, r2, r3
 8004456:	091b      	lsrs	r3, r3, #4
 8004458:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4b26      	ldr	r3, [pc, #152]	@ (80044f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	461a      	mov	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a24      	ldr	r2, [pc, #144]	@ (80044fc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800446c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f003 031f 	and.w	r3, r3, #31
 8004474:	2201      	movs	r2, #1
 8004476:	409a      	lsls	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800447c:	e024      	b.n	80044c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	3b10      	subs	r3, #16
 8004486:	4a1e      	ldr	r2, [pc, #120]	@ (8004500 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004488:	fba2 2303 	umull	r2, r3, r2, r3
 800448c:	091b      	lsrs	r3, r3, #4
 800448e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4a1c      	ldr	r2, [pc, #112]	@ (8004504 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d806      	bhi.n	80044a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4a1b      	ldr	r2, [pc, #108]	@ (8004508 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d902      	bls.n	80044a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	3308      	adds	r3, #8
 80044a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4b18      	ldr	r3, [pc, #96]	@ (800450c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80044aa:	4413      	add	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	461a      	mov	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a16      	ldr	r2, [pc, #88]	@ (8004510 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80044b8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f003 031f 	and.w	r3, r3, #31
 80044c0:	2201      	movs	r2, #1
 80044c2:	409a      	lsls	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80044c8:	bf00      	nop
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	58025408 	.word	0x58025408
 80044d8:	5802541c 	.word	0x5802541c
 80044dc:	58025430 	.word	0x58025430
 80044e0:	58025444 	.word	0x58025444
 80044e4:	58025458 	.word	0x58025458
 80044e8:	5802546c 	.word	0x5802546c
 80044ec:	58025480 	.word	0x58025480
 80044f0:	58025494 	.word	0x58025494
 80044f4:	cccccccd 	.word	0xcccccccd
 80044f8:	16009600 	.word	0x16009600
 80044fc:	58025880 	.word	0x58025880
 8004500:	aaaaaaab 	.word	0xaaaaaaab
 8004504:	400204b8 	.word	0x400204b8
 8004508:	4002040f 	.word	0x4002040f
 800450c:	10008200 	.word	0x10008200
 8004510:	40020880 	.word	0x40020880

08004514 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d04a      	beq.n	80045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b08      	cmp	r3, #8
 800452e:	d847      	bhi.n	80045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a25      	ldr	r2, [pc, #148]	@ (80045cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d022      	beq.n	8004580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a24      	ldr	r2, [pc, #144]	@ (80045d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d01d      	beq.n	8004580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a22      	ldr	r2, [pc, #136]	@ (80045d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d018      	beq.n	8004580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a21      	ldr	r2, [pc, #132]	@ (80045d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d013      	beq.n	8004580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1f      	ldr	r2, [pc, #124]	@ (80045dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00e      	beq.n	8004580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a1e      	ldr	r2, [pc, #120]	@ (80045e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d009      	beq.n	8004580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a1c      	ldr	r2, [pc, #112]	@ (80045e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d004      	beq.n	8004580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a1b      	ldr	r2, [pc, #108]	@ (80045e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d101      	bne.n	8004584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004584:	2300      	movs	r3, #0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4b17      	ldr	r3, [pc, #92]	@ (80045ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800458e:	4413      	add	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	461a      	mov	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a15      	ldr	r2, [pc, #84]	@ (80045f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800459c:	671a      	str	r2, [r3, #112]	@ 0x70
 800459e:	e009      	b.n	80045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4b14      	ldr	r3, [pc, #80]	@ (80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80045a4:	4413      	add	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	461a      	mov	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a11      	ldr	r2, [pc, #68]	@ (80045f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80045b2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	2201      	movs	r2, #1
 80045ba:	409a      	lsls	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80045c0:	bf00      	nop
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	58025408 	.word	0x58025408
 80045d0:	5802541c 	.word	0x5802541c
 80045d4:	58025430 	.word	0x58025430
 80045d8:	58025444 	.word	0x58025444
 80045dc:	58025458 	.word	0x58025458
 80045e0:	5802546c 	.word	0x5802546c
 80045e4:	58025480 	.word	0x58025480
 80045e8:	58025494 	.word	0x58025494
 80045ec:	1600963f 	.word	0x1600963f
 80045f0:	58025940 	.word	0x58025940
 80045f4:	1000823f 	.word	0x1000823f
 80045f8:	40020940 	.word	0x40020940

080045fc <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	460b      	mov	r3, r1
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e00a      	b.n	800462e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004618:	7afb      	ldrb	r3, [r7, #11]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d103      	bne.n	8004626 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	605a      	str	r2, [r3, #4]
      break;
 8004624:	e002      	b.n	800462c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	75fb      	strb	r3, [r7, #23]
      break;
 800462a:	bf00      	nop
  }

  return status;
 800462c:	7dfb      	ldrb	r3, [r7, #23]
}
 800462e:	4618      	mov	r0, r3
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e003      	b.n	8004656 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004654:	2300      	movs	r3, #0
  }
}
 8004656:	4618      	mov	r0, r3
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
	...

08004664 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	0c1b      	lsrs	r3, r3, #16
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 031f 	and.w	r3, r3, #31
 8004680:	2201      	movs	r2, #1
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	011a      	lsls	r2, r3, #4
 800468c:	4b0c      	ldr	r3, [pc, #48]	@ (80046c0 <HAL_EXTI_IRQHandler+0x5c>)
 800468e:	4413      	add	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4013      	ands	r3, r2
 800469a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d009      	beq.n	80046b6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	4798      	blx	r3
    }
  }
}
 80046b6:	bf00      	nop
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	58000088 	.word	0x58000088

080046c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b089      	sub	sp, #36	@ 0x24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80046d2:	4b89      	ldr	r3, [pc, #548]	@ (80048f8 <HAL_GPIO_Init+0x234>)
 80046d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80046d6:	e194      	b.n	8004a02 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	2101      	movs	r1, #1
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	fa01 f303 	lsl.w	r3, r1, r3
 80046e4:	4013      	ands	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 8186 	beq.w	80049fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d005      	beq.n	8004708 <HAL_GPIO_Init+0x44>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d130      	bne.n	800476a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	2203      	movs	r2, #3
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	43db      	mvns	r3, r3
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	4013      	ands	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800473e:	2201      	movs	r2, #1
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	43db      	mvns	r3, r3
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	4013      	ands	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	091b      	lsrs	r3, r3, #4
 8004754:	f003 0201 	and.w	r2, r3, #1
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	fa02 f303 	lsl.w	r3, r2, r3
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	4313      	orrs	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	2b03      	cmp	r3, #3
 8004774:	d017      	beq.n	80047a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	2203      	movs	r2, #3
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	43db      	mvns	r3, r3
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	4013      	ands	r3, r2
 800478c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	4313      	orrs	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d123      	bne.n	80047fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	08da      	lsrs	r2, r3, #3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	3208      	adds	r2, #8
 80047ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	220f      	movs	r2, #15
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	43db      	mvns	r3, r3
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	4013      	ands	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	08da      	lsrs	r2, r3, #3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3208      	adds	r2, #8
 80047f4:	69b9      	ldr	r1, [r7, #24]
 80047f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	2203      	movs	r2, #3
 8004806:	fa02 f303 	lsl.w	r3, r2, r3
 800480a:	43db      	mvns	r3, r3
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	4013      	ands	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f003 0203 	and.w	r2, r3, #3
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	4313      	orrs	r3, r2
 8004826:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 80e0 	beq.w	80049fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800483c:	4b2f      	ldr	r3, [pc, #188]	@ (80048fc <HAL_GPIO_Init+0x238>)
 800483e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004842:	4a2e      	ldr	r2, [pc, #184]	@ (80048fc <HAL_GPIO_Init+0x238>)
 8004844:	f043 0302 	orr.w	r3, r3, #2
 8004848:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800484c:	4b2b      	ldr	r3, [pc, #172]	@ (80048fc <HAL_GPIO_Init+0x238>)
 800484e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800485a:	4a29      	ldr	r2, [pc, #164]	@ (8004900 <HAL_GPIO_Init+0x23c>)
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	089b      	lsrs	r3, r3, #2
 8004860:	3302      	adds	r3, #2
 8004862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	220f      	movs	r2, #15
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	43db      	mvns	r3, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4013      	ands	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a20      	ldr	r2, [pc, #128]	@ (8004904 <HAL_GPIO_Init+0x240>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d052      	beq.n	800492c <HAL_GPIO_Init+0x268>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a1f      	ldr	r2, [pc, #124]	@ (8004908 <HAL_GPIO_Init+0x244>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d031      	beq.n	80048f2 <HAL_GPIO_Init+0x22e>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a1e      	ldr	r2, [pc, #120]	@ (800490c <HAL_GPIO_Init+0x248>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d02b      	beq.n	80048ee <HAL_GPIO_Init+0x22a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a1d      	ldr	r2, [pc, #116]	@ (8004910 <HAL_GPIO_Init+0x24c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d025      	beq.n	80048ea <HAL_GPIO_Init+0x226>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004914 <HAL_GPIO_Init+0x250>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d01f      	beq.n	80048e6 <HAL_GPIO_Init+0x222>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004918 <HAL_GPIO_Init+0x254>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d019      	beq.n	80048e2 <HAL_GPIO_Init+0x21e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a1a      	ldr	r2, [pc, #104]	@ (800491c <HAL_GPIO_Init+0x258>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d013      	beq.n	80048de <HAL_GPIO_Init+0x21a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a19      	ldr	r2, [pc, #100]	@ (8004920 <HAL_GPIO_Init+0x25c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00d      	beq.n	80048da <HAL_GPIO_Init+0x216>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a18      	ldr	r2, [pc, #96]	@ (8004924 <HAL_GPIO_Init+0x260>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d007      	beq.n	80048d6 <HAL_GPIO_Init+0x212>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a17      	ldr	r2, [pc, #92]	@ (8004928 <HAL_GPIO_Init+0x264>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d101      	bne.n	80048d2 <HAL_GPIO_Init+0x20e>
 80048ce:	2309      	movs	r3, #9
 80048d0:	e02d      	b.n	800492e <HAL_GPIO_Init+0x26a>
 80048d2:	230a      	movs	r3, #10
 80048d4:	e02b      	b.n	800492e <HAL_GPIO_Init+0x26a>
 80048d6:	2308      	movs	r3, #8
 80048d8:	e029      	b.n	800492e <HAL_GPIO_Init+0x26a>
 80048da:	2307      	movs	r3, #7
 80048dc:	e027      	b.n	800492e <HAL_GPIO_Init+0x26a>
 80048de:	2306      	movs	r3, #6
 80048e0:	e025      	b.n	800492e <HAL_GPIO_Init+0x26a>
 80048e2:	2305      	movs	r3, #5
 80048e4:	e023      	b.n	800492e <HAL_GPIO_Init+0x26a>
 80048e6:	2304      	movs	r3, #4
 80048e8:	e021      	b.n	800492e <HAL_GPIO_Init+0x26a>
 80048ea:	2303      	movs	r3, #3
 80048ec:	e01f      	b.n	800492e <HAL_GPIO_Init+0x26a>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e01d      	b.n	800492e <HAL_GPIO_Init+0x26a>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e01b      	b.n	800492e <HAL_GPIO_Init+0x26a>
 80048f6:	bf00      	nop
 80048f8:	58000080 	.word	0x58000080
 80048fc:	58024400 	.word	0x58024400
 8004900:	58000400 	.word	0x58000400
 8004904:	58020000 	.word	0x58020000
 8004908:	58020400 	.word	0x58020400
 800490c:	58020800 	.word	0x58020800
 8004910:	58020c00 	.word	0x58020c00
 8004914:	58021000 	.word	0x58021000
 8004918:	58021400 	.word	0x58021400
 800491c:	58021800 	.word	0x58021800
 8004920:	58021c00 	.word	0x58021c00
 8004924:	58022000 	.word	0x58022000
 8004928:	58022400 	.word	0x58022400
 800492c:	2300      	movs	r3, #0
 800492e:	69fa      	ldr	r2, [r7, #28]
 8004930:	f002 0203 	and.w	r2, r2, #3
 8004934:	0092      	lsls	r2, r2, #2
 8004936:	4093      	lsls	r3, r2
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	4313      	orrs	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800493e:	4938      	ldr	r1, [pc, #224]	@ (8004a20 <HAL_GPIO_Init+0x35c>)
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	089b      	lsrs	r3, r3, #2
 8004944:	3302      	adds	r3, #2
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800494c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	43db      	mvns	r3, r3
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	4013      	ands	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	4313      	orrs	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004972:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800497a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	43db      	mvns	r3, r3
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	4013      	ands	r3, r2
 800498a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80049a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	43db      	mvns	r3, r3
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4013      	ands	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	43db      	mvns	r3, r3
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	4013      	ands	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	3301      	adds	r3, #1
 8004a00:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f47f ae63 	bne.w	80046d8 <HAL_GPIO_Init+0x14>
  }
}
 8004a12:	bf00      	nop
 8004a14:	bf00      	nop
 8004a16:	3724      	adds	r7, #36	@ 0x24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	58000400 	.word	0x58000400

08004a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	807b      	strh	r3, [r7, #2]
 8004a30:	4613      	mov	r3, r2
 8004a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a34:	787b      	ldrb	r3, [r7, #1]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a3a:	887a      	ldrh	r2, [r7, #2]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004a40:	e003      	b.n	8004a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a42:	887b      	ldrh	r3, [r7, #2]
 8004a44:	041a      	lsls	r2, r3, #16
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	619a      	str	r2, [r3, #24]
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
	...

08004a58 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004a60:	4b19      	ldr	r3, [pc, #100]	@ (8004ac8 <HAL_PWREx_ConfigSupply+0x70>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d00a      	beq.n	8004a82 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a6c:	4b16      	ldr	r3, [pc, #88]	@ (8004ac8 <HAL_PWREx_ConfigSupply+0x70>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d001      	beq.n	8004a7e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e01f      	b.n	8004abe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	e01d      	b.n	8004abe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004a82:	4b11      	ldr	r3, [pc, #68]	@ (8004ac8 <HAL_PWREx_ConfigSupply+0x70>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f023 0207 	bic.w	r2, r3, #7
 8004a8a:	490f      	ldr	r1, [pc, #60]	@ (8004ac8 <HAL_PWREx_ConfigSupply+0x70>)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004a92:	f7fc fc25 	bl	80012e0 <HAL_GetTick>
 8004a96:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a98:	e009      	b.n	8004aae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a9a:	f7fc fc21 	bl	80012e0 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004aa8:	d901      	bls.n	8004aae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e007      	b.n	8004abe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004aae:	4b06      	ldr	r3, [pc, #24]	@ (8004ac8 <HAL_PWREx_ConfigSupply+0x70>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ab6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aba:	d1ee      	bne.n	8004a9a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	58024800 	.word	0x58024800

08004acc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08c      	sub	sp, #48	@ 0x30
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d102      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	f000 bc48 	b.w	8005370 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 8088 	beq.w	8004bfe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aee:	4b99      	ldr	r3, [pc, #612]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004af8:	4b96      	ldr	r3, [pc, #600]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004afc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b00:	2b10      	cmp	r3, #16
 8004b02:	d007      	beq.n	8004b14 <HAL_RCC_OscConfig+0x48>
 8004b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b06:	2b18      	cmp	r3, #24
 8004b08:	d111      	bne.n	8004b2e <HAL_RCC_OscConfig+0x62>
 8004b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0c:	f003 0303 	and.w	r3, r3, #3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d10c      	bne.n	8004b2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b14:	4b8f      	ldr	r3, [pc, #572]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d06d      	beq.n	8004bfc <HAL_RCC_OscConfig+0x130>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d169      	bne.n	8004bfc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	f000 bc21 	b.w	8005370 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b36:	d106      	bne.n	8004b46 <HAL_RCC_OscConfig+0x7a>
 8004b38:	4b86      	ldr	r3, [pc, #536]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a85      	ldr	r2, [pc, #532]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004b3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b42:	6013      	str	r3, [r2, #0]
 8004b44:	e02e      	b.n	8004ba4 <HAL_RCC_OscConfig+0xd8>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10c      	bne.n	8004b68 <HAL_RCC_OscConfig+0x9c>
 8004b4e:	4b81      	ldr	r3, [pc, #516]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a80      	ldr	r2, [pc, #512]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004b54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	4b7e      	ldr	r3, [pc, #504]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a7d      	ldr	r2, [pc, #500]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004b60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	e01d      	b.n	8004ba4 <HAL_RCC_OscConfig+0xd8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b70:	d10c      	bne.n	8004b8c <HAL_RCC_OscConfig+0xc0>
 8004b72:	4b78      	ldr	r3, [pc, #480]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a77      	ldr	r2, [pc, #476]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004b78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	4b75      	ldr	r3, [pc, #468]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a74      	ldr	r2, [pc, #464]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	e00b      	b.n	8004ba4 <HAL_RCC_OscConfig+0xd8>
 8004b8c:	4b71      	ldr	r3, [pc, #452]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a70      	ldr	r2, [pc, #448]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004b92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	4b6e      	ldr	r3, [pc, #440]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a6d      	ldr	r2, [pc, #436]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004b9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d013      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bac:	f7fc fb98 	bl	80012e0 <HAL_GetTick>
 8004bb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb4:	f7fc fb94 	bl	80012e0 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b64      	cmp	r3, #100	@ 0x64
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e3d4      	b.n	8005370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bc6:	4b63      	ldr	r3, [pc, #396]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0f0      	beq.n	8004bb4 <HAL_RCC_OscConfig+0xe8>
 8004bd2:	e014      	b.n	8004bfe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd4:	f7fc fb84 	bl	80012e0 <HAL_GetTick>
 8004bd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bdc:	f7fc fb80 	bl	80012e0 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b64      	cmp	r3, #100	@ 0x64
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e3c0      	b.n	8005370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bee:	4b59      	ldr	r3, [pc, #356]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1f0      	bne.n	8004bdc <HAL_RCC_OscConfig+0x110>
 8004bfa:	e000      	b.n	8004bfe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 80ca 	beq.w	8004da0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c0c:	4b51      	ldr	r3, [pc, #324]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c14:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c16:	4b4f      	ldr	r3, [pc, #316]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c1a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d007      	beq.n	8004c32 <HAL_RCC_OscConfig+0x166>
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	2b18      	cmp	r3, #24
 8004c26:	d156      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x20a>
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d151      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c32:	4b48      	ldr	r3, [pc, #288]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0304 	and.w	r3, r3, #4
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d005      	beq.n	8004c4a <HAL_RCC_OscConfig+0x17e>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e392      	b.n	8005370 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c4a:	4b42      	ldr	r3, [pc, #264]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f023 0219 	bic.w	r2, r3, #25
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	493f      	ldr	r1, [pc, #252]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5c:	f7fc fb40 	bl	80012e0 <HAL_GetTick>
 8004c60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c64:	f7fc fb3c 	bl	80012e0 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e37c      	b.n	8005370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c76:	4b37      	ldr	r3, [pc, #220]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0f0      	beq.n	8004c64 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c82:	f7fc fb39 	bl	80012f8 <HAL_GetREVID>
 8004c86:	4603      	mov	r3, r0
 8004c88:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d817      	bhi.n	8004cc0 <HAL_RCC_OscConfig+0x1f4>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	2b40      	cmp	r3, #64	@ 0x40
 8004c96:	d108      	bne.n	8004caa <HAL_RCC_OscConfig+0x1de>
 8004c98:	4b2e      	ldr	r3, [pc, #184]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004ca0:	4a2c      	ldr	r2, [pc, #176]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ca6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ca8:	e07a      	b.n	8004da0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004caa:	4b2a      	ldr	r3, [pc, #168]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	031b      	lsls	r3, r3, #12
 8004cb8:	4926      	ldr	r1, [pc, #152]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cbe:	e06f      	b.n	8004da0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc0:	4b24      	ldr	r3, [pc, #144]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	061b      	lsls	r3, r3, #24
 8004cce:	4921      	ldr	r1, [pc, #132]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cd4:	e064      	b.n	8004da0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d047      	beq.n	8004d6e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004cde:	4b1d      	ldr	r3, [pc, #116]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f023 0219 	bic.w	r2, r3, #25
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	491a      	ldr	r1, [pc, #104]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf0:	f7fc faf6 	bl	80012e0 <HAL_GetTick>
 8004cf4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cf8:	f7fc faf2 	bl	80012e0 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e332      	b.n	8005370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d0a:	4b12      	ldr	r3, [pc, #72]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d16:	f7fc faef 	bl	80012f8 <HAL_GetREVID>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d819      	bhi.n	8004d58 <HAL_RCC_OscConfig+0x28c>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	2b40      	cmp	r3, #64	@ 0x40
 8004d2a:	d108      	bne.n	8004d3e <HAL_RCC_OscConfig+0x272>
 8004d2c:	4b09      	ldr	r3, [pc, #36]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004d34:	4a07      	ldr	r2, [pc, #28]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d3a:	6053      	str	r3, [r2, #4]
 8004d3c:	e030      	b.n	8004da0 <HAL_RCC_OscConfig+0x2d4>
 8004d3e:	4b05      	ldr	r3, [pc, #20]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	031b      	lsls	r3, r3, #12
 8004d4c:	4901      	ldr	r1, [pc, #4]	@ (8004d54 <HAL_RCC_OscConfig+0x288>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	604b      	str	r3, [r1, #4]
 8004d52:	e025      	b.n	8004da0 <HAL_RCC_OscConfig+0x2d4>
 8004d54:	58024400 	.word	0x58024400
 8004d58:	4b9a      	ldr	r3, [pc, #616]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	061b      	lsls	r3, r3, #24
 8004d66:	4997      	ldr	r1, [pc, #604]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	604b      	str	r3, [r1, #4]
 8004d6c:	e018      	b.n	8004da0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d6e:	4b95      	ldr	r3, [pc, #596]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a94      	ldr	r2, [pc, #592]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004d74:	f023 0301 	bic.w	r3, r3, #1
 8004d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7a:	f7fc fab1 	bl	80012e0 <HAL_GetTick>
 8004d7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d82:	f7fc faad 	bl	80012e0 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e2ed      	b.n	8005370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d94:	4b8b      	ldr	r3, [pc, #556]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1f0      	bne.n	8004d82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0310 	and.w	r3, r3, #16
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 80a9 	beq.w	8004f00 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dae:	4b85      	ldr	r3, [pc, #532]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004db6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004db8:	4b82      	ldr	r3, [pc, #520]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dbc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d007      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x308>
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	2b18      	cmp	r3, #24
 8004dc8:	d13a      	bne.n	8004e40 <HAL_RCC_OscConfig+0x374>
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f003 0303 	and.w	r3, r3, #3
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d135      	bne.n	8004e40 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dd4:	4b7b      	ldr	r3, [pc, #492]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <HAL_RCC_OscConfig+0x320>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	2b80      	cmp	r3, #128	@ 0x80
 8004de6:	d001      	beq.n	8004dec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e2c1      	b.n	8005370 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dec:	f7fc fa84 	bl	80012f8 <HAL_GetREVID>
 8004df0:	4603      	mov	r3, r0
 8004df2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d817      	bhi.n	8004e2a <HAL_RCC_OscConfig+0x35e>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	2b20      	cmp	r3, #32
 8004e00:	d108      	bne.n	8004e14 <HAL_RCC_OscConfig+0x348>
 8004e02:	4b70      	ldr	r3, [pc, #448]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004e0a:	4a6e      	ldr	r2, [pc, #440]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004e0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e10:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e12:	e075      	b.n	8004f00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e14:	4b6b      	ldr	r3, [pc, #428]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	069b      	lsls	r3, r3, #26
 8004e22:	4968      	ldr	r1, [pc, #416]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e28:	e06a      	b.n	8004f00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e2a:	4b66      	ldr	r3, [pc, #408]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	061b      	lsls	r3, r3, #24
 8004e38:	4962      	ldr	r1, [pc, #392]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e3e:	e05f      	b.n	8004f00 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d042      	beq.n	8004ece <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004e48:	4b5e      	ldr	r3, [pc, #376]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a5d      	ldr	r2, [pc, #372]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004e4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e54:	f7fc fa44 	bl	80012e0 <HAL_GetTick>
 8004e58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e5c:	f7fc fa40 	bl	80012e0 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e280      	b.n	8005370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e6e:	4b55      	ldr	r3, [pc, #340]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0f0      	beq.n	8004e5c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e7a:	f7fc fa3d 	bl	80012f8 <HAL_GetREVID>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d817      	bhi.n	8004eb8 <HAL_RCC_OscConfig+0x3ec>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	2b20      	cmp	r3, #32
 8004e8e:	d108      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x3d6>
 8004e90:	4b4c      	ldr	r3, [pc, #304]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004e98:	4a4a      	ldr	r2, [pc, #296]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004e9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e9e:	6053      	str	r3, [r2, #4]
 8004ea0:	e02e      	b.n	8004f00 <HAL_RCC_OscConfig+0x434>
 8004ea2:	4b48      	ldr	r3, [pc, #288]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	069b      	lsls	r3, r3, #26
 8004eb0:	4944      	ldr	r1, [pc, #272]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	604b      	str	r3, [r1, #4]
 8004eb6:	e023      	b.n	8004f00 <HAL_RCC_OscConfig+0x434>
 8004eb8:	4b42      	ldr	r3, [pc, #264]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	061b      	lsls	r3, r3, #24
 8004ec6:	493f      	ldr	r1, [pc, #252]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60cb      	str	r3, [r1, #12]
 8004ecc:	e018      	b.n	8004f00 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004ece:	4b3d      	ldr	r3, [pc, #244]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a3c      	ldr	r2, [pc, #240]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004ed4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eda:	f7fc fa01 	bl	80012e0 <HAL_GetTick>
 8004ede:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ee2:	f7fc f9fd 	bl	80012e0 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e23d      	b.n	8005370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ef4:	4b33      	ldr	r3, [pc, #204]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1f0      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0308 	and.w	r3, r3, #8
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d036      	beq.n	8004f7a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d019      	beq.n	8004f48 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f14:	4b2b      	ldr	r3, [pc, #172]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004f16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f18:	4a2a      	ldr	r2, [pc, #168]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004f1a:	f043 0301 	orr.w	r3, r3, #1
 8004f1e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f20:	f7fc f9de 	bl	80012e0 <HAL_GetTick>
 8004f24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f28:	f7fc f9da 	bl	80012e0 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e21a      	b.n	8005370 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f3a:	4b22      	ldr	r3, [pc, #136]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004f3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0f0      	beq.n	8004f28 <HAL_RCC_OscConfig+0x45c>
 8004f46:	e018      	b.n	8004f7a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f48:	4b1e      	ldr	r3, [pc, #120]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004f4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f4c:	4a1d      	ldr	r2, [pc, #116]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004f4e:	f023 0301 	bic.w	r3, r3, #1
 8004f52:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f54:	f7fc f9c4 	bl	80012e0 <HAL_GetTick>
 8004f58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f5c:	f7fc f9c0 	bl	80012e0 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e200      	b.n	8005370 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f6e:	4b15      	ldr	r3, [pc, #84]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004f70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f0      	bne.n	8004f5c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d039      	beq.n	8004ffa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d01c      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a0c      	ldr	r2, [pc, #48]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004f94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f98:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f9a:	f7fc f9a1 	bl	80012e0 <HAL_GetTick>
 8004f9e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fa2:	f7fc f99d 	bl	80012e0 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e1dd      	b.n	8005370 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fb4:	4b03      	ldr	r3, [pc, #12]	@ (8004fc4 <HAL_RCC_OscConfig+0x4f8>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0f0      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x4d6>
 8004fc0:	e01b      	b.n	8004ffa <HAL_RCC_OscConfig+0x52e>
 8004fc2:	bf00      	nop
 8004fc4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fc8:	4b9b      	ldr	r3, [pc, #620]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a9a      	ldr	r2, [pc, #616]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 8004fce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fd2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fd4:	f7fc f984 	bl	80012e0 <HAL_GetTick>
 8004fd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fdc:	f7fc f980 	bl	80012e0 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e1c0      	b.n	8005370 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fee:	4b92      	ldr	r3, [pc, #584]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f0      	bne.n	8004fdc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 8081 	beq.w	800510a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005008:	4b8c      	ldr	r3, [pc, #560]	@ (800523c <HAL_RCC_OscConfig+0x770>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a8b      	ldr	r2, [pc, #556]	@ (800523c <HAL_RCC_OscConfig+0x770>)
 800500e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005012:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005014:	f7fc f964 	bl	80012e0 <HAL_GetTick>
 8005018:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800501c:	f7fc f960 	bl	80012e0 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b64      	cmp	r3, #100	@ 0x64
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e1a0      	b.n	8005370 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800502e:	4b83      	ldr	r3, [pc, #524]	@ (800523c <HAL_RCC_OscConfig+0x770>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0f0      	beq.n	800501c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d106      	bne.n	8005050 <HAL_RCC_OscConfig+0x584>
 8005042:	4b7d      	ldr	r3, [pc, #500]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 8005044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005046:	4a7c      	ldr	r2, [pc, #496]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 8005048:	f043 0301 	orr.w	r3, r3, #1
 800504c:	6713      	str	r3, [r2, #112]	@ 0x70
 800504e:	e02d      	b.n	80050ac <HAL_RCC_OscConfig+0x5e0>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10c      	bne.n	8005072 <HAL_RCC_OscConfig+0x5a6>
 8005058:	4b77      	ldr	r3, [pc, #476]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 800505a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800505c:	4a76      	ldr	r2, [pc, #472]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 800505e:	f023 0301 	bic.w	r3, r3, #1
 8005062:	6713      	str	r3, [r2, #112]	@ 0x70
 8005064:	4b74      	ldr	r3, [pc, #464]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 8005066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005068:	4a73      	ldr	r2, [pc, #460]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 800506a:	f023 0304 	bic.w	r3, r3, #4
 800506e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005070:	e01c      	b.n	80050ac <HAL_RCC_OscConfig+0x5e0>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2b05      	cmp	r3, #5
 8005078:	d10c      	bne.n	8005094 <HAL_RCC_OscConfig+0x5c8>
 800507a:	4b6f      	ldr	r3, [pc, #444]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 800507c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800507e:	4a6e      	ldr	r2, [pc, #440]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 8005080:	f043 0304 	orr.w	r3, r3, #4
 8005084:	6713      	str	r3, [r2, #112]	@ 0x70
 8005086:	4b6c      	ldr	r3, [pc, #432]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 8005088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508a:	4a6b      	ldr	r2, [pc, #428]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 800508c:	f043 0301 	orr.w	r3, r3, #1
 8005090:	6713      	str	r3, [r2, #112]	@ 0x70
 8005092:	e00b      	b.n	80050ac <HAL_RCC_OscConfig+0x5e0>
 8005094:	4b68      	ldr	r3, [pc, #416]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 8005096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005098:	4a67      	ldr	r2, [pc, #412]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 800509a:	f023 0301 	bic.w	r3, r3, #1
 800509e:	6713      	str	r3, [r2, #112]	@ 0x70
 80050a0:	4b65      	ldr	r3, [pc, #404]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 80050a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a4:	4a64      	ldr	r2, [pc, #400]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 80050a6:	f023 0304 	bic.w	r3, r3, #4
 80050aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d015      	beq.n	80050e0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b4:	f7fc f914 	bl	80012e0 <HAL_GetTick>
 80050b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050ba:	e00a      	b.n	80050d2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050bc:	f7fc f910 	bl	80012e0 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e14e      	b.n	8005370 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050d2:	4b59      	ldr	r3, [pc, #356]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 80050d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0ee      	beq.n	80050bc <HAL_RCC_OscConfig+0x5f0>
 80050de:	e014      	b.n	800510a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e0:	f7fc f8fe 	bl	80012e0 <HAL_GetTick>
 80050e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050e6:	e00a      	b.n	80050fe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050e8:	f7fc f8fa 	bl	80012e0 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e138      	b.n	8005370 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050fe:	4b4e      	ldr	r3, [pc, #312]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 8005100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1ee      	bne.n	80050e8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 812d 	beq.w	800536e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005114:	4b48      	ldr	r3, [pc, #288]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800511c:	2b18      	cmp	r3, #24
 800511e:	f000 80bd 	beq.w	800529c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005126:	2b02      	cmp	r3, #2
 8005128:	f040 809e 	bne.w	8005268 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800512c:	4b42      	ldr	r3, [pc, #264]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a41      	ldr	r2, [pc, #260]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 8005132:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005138:	f7fc f8d2 	bl	80012e0 <HAL_GetTick>
 800513c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005140:	f7fc f8ce 	bl	80012e0 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e10e      	b.n	8005370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005152:	4b39      	ldr	r3, [pc, #228]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1f0      	bne.n	8005140 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800515e:	4b36      	ldr	r3, [pc, #216]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 8005160:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005162:	4b37      	ldr	r3, [pc, #220]	@ (8005240 <HAL_RCC_OscConfig+0x774>)
 8005164:	4013      	ands	r3, r2
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800516e:	0112      	lsls	r2, r2, #4
 8005170:	430a      	orrs	r2, r1
 8005172:	4931      	ldr	r1, [pc, #196]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 8005174:	4313      	orrs	r3, r2
 8005176:	628b      	str	r3, [r1, #40]	@ 0x28
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517c:	3b01      	subs	r3, #1
 800517e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005186:	3b01      	subs	r3, #1
 8005188:	025b      	lsls	r3, r3, #9
 800518a:	b29b      	uxth	r3, r3
 800518c:	431a      	orrs	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005192:	3b01      	subs	r3, #1
 8005194:	041b      	lsls	r3, r3, #16
 8005196:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a0:	3b01      	subs	r3, #1
 80051a2:	061b      	lsls	r3, r3, #24
 80051a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051a8:	4923      	ldr	r1, [pc, #140]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80051ae:	4b22      	ldr	r3, [pc, #136]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 80051b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b2:	4a21      	ldr	r2, [pc, #132]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 80051b4:	f023 0301 	bic.w	r3, r3, #1
 80051b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80051ba:	4b1f      	ldr	r3, [pc, #124]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 80051bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051be:	4b21      	ldr	r3, [pc, #132]	@ (8005244 <HAL_RCC_OscConfig+0x778>)
 80051c0:	4013      	ands	r3, r2
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80051c6:	00d2      	lsls	r2, r2, #3
 80051c8:	491b      	ldr	r1, [pc, #108]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80051ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 80051d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d2:	f023 020c 	bic.w	r2, r3, #12
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051da:	4917      	ldr	r1, [pc, #92]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80051e0:	4b15      	ldr	r3, [pc, #84]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 80051e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e4:	f023 0202 	bic.w	r2, r3, #2
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ec:	4912      	ldr	r1, [pc, #72]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051f2:	4b11      	ldr	r3, [pc, #68]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 80051f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f6:	4a10      	ldr	r2, [pc, #64]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 80051f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 8005200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005202:	4a0d      	ldr	r2, [pc, #52]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 8005204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005208:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800520a:	4b0b      	ldr	r3, [pc, #44]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 800520c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520e:	4a0a      	ldr	r2, [pc, #40]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 8005210:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005214:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005216:	4b08      	ldr	r3, [pc, #32]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 8005218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521a:	4a07      	ldr	r2, [pc, #28]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 800521c:	f043 0301 	orr.w	r3, r3, #1
 8005220:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005222:	4b05      	ldr	r3, [pc, #20]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a04      	ldr	r2, [pc, #16]	@ (8005238 <HAL_RCC_OscConfig+0x76c>)
 8005228:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800522c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522e:	f7fc f857 	bl	80012e0 <HAL_GetTick>
 8005232:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005234:	e011      	b.n	800525a <HAL_RCC_OscConfig+0x78e>
 8005236:	bf00      	nop
 8005238:	58024400 	.word	0x58024400
 800523c:	58024800 	.word	0x58024800
 8005240:	fffffc0c 	.word	0xfffffc0c
 8005244:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005248:	f7fc f84a 	bl	80012e0 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b02      	cmp	r3, #2
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e08a      	b.n	8005370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800525a:	4b47      	ldr	r3, [pc, #284]	@ (8005378 <HAL_RCC_OscConfig+0x8ac>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0f0      	beq.n	8005248 <HAL_RCC_OscConfig+0x77c>
 8005266:	e082      	b.n	800536e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005268:	4b43      	ldr	r3, [pc, #268]	@ (8005378 <HAL_RCC_OscConfig+0x8ac>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a42      	ldr	r2, [pc, #264]	@ (8005378 <HAL_RCC_OscConfig+0x8ac>)
 800526e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005274:	f7fc f834 	bl	80012e0 <HAL_GetTick>
 8005278:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800527c:	f7fc f830 	bl	80012e0 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e070      	b.n	8005370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800528e:	4b3a      	ldr	r3, [pc, #232]	@ (8005378 <HAL_RCC_OscConfig+0x8ac>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1f0      	bne.n	800527c <HAL_RCC_OscConfig+0x7b0>
 800529a:	e068      	b.n	800536e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800529c:	4b36      	ldr	r3, [pc, #216]	@ (8005378 <HAL_RCC_OscConfig+0x8ac>)
 800529e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80052a2:	4b35      	ldr	r3, [pc, #212]	@ (8005378 <HAL_RCC_OscConfig+0x8ac>)
 80052a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d031      	beq.n	8005314 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f003 0203 	and.w	r2, r3, #3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d12a      	bne.n	8005314 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	091b      	lsrs	r3, r3, #4
 80052c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d122      	bne.n	8005314 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052da:	429a      	cmp	r2, r3
 80052dc:	d11a      	bne.n	8005314 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	0a5b      	lsrs	r3, r3, #9
 80052e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d111      	bne.n	8005314 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	0c1b      	lsrs	r3, r3, #16
 80052f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052fe:	429a      	cmp	r2, r3
 8005300:	d108      	bne.n	8005314 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	0e1b      	lsrs	r3, r3, #24
 8005306:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800530e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005310:	429a      	cmp	r2, r3
 8005312:	d001      	beq.n	8005318 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e02b      	b.n	8005370 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005318:	4b17      	ldr	r3, [pc, #92]	@ (8005378 <HAL_RCC_OscConfig+0x8ac>)
 800531a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800531c:	08db      	lsrs	r3, r3, #3
 800531e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005322:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	429a      	cmp	r2, r3
 800532c:	d01f      	beq.n	800536e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800532e:	4b12      	ldr	r3, [pc, #72]	@ (8005378 <HAL_RCC_OscConfig+0x8ac>)
 8005330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005332:	4a11      	ldr	r2, [pc, #68]	@ (8005378 <HAL_RCC_OscConfig+0x8ac>)
 8005334:	f023 0301 	bic.w	r3, r3, #1
 8005338:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800533a:	f7fb ffd1 	bl	80012e0 <HAL_GetTick>
 800533e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005340:	bf00      	nop
 8005342:	f7fb ffcd 	bl	80012e0 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534a:	4293      	cmp	r3, r2
 800534c:	d0f9      	beq.n	8005342 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800534e:	4b0a      	ldr	r3, [pc, #40]	@ (8005378 <HAL_RCC_OscConfig+0x8ac>)
 8005350:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005352:	4b0a      	ldr	r3, [pc, #40]	@ (800537c <HAL_RCC_OscConfig+0x8b0>)
 8005354:	4013      	ands	r3, r2
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800535a:	00d2      	lsls	r2, r2, #3
 800535c:	4906      	ldr	r1, [pc, #24]	@ (8005378 <HAL_RCC_OscConfig+0x8ac>)
 800535e:	4313      	orrs	r3, r2
 8005360:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005362:	4b05      	ldr	r3, [pc, #20]	@ (8005378 <HAL_RCC_OscConfig+0x8ac>)
 8005364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005366:	4a04      	ldr	r2, [pc, #16]	@ (8005378 <HAL_RCC_OscConfig+0x8ac>)
 8005368:	f043 0301 	orr.w	r3, r3, #1
 800536c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3730      	adds	r7, #48	@ 0x30
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	58024400 	.word	0x58024400
 800537c:	ffff0007 	.word	0xffff0007

08005380 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e19c      	b.n	80056ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005394:	4b8a      	ldr	r3, [pc, #552]	@ (80055c0 <HAL_RCC_ClockConfig+0x240>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 030f 	and.w	r3, r3, #15
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d910      	bls.n	80053c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a2:	4b87      	ldr	r3, [pc, #540]	@ (80055c0 <HAL_RCC_ClockConfig+0x240>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f023 020f 	bic.w	r2, r3, #15
 80053aa:	4985      	ldr	r1, [pc, #532]	@ (80055c0 <HAL_RCC_ClockConfig+0x240>)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b2:	4b83      	ldr	r3, [pc, #524]	@ (80055c0 <HAL_RCC_ClockConfig+0x240>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d001      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e184      	b.n	80056ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0304 	and.w	r3, r3, #4
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d010      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	4b7b      	ldr	r3, [pc, #492]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053dc:	429a      	cmp	r2, r3
 80053de:	d908      	bls.n	80053f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053e0:	4b78      	ldr	r3, [pc, #480]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	4975      	ldr	r1, [pc, #468]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0308 	and.w	r3, r3, #8
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d010      	beq.n	8005420 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	695a      	ldr	r2, [r3, #20]
 8005402:	4b70      	ldr	r3, [pc, #448]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800540a:	429a      	cmp	r2, r3
 800540c:	d908      	bls.n	8005420 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800540e:	4b6d      	ldr	r3, [pc, #436]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	496a      	ldr	r1, [pc, #424]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 800541c:	4313      	orrs	r3, r2
 800541e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0310 	and.w	r3, r3, #16
 8005428:	2b00      	cmp	r3, #0
 800542a:	d010      	beq.n	800544e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	699a      	ldr	r2, [r3, #24]
 8005430:	4b64      	ldr	r3, [pc, #400]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 8005432:	69db      	ldr	r3, [r3, #28]
 8005434:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005438:	429a      	cmp	r2, r3
 800543a:	d908      	bls.n	800544e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800543c:	4b61      	ldr	r3, [pc, #388]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 800543e:	69db      	ldr	r3, [r3, #28]
 8005440:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	495e      	ldr	r1, [pc, #376]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 800544a:	4313      	orrs	r3, r2
 800544c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0320 	and.w	r3, r3, #32
 8005456:	2b00      	cmp	r3, #0
 8005458:	d010      	beq.n	800547c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69da      	ldr	r2, [r3, #28]
 800545e:	4b59      	ldr	r3, [pc, #356]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005466:	429a      	cmp	r2, r3
 8005468:	d908      	bls.n	800547c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800546a:	4b56      	ldr	r3, [pc, #344]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	4953      	ldr	r1, [pc, #332]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 8005478:	4313      	orrs	r3, r2
 800547a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d010      	beq.n	80054aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68da      	ldr	r2, [r3, #12]
 800548c:	4b4d      	ldr	r3, [pc, #308]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	f003 030f 	and.w	r3, r3, #15
 8005494:	429a      	cmp	r2, r3
 8005496:	d908      	bls.n	80054aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005498:	4b4a      	ldr	r3, [pc, #296]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	f023 020f 	bic.w	r2, r3, #15
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	4947      	ldr	r1, [pc, #284]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d055      	beq.n	8005562 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80054b6:	4b43      	ldr	r3, [pc, #268]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	4940      	ldr	r1, [pc, #256]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d107      	bne.n	80054e0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054d0:	4b3c      	ldr	r3, [pc, #240]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d121      	bne.n	8005520 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e0f6      	b.n	80056ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	2b03      	cmp	r3, #3
 80054e6:	d107      	bne.n	80054f8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054e8:	4b36      	ldr	r3, [pc, #216]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d115      	bne.n	8005520 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e0ea      	b.n	80056ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d107      	bne.n	8005510 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005500:	4b30      	ldr	r3, [pc, #192]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005508:	2b00      	cmp	r3, #0
 800550a:	d109      	bne.n	8005520 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e0de      	b.n	80056ce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005510:	4b2c      	ldr	r3, [pc, #176]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e0d6      	b.n	80056ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005520:	4b28      	ldr	r3, [pc, #160]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	f023 0207 	bic.w	r2, r3, #7
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	4925      	ldr	r1, [pc, #148]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 800552e:	4313      	orrs	r3, r2
 8005530:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005532:	f7fb fed5 	bl	80012e0 <HAL_GetTick>
 8005536:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005538:	e00a      	b.n	8005550 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800553a:	f7fb fed1 	bl	80012e0 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005548:	4293      	cmp	r3, r2
 800554a:	d901      	bls.n	8005550 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e0be      	b.n	80056ce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005550:	4b1c      	ldr	r3, [pc, #112]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	429a      	cmp	r2, r3
 8005560:	d1eb      	bne.n	800553a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d010      	beq.n	8005590 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	4b14      	ldr	r3, [pc, #80]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	f003 030f 	and.w	r3, r3, #15
 800557a:	429a      	cmp	r2, r3
 800557c:	d208      	bcs.n	8005590 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800557e:	4b11      	ldr	r3, [pc, #68]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	f023 020f 	bic.w	r2, r3, #15
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	490e      	ldr	r1, [pc, #56]	@ (80055c4 <HAL_RCC_ClockConfig+0x244>)
 800558c:	4313      	orrs	r3, r2
 800558e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005590:	4b0b      	ldr	r3, [pc, #44]	@ (80055c0 <HAL_RCC_ClockConfig+0x240>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 030f 	and.w	r3, r3, #15
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	429a      	cmp	r2, r3
 800559c:	d214      	bcs.n	80055c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800559e:	4b08      	ldr	r3, [pc, #32]	@ (80055c0 <HAL_RCC_ClockConfig+0x240>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f023 020f 	bic.w	r2, r3, #15
 80055a6:	4906      	ldr	r1, [pc, #24]	@ (80055c0 <HAL_RCC_ClockConfig+0x240>)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ae:	4b04      	ldr	r3, [pc, #16]	@ (80055c0 <HAL_RCC_ClockConfig+0x240>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 030f 	and.w	r3, r3, #15
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d005      	beq.n	80055c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e086      	b.n	80056ce <HAL_RCC_ClockConfig+0x34e>
 80055c0:	52002000 	.word	0x52002000
 80055c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0304 	and.w	r3, r3, #4
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d010      	beq.n	80055f6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691a      	ldr	r2, [r3, #16]
 80055d8:	4b3f      	ldr	r3, [pc, #252]	@ (80056d8 <HAL_RCC_ClockConfig+0x358>)
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d208      	bcs.n	80055f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055e4:	4b3c      	ldr	r3, [pc, #240]	@ (80056d8 <HAL_RCC_ClockConfig+0x358>)
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	4939      	ldr	r1, [pc, #228]	@ (80056d8 <HAL_RCC_ClockConfig+0x358>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0308 	and.w	r3, r3, #8
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d010      	beq.n	8005624 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	695a      	ldr	r2, [r3, #20]
 8005606:	4b34      	ldr	r3, [pc, #208]	@ (80056d8 <HAL_RCC_ClockConfig+0x358>)
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800560e:	429a      	cmp	r2, r3
 8005610:	d208      	bcs.n	8005624 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005612:	4b31      	ldr	r3, [pc, #196]	@ (80056d8 <HAL_RCC_ClockConfig+0x358>)
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	492e      	ldr	r1, [pc, #184]	@ (80056d8 <HAL_RCC_ClockConfig+0x358>)
 8005620:	4313      	orrs	r3, r2
 8005622:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	2b00      	cmp	r3, #0
 800562e:	d010      	beq.n	8005652 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	699a      	ldr	r2, [r3, #24]
 8005634:	4b28      	ldr	r3, [pc, #160]	@ (80056d8 <HAL_RCC_ClockConfig+0x358>)
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800563c:	429a      	cmp	r2, r3
 800563e:	d208      	bcs.n	8005652 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005640:	4b25      	ldr	r3, [pc, #148]	@ (80056d8 <HAL_RCC_ClockConfig+0x358>)
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	4922      	ldr	r1, [pc, #136]	@ (80056d8 <HAL_RCC_ClockConfig+0x358>)
 800564e:	4313      	orrs	r3, r2
 8005650:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0320 	and.w	r3, r3, #32
 800565a:	2b00      	cmp	r3, #0
 800565c:	d010      	beq.n	8005680 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	69da      	ldr	r2, [r3, #28]
 8005662:	4b1d      	ldr	r3, [pc, #116]	@ (80056d8 <HAL_RCC_ClockConfig+0x358>)
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800566a:	429a      	cmp	r2, r3
 800566c:	d208      	bcs.n	8005680 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800566e:	4b1a      	ldr	r3, [pc, #104]	@ (80056d8 <HAL_RCC_ClockConfig+0x358>)
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	4917      	ldr	r1, [pc, #92]	@ (80056d8 <HAL_RCC_ClockConfig+0x358>)
 800567c:	4313      	orrs	r3, r2
 800567e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005680:	f000 f834 	bl	80056ec <HAL_RCC_GetSysClockFreq>
 8005684:	4602      	mov	r2, r0
 8005686:	4b14      	ldr	r3, [pc, #80]	@ (80056d8 <HAL_RCC_ClockConfig+0x358>)
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	0a1b      	lsrs	r3, r3, #8
 800568c:	f003 030f 	and.w	r3, r3, #15
 8005690:	4912      	ldr	r1, [pc, #72]	@ (80056dc <HAL_RCC_ClockConfig+0x35c>)
 8005692:	5ccb      	ldrb	r3, [r1, r3]
 8005694:	f003 031f 	and.w	r3, r3, #31
 8005698:	fa22 f303 	lsr.w	r3, r2, r3
 800569c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800569e:	4b0e      	ldr	r3, [pc, #56]	@ (80056d8 <HAL_RCC_ClockConfig+0x358>)
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	4a0d      	ldr	r2, [pc, #52]	@ (80056dc <HAL_RCC_ClockConfig+0x35c>)
 80056a8:	5cd3      	ldrb	r3, [r2, r3]
 80056aa:	f003 031f 	and.w	r3, r3, #31
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	fa22 f303 	lsr.w	r3, r2, r3
 80056b4:	4a0a      	ldr	r2, [pc, #40]	@ (80056e0 <HAL_RCC_ClockConfig+0x360>)
 80056b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056b8:	4a0a      	ldr	r2, [pc, #40]	@ (80056e4 <HAL_RCC_ClockConfig+0x364>)
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80056be:	4b0a      	ldr	r3, [pc, #40]	@ (80056e8 <HAL_RCC_ClockConfig+0x368>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fb fdc2 	bl	800124c <HAL_InitTick>
 80056c8:	4603      	mov	r3, r0
 80056ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80056cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	58024400 	.word	0x58024400
 80056dc:	08009b00 	.word	0x08009b00
 80056e0:	24000004 	.word	0x24000004
 80056e4:	24000000 	.word	0x24000000
 80056e8:	24000024 	.word	0x24000024

080056ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b089      	sub	sp, #36	@ 0x24
 80056f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056f2:	4bb3      	ldr	r3, [pc, #716]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056fa:	2b18      	cmp	r3, #24
 80056fc:	f200 8155 	bhi.w	80059aa <HAL_RCC_GetSysClockFreq+0x2be>
 8005700:	a201      	add	r2, pc, #4	@ (adr r2, 8005708 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005706:	bf00      	nop
 8005708:	0800576d 	.word	0x0800576d
 800570c:	080059ab 	.word	0x080059ab
 8005710:	080059ab 	.word	0x080059ab
 8005714:	080059ab 	.word	0x080059ab
 8005718:	080059ab 	.word	0x080059ab
 800571c:	080059ab 	.word	0x080059ab
 8005720:	080059ab 	.word	0x080059ab
 8005724:	080059ab 	.word	0x080059ab
 8005728:	08005793 	.word	0x08005793
 800572c:	080059ab 	.word	0x080059ab
 8005730:	080059ab 	.word	0x080059ab
 8005734:	080059ab 	.word	0x080059ab
 8005738:	080059ab 	.word	0x080059ab
 800573c:	080059ab 	.word	0x080059ab
 8005740:	080059ab 	.word	0x080059ab
 8005744:	080059ab 	.word	0x080059ab
 8005748:	08005799 	.word	0x08005799
 800574c:	080059ab 	.word	0x080059ab
 8005750:	080059ab 	.word	0x080059ab
 8005754:	080059ab 	.word	0x080059ab
 8005758:	080059ab 	.word	0x080059ab
 800575c:	080059ab 	.word	0x080059ab
 8005760:	080059ab 	.word	0x080059ab
 8005764:	080059ab 	.word	0x080059ab
 8005768:	0800579f 	.word	0x0800579f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800576c:	4b94      	ldr	r3, [pc, #592]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0320 	and.w	r3, r3, #32
 8005774:	2b00      	cmp	r3, #0
 8005776:	d009      	beq.n	800578c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005778:	4b91      	ldr	r3, [pc, #580]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	08db      	lsrs	r3, r3, #3
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	4a90      	ldr	r2, [pc, #576]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005784:	fa22 f303 	lsr.w	r3, r2, r3
 8005788:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800578a:	e111      	b.n	80059b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800578c:	4b8d      	ldr	r3, [pc, #564]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800578e:	61bb      	str	r3, [r7, #24]
      break;
 8005790:	e10e      	b.n	80059b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005792:	4b8d      	ldr	r3, [pc, #564]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005794:	61bb      	str	r3, [r7, #24]
      break;
 8005796:	e10b      	b.n	80059b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005798:	4b8c      	ldr	r3, [pc, #560]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800579a:	61bb      	str	r3, [r7, #24]
      break;
 800579c:	e108      	b.n	80059b0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800579e:	4b88      	ldr	r3, [pc, #544]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a2:	f003 0303 	and.w	r3, r3, #3
 80057a6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80057a8:	4b85      	ldr	r3, [pc, #532]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ac:	091b      	lsrs	r3, r3, #4
 80057ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057b2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80057b4:	4b82      	ldr	r3, [pc, #520]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80057be:	4b80      	ldr	r3, [pc, #512]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057c2:	08db      	lsrs	r3, r3, #3
 80057c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	fb02 f303 	mul.w	r3, r2, r3
 80057ce:	ee07 3a90 	vmov	s15, r3
 80057d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 80e1 	beq.w	80059a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	f000 8083 	beq.w	80058f0 <HAL_RCC_GetSysClockFreq+0x204>
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	f200 80a1 	bhi.w	8005934 <HAL_RCC_GetSysClockFreq+0x248>
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <HAL_RCC_GetSysClockFreq+0x114>
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d056      	beq.n	80058ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80057fe:	e099      	b.n	8005934 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005800:	4b6f      	ldr	r3, [pc, #444]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0320 	and.w	r3, r3, #32
 8005808:	2b00      	cmp	r3, #0
 800580a:	d02d      	beq.n	8005868 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800580c:	4b6c      	ldr	r3, [pc, #432]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	08db      	lsrs	r3, r3, #3
 8005812:	f003 0303 	and.w	r3, r3, #3
 8005816:	4a6b      	ldr	r2, [pc, #428]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005818:	fa22 f303 	lsr.w	r3, r2, r3
 800581c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	ee07 3a90 	vmov	s15, r3
 8005824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	ee07 3a90 	vmov	s15, r3
 800582e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005836:	4b62      	ldr	r3, [pc, #392]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800583a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005846:	ed97 6a02 	vldr	s12, [r7, #8]
 800584a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80059d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800584e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005856:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800585a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800585e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005862:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005866:	e087      	b.n	8005978 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	ee07 3a90 	vmov	s15, r3
 800586e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005872:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80059d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800587a:	4b51      	ldr	r3, [pc, #324]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800587c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005882:	ee07 3a90 	vmov	s15, r3
 8005886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800588a:	ed97 6a02 	vldr	s12, [r7, #8]
 800588e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80059d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800589a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800589e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058aa:	e065      	b.n	8005978 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	ee07 3a90 	vmov	s15, r3
 80058b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80059d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80058ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058be:	4b40      	ldr	r3, [pc, #256]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c6:	ee07 3a90 	vmov	s15, r3
 80058ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80058d2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80059d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058ee:	e043      	b.n	8005978 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	ee07 3a90 	vmov	s15, r3
 80058f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058fa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80059dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80058fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005902:	4b2f      	ldr	r3, [pc, #188]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800590a:	ee07 3a90 	vmov	s15, r3
 800590e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005912:	ed97 6a02 	vldr	s12, [r7, #8]
 8005916:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80059d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800591a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800591e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005922:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800592a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800592e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005932:	e021      	b.n	8005978 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	ee07 3a90 	vmov	s15, r3
 800593a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80059d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005946:	4b1e      	ldr	r3, [pc, #120]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800594a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800594e:	ee07 3a90 	vmov	s15, r3
 8005952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005956:	ed97 6a02 	vldr	s12, [r7, #8]
 800595a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80059d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800595e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005966:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800596a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800596e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005972:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005976:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005978:	4b11      	ldr	r3, [pc, #68]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800597a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597c:	0a5b      	lsrs	r3, r3, #9
 800597e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005982:	3301      	adds	r3, #1
 8005984:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	ee07 3a90 	vmov	s15, r3
 800598c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005990:	edd7 6a07 	vldr	s13, [r7, #28]
 8005994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800599c:	ee17 3a90 	vmov	r3, s15
 80059a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80059a2:	e005      	b.n	80059b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	61bb      	str	r3, [r7, #24]
      break;
 80059a8:	e002      	b.n	80059b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80059aa:	4b07      	ldr	r3, [pc, #28]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80059ac:	61bb      	str	r3, [r7, #24]
      break;
 80059ae:	bf00      	nop
  }

  return sysclockfreq;
 80059b0:	69bb      	ldr	r3, [r7, #24]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3724      	adds	r7, #36	@ 0x24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	58024400 	.word	0x58024400
 80059c4:	03d09000 	.word	0x03d09000
 80059c8:	003d0900 	.word	0x003d0900
 80059cc:	017d7840 	.word	0x017d7840
 80059d0:	46000000 	.word	0x46000000
 80059d4:	4c742400 	.word	0x4c742400
 80059d8:	4a742400 	.word	0x4a742400
 80059dc:	4bbebc20 	.word	0x4bbebc20

080059e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80059e6:	f7ff fe81 	bl	80056ec <HAL_RCC_GetSysClockFreq>
 80059ea:	4602      	mov	r2, r0
 80059ec:	4b10      	ldr	r3, [pc, #64]	@ (8005a30 <HAL_RCC_GetHCLKFreq+0x50>)
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	0a1b      	lsrs	r3, r3, #8
 80059f2:	f003 030f 	and.w	r3, r3, #15
 80059f6:	490f      	ldr	r1, [pc, #60]	@ (8005a34 <HAL_RCC_GetHCLKFreq+0x54>)
 80059f8:	5ccb      	ldrb	r3, [r1, r3]
 80059fa:	f003 031f 	and.w	r3, r3, #31
 80059fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005a02:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a04:	4b0a      	ldr	r3, [pc, #40]	@ (8005a30 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	f003 030f 	and.w	r3, r3, #15
 8005a0c:	4a09      	ldr	r2, [pc, #36]	@ (8005a34 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a0e:	5cd3      	ldrb	r3, [r2, r3]
 8005a10:	f003 031f 	and.w	r3, r3, #31
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1a:	4a07      	ldr	r2, [pc, #28]	@ (8005a38 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a1c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a1e:	4a07      	ldr	r2, [pc, #28]	@ (8005a3c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005a24:	4b04      	ldr	r3, [pc, #16]	@ (8005a38 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a26:	681b      	ldr	r3, [r3, #0]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3708      	adds	r7, #8
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	58024400 	.word	0x58024400
 8005a34:	08009b00 	.word	0x08009b00
 8005a38:	24000004 	.word	0x24000004
 8005a3c:	24000000 	.word	0x24000000

08005a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005a44:	f7ff ffcc 	bl	80059e0 <HAL_RCC_GetHCLKFreq>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	4b06      	ldr	r3, [pc, #24]	@ (8005a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	091b      	lsrs	r3, r3, #4
 8005a50:	f003 0307 	and.w	r3, r3, #7
 8005a54:	4904      	ldr	r1, [pc, #16]	@ (8005a68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a56:	5ccb      	ldrb	r3, [r1, r3]
 8005a58:	f003 031f 	and.w	r3, r3, #31
 8005a5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	58024400 	.word	0x58024400
 8005a68:	08009b00 	.word	0x08009b00

08005a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005a70:	f7ff ffb6 	bl	80059e0 <HAL_RCC_GetHCLKFreq>
 8005a74:	4602      	mov	r2, r0
 8005a76:	4b06      	ldr	r3, [pc, #24]	@ (8005a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	0a1b      	lsrs	r3, r3, #8
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	4904      	ldr	r1, [pc, #16]	@ (8005a94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a82:	5ccb      	ldrb	r3, [r1, r3]
 8005a84:	f003 031f 	and.w	r3, r3, #31
 8005a88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	58024400 	.word	0x58024400
 8005a94:	08009b00 	.word	0x08009b00

08005a98 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a9c:	b0ca      	sub	sp, #296	@ 0x128
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005aaa:	2300      	movs	r3, #0
 8005aac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005abc:	2500      	movs	r5, #0
 8005abe:	ea54 0305 	orrs.w	r3, r4, r5
 8005ac2:	d049      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005aca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ace:	d02f      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005ad0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ad4:	d828      	bhi.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005ad6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ada:	d01a      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005adc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ae0:	d822      	bhi.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005ae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aea:	d007      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005aec:	e01c      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aee:	4bb8      	ldr	r3, [pc, #736]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af2:	4ab7      	ldr	r2, [pc, #732]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005af8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005afa:	e01a      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b00:	3308      	adds	r3, #8
 8005b02:	2102      	movs	r1, #2
 8005b04:	4618      	mov	r0, r3
 8005b06:	f002 fb61 	bl	80081cc <RCCEx_PLL2_Config>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b10:	e00f      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b16:	3328      	adds	r3, #40	@ 0x28
 8005b18:	2102      	movs	r1, #2
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f002 fc08 	bl	8008330 <RCCEx_PLL3_Config>
 8005b20:	4603      	mov	r3, r0
 8005b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b26:	e004      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b2e:	e000      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005b30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10a      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b3a:	4ba5      	ldr	r3, [pc, #660]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b3e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b48:	4aa1      	ldr	r2, [pc, #644]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b4a:	430b      	orrs	r3, r1
 8005b4c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b4e:	e003      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b60:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005b64:	f04f 0900 	mov.w	r9, #0
 8005b68:	ea58 0309 	orrs.w	r3, r8, r9
 8005b6c:	d047      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b74:	2b04      	cmp	r3, #4
 8005b76:	d82a      	bhi.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005b78:	a201      	add	r2, pc, #4	@ (adr r2, 8005b80 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7e:	bf00      	nop
 8005b80:	08005b95 	.word	0x08005b95
 8005b84:	08005ba3 	.word	0x08005ba3
 8005b88:	08005bb9 	.word	0x08005bb9
 8005b8c:	08005bd7 	.word	0x08005bd7
 8005b90:	08005bd7 	.word	0x08005bd7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b94:	4b8e      	ldr	r3, [pc, #568]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b98:	4a8d      	ldr	r2, [pc, #564]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ba0:	e01a      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba6:	3308      	adds	r3, #8
 8005ba8:	2100      	movs	r1, #0
 8005baa:	4618      	mov	r0, r3
 8005bac:	f002 fb0e 	bl	80081cc <RCCEx_PLL2_Config>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bb6:	e00f      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bbc:	3328      	adds	r3, #40	@ 0x28
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f002 fbb5 	bl	8008330 <RCCEx_PLL3_Config>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bcc:	e004      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bd4:	e000      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005bd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10a      	bne.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005be0:	4b7b      	ldr	r3, [pc, #492]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005be4:	f023 0107 	bic.w	r1, r3, #7
 8005be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bee:	4a78      	ldr	r2, [pc, #480]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bf0:	430b      	orrs	r3, r1
 8005bf2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bf4:	e003      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005c0a:	f04f 0b00 	mov.w	fp, #0
 8005c0e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005c12:	d04c      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c1e:	d030      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005c20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c24:	d829      	bhi.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005c26:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c28:	d02d      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005c2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c2c:	d825      	bhi.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005c2e:	2b80      	cmp	r3, #128	@ 0x80
 8005c30:	d018      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005c32:	2b80      	cmp	r3, #128	@ 0x80
 8005c34:	d821      	bhi.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d002      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005c3a:	2b40      	cmp	r3, #64	@ 0x40
 8005c3c:	d007      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005c3e:	e01c      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c40:	4b63      	ldr	r3, [pc, #396]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c44:	4a62      	ldr	r2, [pc, #392]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005c4c:	e01c      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c52:	3308      	adds	r3, #8
 8005c54:	2100      	movs	r1, #0
 8005c56:	4618      	mov	r0, r3
 8005c58:	f002 fab8 	bl	80081cc <RCCEx_PLL2_Config>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005c62:	e011      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c68:	3328      	adds	r3, #40	@ 0x28
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f002 fb5f 	bl	8008330 <RCCEx_PLL3_Config>
 8005c72:	4603      	mov	r3, r0
 8005c74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005c78:	e006      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c80:	e002      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005c82:	bf00      	nop
 8005c84:	e000      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005c86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10a      	bne.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005c90:	4b4f      	ldr	r3, [pc, #316]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c94:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c9e:	4a4c      	ldr	r2, [pc, #304]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ca0:	430b      	orrs	r3, r1
 8005ca2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ca4:	e003      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005caa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005cba:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005cc4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	d053      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005cd6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cda:	d035      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005cdc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ce0:	d82e      	bhi.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005ce2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005ce6:	d031      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005ce8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005cec:	d828      	bhi.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005cee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cf2:	d01a      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005cf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cf8:	d822      	bhi.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005cfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d02:	d007      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005d04:	e01c      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d06:	4b32      	ldr	r3, [pc, #200]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0a:	4a31      	ldr	r2, [pc, #196]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d12:	e01c      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d18:	3308      	adds	r3, #8
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f002 fa55 	bl	80081cc <RCCEx_PLL2_Config>
 8005d22:	4603      	mov	r3, r0
 8005d24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d28:	e011      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d2e:	3328      	adds	r3, #40	@ 0x28
 8005d30:	2100      	movs	r1, #0
 8005d32:	4618      	mov	r0, r3
 8005d34:	f002 fafc 	bl	8008330 <RCCEx_PLL3_Config>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d3e:	e006      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d46:	e002      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005d48:	bf00      	nop
 8005d4a:	e000      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005d4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10b      	bne.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005d56:	4b1e      	ldr	r3, [pc, #120]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d5a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005d66:	4a1a      	ldr	r2, [pc, #104]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d68:	430b      	orrs	r3, r1
 8005d6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d6c:	e003      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005d82:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005d86:	2300      	movs	r3, #0
 8005d88:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005d8c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005d90:	460b      	mov	r3, r1
 8005d92:	4313      	orrs	r3, r2
 8005d94:	d056      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005da2:	d038      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005da4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005da8:	d831      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005daa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005dae:	d034      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005db0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005db4:	d82b      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005db6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005dba:	d01d      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005dbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005dc0:	d825      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d006      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005dc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005dca:	d00a      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005dcc:	e01f      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005dce:	bf00      	nop
 8005dd0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dd4:	4ba2      	ldr	r3, [pc, #648]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd8:	4aa1      	ldr	r2, [pc, #644]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005de0:	e01c      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de6:	3308      	adds	r3, #8
 8005de8:	2100      	movs	r1, #0
 8005dea:	4618      	mov	r0, r3
 8005dec:	f002 f9ee 	bl	80081cc <RCCEx_PLL2_Config>
 8005df0:	4603      	mov	r3, r0
 8005df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005df6:	e011      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfc:	3328      	adds	r3, #40	@ 0x28
 8005dfe:	2100      	movs	r1, #0
 8005e00:	4618      	mov	r0, r3
 8005e02:	f002 fa95 	bl	8008330 <RCCEx_PLL3_Config>
 8005e06:	4603      	mov	r3, r0
 8005e08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e0c:	e006      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e14:	e002      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005e16:	bf00      	nop
 8005e18:	e000      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10b      	bne.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005e24:	4b8e      	ldr	r3, [pc, #568]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e28:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005e34:	4a8a      	ldr	r2, [pc, #552]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e36:	430b      	orrs	r3, r1
 8005e38:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e3a:	e003      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005e50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005e54:	2300      	movs	r3, #0
 8005e56:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005e5a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4313      	orrs	r3, r2
 8005e62:	d03a      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e6a:	2b30      	cmp	r3, #48	@ 0x30
 8005e6c:	d01f      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005e6e:	2b30      	cmp	r3, #48	@ 0x30
 8005e70:	d819      	bhi.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005e72:	2b20      	cmp	r3, #32
 8005e74:	d00c      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	d815      	bhi.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d019      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005e7e:	2b10      	cmp	r3, #16
 8005e80:	d111      	bne.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e82:	4b77      	ldr	r3, [pc, #476]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e86:	4a76      	ldr	r2, [pc, #472]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005e8e:	e011      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e94:	3308      	adds	r3, #8
 8005e96:	2102      	movs	r1, #2
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f002 f997 	bl	80081cc <RCCEx_PLL2_Config>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005ea4:	e006      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005eac:	e002      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005eae:	bf00      	nop
 8005eb0:	e000      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005eb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d10a      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ebc:	4b68      	ldr	r3, [pc, #416]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ec0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eca:	4a65      	ldr	r2, [pc, #404]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ecc:	430b      	orrs	r3, r1
 8005ece:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ed0:	e003      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ed6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005ee6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005eea:	2300      	movs	r3, #0
 8005eec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005ef0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	d051      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f04:	d035      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005f06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f0a:	d82e      	bhi.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005f0c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f10:	d031      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005f12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f16:	d828      	bhi.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005f18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f1c:	d01a      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005f1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f22:	d822      	bhi.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d003      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005f28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f2c:	d007      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005f2e:	e01c      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f30:	4b4b      	ldr	r3, [pc, #300]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f34:	4a4a      	ldr	r2, [pc, #296]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f3c:	e01c      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f42:	3308      	adds	r3, #8
 8005f44:	2100      	movs	r1, #0
 8005f46:	4618      	mov	r0, r3
 8005f48:	f002 f940 	bl	80081cc <RCCEx_PLL2_Config>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f52:	e011      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f58:	3328      	adds	r3, #40	@ 0x28
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f002 f9e7 	bl	8008330 <RCCEx_PLL3_Config>
 8005f62:	4603      	mov	r3, r0
 8005f64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f68:	e006      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f70:	e002      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005f72:	bf00      	nop
 8005f74:	e000      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005f76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10a      	bne.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f80:	4b37      	ldr	r3, [pc, #220]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f84:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f8e:	4a34      	ldr	r2, [pc, #208]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f90:	430b      	orrs	r3, r1
 8005f92:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f94:	e003      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005faa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005fb4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	d056      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fc8:	d033      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005fca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fce:	d82c      	bhi.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005fd0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005fd4:	d02f      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005fd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005fda:	d826      	bhi.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005fdc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005fe0:	d02b      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005fe2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005fe6:	d820      	bhi.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005fe8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fec:	d012      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005fee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ff2:	d81a      	bhi.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d022      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ffc:	d115      	bne.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006002:	3308      	adds	r3, #8
 8006004:	2101      	movs	r1, #1
 8006006:	4618      	mov	r0, r3
 8006008:	f002 f8e0 	bl	80081cc <RCCEx_PLL2_Config>
 800600c:	4603      	mov	r3, r0
 800600e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006012:	e015      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006018:	3328      	adds	r3, #40	@ 0x28
 800601a:	2101      	movs	r1, #1
 800601c:	4618      	mov	r0, r3
 800601e:	f002 f987 	bl	8008330 <RCCEx_PLL3_Config>
 8006022:	4603      	mov	r3, r0
 8006024:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006028:	e00a      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006030:	e006      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006032:	bf00      	nop
 8006034:	e004      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006036:	bf00      	nop
 8006038:	e002      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800603a:	bf00      	nop
 800603c:	e000      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800603e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006040:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10d      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006048:	4b05      	ldr	r3, [pc, #20]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800604a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800604c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006054:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006056:	4a02      	ldr	r2, [pc, #8]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006058:	430b      	orrs	r3, r1
 800605a:	6513      	str	r3, [r2, #80]	@ 0x50
 800605c:	e006      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800605e:	bf00      	nop
 8006060:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006064:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006068:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800606c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006074:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006078:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800607c:	2300      	movs	r3, #0
 800607e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006082:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006086:	460b      	mov	r3, r1
 8006088:	4313      	orrs	r3, r2
 800608a:	d055      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800608c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006090:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006094:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006098:	d033      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800609a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800609e:	d82c      	bhi.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 80060a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060a4:	d02f      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80060a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060aa:	d826      	bhi.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 80060ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80060b0:	d02b      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80060b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80060b6:	d820      	bhi.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 80060b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060bc:	d012      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80060be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060c2:	d81a      	bhi.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d022      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80060c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060cc:	d115      	bne.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d2:	3308      	adds	r3, #8
 80060d4:	2101      	movs	r1, #1
 80060d6:	4618      	mov	r0, r3
 80060d8:	f002 f878 	bl	80081cc <RCCEx_PLL2_Config>
 80060dc:	4603      	mov	r3, r0
 80060de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80060e2:	e015      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e8:	3328      	adds	r3, #40	@ 0x28
 80060ea:	2101      	movs	r1, #1
 80060ec:	4618      	mov	r0, r3
 80060ee:	f002 f91f 	bl	8008330 <RCCEx_PLL3_Config>
 80060f2:	4603      	mov	r3, r0
 80060f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80060f8:	e00a      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006100:	e006      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006102:	bf00      	nop
 8006104:	e004      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006106:	bf00      	nop
 8006108:	e002      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800610a:	bf00      	nop
 800610c:	e000      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800610e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006110:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10b      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006118:	4ba3      	ldr	r3, [pc, #652]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800611a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800611c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006124:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006128:	4a9f      	ldr	r2, [pc, #636]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800612a:	430b      	orrs	r3, r1
 800612c:	6593      	str	r3, [r2, #88]	@ 0x58
 800612e:	e003      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006130:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006134:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006140:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006144:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006148:	2300      	movs	r3, #0
 800614a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800614e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006152:	460b      	mov	r3, r1
 8006154:	4313      	orrs	r3, r2
 8006156:	d037      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800615c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800615e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006162:	d00e      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006164:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006168:	d816      	bhi.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800616a:	2b00      	cmp	r3, #0
 800616c:	d018      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800616e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006172:	d111      	bne.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006174:	4b8c      	ldr	r3, [pc, #560]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006178:	4a8b      	ldr	r2, [pc, #556]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800617a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800617e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006180:	e00f      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006186:	3308      	adds	r3, #8
 8006188:	2101      	movs	r1, #1
 800618a:	4618      	mov	r0, r3
 800618c:	f002 f81e 	bl	80081cc <RCCEx_PLL2_Config>
 8006190:	4603      	mov	r3, r0
 8006192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006196:	e004      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800619e:	e000      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80061a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10a      	bne.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80061aa:	4b7f      	ldr	r3, [pc, #508]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061ae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80061b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061b8:	4a7b      	ldr	r2, [pc, #492]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061ba:	430b      	orrs	r3, r1
 80061bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80061be:	e003      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80061c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80061d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061d8:	2300      	movs	r3, #0
 80061da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80061de:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80061e2:	460b      	mov	r3, r1
 80061e4:	4313      	orrs	r3, r2
 80061e6:	d039      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80061e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061ee:	2b03      	cmp	r3, #3
 80061f0:	d81c      	bhi.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x794>
 80061f2:	a201      	add	r2, pc, #4	@ (adr r2, 80061f8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80061f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f8:	08006235 	.word	0x08006235
 80061fc:	08006209 	.word	0x08006209
 8006200:	08006217 	.word	0x08006217
 8006204:	08006235 	.word	0x08006235
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006208:	4b67      	ldr	r3, [pc, #412]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800620a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620c:	4a66      	ldr	r2, [pc, #408]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800620e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006212:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006214:	e00f      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800621a:	3308      	adds	r3, #8
 800621c:	2102      	movs	r1, #2
 800621e:	4618      	mov	r0, r3
 8006220:	f001 ffd4 	bl	80081cc <RCCEx_PLL2_Config>
 8006224:	4603      	mov	r3, r0
 8006226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800622a:	e004      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006232:	e000      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10a      	bne.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800623e:	4b5a      	ldr	r3, [pc, #360]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006242:	f023 0103 	bic.w	r1, r3, #3
 8006246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800624a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800624c:	4a56      	ldr	r2, [pc, #344]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800624e:	430b      	orrs	r3, r1
 8006250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006252:	e003      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006254:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006258:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800625c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006264:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006268:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800626c:	2300      	movs	r3, #0
 800626e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006272:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006276:	460b      	mov	r3, r1
 8006278:	4313      	orrs	r3, r2
 800627a:	f000 809f 	beq.w	80063bc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800627e:	4b4b      	ldr	r3, [pc, #300]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a4a      	ldr	r2, [pc, #296]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006284:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006288:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800628a:	f7fb f829 	bl	80012e0 <HAL_GetTick>
 800628e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006292:	e00b      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006294:	f7fb f824 	bl	80012e0 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	2b64      	cmp	r3, #100	@ 0x64
 80062a2:	d903      	bls.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062aa:	e005      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062ac:	4b3f      	ldr	r3, [pc, #252]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0ed      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80062b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d179      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80062c0:	4b39      	ldr	r3, [pc, #228]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80062c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062cc:	4053      	eors	r3, r2
 80062ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d015      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062d6:	4b34      	ldr	r3, [pc, #208]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062de:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062e2:	4b31      	ldr	r3, [pc, #196]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e6:	4a30      	ldr	r2, [pc, #192]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062ec:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062ee:	4b2e      	ldr	r3, [pc, #184]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f2:	4a2d      	ldr	r2, [pc, #180]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062f8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80062fa:	4a2b      	ldr	r2, [pc, #172]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006300:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006306:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800630a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800630e:	d118      	bne.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006310:	f7fa ffe6 	bl	80012e0 <HAL_GetTick>
 8006314:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006318:	e00d      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800631a:	f7fa ffe1 	bl	80012e0 <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006324:	1ad2      	subs	r2, r2, r3
 8006326:	f241 3388 	movw	r3, #5000	@ 0x1388
 800632a:	429a      	cmp	r2, r3
 800632c:	d903      	bls.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006334:	e005      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006336:	4b1c      	ldr	r3, [pc, #112]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0eb      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006346:	2b00      	cmp	r3, #0
 8006348:	d129      	bne.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800634a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006356:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800635a:	d10e      	bne.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800635c:	4b12      	ldr	r3, [pc, #72]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006368:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800636c:	091a      	lsrs	r2, r3, #4
 800636e:	4b10      	ldr	r3, [pc, #64]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006370:	4013      	ands	r3, r2
 8006372:	4a0d      	ldr	r2, [pc, #52]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006374:	430b      	orrs	r3, r1
 8006376:	6113      	str	r3, [r2, #16]
 8006378:	e005      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800637a:	4b0b      	ldr	r3, [pc, #44]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	4a0a      	ldr	r2, [pc, #40]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006380:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006384:	6113      	str	r3, [r2, #16]
 8006386:	4b08      	ldr	r3, [pc, #32]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006388:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800638a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800638e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006396:	4a04      	ldr	r2, [pc, #16]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006398:	430b      	orrs	r3, r1
 800639a:	6713      	str	r3, [r2, #112]	@ 0x70
 800639c:	e00e      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800639e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80063a6:	e009      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80063a8:	58024400 	.word	0x58024400
 80063ac:	58024800 	.word	0x58024800
 80063b0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80063bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c4:	f002 0301 	and.w	r3, r2, #1
 80063c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063cc:	2300      	movs	r3, #0
 80063ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80063d2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80063d6:	460b      	mov	r3, r1
 80063d8:	4313      	orrs	r3, r2
 80063da:	f000 8089 	beq.w	80064f0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80063de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063e4:	2b28      	cmp	r3, #40	@ 0x28
 80063e6:	d86b      	bhi.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80063e8:	a201      	add	r2, pc, #4	@ (adr r2, 80063f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80063ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ee:	bf00      	nop
 80063f0:	080064c9 	.word	0x080064c9
 80063f4:	080064c1 	.word	0x080064c1
 80063f8:	080064c1 	.word	0x080064c1
 80063fc:	080064c1 	.word	0x080064c1
 8006400:	080064c1 	.word	0x080064c1
 8006404:	080064c1 	.word	0x080064c1
 8006408:	080064c1 	.word	0x080064c1
 800640c:	080064c1 	.word	0x080064c1
 8006410:	08006495 	.word	0x08006495
 8006414:	080064c1 	.word	0x080064c1
 8006418:	080064c1 	.word	0x080064c1
 800641c:	080064c1 	.word	0x080064c1
 8006420:	080064c1 	.word	0x080064c1
 8006424:	080064c1 	.word	0x080064c1
 8006428:	080064c1 	.word	0x080064c1
 800642c:	080064c1 	.word	0x080064c1
 8006430:	080064ab 	.word	0x080064ab
 8006434:	080064c1 	.word	0x080064c1
 8006438:	080064c1 	.word	0x080064c1
 800643c:	080064c1 	.word	0x080064c1
 8006440:	080064c1 	.word	0x080064c1
 8006444:	080064c1 	.word	0x080064c1
 8006448:	080064c1 	.word	0x080064c1
 800644c:	080064c1 	.word	0x080064c1
 8006450:	080064c9 	.word	0x080064c9
 8006454:	080064c1 	.word	0x080064c1
 8006458:	080064c1 	.word	0x080064c1
 800645c:	080064c1 	.word	0x080064c1
 8006460:	080064c1 	.word	0x080064c1
 8006464:	080064c1 	.word	0x080064c1
 8006468:	080064c1 	.word	0x080064c1
 800646c:	080064c1 	.word	0x080064c1
 8006470:	080064c9 	.word	0x080064c9
 8006474:	080064c1 	.word	0x080064c1
 8006478:	080064c1 	.word	0x080064c1
 800647c:	080064c1 	.word	0x080064c1
 8006480:	080064c1 	.word	0x080064c1
 8006484:	080064c1 	.word	0x080064c1
 8006488:	080064c1 	.word	0x080064c1
 800648c:	080064c1 	.word	0x080064c1
 8006490:	080064c9 	.word	0x080064c9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006498:	3308      	adds	r3, #8
 800649a:	2101      	movs	r1, #1
 800649c:	4618      	mov	r0, r3
 800649e:	f001 fe95 	bl	80081cc <RCCEx_PLL2_Config>
 80064a2:	4603      	mov	r3, r0
 80064a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80064a8:	e00f      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ae:	3328      	adds	r3, #40	@ 0x28
 80064b0:	2101      	movs	r1, #1
 80064b2:	4618      	mov	r0, r3
 80064b4:	f001 ff3c 	bl	8008330 <RCCEx_PLL3_Config>
 80064b8:	4603      	mov	r3, r0
 80064ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80064be:	e004      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064c6:	e000      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80064c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80064d2:	4bbf      	ldr	r3, [pc, #764]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80064da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064e0:	4abb      	ldr	r2, [pc, #748]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064e2:	430b      	orrs	r3, r1
 80064e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80064e6:	e003      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80064f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f8:	f002 0302 	and.w	r3, r2, #2
 80064fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006500:	2300      	movs	r3, #0
 8006502:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006506:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800650a:	460b      	mov	r3, r1
 800650c:	4313      	orrs	r3, r2
 800650e:	d041      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006514:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006516:	2b05      	cmp	r3, #5
 8006518:	d824      	bhi.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800651a:	a201      	add	r2, pc, #4	@ (adr r2, 8006520 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006520:	0800656d 	.word	0x0800656d
 8006524:	08006539 	.word	0x08006539
 8006528:	0800654f 	.word	0x0800654f
 800652c:	0800656d 	.word	0x0800656d
 8006530:	0800656d 	.word	0x0800656d
 8006534:	0800656d 	.word	0x0800656d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653c:	3308      	adds	r3, #8
 800653e:	2101      	movs	r1, #1
 8006540:	4618      	mov	r0, r3
 8006542:	f001 fe43 	bl	80081cc <RCCEx_PLL2_Config>
 8006546:	4603      	mov	r3, r0
 8006548:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800654c:	e00f      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800654e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006552:	3328      	adds	r3, #40	@ 0x28
 8006554:	2101      	movs	r1, #1
 8006556:	4618      	mov	r0, r3
 8006558:	f001 feea 	bl	8008330 <RCCEx_PLL3_Config>
 800655c:	4603      	mov	r3, r0
 800655e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006562:	e004      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800656a:	e000      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800656c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800656e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10a      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006576:	4b96      	ldr	r3, [pc, #600]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800657a:	f023 0107 	bic.w	r1, r3, #7
 800657e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006582:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006584:	4a92      	ldr	r2, [pc, #584]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006586:	430b      	orrs	r3, r1
 8006588:	6553      	str	r3, [r2, #84]	@ 0x54
 800658a:	e003      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006590:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659c:	f002 0304 	and.w	r3, r2, #4
 80065a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065a4:	2300      	movs	r3, #0
 80065a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065aa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80065ae:	460b      	mov	r3, r1
 80065b0:	4313      	orrs	r3, r2
 80065b2:	d044      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80065b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065bc:	2b05      	cmp	r3, #5
 80065be:	d825      	bhi.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80065c0:	a201      	add	r2, pc, #4	@ (adr r2, 80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80065c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c6:	bf00      	nop
 80065c8:	08006615 	.word	0x08006615
 80065cc:	080065e1 	.word	0x080065e1
 80065d0:	080065f7 	.word	0x080065f7
 80065d4:	08006615 	.word	0x08006615
 80065d8:	08006615 	.word	0x08006615
 80065dc:	08006615 	.word	0x08006615
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e4:	3308      	adds	r3, #8
 80065e6:	2101      	movs	r1, #1
 80065e8:	4618      	mov	r0, r3
 80065ea:	f001 fdef 	bl	80081cc <RCCEx_PLL2_Config>
 80065ee:	4603      	mov	r3, r0
 80065f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80065f4:	e00f      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fa:	3328      	adds	r3, #40	@ 0x28
 80065fc:	2101      	movs	r1, #1
 80065fe:	4618      	mov	r0, r3
 8006600:	f001 fe96 	bl	8008330 <RCCEx_PLL3_Config>
 8006604:	4603      	mov	r3, r0
 8006606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800660a:	e004      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006612:	e000      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10b      	bne.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800661e:	4b6c      	ldr	r3, [pc, #432]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006622:	f023 0107 	bic.w	r1, r3, #7
 8006626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800662a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800662e:	4a68      	ldr	r2, [pc, #416]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006630:	430b      	orrs	r3, r1
 8006632:	6593      	str	r3, [r2, #88]	@ 0x58
 8006634:	e003      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800663a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800663e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006646:	f002 0320 	and.w	r3, r2, #32
 800664a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800664e:	2300      	movs	r3, #0
 8006650:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006654:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006658:	460b      	mov	r3, r1
 800665a:	4313      	orrs	r3, r2
 800665c:	d055      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800665e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006666:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800666a:	d033      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800666c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006670:	d82c      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006676:	d02f      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800667c:	d826      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800667e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006682:	d02b      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006684:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006688:	d820      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800668a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800668e:	d012      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006690:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006694:	d81a      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006696:	2b00      	cmp	r3, #0
 8006698:	d022      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800669a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800669e:	d115      	bne.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a4:	3308      	adds	r3, #8
 80066a6:	2100      	movs	r1, #0
 80066a8:	4618      	mov	r0, r3
 80066aa:	f001 fd8f 	bl	80081cc <RCCEx_PLL2_Config>
 80066ae:	4603      	mov	r3, r0
 80066b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80066b4:	e015      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ba:	3328      	adds	r3, #40	@ 0x28
 80066bc:	2102      	movs	r1, #2
 80066be:	4618      	mov	r0, r3
 80066c0:	f001 fe36 	bl	8008330 <RCCEx_PLL3_Config>
 80066c4:	4603      	mov	r3, r0
 80066c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80066ca:	e00a      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066d2:	e006      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80066d4:	bf00      	nop
 80066d6:	e004      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80066d8:	bf00      	nop
 80066da:	e002      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80066dc:	bf00      	nop
 80066de:	e000      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80066e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10b      	bne.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066ea:	4b39      	ldr	r3, [pc, #228]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80066f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066fa:	4a35      	ldr	r2, [pc, #212]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066fc:	430b      	orrs	r3, r1
 80066fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8006700:	e003      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006706:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800670a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006712:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006716:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800671a:	2300      	movs	r3, #0
 800671c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006720:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006724:	460b      	mov	r3, r1
 8006726:	4313      	orrs	r3, r2
 8006728:	d058      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800672a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800672e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006732:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006736:	d033      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006738:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800673c:	d82c      	bhi.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800673e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006742:	d02f      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006748:	d826      	bhi.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800674a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800674e:	d02b      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006750:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006754:	d820      	bhi.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006756:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800675a:	d012      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800675c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006760:	d81a      	bhi.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006762:	2b00      	cmp	r3, #0
 8006764:	d022      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800676a:	d115      	bne.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800676c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006770:	3308      	adds	r3, #8
 8006772:	2100      	movs	r1, #0
 8006774:	4618      	mov	r0, r3
 8006776:	f001 fd29 	bl	80081cc <RCCEx_PLL2_Config>
 800677a:	4603      	mov	r3, r0
 800677c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006780:	e015      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006786:	3328      	adds	r3, #40	@ 0x28
 8006788:	2102      	movs	r1, #2
 800678a:	4618      	mov	r0, r3
 800678c:	f001 fdd0 	bl	8008330 <RCCEx_PLL3_Config>
 8006790:	4603      	mov	r3, r0
 8006792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006796:	e00a      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800679e:	e006      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80067a0:	bf00      	nop
 80067a2:	e004      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80067a4:	bf00      	nop
 80067a6:	e002      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80067a8:	bf00      	nop
 80067aa:	e000      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80067ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10e      	bne.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067b6:	4b06      	ldr	r3, [pc, #24]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ba:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80067be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067c6:	4a02      	ldr	r2, [pc, #8]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067c8:	430b      	orrs	r3, r1
 80067ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80067cc:	e006      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80067ce:	bf00      	nop
 80067d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80067dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80067e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80067ec:	2300      	movs	r3, #0
 80067ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80067f2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80067f6:	460b      	mov	r3, r1
 80067f8:	4313      	orrs	r3, r2
 80067fa:	d055      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80067fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006800:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006804:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006808:	d033      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800680a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800680e:	d82c      	bhi.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006810:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006814:	d02f      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006816:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800681a:	d826      	bhi.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800681c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006820:	d02b      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006822:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006826:	d820      	bhi.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006828:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800682c:	d012      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800682e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006832:	d81a      	bhi.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006834:	2b00      	cmp	r3, #0
 8006836:	d022      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006838:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800683c:	d115      	bne.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800683e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006842:	3308      	adds	r3, #8
 8006844:	2100      	movs	r1, #0
 8006846:	4618      	mov	r0, r3
 8006848:	f001 fcc0 	bl	80081cc <RCCEx_PLL2_Config>
 800684c:	4603      	mov	r3, r0
 800684e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006852:	e015      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006858:	3328      	adds	r3, #40	@ 0x28
 800685a:	2102      	movs	r1, #2
 800685c:	4618      	mov	r0, r3
 800685e:	f001 fd67 	bl	8008330 <RCCEx_PLL3_Config>
 8006862:	4603      	mov	r3, r0
 8006864:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006868:	e00a      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006870:	e006      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006872:	bf00      	nop
 8006874:	e004      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006876:	bf00      	nop
 8006878:	e002      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800687a:	bf00      	nop
 800687c:	e000      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800687e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006880:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10b      	bne.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006888:	4ba1      	ldr	r3, [pc, #644]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800688a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800688c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006894:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006898:	4a9d      	ldr	r2, [pc, #628]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800689a:	430b      	orrs	r3, r1
 800689c:	6593      	str	r3, [r2, #88]	@ 0x58
 800689e:	e003      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80068a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b0:	f002 0308 	and.w	r3, r2, #8
 80068b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80068b8:	2300      	movs	r3, #0
 80068ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80068be:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80068c2:	460b      	mov	r3, r1
 80068c4:	4313      	orrs	r3, r2
 80068c6:	d01e      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80068c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068d4:	d10c      	bne.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068da:	3328      	adds	r3, #40	@ 0x28
 80068dc:	2102      	movs	r1, #2
 80068de:	4618      	mov	r0, r3
 80068e0:	f001 fd26 	bl	8008330 <RCCEx_PLL3_Config>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80068f0:	4b87      	ldr	r3, [pc, #540]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068f4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006900:	4a83      	ldr	r2, [pc, #524]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006902:	430b      	orrs	r3, r1
 8006904:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800690a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690e:	f002 0310 	and.w	r3, r2, #16
 8006912:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006916:	2300      	movs	r3, #0
 8006918:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800691c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006920:	460b      	mov	r3, r1
 8006922:	4313      	orrs	r3, r2
 8006924:	d01e      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800692e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006932:	d10c      	bne.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006938:	3328      	adds	r3, #40	@ 0x28
 800693a:	2102      	movs	r1, #2
 800693c:	4618      	mov	r0, r3
 800693e:	f001 fcf7 	bl	8008330 <RCCEx_PLL3_Config>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800694e:	4b70      	ldr	r3, [pc, #448]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006952:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800695a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800695e:	4a6c      	ldr	r2, [pc, #432]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006960:	430b      	orrs	r3, r1
 8006962:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006970:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006974:	2300      	movs	r3, #0
 8006976:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800697a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800697e:	460b      	mov	r3, r1
 8006980:	4313      	orrs	r3, r2
 8006982:	d03e      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006988:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800698c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006990:	d022      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006992:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006996:	d81b      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800699c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069a0:	d00b      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80069a2:	e015      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a8:	3308      	adds	r3, #8
 80069aa:	2100      	movs	r1, #0
 80069ac:	4618      	mov	r0, r3
 80069ae:	f001 fc0d 	bl	80081cc <RCCEx_PLL2_Config>
 80069b2:	4603      	mov	r3, r0
 80069b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80069b8:	e00f      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069be:	3328      	adds	r3, #40	@ 0x28
 80069c0:	2102      	movs	r1, #2
 80069c2:	4618      	mov	r0, r3
 80069c4:	f001 fcb4 	bl	8008330 <RCCEx_PLL3_Config>
 80069c8:	4603      	mov	r3, r0
 80069ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80069ce:	e004      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069d6:	e000      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80069d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10b      	bne.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069e2:	4b4b      	ldr	r3, [pc, #300]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069e6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80069ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80069f2:	4a47      	ldr	r2, [pc, #284]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069f4:	430b      	orrs	r3, r1
 80069f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80069f8:	e003      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006a0e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a10:	2300      	movs	r3, #0
 8006a12:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a14:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	d03b      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a26:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a2a:	d01f      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006a2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a30:	d818      	bhi.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006a32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a36:	d003      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006a38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a3c:	d007      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006a3e:	e011      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a40:	4b33      	ldr	r3, [pc, #204]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a44:	4a32      	ldr	r2, [pc, #200]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a4c:	e00f      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a52:	3328      	adds	r3, #40	@ 0x28
 8006a54:	2101      	movs	r1, #1
 8006a56:	4618      	mov	r0, r3
 8006a58:	f001 fc6a 	bl	8008330 <RCCEx_PLL3_Config>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a62:	e004      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a6a:	e000      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10b      	bne.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a76:	4b26      	ldr	r3, [pc, #152]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a7a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a86:	4a22      	ldr	r2, [pc, #136]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a88:	430b      	orrs	r3, r1
 8006a8a:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a8c:	e003      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006aa2:	673b      	str	r3, [r7, #112]	@ 0x70
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	677b      	str	r3, [r7, #116]	@ 0x74
 8006aa8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006aac:	460b      	mov	r3, r1
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	d034      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006abc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ac0:	d007      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006ac2:	e011      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ac4:	4b12      	ldr	r3, [pc, #72]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac8:	4a11      	ldr	r2, [pc, #68]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006aca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ace:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ad0:	e00e      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad6:	3308      	adds	r3, #8
 8006ad8:	2102      	movs	r1, #2
 8006ada:	4618      	mov	r0, r3
 8006adc:	f001 fb76 	bl	80081cc <RCCEx_PLL2_Config>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ae6:	e003      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006aee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006af0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10d      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006af8:	4b05      	ldr	r3, [pc, #20]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006afc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b06:	4a02      	ldr	r2, [pc, #8]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b08:	430b      	orrs	r3, r1
 8006b0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006b0c:	e006      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006b0e:	bf00      	nop
 8006b10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006b28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b2e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006b32:	460b      	mov	r3, r1
 8006b34:	4313      	orrs	r3, r2
 8006b36:	d00c      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b3c:	3328      	adds	r3, #40	@ 0x28
 8006b3e:	2102      	movs	r1, #2
 8006b40:	4618      	mov	r0, r3
 8006b42:	f001 fbf5 	bl	8008330 <RCCEx_PLL3_Config>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d002      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006b5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b60:	2300      	movs	r3, #0
 8006b62:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b64:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006b68:	460b      	mov	r3, r1
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	d038      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b7a:	d018      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006b7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b80:	d811      	bhi.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006b82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b86:	d014      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006b88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b8c:	d80b      	bhi.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d011      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006b92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b96:	d106      	bne.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b98:	4bc3      	ldr	r3, [pc, #780]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9c:	4ac2      	ldr	r2, [pc, #776]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ba2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006ba4:	e008      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bac:	e004      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006bae:	bf00      	nop
 8006bb0:	e002      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006bb2:	bf00      	nop
 8006bb4:	e000      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006bb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10b      	bne.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006bc0:	4bb9      	ldr	r3, [pc, #740]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bc4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bd0:	4ab5      	ldr	r2, [pc, #724]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bd2:	430b      	orrs	r3, r1
 8006bd4:	6553      	str	r3, [r2, #84]	@ 0x54
 8006bd6:	e003      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006bec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006bee:	2300      	movs	r3, #0
 8006bf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bf2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	d009      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006bfc:	4baa      	ldr	r3, [pc, #680]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c00:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c0a:	4aa7      	ldr	r2, [pc, #668]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c0c:	430b      	orrs	r3, r1
 8006c0e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006c1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c1e:	2300      	movs	r3, #0
 8006c20:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c22:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006c26:	460b      	mov	r3, r1
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	d00a      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006c2c:	4b9e      	ldr	r3, [pc, #632]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c38:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006c3c:	4a9a      	ldr	r2, [pc, #616]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c3e:	430b      	orrs	r3, r1
 8006c40:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c50:	2300      	movs	r3, #0
 8006c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c54:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	d009      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c5e:	4b92      	ldr	r3, [pc, #584]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c62:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c6c:	4a8e      	ldr	r2, [pc, #568]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c6e:	430b      	orrs	r3, r1
 8006c70:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006c7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c80:	2300      	movs	r3, #0
 8006c82:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c84:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006c88:	460b      	mov	r3, r1
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	d00e      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c8e:	4b86      	ldr	r3, [pc, #536]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	4a85      	ldr	r2, [pc, #532]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c94:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c98:	6113      	str	r3, [r2, #16]
 8006c9a:	4b83      	ldr	r3, [pc, #524]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c9c:	6919      	ldr	r1, [r3, #16]
 8006c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006ca6:	4a80      	ldr	r2, [pc, #512]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ca8:	430b      	orrs	r3, r1
 8006caa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cba:	2300      	movs	r3, #0
 8006cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cbe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	d009      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006cc8:	4b77      	ldr	r3, [pc, #476]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ccc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cd6:	4a74      	ldr	r2, [pc, #464]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cd8:	430b      	orrs	r3, r1
 8006cda:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006ce8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cea:	2300      	movs	r3, #0
 8006cec:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cee:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	d00a      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006cf8:	4b6b      	ldr	r3, [pc, #428]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cfc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d08:	4a67      	ldr	r2, [pc, #412]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d0a:	430b      	orrs	r3, r1
 8006d0c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d16:	2100      	movs	r1, #0
 8006d18:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d20:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006d24:	460b      	mov	r3, r1
 8006d26:	4313      	orrs	r3, r2
 8006d28:	d011      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d2e:	3308      	adds	r3, #8
 8006d30:	2100      	movs	r1, #0
 8006d32:	4618      	mov	r0, r3
 8006d34:	f001 fa4a 	bl	80081cc <RCCEx_PLL2_Config>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d56:	2100      	movs	r1, #0
 8006d58:	6239      	str	r1, [r7, #32]
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d60:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006d64:	460b      	mov	r3, r1
 8006d66:	4313      	orrs	r3, r2
 8006d68:	d011      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d6e:	3308      	adds	r3, #8
 8006d70:	2101      	movs	r1, #1
 8006d72:	4618      	mov	r0, r3
 8006d74:	f001 fa2a 	bl	80081cc <RCCEx_PLL2_Config>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d003      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d96:	2100      	movs	r1, #0
 8006d98:	61b9      	str	r1, [r7, #24]
 8006d9a:	f003 0304 	and.w	r3, r3, #4
 8006d9e:	61fb      	str	r3, [r7, #28]
 8006da0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006da4:	460b      	mov	r3, r1
 8006da6:	4313      	orrs	r3, r2
 8006da8:	d011      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dae:	3308      	adds	r3, #8
 8006db0:	2102      	movs	r1, #2
 8006db2:	4618      	mov	r0, r3
 8006db4:	f001 fa0a 	bl	80081cc <RCCEx_PLL2_Config>
 8006db8:	4603      	mov	r3, r0
 8006dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d003      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	6139      	str	r1, [r7, #16]
 8006dda:	f003 0308 	and.w	r3, r3, #8
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006de4:	460b      	mov	r3, r1
 8006de6:	4313      	orrs	r3, r2
 8006de8:	d011      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dee:	3328      	adds	r3, #40	@ 0x28
 8006df0:	2100      	movs	r1, #0
 8006df2:	4618      	mov	r0, r3
 8006df4:	f001 fa9c 	bl	8008330 <RCCEx_PLL3_Config>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e16:	2100      	movs	r1, #0
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	f003 0310 	and.w	r3, r3, #16
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e24:	460b      	mov	r3, r1
 8006e26:	4313      	orrs	r3, r2
 8006e28:	d011      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e2e:	3328      	adds	r3, #40	@ 0x28
 8006e30:	2101      	movs	r1, #1
 8006e32:	4618      	mov	r0, r3
 8006e34:	f001 fa7c 	bl	8008330 <RCCEx_PLL3_Config>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d003      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e56:	2100      	movs	r1, #0
 8006e58:	6039      	str	r1, [r7, #0]
 8006e5a:	f003 0320 	and.w	r3, r3, #32
 8006e5e:	607b      	str	r3, [r7, #4]
 8006e60:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006e64:	460b      	mov	r3, r1
 8006e66:	4313      	orrs	r3, r2
 8006e68:	d011      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6e:	3328      	adds	r3, #40	@ 0x28
 8006e70:	2102      	movs	r1, #2
 8006e72:	4618      	mov	r0, r3
 8006e74:	f001 fa5c 	bl	8008330 <RCCEx_PLL3_Config>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006e8e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	e000      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ea8:	58024400 	.word	0x58024400

08006eac <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b090      	sub	sp, #64	@ 0x40
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006eb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eba:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006ebe:	430b      	orrs	r3, r1
 8006ec0:	f040 8094 	bne.w	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006ec4:	4b9e      	ldr	r3, [pc, #632]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ec8:	f003 0307 	and.w	r3, r3, #7
 8006ecc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed0:	2b04      	cmp	r3, #4
 8006ed2:	f200 8087 	bhi.w	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006edc:	08006ef1 	.word	0x08006ef1
 8006ee0:	08006f19 	.word	0x08006f19
 8006ee4:	08006f41 	.word	0x08006f41
 8006ee8:	08006fdd 	.word	0x08006fdd
 8006eec:	08006f69 	.word	0x08006f69
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ef0:	4b93      	ldr	r3, [pc, #588]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ef8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006efc:	d108      	bne.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006efe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f02:	4618      	mov	r0, r3
 8006f04:	f001 f810 	bl	8007f28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f0c:	f000 bd45 	b.w	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f10:	2300      	movs	r3, #0
 8006f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f14:	f000 bd41 	b.w	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f18:	4b89      	ldr	r3, [pc, #548]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f24:	d108      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f26:	f107 0318 	add.w	r3, r7, #24
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f000 fd54 	bl	80079d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f34:	f000 bd31 	b.w	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f3c:	f000 bd2d 	b.w	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f40:	4b7f      	ldr	r3, [pc, #508]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f4c:	d108      	bne.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f4e:	f107 030c 	add.w	r3, r7, #12
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 fe94 	bl	8007c80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f5c:	f000 bd1d 	b.w	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f60:	2300      	movs	r3, #0
 8006f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f64:	f000 bd19 	b.w	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f68:	4b75      	ldr	r3, [pc, #468]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f6c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006f70:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f72:	4b73      	ldr	r3, [pc, #460]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0304 	and.w	r3, r3, #4
 8006f7a:	2b04      	cmp	r3, #4
 8006f7c:	d10c      	bne.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d109      	bne.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f84:	4b6e      	ldr	r3, [pc, #440]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	08db      	lsrs	r3, r3, #3
 8006f8a:	f003 0303 	and.w	r3, r3, #3
 8006f8e:	4a6d      	ldr	r2, [pc, #436]	@ (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006f90:	fa22 f303 	lsr.w	r3, r2, r3
 8006f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f96:	e01f      	b.n	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f98:	4b69      	ldr	r3, [pc, #420]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fa4:	d106      	bne.n	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fa8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fac:	d102      	bne.n	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006fae:	4b66      	ldr	r3, [pc, #408]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fb2:	e011      	b.n	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006fb4:	4b62      	ldr	r3, [pc, #392]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fc0:	d106      	bne.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fc8:	d102      	bne.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006fca:	4b60      	ldr	r3, [pc, #384]	@ (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fce:	e003      	b.n	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006fd4:	f000 bce1 	b.w	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006fd8:	f000 bcdf 	b.w	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006fdc:	4b5c      	ldr	r3, [pc, #368]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fe0:	f000 bcdb 	b.w	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fe8:	f000 bcd7 	b.w	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006fec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ff0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006ff4:	430b      	orrs	r3, r1
 8006ff6:	f040 80ad 	bne.w	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006ffa:	4b51      	ldr	r3, [pc, #324]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ffe:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007002:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007006:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800700a:	d056      	beq.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800700c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007012:	f200 8090 	bhi.w	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007018:	2bc0      	cmp	r3, #192	@ 0xc0
 800701a:	f000 8088 	beq.w	800712e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800701e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007020:	2bc0      	cmp	r3, #192	@ 0xc0
 8007022:	f200 8088 	bhi.w	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007028:	2b80      	cmp	r3, #128	@ 0x80
 800702a:	d032      	beq.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800702c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702e:	2b80      	cmp	r3, #128	@ 0x80
 8007030:	f200 8081 	bhi.w	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007036:	2b00      	cmp	r3, #0
 8007038:	d003      	beq.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800703a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703c:	2b40      	cmp	r3, #64	@ 0x40
 800703e:	d014      	beq.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007040:	e079      	b.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007042:	4b3f      	ldr	r3, [pc, #252]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800704a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800704e:	d108      	bne.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007050:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007054:	4618      	mov	r0, r3
 8007056:	f000 ff67 	bl	8007f28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800705a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800705e:	f000 bc9c 	b.w	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007062:	2300      	movs	r3, #0
 8007064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007066:	f000 bc98 	b.w	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800706a:	4b35      	ldr	r3, [pc, #212]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007072:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007076:	d108      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007078:	f107 0318 	add.w	r3, r7, #24
 800707c:	4618      	mov	r0, r3
 800707e:	f000 fcab 	bl	80079d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007086:	f000 bc88 	b.w	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800708a:	2300      	movs	r3, #0
 800708c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800708e:	f000 bc84 	b.w	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007092:	4b2b      	ldr	r3, [pc, #172]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800709a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800709e:	d108      	bne.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070a0:	f107 030c 	add.w	r3, r7, #12
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 fdeb 	bl	8007c80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ae:	f000 bc74 	b.w	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070b2:	2300      	movs	r3, #0
 80070b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070b6:	f000 bc70 	b.w	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070ba:	4b21      	ldr	r3, [pc, #132]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80070c2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070c4:	4b1e      	ldr	r3, [pc, #120]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0304 	and.w	r3, r3, #4
 80070cc:	2b04      	cmp	r3, #4
 80070ce:	d10c      	bne.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80070d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d109      	bne.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070d6:	4b1a      	ldr	r3, [pc, #104]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	08db      	lsrs	r3, r3, #3
 80070dc:	f003 0303 	and.w	r3, r3, #3
 80070e0:	4a18      	ldr	r2, [pc, #96]	@ (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80070e2:	fa22 f303 	lsr.w	r3, r2, r3
 80070e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070e8:	e01f      	b.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80070ea:	4b15      	ldr	r3, [pc, #84]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070f6:	d106      	bne.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80070f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070fe:	d102      	bne.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007100:	4b11      	ldr	r3, [pc, #68]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007104:	e011      	b.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007106:	4b0e      	ldr	r3, [pc, #56]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800710e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007112:	d106      	bne.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007116:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800711a:	d102      	bne.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800711c:	4b0b      	ldr	r3, [pc, #44]	@ (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800711e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007120:	e003      	b.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007122:	2300      	movs	r3, #0
 8007124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007126:	f000 bc38 	b.w	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800712a:	f000 bc36 	b.w	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800712e:	4b08      	ldr	r3, [pc, #32]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007132:	f000 bc32 	b.w	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007136:	2300      	movs	r3, #0
 8007138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800713a:	f000 bc2e 	b.w	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800713e:	bf00      	nop
 8007140:	58024400 	.word	0x58024400
 8007144:	03d09000 	.word	0x03d09000
 8007148:	003d0900 	.word	0x003d0900
 800714c:	017d7840 	.word	0x017d7840
 8007150:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007154:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007158:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800715c:	430b      	orrs	r3, r1
 800715e:	f040 809c 	bne.w	800729a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007162:	4b9e      	ldr	r3, [pc, #632]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007166:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800716a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800716c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007172:	d054      	beq.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007176:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800717a:	f200 808b 	bhi.w	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800717e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007180:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007184:	f000 8083 	beq.w	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800718e:	f200 8081 	bhi.w	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007194:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007198:	d02f      	beq.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800719a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071a0:	d878      	bhi.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80071a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d004      	beq.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80071a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071ae:	d012      	beq.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80071b0:	e070      	b.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071b2:	4b8a      	ldr	r3, [pc, #552]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071be:	d107      	bne.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 feaf 	bl	8007f28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071ce:	e3e4      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071d0:	2300      	movs	r3, #0
 80071d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071d4:	e3e1      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071d6:	4b81      	ldr	r3, [pc, #516]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071e2:	d107      	bne.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071e4:	f107 0318 	add.w	r3, r7, #24
 80071e8:	4618      	mov	r0, r3
 80071ea:	f000 fbf5 	bl	80079d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071f2:	e3d2      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071f4:	2300      	movs	r3, #0
 80071f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071f8:	e3cf      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071fa:	4b78      	ldr	r3, [pc, #480]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007202:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007206:	d107      	bne.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007208:	f107 030c 	add.w	r3, r7, #12
 800720c:	4618      	mov	r0, r3
 800720e:	f000 fd37 	bl	8007c80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007216:	e3c0      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007218:	2300      	movs	r3, #0
 800721a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800721c:	e3bd      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800721e:	4b6f      	ldr	r3, [pc, #444]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007222:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007226:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007228:	4b6c      	ldr	r3, [pc, #432]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0304 	and.w	r3, r3, #4
 8007230:	2b04      	cmp	r3, #4
 8007232:	d10c      	bne.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007236:	2b00      	cmp	r3, #0
 8007238:	d109      	bne.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800723a:	4b68      	ldr	r3, [pc, #416]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	08db      	lsrs	r3, r3, #3
 8007240:	f003 0303 	and.w	r3, r3, #3
 8007244:	4a66      	ldr	r2, [pc, #408]	@ (80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007246:	fa22 f303 	lsr.w	r3, r2, r3
 800724a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800724c:	e01e      	b.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800724e:	4b63      	ldr	r3, [pc, #396]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007256:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800725a:	d106      	bne.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800725c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800725e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007262:	d102      	bne.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007264:	4b5f      	ldr	r3, [pc, #380]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007266:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007268:	e010      	b.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800726a:	4b5c      	ldr	r3, [pc, #368]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007272:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007276:	d106      	bne.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800727a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800727e:	d102      	bne.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007280:	4b59      	ldr	r3, [pc, #356]	@ (80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007282:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007284:	e002      	b.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007286:	2300      	movs	r3, #0
 8007288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800728a:	e386      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800728c:	e385      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800728e:	4b57      	ldr	r3, [pc, #348]	@ (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007292:	e382      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007294:	2300      	movs	r3, #0
 8007296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007298:	e37f      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800729a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800729e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80072a2:	430b      	orrs	r3, r1
 80072a4:	f040 80a7 	bne.w	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80072a8:	4b4c      	ldr	r3, [pc, #304]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072ac:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80072b0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80072b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072b8:	d055      	beq.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80072ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072c0:	f200 8096 	bhi.w	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80072c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80072ca:	f000 8084 	beq.w	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80072ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80072d4:	f200 808c 	bhi.w	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80072d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072de:	d030      	beq.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80072e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072e6:	f200 8083 	bhi.w	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80072ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d004      	beq.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80072f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072f6:	d012      	beq.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80072f8:	e07a      	b.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80072fa:	4b38      	ldr	r3, [pc, #224]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007302:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007306:	d107      	bne.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007308:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800730c:	4618      	mov	r0, r3
 800730e:	f000 fe0b 	bl	8007f28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007314:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007316:	e340      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007318:	2300      	movs	r3, #0
 800731a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800731c:	e33d      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800731e:	4b2f      	ldr	r3, [pc, #188]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007326:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800732a:	d107      	bne.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800732c:	f107 0318 	add.w	r3, r7, #24
 8007330:	4618      	mov	r0, r3
 8007332:	f000 fb51 	bl	80079d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800733a:	e32e      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800733c:	2300      	movs	r3, #0
 800733e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007340:	e32b      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007342:	4b26      	ldr	r3, [pc, #152]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800734a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800734e:	d107      	bne.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007350:	f107 030c 	add.w	r3, r7, #12
 8007354:	4618      	mov	r0, r3
 8007356:	f000 fc93 	bl	8007c80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800735e:	e31c      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007360:	2300      	movs	r3, #0
 8007362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007364:	e319      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007366:	4b1d      	ldr	r3, [pc, #116]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800736a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800736e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007370:	4b1a      	ldr	r3, [pc, #104]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0304 	and.w	r3, r3, #4
 8007378:	2b04      	cmp	r3, #4
 800737a:	d10c      	bne.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800737c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800737e:	2b00      	cmp	r3, #0
 8007380:	d109      	bne.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007382:	4b16      	ldr	r3, [pc, #88]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	08db      	lsrs	r3, r3, #3
 8007388:	f003 0303 	and.w	r3, r3, #3
 800738c:	4a14      	ldr	r2, [pc, #80]	@ (80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800738e:	fa22 f303 	lsr.w	r3, r2, r3
 8007392:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007394:	e01e      	b.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007396:	4b11      	ldr	r3, [pc, #68]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800739e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073a2:	d106      	bne.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80073a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073aa:	d102      	bne.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80073ac:	4b0d      	ldr	r3, [pc, #52]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80073ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073b0:	e010      	b.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073b2:	4b0a      	ldr	r3, [pc, #40]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073be:	d106      	bne.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80073c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073c6:	d102      	bne.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80073c8:	4b07      	ldr	r3, [pc, #28]	@ (80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80073ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073cc:	e002      	b.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80073ce:	2300      	movs	r3, #0
 80073d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80073d2:	e2e2      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80073d4:	e2e1      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80073d6:	4b05      	ldr	r3, [pc, #20]	@ (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80073d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073da:	e2de      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80073dc:	58024400 	.word	0x58024400
 80073e0:	03d09000 	.word	0x03d09000
 80073e4:	003d0900 	.word	0x003d0900
 80073e8:	017d7840 	.word	0x017d7840
 80073ec:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80073f0:	2300      	movs	r3, #0
 80073f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073f4:	e2d1      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80073f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073fa:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80073fe:	430b      	orrs	r3, r1
 8007400:	f040 809c 	bne.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007404:	4b93      	ldr	r3, [pc, #588]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007408:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800740c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800740e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007410:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007414:	d054      	beq.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007418:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800741c:	f200 808b 	bhi.w	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007422:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007426:	f000 8083 	beq.w	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800742a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800742c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007430:	f200 8081 	bhi.w	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007436:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800743a:	d02f      	beq.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800743c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800743e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007442:	d878      	bhi.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007446:	2b00      	cmp	r3, #0
 8007448:	d004      	beq.n	8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800744a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800744c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007450:	d012      	beq.n	8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007452:	e070      	b.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007454:	4b7f      	ldr	r3, [pc, #508]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800745c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007460:	d107      	bne.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007462:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007466:	4618      	mov	r0, r3
 8007468:	f000 fd5e 	bl	8007f28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800746c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007470:	e293      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007472:	2300      	movs	r3, #0
 8007474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007476:	e290      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007478:	4b76      	ldr	r3, [pc, #472]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007480:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007484:	d107      	bne.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007486:	f107 0318 	add.w	r3, r7, #24
 800748a:	4618      	mov	r0, r3
 800748c:	f000 faa4 	bl	80079d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007494:	e281      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007496:	2300      	movs	r3, #0
 8007498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800749a:	e27e      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800749c:	4b6d      	ldr	r3, [pc, #436]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074a8:	d107      	bne.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074aa:	f107 030c 	add.w	r3, r7, #12
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 fbe6 	bl	8007c80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074b8:	e26f      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074ba:	2300      	movs	r3, #0
 80074bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074be:	e26c      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074c0:	4b64      	ldr	r3, [pc, #400]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80074c8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074ca:	4b62      	ldr	r3, [pc, #392]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0304 	and.w	r3, r3, #4
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	d10c      	bne.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80074d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d109      	bne.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074dc:	4b5d      	ldr	r3, [pc, #372]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	08db      	lsrs	r3, r3, #3
 80074e2:	f003 0303 	and.w	r3, r3, #3
 80074e6:	4a5c      	ldr	r2, [pc, #368]	@ (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80074e8:	fa22 f303 	lsr.w	r3, r2, r3
 80074ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074ee:	e01e      	b.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074f0:	4b58      	ldr	r3, [pc, #352]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074fc:	d106      	bne.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80074fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007500:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007504:	d102      	bne.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007506:	4b55      	ldr	r3, [pc, #340]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007508:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800750a:	e010      	b.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800750c:	4b51      	ldr	r3, [pc, #324]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007514:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007518:	d106      	bne.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800751a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800751c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007520:	d102      	bne.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007522:	4b4f      	ldr	r3, [pc, #316]	@ (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007524:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007526:	e002      	b.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007528:	2300      	movs	r3, #0
 800752a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800752c:	e235      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800752e:	e234      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007530:	4b4c      	ldr	r3, [pc, #304]	@ (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007534:	e231      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007536:	2300      	movs	r3, #0
 8007538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800753a:	e22e      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800753c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007540:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007544:	430b      	orrs	r3, r1
 8007546:	f040 808f 	bne.w	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800754a:	4b42      	ldr	r3, [pc, #264]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800754c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800754e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007552:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007556:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800755a:	d06b      	beq.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800755c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800755e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007562:	d874      	bhi.n	800764e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007566:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800756a:	d056      	beq.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800756c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800756e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007572:	d86c      	bhi.n	800764e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007576:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800757a:	d03b      	beq.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800757c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007582:	d864      	bhi.n	800764e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007586:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800758a:	d021      	beq.n	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800758c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800758e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007592:	d85c      	bhi.n	800764e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007596:	2b00      	cmp	r3, #0
 8007598:	d004      	beq.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800759a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800759c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075a0:	d004      	beq.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80075a2:	e054      	b.n	800764e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80075a4:	f7fe fa4c 	bl	8005a40 <HAL_RCC_GetPCLK1Freq>
 80075a8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80075aa:	e1f6      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075ac:	4b29      	ldr	r3, [pc, #164]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075b8:	d107      	bne.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075ba:	f107 0318 	add.w	r3, r7, #24
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 fa0a 	bl	80079d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075c8:	e1e7      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075ca:	2300      	movs	r3, #0
 80075cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075ce:	e1e4      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075d0:	4b20      	ldr	r3, [pc, #128]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075dc:	d107      	bne.n	80075ee <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075de:	f107 030c 	add.w	r3, r7, #12
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 fb4c 	bl	8007c80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075ec:	e1d5      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075ee:	2300      	movs	r3, #0
 80075f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075f2:	e1d2      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075f4:	4b17      	ldr	r3, [pc, #92]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0304 	and.w	r3, r3, #4
 80075fc:	2b04      	cmp	r3, #4
 80075fe:	d109      	bne.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007600:	4b14      	ldr	r3, [pc, #80]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	08db      	lsrs	r3, r3, #3
 8007606:	f003 0303 	and.w	r3, r3, #3
 800760a:	4a13      	ldr	r2, [pc, #76]	@ (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800760c:	fa22 f303 	lsr.w	r3, r2, r3
 8007610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007612:	e1c2      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007614:	2300      	movs	r3, #0
 8007616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007618:	e1bf      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800761a:	4b0e      	ldr	r3, [pc, #56]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007626:	d102      	bne.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007628:	4b0c      	ldr	r3, [pc, #48]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800762a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800762c:	e1b5      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800762e:	2300      	movs	r3, #0
 8007630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007632:	e1b2      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007634:	4b07      	ldr	r3, [pc, #28]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800763c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007640:	d102      	bne.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007642:	4b07      	ldr	r3, [pc, #28]	@ (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007646:	e1a8      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007648:	2300      	movs	r3, #0
 800764a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800764c:	e1a5      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800764e:	2300      	movs	r3, #0
 8007650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007652:	e1a2      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007654:	58024400 	.word	0x58024400
 8007658:	03d09000 	.word	0x03d09000
 800765c:	003d0900 	.word	0x003d0900
 8007660:	017d7840 	.word	0x017d7840
 8007664:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800766c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007670:	430b      	orrs	r3, r1
 8007672:	d173      	bne.n	800775c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007674:	4b9c      	ldr	r3, [pc, #624]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007678:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800767c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800767e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007680:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007684:	d02f      	beq.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007688:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800768c:	d863      	bhi.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800768e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007690:	2b00      	cmp	r3, #0
 8007692:	d004      	beq.n	800769e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007696:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800769a:	d012      	beq.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800769c:	e05b      	b.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800769e:	4b92      	ldr	r3, [pc, #584]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076aa:	d107      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076ac:	f107 0318 	add.w	r3, r7, #24
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 f991 	bl	80079d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076ba:	e16e      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076bc:	2300      	movs	r3, #0
 80076be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076c0:	e16b      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80076c2:	4b89      	ldr	r3, [pc, #548]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076ce:	d107      	bne.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076d0:	f107 030c 	add.w	r3, r7, #12
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 fad3 	bl	8007c80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076de:	e15c      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076e0:	2300      	movs	r3, #0
 80076e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076e4:	e159      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80076e6:	4b80      	ldr	r3, [pc, #512]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80076ee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80076f0:	4b7d      	ldr	r3, [pc, #500]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0304 	and.w	r3, r3, #4
 80076f8:	2b04      	cmp	r3, #4
 80076fa:	d10c      	bne.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80076fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d109      	bne.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007702:	4b79      	ldr	r3, [pc, #484]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	08db      	lsrs	r3, r3, #3
 8007708:	f003 0303 	and.w	r3, r3, #3
 800770c:	4a77      	ldr	r2, [pc, #476]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800770e:	fa22 f303 	lsr.w	r3, r2, r3
 8007712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007714:	e01e      	b.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007716:	4b74      	ldr	r3, [pc, #464]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800771e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007722:	d106      	bne.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007726:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800772a:	d102      	bne.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800772c:	4b70      	ldr	r3, [pc, #448]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800772e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007730:	e010      	b.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007732:	4b6d      	ldr	r3, [pc, #436]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800773a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800773e:	d106      	bne.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007742:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007746:	d102      	bne.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007748:	4b6a      	ldr	r3, [pc, #424]	@ (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800774a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800774c:	e002      	b.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800774e:	2300      	movs	r3, #0
 8007750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007752:	e122      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007754:	e121      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007756:	2300      	movs	r3, #0
 8007758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800775a:	e11e      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800775c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007760:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007764:	430b      	orrs	r3, r1
 8007766:	d133      	bne.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007768:	4b5f      	ldr	r3, [pc, #380]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800776a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800776c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007770:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007774:	2b00      	cmp	r3, #0
 8007776:	d004      	beq.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800777e:	d012      	beq.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007780:	e023      	b.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007782:	4b59      	ldr	r3, [pc, #356]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800778a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800778e:	d107      	bne.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007790:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007794:	4618      	mov	r0, r3
 8007796:	f000 fbc7 	bl	8007f28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800779a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800779e:	e0fc      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077a0:	2300      	movs	r3, #0
 80077a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077a4:	e0f9      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80077a6:	4b50      	ldr	r3, [pc, #320]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077b2:	d107      	bne.n	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077b4:	f107 0318 	add.w	r3, r7, #24
 80077b8:	4618      	mov	r0, r3
 80077ba:	f000 f90d 	bl	80079d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80077be:	6a3b      	ldr	r3, [r7, #32]
 80077c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077c2:	e0ea      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077c4:	2300      	movs	r3, #0
 80077c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077c8:	e0e7      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80077ca:	2300      	movs	r3, #0
 80077cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077ce:	e0e4      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80077d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077d4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80077d8:	430b      	orrs	r3, r1
 80077da:	f040 808d 	bne.w	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80077de:	4b42      	ldr	r3, [pc, #264]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077e2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80077e6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80077e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077ee:	d06b      	beq.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80077f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077f6:	d874      	bhi.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80077f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077fe:	d056      	beq.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007806:	d86c      	bhi.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800780a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800780e:	d03b      	beq.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007812:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007816:	d864      	bhi.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800781a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800781e:	d021      	beq.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007822:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007826:	d85c      	bhi.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800782a:	2b00      	cmp	r3, #0
 800782c:	d004      	beq.n	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800782e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007830:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007834:	d004      	beq.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007836:	e054      	b.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007838:	f000 f8b8 	bl	80079ac <HAL_RCCEx_GetD3PCLK1Freq>
 800783c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800783e:	e0ac      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007840:	4b29      	ldr	r3, [pc, #164]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007848:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800784c:	d107      	bne.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800784e:	f107 0318 	add.w	r3, r7, #24
 8007852:	4618      	mov	r0, r3
 8007854:	f000 f8c0 	bl	80079d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800785c:	e09d      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800785e:	2300      	movs	r3, #0
 8007860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007862:	e09a      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007864:	4b20      	ldr	r3, [pc, #128]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800786c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007870:	d107      	bne.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007872:	f107 030c 	add.w	r3, r7, #12
 8007876:	4618      	mov	r0, r3
 8007878:	f000 fa02 	bl	8007c80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007880:	e08b      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007882:	2300      	movs	r3, #0
 8007884:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007886:	e088      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007888:	4b17      	ldr	r3, [pc, #92]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0304 	and.w	r3, r3, #4
 8007890:	2b04      	cmp	r3, #4
 8007892:	d109      	bne.n	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007894:	4b14      	ldr	r3, [pc, #80]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	08db      	lsrs	r3, r3, #3
 800789a:	f003 0303 	and.w	r3, r3, #3
 800789e:	4a13      	ldr	r2, [pc, #76]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80078a0:	fa22 f303 	lsr.w	r3, r2, r3
 80078a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078a6:	e078      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078a8:	2300      	movs	r3, #0
 80078aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078ac:	e075      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80078ae:	4b0e      	ldr	r3, [pc, #56]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078ba:	d102      	bne.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80078bc:	4b0c      	ldr	r3, [pc, #48]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80078be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078c0:	e06b      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078c2:	2300      	movs	r3, #0
 80078c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078c6:	e068      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80078c8:	4b07      	ldr	r3, [pc, #28]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078d4:	d102      	bne.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80078d6:	4b07      	ldr	r3, [pc, #28]	@ (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80078d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078da:	e05e      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078dc:	2300      	movs	r3, #0
 80078de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078e0:	e05b      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80078e2:	2300      	movs	r3, #0
 80078e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078e6:	e058      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80078e8:	58024400 	.word	0x58024400
 80078ec:	03d09000 	.word	0x03d09000
 80078f0:	003d0900 	.word	0x003d0900
 80078f4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80078f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078fc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007900:	430b      	orrs	r3, r1
 8007902:	d148      	bne.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007904:	4b27      	ldr	r3, [pc, #156]	@ (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007908:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800790c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800790e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007910:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007914:	d02a      	beq.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007918:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800791c:	d838      	bhi.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800791e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007920:	2b00      	cmp	r3, #0
 8007922:	d004      	beq.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007926:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800792a:	d00d      	beq.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800792c:	e030      	b.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800792e:	4b1d      	ldr	r3, [pc, #116]	@ (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007936:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800793a:	d102      	bne.n	8007942 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800793c:	4b1a      	ldr	r3, [pc, #104]	@ (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800793e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007940:	e02b      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007942:	2300      	movs	r3, #0
 8007944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007946:	e028      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007948:	4b16      	ldr	r3, [pc, #88]	@ (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007950:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007954:	d107      	bne.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007956:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800795a:	4618      	mov	r0, r3
 800795c:	f000 fae4 	bl	8007f28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007964:	e019      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007966:	2300      	movs	r3, #0
 8007968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800796a:	e016      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800796c:	4b0d      	ldr	r3, [pc, #52]	@ (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007974:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007978:	d107      	bne.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800797a:	f107 0318 	add.w	r3, r7, #24
 800797e:	4618      	mov	r0, r3
 8007980:	f000 f82a 	bl	80079d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007988:	e007      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800798a:	2300      	movs	r3, #0
 800798c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800798e:	e004      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007990:	2300      	movs	r3, #0
 8007992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007994:	e001      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007996:	2300      	movs	r3, #0
 8007998:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800799a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800799c:	4618      	mov	r0, r3
 800799e:	3740      	adds	r7, #64	@ 0x40
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	58024400 	.word	0x58024400
 80079a8:	017d7840 	.word	0x017d7840

080079ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80079b0:	f7fe f816 	bl	80059e0 <HAL_RCC_GetHCLKFreq>
 80079b4:	4602      	mov	r2, r0
 80079b6:	4b06      	ldr	r3, [pc, #24]	@ (80079d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	091b      	lsrs	r3, r3, #4
 80079bc:	f003 0307 	and.w	r3, r3, #7
 80079c0:	4904      	ldr	r1, [pc, #16]	@ (80079d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80079c2:	5ccb      	ldrb	r3, [r1, r3]
 80079c4:	f003 031f 	and.w	r3, r3, #31
 80079c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	58024400 	.word	0x58024400
 80079d4:	08009b00 	.word	0x08009b00

080079d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80079d8:	b480      	push	{r7}
 80079da:	b089      	sub	sp, #36	@ 0x24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079e0:	4ba1      	ldr	r3, [pc, #644]	@ (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e4:	f003 0303 	and.w	r3, r3, #3
 80079e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80079ea:	4b9f      	ldr	r3, [pc, #636]	@ (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ee:	0b1b      	lsrs	r3, r3, #12
 80079f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80079f6:	4b9c      	ldr	r3, [pc, #624]	@ (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079fa:	091b      	lsrs	r3, r3, #4
 80079fc:	f003 0301 	and.w	r3, r3, #1
 8007a00:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007a02:	4b99      	ldr	r3, [pc, #612]	@ (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a06:	08db      	lsrs	r3, r3, #3
 8007a08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	fb02 f303 	mul.w	r3, r2, r3
 8007a12:	ee07 3a90 	vmov	s15, r3
 8007a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 8111 	beq.w	8007c48 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	f000 8083 	beq.w	8007b34 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	f200 80a1 	bhi.w	8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d003      	beq.n	8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d056      	beq.n	8007af0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007a42:	e099      	b.n	8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a44:	4b88      	ldr	r3, [pc, #544]	@ (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0320 	and.w	r3, r3, #32
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d02d      	beq.n	8007aac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a50:	4b85      	ldr	r3, [pc, #532]	@ (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	08db      	lsrs	r3, r3, #3
 8007a56:	f003 0303 	and.w	r3, r3, #3
 8007a5a:	4a84      	ldr	r2, [pc, #528]	@ (8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a60:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	ee07 3a90 	vmov	s15, r3
 8007a68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	ee07 3a90 	vmov	s15, r3
 8007a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a7a:	4b7b      	ldr	r3, [pc, #492]	@ (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a82:	ee07 3a90 	vmov	s15, r3
 8007a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a8e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007aaa:	e087      	b.n	8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	ee07 3a90 	vmov	s15, r3
 8007ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007abe:	4b6a      	ldr	r3, [pc, #424]	@ (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac6:	ee07 3a90 	vmov	s15, r3
 8007aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ad2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007aee:	e065      	b.n	8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	ee07 3a90 	vmov	s15, r3
 8007af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007afa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007c78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b02:	4b59      	ldr	r3, [pc, #356]	@ (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b0a:	ee07 3a90 	vmov	s15, r3
 8007b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b16:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b32:	e043      	b.n	8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	ee07 3a90 	vmov	s15, r3
 8007b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b3e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b46:	4b48      	ldr	r3, [pc, #288]	@ (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b4e:	ee07 3a90 	vmov	s15, r3
 8007b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b5a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b76:	e021      	b.n	8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	ee07 3a90 	vmov	s15, r3
 8007b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b82:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007c78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b8a:	4b37      	ldr	r3, [pc, #220]	@ (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b92:	ee07 3a90 	vmov	s15, r3
 8007b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b9e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc0:	0a5b      	lsrs	r3, r3, #9
 8007bc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007bd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007be2:	ee17 2a90 	vmov	r2, s15
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007bea:	4b1f      	ldr	r3, [pc, #124]	@ (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bee:	0c1b      	lsrs	r3, r3, #16
 8007bf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bf4:	ee07 3a90 	vmov	s15, r3
 8007bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c04:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c10:	ee17 2a90 	vmov	r2, s15
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007c18:	4b13      	ldr	r3, [pc, #76]	@ (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c1c:	0e1b      	lsrs	r3, r3, #24
 8007c1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c22:	ee07 3a90 	vmov	s15, r3
 8007c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c32:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c3e:	ee17 2a90 	vmov	r2, s15
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007c46:	e008      	b.n	8007c5a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	609a      	str	r2, [r3, #8]
}
 8007c5a:	bf00      	nop
 8007c5c:	3724      	adds	r7, #36	@ 0x24
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	58024400 	.word	0x58024400
 8007c6c:	03d09000 	.word	0x03d09000
 8007c70:	46000000 	.word	0x46000000
 8007c74:	4c742400 	.word	0x4c742400
 8007c78:	4a742400 	.word	0x4a742400
 8007c7c:	4bbebc20 	.word	0x4bbebc20

08007c80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b089      	sub	sp, #36	@ 0x24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c88:	4ba1      	ldr	r3, [pc, #644]	@ (8007f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c8c:	f003 0303 	and.w	r3, r3, #3
 8007c90:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007c92:	4b9f      	ldr	r3, [pc, #636]	@ (8007f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c96:	0d1b      	lsrs	r3, r3, #20
 8007c98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c9c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007c9e:	4b9c      	ldr	r3, [pc, #624]	@ (8007f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca2:	0a1b      	lsrs	r3, r3, #8
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007caa:	4b99      	ldr	r3, [pc, #612]	@ (8007f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cae:	08db      	lsrs	r3, r3, #3
 8007cb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	fb02 f303 	mul.w	r3, r2, r3
 8007cba:	ee07 3a90 	vmov	s15, r3
 8007cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cc2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 8111 	beq.w	8007ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	f000 8083 	beq.w	8007ddc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	f200 80a1 	bhi.w	8007e20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d003      	beq.n	8007cec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d056      	beq.n	8007d98 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007cea:	e099      	b.n	8007e20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cec:	4b88      	ldr	r3, [pc, #544]	@ (8007f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0320 	and.w	r3, r3, #32
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d02d      	beq.n	8007d54 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cf8:	4b85      	ldr	r3, [pc, #532]	@ (8007f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	08db      	lsrs	r3, r3, #3
 8007cfe:	f003 0303 	and.w	r3, r3, #3
 8007d02:	4a84      	ldr	r2, [pc, #528]	@ (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007d04:	fa22 f303 	lsr.w	r3, r2, r3
 8007d08:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	ee07 3a90 	vmov	s15, r3
 8007d10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	ee07 3a90 	vmov	s15, r3
 8007d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d22:	4b7b      	ldr	r3, [pc, #492]	@ (8007f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d2a:	ee07 3a90 	vmov	s15, r3
 8007d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d32:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007f18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007d52:	e087      	b.n	8007e64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	ee07 3a90 	vmov	s15, r3
 8007d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d5e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d66:	4b6a      	ldr	r3, [pc, #424]	@ (8007f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d6e:	ee07 3a90 	vmov	s15, r3
 8007d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d76:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d7a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007f18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d96:	e065      	b.n	8007e64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	ee07 3a90 	vmov	s15, r3
 8007d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007da2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007daa:	4b59      	ldr	r3, [pc, #356]	@ (8007f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007db2:	ee07 3a90 	vmov	s15, r3
 8007db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dba:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dbe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007f18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dda:	e043      	b.n	8007e64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	ee07 3a90 	vmov	s15, r3
 8007de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007de6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007f24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dee:	4b48      	ldr	r3, [pc, #288]	@ (8007f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007df6:	ee07 3a90 	vmov	s15, r3
 8007dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e02:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007f18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e1e:	e021      	b.n	8007e64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	ee07 3a90 	vmov	s15, r3
 8007e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e2a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e32:	4b37      	ldr	r3, [pc, #220]	@ (8007f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e3a:	ee07 3a90 	vmov	s15, r3
 8007e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e42:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e46:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007f18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e62:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007e64:	4b2a      	ldr	r3, [pc, #168]	@ (8007f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e68:	0a5b      	lsrs	r3, r3, #9
 8007e6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e6e:	ee07 3a90 	vmov	s15, r3
 8007e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e8a:	ee17 2a90 	vmov	r2, s15
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007e92:	4b1f      	ldr	r3, [pc, #124]	@ (8007f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e96:	0c1b      	lsrs	r3, r3, #16
 8007e98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e9c:	ee07 3a90 	vmov	s15, r3
 8007ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ea8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007eac:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007eb8:	ee17 2a90 	vmov	r2, s15
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007ec0:	4b13      	ldr	r3, [pc, #76]	@ (8007f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec4:	0e1b      	lsrs	r3, r3, #24
 8007ec6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007eca:	ee07 3a90 	vmov	s15, r3
 8007ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ed6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007eda:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ee6:	ee17 2a90 	vmov	r2, s15
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007eee:	e008      	b.n	8007f02 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	609a      	str	r2, [r3, #8]
}
 8007f02:	bf00      	nop
 8007f04:	3724      	adds	r7, #36	@ 0x24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	58024400 	.word	0x58024400
 8007f14:	03d09000 	.word	0x03d09000
 8007f18:	46000000 	.word	0x46000000
 8007f1c:	4c742400 	.word	0x4c742400
 8007f20:	4a742400 	.word	0x4a742400
 8007f24:	4bbebc20 	.word	0x4bbebc20

08007f28 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b089      	sub	sp, #36	@ 0x24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f30:	4ba0      	ldr	r3, [pc, #640]	@ (80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f34:	f003 0303 	and.w	r3, r3, #3
 8007f38:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007f3a:	4b9e      	ldr	r3, [pc, #632]	@ (80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f3e:	091b      	lsrs	r3, r3, #4
 8007f40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f44:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007f46:	4b9b      	ldr	r3, [pc, #620]	@ (80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007f50:	4b98      	ldr	r3, [pc, #608]	@ (80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f54:	08db      	lsrs	r3, r3, #3
 8007f56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	fb02 f303 	mul.w	r3, r2, r3
 8007f60:	ee07 3a90 	vmov	s15, r3
 8007f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f68:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f000 8111 	beq.w	8008196 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	f000 8083 	beq.w	8008082 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	f200 80a1 	bhi.w	80080c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d003      	beq.n	8007f92 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d056      	beq.n	800803e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007f90:	e099      	b.n	80080c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f92:	4b88      	ldr	r3, [pc, #544]	@ (80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 0320 	and.w	r3, r3, #32
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d02d      	beq.n	8007ffa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f9e:	4b85      	ldr	r3, [pc, #532]	@ (80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	08db      	lsrs	r3, r3, #3
 8007fa4:	f003 0303 	and.w	r3, r3, #3
 8007fa8:	4a83      	ldr	r2, [pc, #524]	@ (80081b8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007faa:	fa22 f303 	lsr.w	r3, r2, r3
 8007fae:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	ee07 3a90 	vmov	s15, r3
 8007fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	ee07 3a90 	vmov	s15, r3
 8007fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fc8:	4b7a      	ldr	r3, [pc, #488]	@ (80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd0:	ee07 3a90 	vmov	s15, r3
 8007fd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fd8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fdc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007fe0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fe4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fe8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ff4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007ff8:	e087      	b.n	800810a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	ee07 3a90 	vmov	s15, r3
 8008000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008004:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80081c0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008008:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800800c:	4b69      	ldr	r3, [pc, #420]	@ (80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800800e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008014:	ee07 3a90 	vmov	s15, r3
 8008018:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800801c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008020:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008024:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008028:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800802c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008030:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008038:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800803c:	e065      	b.n	800810a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	ee07 3a90 	vmov	s15, r3
 8008044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008048:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80081c4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800804c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008050:	4b58      	ldr	r3, [pc, #352]	@ (80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008058:	ee07 3a90 	vmov	s15, r3
 800805c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008060:	ed97 6a03 	vldr	s12, [r7, #12]
 8008064:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008068:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800806c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008070:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008074:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800807c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008080:	e043      	b.n	800810a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	ee07 3a90 	vmov	s15, r3
 8008088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800808c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80081c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008094:	4b47      	ldr	r3, [pc, #284]	@ (80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800809c:	ee07 3a90 	vmov	s15, r3
 80080a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80080a8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80080ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080c4:	e021      	b.n	800810a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	ee07 3a90 	vmov	s15, r3
 80080cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80081c0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80080d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080d8:	4b36      	ldr	r3, [pc, #216]	@ (80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e0:	ee07 3a90 	vmov	s15, r3
 80080e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ec:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80080f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008104:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008108:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800810a:	4b2a      	ldr	r3, [pc, #168]	@ (80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800810c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800810e:	0a5b      	lsrs	r3, r3, #9
 8008110:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008114:	ee07 3a90 	vmov	s15, r3
 8008118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008120:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008124:	edd7 6a07 	vldr	s13, [r7, #28]
 8008128:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800812c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008130:	ee17 2a90 	vmov	r2, s15
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008138:	4b1e      	ldr	r3, [pc, #120]	@ (80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800813a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800813c:	0c1b      	lsrs	r3, r3, #16
 800813e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008142:	ee07 3a90 	vmov	s15, r3
 8008146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800814e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008152:	edd7 6a07 	vldr	s13, [r7, #28]
 8008156:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800815a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800815e:	ee17 2a90 	vmov	r2, s15
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008166:	4b13      	ldr	r3, [pc, #76]	@ (80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800816a:	0e1b      	lsrs	r3, r3, #24
 800816c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008170:	ee07 3a90 	vmov	s15, r3
 8008174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008178:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800817c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008180:	edd7 6a07 	vldr	s13, [r7, #28]
 8008184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800818c:	ee17 2a90 	vmov	r2, s15
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008194:	e008      	b.n	80081a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	609a      	str	r2, [r3, #8]
}
 80081a8:	bf00      	nop
 80081aa:	3724      	adds	r7, #36	@ 0x24
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr
 80081b4:	58024400 	.word	0x58024400
 80081b8:	03d09000 	.word	0x03d09000
 80081bc:	46000000 	.word	0x46000000
 80081c0:	4c742400 	.word	0x4c742400
 80081c4:	4a742400 	.word	0x4a742400
 80081c8:	4bbebc20 	.word	0x4bbebc20

080081cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80081da:	4b53      	ldr	r3, [pc, #332]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 80081dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081de:	f003 0303 	and.w	r3, r3, #3
 80081e2:	2b03      	cmp	r3, #3
 80081e4:	d101      	bne.n	80081ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e099      	b.n	800831e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80081ea:	4b4f      	ldr	r3, [pc, #316]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a4e      	ldr	r2, [pc, #312]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 80081f0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80081f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081f6:	f7f9 f873 	bl	80012e0 <HAL_GetTick>
 80081fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081fc:	e008      	b.n	8008210 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80081fe:	f7f9 f86f 	bl	80012e0 <HAL_GetTick>
 8008202:	4602      	mov	r2, r0
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	2b02      	cmp	r3, #2
 800820a:	d901      	bls.n	8008210 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800820c:	2303      	movs	r3, #3
 800820e:	e086      	b.n	800831e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008210:	4b45      	ldr	r3, [pc, #276]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1f0      	bne.n	80081fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800821c:	4b42      	ldr	r3, [pc, #264]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 800821e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008220:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	031b      	lsls	r3, r3, #12
 800822a:	493f      	ldr	r1, [pc, #252]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 800822c:	4313      	orrs	r3, r2
 800822e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	3b01      	subs	r3, #1
 8008236:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	3b01      	subs	r3, #1
 8008240:	025b      	lsls	r3, r3, #9
 8008242:	b29b      	uxth	r3, r3
 8008244:	431a      	orrs	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	3b01      	subs	r3, #1
 800824c:	041b      	lsls	r3, r3, #16
 800824e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008252:	431a      	orrs	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	3b01      	subs	r3, #1
 800825a:	061b      	lsls	r3, r3, #24
 800825c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008260:	4931      	ldr	r1, [pc, #196]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 8008262:	4313      	orrs	r3, r2
 8008264:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008266:	4b30      	ldr	r3, [pc, #192]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 8008268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800826a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	492d      	ldr	r1, [pc, #180]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 8008274:	4313      	orrs	r3, r2
 8008276:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008278:	4b2b      	ldr	r3, [pc, #172]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 800827a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800827c:	f023 0220 	bic.w	r2, r3, #32
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	699b      	ldr	r3, [r3, #24]
 8008284:	4928      	ldr	r1, [pc, #160]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 8008286:	4313      	orrs	r3, r2
 8008288:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800828a:	4b27      	ldr	r3, [pc, #156]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 800828c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800828e:	4a26      	ldr	r2, [pc, #152]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 8008290:	f023 0310 	bic.w	r3, r3, #16
 8008294:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008296:	4b24      	ldr	r3, [pc, #144]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 8008298:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800829a:	4b24      	ldr	r3, [pc, #144]	@ (800832c <RCCEx_PLL2_Config+0x160>)
 800829c:	4013      	ands	r3, r2
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	69d2      	ldr	r2, [r2, #28]
 80082a2:	00d2      	lsls	r2, r2, #3
 80082a4:	4920      	ldr	r1, [pc, #128]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80082aa:	4b1f      	ldr	r3, [pc, #124]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 80082ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 80082b0:	f043 0310 	orr.w	r3, r3, #16
 80082b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d106      	bne.n	80082ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80082bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 80082be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c0:	4a19      	ldr	r2, [pc, #100]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 80082c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80082c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80082c8:	e00f      	b.n	80082ea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d106      	bne.n	80082de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80082d0:	4b15      	ldr	r3, [pc, #84]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 80082d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d4:	4a14      	ldr	r2, [pc, #80]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 80082d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80082dc:	e005      	b.n	80082ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80082de:	4b12      	ldr	r3, [pc, #72]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 80082e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e2:	4a11      	ldr	r2, [pc, #68]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 80082e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80082e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80082ea:	4b0f      	ldr	r3, [pc, #60]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a0e      	ldr	r2, [pc, #56]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 80082f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80082f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082f6:	f7f8 fff3 	bl	80012e0 <HAL_GetTick>
 80082fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082fc:	e008      	b.n	8008310 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80082fe:	f7f8 ffef 	bl	80012e0 <HAL_GetTick>
 8008302:	4602      	mov	r2, r0
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	2b02      	cmp	r3, #2
 800830a:	d901      	bls.n	8008310 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800830c:	2303      	movs	r3, #3
 800830e:	e006      	b.n	800831e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008310:	4b05      	ldr	r3, [pc, #20]	@ (8008328 <RCCEx_PLL2_Config+0x15c>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008318:	2b00      	cmp	r3, #0
 800831a:	d0f0      	beq.n	80082fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800831c:	7bfb      	ldrb	r3, [r7, #15]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	58024400 	.word	0x58024400
 800832c:	ffff0007 	.word	0xffff0007

08008330 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800833a:	2300      	movs	r3, #0
 800833c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800833e:	4b53      	ldr	r3, [pc, #332]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 8008340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008342:	f003 0303 	and.w	r3, r3, #3
 8008346:	2b03      	cmp	r3, #3
 8008348:	d101      	bne.n	800834e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e099      	b.n	8008482 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800834e:	4b4f      	ldr	r3, [pc, #316]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a4e      	ldr	r2, [pc, #312]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 8008354:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008358:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800835a:	f7f8 ffc1 	bl	80012e0 <HAL_GetTick>
 800835e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008360:	e008      	b.n	8008374 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008362:	f7f8 ffbd 	bl	80012e0 <HAL_GetTick>
 8008366:	4602      	mov	r2, r0
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	2b02      	cmp	r3, #2
 800836e:	d901      	bls.n	8008374 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008370:	2303      	movs	r3, #3
 8008372:	e086      	b.n	8008482 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008374:	4b45      	ldr	r3, [pc, #276]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1f0      	bne.n	8008362 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008380:	4b42      	ldr	r3, [pc, #264]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 8008382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008384:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	051b      	lsls	r3, r3, #20
 800838e:	493f      	ldr	r1, [pc, #252]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 8008390:	4313      	orrs	r3, r2
 8008392:	628b      	str	r3, [r1, #40]	@ 0x28
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	3b01      	subs	r3, #1
 800839a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	3b01      	subs	r3, #1
 80083a4:	025b      	lsls	r3, r3, #9
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	431a      	orrs	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	3b01      	subs	r3, #1
 80083b0:	041b      	lsls	r3, r3, #16
 80083b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80083b6:	431a      	orrs	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	3b01      	subs	r3, #1
 80083be:	061b      	lsls	r3, r3, #24
 80083c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80083c4:	4931      	ldr	r1, [pc, #196]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 80083c6:	4313      	orrs	r3, r2
 80083c8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80083ca:	4b30      	ldr	r3, [pc, #192]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 80083cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	492d      	ldr	r1, [pc, #180]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 80083d8:	4313      	orrs	r3, r2
 80083da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80083dc:	4b2b      	ldr	r3, [pc, #172]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 80083de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	4928      	ldr	r1, [pc, #160]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 80083ea:	4313      	orrs	r3, r2
 80083ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80083ee:	4b27      	ldr	r3, [pc, #156]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 80083f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f2:	4a26      	ldr	r2, [pc, #152]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 80083f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80083fa:	4b24      	ldr	r3, [pc, #144]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 80083fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083fe:	4b24      	ldr	r3, [pc, #144]	@ (8008490 <RCCEx_PLL3_Config+0x160>)
 8008400:	4013      	ands	r3, r2
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	69d2      	ldr	r2, [r2, #28]
 8008406:	00d2      	lsls	r2, r2, #3
 8008408:	4920      	ldr	r1, [pc, #128]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 800840a:	4313      	orrs	r3, r2
 800840c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800840e:	4b1f      	ldr	r3, [pc, #124]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 8008410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008412:	4a1e      	ldr	r2, [pc, #120]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 8008414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008418:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d106      	bne.n	800842e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008420:	4b1a      	ldr	r3, [pc, #104]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 8008422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008424:	4a19      	ldr	r2, [pc, #100]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 8008426:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800842a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800842c:	e00f      	b.n	800844e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d106      	bne.n	8008442 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008434:	4b15      	ldr	r3, [pc, #84]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 8008436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008438:	4a14      	ldr	r2, [pc, #80]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 800843a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800843e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008440:	e005      	b.n	800844e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008442:	4b12      	ldr	r3, [pc, #72]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 8008444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008446:	4a11      	ldr	r2, [pc, #68]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 8008448:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800844c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800844e:	4b0f      	ldr	r3, [pc, #60]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a0e      	ldr	r2, [pc, #56]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 8008454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008458:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800845a:	f7f8 ff41 	bl	80012e0 <HAL_GetTick>
 800845e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008460:	e008      	b.n	8008474 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008462:	f7f8 ff3d 	bl	80012e0 <HAL_GetTick>
 8008466:	4602      	mov	r2, r0
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	1ad3      	subs	r3, r2, r3
 800846c:	2b02      	cmp	r3, #2
 800846e:	d901      	bls.n	8008474 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008470:	2303      	movs	r3, #3
 8008472:	e006      	b.n	8008482 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008474:	4b05      	ldr	r3, [pc, #20]	@ (800848c <RCCEx_PLL3_Config+0x15c>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800847c:	2b00      	cmp	r3, #0
 800847e:	d0f0      	beq.n	8008462 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008480:	7bfb      	ldrb	r3, [r7, #15]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	58024400 	.word	0x58024400
 8008490:	ffff0007 	.word	0xffff0007

08008494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d101      	bne.n	80084a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e049      	b.n	800853a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d106      	bne.n	80084c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f7f8 fb70 	bl	8000ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2202      	movs	r2, #2
 80084c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	3304      	adds	r3, #4
 80084d0:	4619      	mov	r1, r3
 80084d2:	4610      	mov	r0, r2
 80084d4:	f000 f92e 	bl	8008734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
	...

08008544 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008558:	2b01      	cmp	r3, #1
 800855a:	d101      	bne.n	8008560 <HAL_TIM_ConfigClockSource+0x1c>
 800855c:	2302      	movs	r3, #2
 800855e:	e0dc      	b.n	800871a <HAL_TIM_ConfigClockSource+0x1d6>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2202      	movs	r2, #2
 800856c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	4b6a      	ldr	r3, [pc, #424]	@ (8008724 <HAL_TIM_ConfigClockSource+0x1e0>)
 800857c:	4013      	ands	r3, r2
 800857e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008586:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a64      	ldr	r2, [pc, #400]	@ (8008728 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008596:	4293      	cmp	r3, r2
 8008598:	f000 80a9 	beq.w	80086ee <HAL_TIM_ConfigClockSource+0x1aa>
 800859c:	4a62      	ldr	r2, [pc, #392]	@ (8008728 <HAL_TIM_ConfigClockSource+0x1e4>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	f200 80ae 	bhi.w	8008700 <HAL_TIM_ConfigClockSource+0x1bc>
 80085a4:	4a61      	ldr	r2, [pc, #388]	@ (800872c <HAL_TIM_ConfigClockSource+0x1e8>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	f000 80a1 	beq.w	80086ee <HAL_TIM_ConfigClockSource+0x1aa>
 80085ac:	4a5f      	ldr	r2, [pc, #380]	@ (800872c <HAL_TIM_ConfigClockSource+0x1e8>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	f200 80a6 	bhi.w	8008700 <HAL_TIM_ConfigClockSource+0x1bc>
 80085b4:	4a5e      	ldr	r2, [pc, #376]	@ (8008730 <HAL_TIM_ConfigClockSource+0x1ec>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	f000 8099 	beq.w	80086ee <HAL_TIM_ConfigClockSource+0x1aa>
 80085bc:	4a5c      	ldr	r2, [pc, #368]	@ (8008730 <HAL_TIM_ConfigClockSource+0x1ec>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	f200 809e 	bhi.w	8008700 <HAL_TIM_ConfigClockSource+0x1bc>
 80085c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80085c8:	f000 8091 	beq.w	80086ee <HAL_TIM_ConfigClockSource+0x1aa>
 80085cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80085d0:	f200 8096 	bhi.w	8008700 <HAL_TIM_ConfigClockSource+0x1bc>
 80085d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085d8:	f000 8089 	beq.w	80086ee <HAL_TIM_ConfigClockSource+0x1aa>
 80085dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085e0:	f200 808e 	bhi.w	8008700 <HAL_TIM_ConfigClockSource+0x1bc>
 80085e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085e8:	d03e      	beq.n	8008668 <HAL_TIM_ConfigClockSource+0x124>
 80085ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085ee:	f200 8087 	bhi.w	8008700 <HAL_TIM_ConfigClockSource+0x1bc>
 80085f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085f6:	f000 8086 	beq.w	8008706 <HAL_TIM_ConfigClockSource+0x1c2>
 80085fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085fe:	d87f      	bhi.n	8008700 <HAL_TIM_ConfigClockSource+0x1bc>
 8008600:	2b70      	cmp	r3, #112	@ 0x70
 8008602:	d01a      	beq.n	800863a <HAL_TIM_ConfigClockSource+0xf6>
 8008604:	2b70      	cmp	r3, #112	@ 0x70
 8008606:	d87b      	bhi.n	8008700 <HAL_TIM_ConfigClockSource+0x1bc>
 8008608:	2b60      	cmp	r3, #96	@ 0x60
 800860a:	d050      	beq.n	80086ae <HAL_TIM_ConfigClockSource+0x16a>
 800860c:	2b60      	cmp	r3, #96	@ 0x60
 800860e:	d877      	bhi.n	8008700 <HAL_TIM_ConfigClockSource+0x1bc>
 8008610:	2b50      	cmp	r3, #80	@ 0x50
 8008612:	d03c      	beq.n	800868e <HAL_TIM_ConfigClockSource+0x14a>
 8008614:	2b50      	cmp	r3, #80	@ 0x50
 8008616:	d873      	bhi.n	8008700 <HAL_TIM_ConfigClockSource+0x1bc>
 8008618:	2b40      	cmp	r3, #64	@ 0x40
 800861a:	d058      	beq.n	80086ce <HAL_TIM_ConfigClockSource+0x18a>
 800861c:	2b40      	cmp	r3, #64	@ 0x40
 800861e:	d86f      	bhi.n	8008700 <HAL_TIM_ConfigClockSource+0x1bc>
 8008620:	2b30      	cmp	r3, #48	@ 0x30
 8008622:	d064      	beq.n	80086ee <HAL_TIM_ConfigClockSource+0x1aa>
 8008624:	2b30      	cmp	r3, #48	@ 0x30
 8008626:	d86b      	bhi.n	8008700 <HAL_TIM_ConfigClockSource+0x1bc>
 8008628:	2b20      	cmp	r3, #32
 800862a:	d060      	beq.n	80086ee <HAL_TIM_ConfigClockSource+0x1aa>
 800862c:	2b20      	cmp	r3, #32
 800862e:	d867      	bhi.n	8008700 <HAL_TIM_ConfigClockSource+0x1bc>
 8008630:	2b00      	cmp	r3, #0
 8008632:	d05c      	beq.n	80086ee <HAL_TIM_ConfigClockSource+0x1aa>
 8008634:	2b10      	cmp	r3, #16
 8008636:	d05a      	beq.n	80086ee <HAL_TIM_ConfigClockSource+0x1aa>
 8008638:	e062      	b.n	8008700 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800864a:	f000 f991 	bl	8008970 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800865c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	609a      	str	r2, [r3, #8]
      break;
 8008666:	e04f      	b.n	8008708 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008678:	f000 f97a 	bl	8008970 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	689a      	ldr	r2, [r3, #8]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800868a:	609a      	str	r2, [r3, #8]
      break;
 800868c:	e03c      	b.n	8008708 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800869a:	461a      	mov	r2, r3
 800869c:	f000 f8ea 	bl	8008874 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2150      	movs	r1, #80	@ 0x50
 80086a6:	4618      	mov	r0, r3
 80086a8:	f000 f944 	bl	8008934 <TIM_ITRx_SetConfig>
      break;
 80086ac:	e02c      	b.n	8008708 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80086ba:	461a      	mov	r2, r3
 80086bc:	f000 f909 	bl	80088d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2160      	movs	r1, #96	@ 0x60
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 f934 	bl	8008934 <TIM_ITRx_SetConfig>
      break;
 80086cc:	e01c      	b.n	8008708 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086da:	461a      	mov	r2, r3
 80086dc:	f000 f8ca 	bl	8008874 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2140      	movs	r1, #64	@ 0x40
 80086e6:	4618      	mov	r0, r3
 80086e8:	f000 f924 	bl	8008934 <TIM_ITRx_SetConfig>
      break;
 80086ec:	e00c      	b.n	8008708 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4619      	mov	r1, r3
 80086f8:	4610      	mov	r0, r2
 80086fa:	f000 f91b 	bl	8008934 <TIM_ITRx_SetConfig>
      break;
 80086fe:	e003      	b.n	8008708 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	73fb      	strb	r3, [r7, #15]
      break;
 8008704:	e000      	b.n	8008708 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008706:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008718:	7bfb      	ldrb	r3, [r7, #15]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	ffceff88 	.word	0xffceff88
 8008728:	00100040 	.word	0x00100040
 800872c:	00100030 	.word	0x00100030
 8008730:	00100020 	.word	0x00100020

08008734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a43      	ldr	r2, [pc, #268]	@ (8008854 <TIM_Base_SetConfig+0x120>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d013      	beq.n	8008774 <TIM_Base_SetConfig+0x40>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008752:	d00f      	beq.n	8008774 <TIM_Base_SetConfig+0x40>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a40      	ldr	r2, [pc, #256]	@ (8008858 <TIM_Base_SetConfig+0x124>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d00b      	beq.n	8008774 <TIM_Base_SetConfig+0x40>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a3f      	ldr	r2, [pc, #252]	@ (800885c <TIM_Base_SetConfig+0x128>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d007      	beq.n	8008774 <TIM_Base_SetConfig+0x40>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a3e      	ldr	r2, [pc, #248]	@ (8008860 <TIM_Base_SetConfig+0x12c>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d003      	beq.n	8008774 <TIM_Base_SetConfig+0x40>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a3d      	ldr	r2, [pc, #244]	@ (8008864 <TIM_Base_SetConfig+0x130>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d108      	bne.n	8008786 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800877a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	4313      	orrs	r3, r2
 8008784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a32      	ldr	r2, [pc, #200]	@ (8008854 <TIM_Base_SetConfig+0x120>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d01f      	beq.n	80087ce <TIM_Base_SetConfig+0x9a>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008794:	d01b      	beq.n	80087ce <TIM_Base_SetConfig+0x9a>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a2f      	ldr	r2, [pc, #188]	@ (8008858 <TIM_Base_SetConfig+0x124>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d017      	beq.n	80087ce <TIM_Base_SetConfig+0x9a>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a2e      	ldr	r2, [pc, #184]	@ (800885c <TIM_Base_SetConfig+0x128>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d013      	beq.n	80087ce <TIM_Base_SetConfig+0x9a>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a2d      	ldr	r2, [pc, #180]	@ (8008860 <TIM_Base_SetConfig+0x12c>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d00f      	beq.n	80087ce <TIM_Base_SetConfig+0x9a>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a2c      	ldr	r2, [pc, #176]	@ (8008864 <TIM_Base_SetConfig+0x130>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d00b      	beq.n	80087ce <TIM_Base_SetConfig+0x9a>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a2b      	ldr	r2, [pc, #172]	@ (8008868 <TIM_Base_SetConfig+0x134>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d007      	beq.n	80087ce <TIM_Base_SetConfig+0x9a>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a2a      	ldr	r2, [pc, #168]	@ (800886c <TIM_Base_SetConfig+0x138>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d003      	beq.n	80087ce <TIM_Base_SetConfig+0x9a>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a29      	ldr	r2, [pc, #164]	@ (8008870 <TIM_Base_SetConfig+0x13c>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d108      	bne.n	80087e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	4313      	orrs	r3, r2
 80087de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	695b      	ldr	r3, [r3, #20]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	689a      	ldr	r2, [r3, #8]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a14      	ldr	r2, [pc, #80]	@ (8008854 <TIM_Base_SetConfig+0x120>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d00f      	beq.n	8008826 <TIM_Base_SetConfig+0xf2>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a16      	ldr	r2, [pc, #88]	@ (8008864 <TIM_Base_SetConfig+0x130>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d00b      	beq.n	8008826 <TIM_Base_SetConfig+0xf2>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a15      	ldr	r2, [pc, #84]	@ (8008868 <TIM_Base_SetConfig+0x134>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d007      	beq.n	8008826 <TIM_Base_SetConfig+0xf2>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a14      	ldr	r2, [pc, #80]	@ (800886c <TIM_Base_SetConfig+0x138>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d003      	beq.n	8008826 <TIM_Base_SetConfig+0xf2>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a13      	ldr	r2, [pc, #76]	@ (8008870 <TIM_Base_SetConfig+0x13c>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d103      	bne.n	800882e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	691a      	ldr	r2, [r3, #16]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f043 0204 	orr.w	r2, r3, #4
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	601a      	str	r2, [r3, #0]
}
 8008846:	bf00      	nop
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	40010000 	.word	0x40010000
 8008858:	40000400 	.word	0x40000400
 800885c:	40000800 	.word	0x40000800
 8008860:	40000c00 	.word	0x40000c00
 8008864:	40010400 	.word	0x40010400
 8008868:	40014000 	.word	0x40014000
 800886c:	40014400 	.word	0x40014400
 8008870:	40014800 	.word	0x40014800

08008874 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008874:	b480      	push	{r7}
 8008876:	b087      	sub	sp, #28
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6a1b      	ldr	r3, [r3, #32]
 8008884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	f023 0201 	bic.w	r2, r3, #1
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	699b      	ldr	r3, [r3, #24]
 8008896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800889e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	011b      	lsls	r3, r3, #4
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f023 030a 	bic.w	r3, r3, #10
 80088b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088b2:	697a      	ldr	r2, [r7, #20]
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	697a      	ldr	r2, [r7, #20]
 80088c4:	621a      	str	r2, [r3, #32]
}
 80088c6:	bf00      	nop
 80088c8:	371c      	adds	r7, #28
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b087      	sub	sp, #28
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	60f8      	str	r0, [r7, #12]
 80088da:	60b9      	str	r1, [r7, #8]
 80088dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6a1b      	ldr	r3, [r3, #32]
 80088e8:	f023 0210 	bic.w	r2, r3, #16
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80088fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	031b      	lsls	r3, r3, #12
 8008902:	693a      	ldr	r2, [r7, #16]
 8008904:	4313      	orrs	r3, r2
 8008906:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800890e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	011b      	lsls	r3, r3, #4
 8008914:	697a      	ldr	r2, [r7, #20]
 8008916:	4313      	orrs	r3, r2
 8008918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	697a      	ldr	r2, [r7, #20]
 8008924:	621a      	str	r2, [r3, #32]
}
 8008926:	bf00      	nop
 8008928:	371c      	adds	r7, #28
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
	...

08008934 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	4b09      	ldr	r3, [pc, #36]	@ (800896c <TIM_ITRx_SetConfig+0x38>)
 8008948:	4013      	ands	r3, r2
 800894a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800894c:	683a      	ldr	r2, [r7, #0]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	4313      	orrs	r3, r2
 8008952:	f043 0307 	orr.w	r3, r3, #7
 8008956:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	609a      	str	r2, [r3, #8]
}
 800895e:	bf00      	nop
 8008960:	3714      	adds	r7, #20
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	ffcfff8f 	.word	0xffcfff8f

08008970 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008970:	b480      	push	{r7}
 8008972:	b087      	sub	sp, #28
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800898a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	021a      	lsls	r2, r3, #8
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	431a      	orrs	r2, r3
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	4313      	orrs	r3, r2
 8008998:	697a      	ldr	r2, [r7, #20]
 800899a:	4313      	orrs	r3, r2
 800899c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	697a      	ldr	r2, [r7, #20]
 80089a2:	609a      	str	r2, [r3, #8]
}
 80089a4:	bf00      	nop
 80089a6:	371c      	adds	r7, #28
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d101      	bne.n	80089c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089c4:	2302      	movs	r3, #2
 80089c6:	e06d      	b.n	8008aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2202      	movs	r2, #2
 80089d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a30      	ldr	r2, [pc, #192]	@ (8008ab0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d004      	beq.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a2f      	ldr	r2, [pc, #188]	@ (8008ab4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d108      	bne.n	8008a0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008a02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a20      	ldr	r2, [pc, #128]	@ (8008ab0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d022      	beq.n	8008a78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a3a:	d01d      	beq.n	8008a78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a1d      	ldr	r2, [pc, #116]	@ (8008ab8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d018      	beq.n	8008a78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8008abc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d013      	beq.n	8008a78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a1a      	ldr	r2, [pc, #104]	@ (8008ac0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d00e      	beq.n	8008a78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a15      	ldr	r2, [pc, #84]	@ (8008ab4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d009      	beq.n	8008a78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a16      	ldr	r2, [pc, #88]	@ (8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d004      	beq.n	8008a78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a15      	ldr	r2, [pc, #84]	@ (8008ac8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d10c      	bne.n	8008a92 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr
 8008ab0:	40010000 	.word	0x40010000
 8008ab4:	40010400 	.word	0x40010400
 8008ab8:	40000400 	.word	0x40000400
 8008abc:	40000800 	.word	0x40000800
 8008ac0:	40000c00 	.word	0x40000c00
 8008ac4:	40001800 	.word	0x40001800
 8008ac8:	40014000 	.word	0x40014000

08008acc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d101      	bne.n	8008ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e042      	b.n	8008b64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d106      	bne.n	8008af6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 f83b 	bl	8008b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2224      	movs	r2, #36	@ 0x24
 8008afa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f022 0201 	bic.w	r2, r2, #1
 8008b0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d002      	beq.n	8008b1c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fd9a 	bl	8009650 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f82f 	bl	8008b80 <UART_SetConfig>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d101      	bne.n	8008b2c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e01b      	b.n	8008b64 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	685a      	ldr	r2, [r3, #4]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	689a      	ldr	r2, [r3, #8]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f042 0201 	orr.w	r2, r2, #1
 8008b5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fe19 	bl	8009794 <UART_CheckIdleState>
 8008b62:	4603      	mov	r3, r0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b84:	b092      	sub	sp, #72	@ 0x48
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	689a      	ldr	r2, [r3, #8]
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	431a      	orrs	r2, r3
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	431a      	orrs	r2, r3
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	69db      	ldr	r3, [r3, #28]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	4bbe      	ldr	r3, [pc, #760]	@ (8008ea8 <UART_SetConfig+0x328>)
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	697a      	ldr	r2, [r7, #20]
 8008bb4:	6812      	ldr	r2, [r2, #0]
 8008bb6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008bb8:	430b      	orrs	r3, r1
 8008bba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	68da      	ldr	r2, [r3, #12]
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4ab3      	ldr	r2, [pc, #716]	@ (8008eac <UART_SetConfig+0x32c>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d004      	beq.n	8008bec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	6a1b      	ldr	r3, [r3, #32]
 8008be6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008be8:	4313      	orrs	r3, r2
 8008bea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	689a      	ldr	r2, [r3, #8]
 8008bf2:	4baf      	ldr	r3, [pc, #700]	@ (8008eb0 <UART_SetConfig+0x330>)
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	6812      	ldr	r2, [r2, #0]
 8008bfa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008bfc:	430b      	orrs	r3, r1
 8008bfe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c06:	f023 010f 	bic.w	r1, r3, #15
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	430a      	orrs	r2, r1
 8008c14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4aa6      	ldr	r2, [pc, #664]	@ (8008eb4 <UART_SetConfig+0x334>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d177      	bne.n	8008d10 <UART_SetConfig+0x190>
 8008c20:	4ba5      	ldr	r3, [pc, #660]	@ (8008eb8 <UART_SetConfig+0x338>)
 8008c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c28:	2b28      	cmp	r3, #40	@ 0x28
 8008c2a:	d86d      	bhi.n	8008d08 <UART_SetConfig+0x188>
 8008c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c34 <UART_SetConfig+0xb4>)
 8008c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c32:	bf00      	nop
 8008c34:	08008cd9 	.word	0x08008cd9
 8008c38:	08008d09 	.word	0x08008d09
 8008c3c:	08008d09 	.word	0x08008d09
 8008c40:	08008d09 	.word	0x08008d09
 8008c44:	08008d09 	.word	0x08008d09
 8008c48:	08008d09 	.word	0x08008d09
 8008c4c:	08008d09 	.word	0x08008d09
 8008c50:	08008d09 	.word	0x08008d09
 8008c54:	08008ce1 	.word	0x08008ce1
 8008c58:	08008d09 	.word	0x08008d09
 8008c5c:	08008d09 	.word	0x08008d09
 8008c60:	08008d09 	.word	0x08008d09
 8008c64:	08008d09 	.word	0x08008d09
 8008c68:	08008d09 	.word	0x08008d09
 8008c6c:	08008d09 	.word	0x08008d09
 8008c70:	08008d09 	.word	0x08008d09
 8008c74:	08008ce9 	.word	0x08008ce9
 8008c78:	08008d09 	.word	0x08008d09
 8008c7c:	08008d09 	.word	0x08008d09
 8008c80:	08008d09 	.word	0x08008d09
 8008c84:	08008d09 	.word	0x08008d09
 8008c88:	08008d09 	.word	0x08008d09
 8008c8c:	08008d09 	.word	0x08008d09
 8008c90:	08008d09 	.word	0x08008d09
 8008c94:	08008cf1 	.word	0x08008cf1
 8008c98:	08008d09 	.word	0x08008d09
 8008c9c:	08008d09 	.word	0x08008d09
 8008ca0:	08008d09 	.word	0x08008d09
 8008ca4:	08008d09 	.word	0x08008d09
 8008ca8:	08008d09 	.word	0x08008d09
 8008cac:	08008d09 	.word	0x08008d09
 8008cb0:	08008d09 	.word	0x08008d09
 8008cb4:	08008cf9 	.word	0x08008cf9
 8008cb8:	08008d09 	.word	0x08008d09
 8008cbc:	08008d09 	.word	0x08008d09
 8008cc0:	08008d09 	.word	0x08008d09
 8008cc4:	08008d09 	.word	0x08008d09
 8008cc8:	08008d09 	.word	0x08008d09
 8008ccc:	08008d09 	.word	0x08008d09
 8008cd0:	08008d09 	.word	0x08008d09
 8008cd4:	08008d01 	.word	0x08008d01
 8008cd8:	2301      	movs	r3, #1
 8008cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cde:	e222      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008ce0:	2304      	movs	r3, #4
 8008ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ce6:	e21e      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008ce8:	2308      	movs	r3, #8
 8008cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cee:	e21a      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008cf0:	2310      	movs	r3, #16
 8008cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf6:	e216      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008cf8:	2320      	movs	r3, #32
 8008cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cfe:	e212      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008d00:	2340      	movs	r3, #64	@ 0x40
 8008d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d06:	e20e      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008d08:	2380      	movs	r3, #128	@ 0x80
 8008d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d0e:	e20a      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a69      	ldr	r2, [pc, #420]	@ (8008ebc <UART_SetConfig+0x33c>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d130      	bne.n	8008d7c <UART_SetConfig+0x1fc>
 8008d1a:	4b67      	ldr	r3, [pc, #412]	@ (8008eb8 <UART_SetConfig+0x338>)
 8008d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d1e:	f003 0307 	and.w	r3, r3, #7
 8008d22:	2b05      	cmp	r3, #5
 8008d24:	d826      	bhi.n	8008d74 <UART_SetConfig+0x1f4>
 8008d26:	a201      	add	r2, pc, #4	@ (adr r2, 8008d2c <UART_SetConfig+0x1ac>)
 8008d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2c:	08008d45 	.word	0x08008d45
 8008d30:	08008d4d 	.word	0x08008d4d
 8008d34:	08008d55 	.word	0x08008d55
 8008d38:	08008d5d 	.word	0x08008d5d
 8008d3c:	08008d65 	.word	0x08008d65
 8008d40:	08008d6d 	.word	0x08008d6d
 8008d44:	2300      	movs	r3, #0
 8008d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d4a:	e1ec      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008d4c:	2304      	movs	r3, #4
 8008d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d52:	e1e8      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008d54:	2308      	movs	r3, #8
 8008d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d5a:	e1e4      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008d5c:	2310      	movs	r3, #16
 8008d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d62:	e1e0      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008d64:	2320      	movs	r3, #32
 8008d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d6a:	e1dc      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008d6c:	2340      	movs	r3, #64	@ 0x40
 8008d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d72:	e1d8      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008d74:	2380      	movs	r3, #128	@ 0x80
 8008d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d7a:	e1d4      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a4f      	ldr	r2, [pc, #316]	@ (8008ec0 <UART_SetConfig+0x340>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d130      	bne.n	8008de8 <UART_SetConfig+0x268>
 8008d86:	4b4c      	ldr	r3, [pc, #304]	@ (8008eb8 <UART_SetConfig+0x338>)
 8008d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d8a:	f003 0307 	and.w	r3, r3, #7
 8008d8e:	2b05      	cmp	r3, #5
 8008d90:	d826      	bhi.n	8008de0 <UART_SetConfig+0x260>
 8008d92:	a201      	add	r2, pc, #4	@ (adr r2, 8008d98 <UART_SetConfig+0x218>)
 8008d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d98:	08008db1 	.word	0x08008db1
 8008d9c:	08008db9 	.word	0x08008db9
 8008da0:	08008dc1 	.word	0x08008dc1
 8008da4:	08008dc9 	.word	0x08008dc9
 8008da8:	08008dd1 	.word	0x08008dd1
 8008dac:	08008dd9 	.word	0x08008dd9
 8008db0:	2300      	movs	r3, #0
 8008db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008db6:	e1b6      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008db8:	2304      	movs	r3, #4
 8008dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dbe:	e1b2      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008dc0:	2308      	movs	r3, #8
 8008dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dc6:	e1ae      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008dc8:	2310      	movs	r3, #16
 8008dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dce:	e1aa      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008dd0:	2320      	movs	r3, #32
 8008dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dd6:	e1a6      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008dd8:	2340      	movs	r3, #64	@ 0x40
 8008dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dde:	e1a2      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008de0:	2380      	movs	r3, #128	@ 0x80
 8008de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008de6:	e19e      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a35      	ldr	r2, [pc, #212]	@ (8008ec4 <UART_SetConfig+0x344>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d130      	bne.n	8008e54 <UART_SetConfig+0x2d4>
 8008df2:	4b31      	ldr	r3, [pc, #196]	@ (8008eb8 <UART_SetConfig+0x338>)
 8008df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008df6:	f003 0307 	and.w	r3, r3, #7
 8008dfa:	2b05      	cmp	r3, #5
 8008dfc:	d826      	bhi.n	8008e4c <UART_SetConfig+0x2cc>
 8008dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8008e04 <UART_SetConfig+0x284>)
 8008e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e04:	08008e1d 	.word	0x08008e1d
 8008e08:	08008e25 	.word	0x08008e25
 8008e0c:	08008e2d 	.word	0x08008e2d
 8008e10:	08008e35 	.word	0x08008e35
 8008e14:	08008e3d 	.word	0x08008e3d
 8008e18:	08008e45 	.word	0x08008e45
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e22:	e180      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008e24:	2304      	movs	r3, #4
 8008e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e2a:	e17c      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008e2c:	2308      	movs	r3, #8
 8008e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e32:	e178      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008e34:	2310      	movs	r3, #16
 8008e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e3a:	e174      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008e3c:	2320      	movs	r3, #32
 8008e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e42:	e170      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008e44:	2340      	movs	r3, #64	@ 0x40
 8008e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e4a:	e16c      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008e4c:	2380      	movs	r3, #128	@ 0x80
 8008e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e52:	e168      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a1b      	ldr	r2, [pc, #108]	@ (8008ec8 <UART_SetConfig+0x348>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d142      	bne.n	8008ee4 <UART_SetConfig+0x364>
 8008e5e:	4b16      	ldr	r3, [pc, #88]	@ (8008eb8 <UART_SetConfig+0x338>)
 8008e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e62:	f003 0307 	and.w	r3, r3, #7
 8008e66:	2b05      	cmp	r3, #5
 8008e68:	d838      	bhi.n	8008edc <UART_SetConfig+0x35c>
 8008e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e70 <UART_SetConfig+0x2f0>)
 8008e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e70:	08008e89 	.word	0x08008e89
 8008e74:	08008e91 	.word	0x08008e91
 8008e78:	08008e99 	.word	0x08008e99
 8008e7c:	08008ea1 	.word	0x08008ea1
 8008e80:	08008ecd 	.word	0x08008ecd
 8008e84:	08008ed5 	.word	0x08008ed5
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e8e:	e14a      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008e90:	2304      	movs	r3, #4
 8008e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e96:	e146      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008e98:	2308      	movs	r3, #8
 8008e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9e:	e142      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008ea0:	2310      	movs	r3, #16
 8008ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ea6:	e13e      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008ea8:	cfff69f3 	.word	0xcfff69f3
 8008eac:	58000c00 	.word	0x58000c00
 8008eb0:	11fff4ff 	.word	0x11fff4ff
 8008eb4:	40011000 	.word	0x40011000
 8008eb8:	58024400 	.word	0x58024400
 8008ebc:	40004400 	.word	0x40004400
 8008ec0:	40004800 	.word	0x40004800
 8008ec4:	40004c00 	.word	0x40004c00
 8008ec8:	40005000 	.word	0x40005000
 8008ecc:	2320      	movs	r3, #32
 8008ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ed2:	e128      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008ed4:	2340      	movs	r3, #64	@ 0x40
 8008ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eda:	e124      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008edc:	2380      	movs	r3, #128	@ 0x80
 8008ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ee2:	e120      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4acb      	ldr	r2, [pc, #812]	@ (8009218 <UART_SetConfig+0x698>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d176      	bne.n	8008fdc <UART_SetConfig+0x45c>
 8008eee:	4bcb      	ldr	r3, [pc, #812]	@ (800921c <UART_SetConfig+0x69c>)
 8008ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ef2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ef6:	2b28      	cmp	r3, #40	@ 0x28
 8008ef8:	d86c      	bhi.n	8008fd4 <UART_SetConfig+0x454>
 8008efa:	a201      	add	r2, pc, #4	@ (adr r2, 8008f00 <UART_SetConfig+0x380>)
 8008efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f00:	08008fa5 	.word	0x08008fa5
 8008f04:	08008fd5 	.word	0x08008fd5
 8008f08:	08008fd5 	.word	0x08008fd5
 8008f0c:	08008fd5 	.word	0x08008fd5
 8008f10:	08008fd5 	.word	0x08008fd5
 8008f14:	08008fd5 	.word	0x08008fd5
 8008f18:	08008fd5 	.word	0x08008fd5
 8008f1c:	08008fd5 	.word	0x08008fd5
 8008f20:	08008fad 	.word	0x08008fad
 8008f24:	08008fd5 	.word	0x08008fd5
 8008f28:	08008fd5 	.word	0x08008fd5
 8008f2c:	08008fd5 	.word	0x08008fd5
 8008f30:	08008fd5 	.word	0x08008fd5
 8008f34:	08008fd5 	.word	0x08008fd5
 8008f38:	08008fd5 	.word	0x08008fd5
 8008f3c:	08008fd5 	.word	0x08008fd5
 8008f40:	08008fb5 	.word	0x08008fb5
 8008f44:	08008fd5 	.word	0x08008fd5
 8008f48:	08008fd5 	.word	0x08008fd5
 8008f4c:	08008fd5 	.word	0x08008fd5
 8008f50:	08008fd5 	.word	0x08008fd5
 8008f54:	08008fd5 	.word	0x08008fd5
 8008f58:	08008fd5 	.word	0x08008fd5
 8008f5c:	08008fd5 	.word	0x08008fd5
 8008f60:	08008fbd 	.word	0x08008fbd
 8008f64:	08008fd5 	.word	0x08008fd5
 8008f68:	08008fd5 	.word	0x08008fd5
 8008f6c:	08008fd5 	.word	0x08008fd5
 8008f70:	08008fd5 	.word	0x08008fd5
 8008f74:	08008fd5 	.word	0x08008fd5
 8008f78:	08008fd5 	.word	0x08008fd5
 8008f7c:	08008fd5 	.word	0x08008fd5
 8008f80:	08008fc5 	.word	0x08008fc5
 8008f84:	08008fd5 	.word	0x08008fd5
 8008f88:	08008fd5 	.word	0x08008fd5
 8008f8c:	08008fd5 	.word	0x08008fd5
 8008f90:	08008fd5 	.word	0x08008fd5
 8008f94:	08008fd5 	.word	0x08008fd5
 8008f98:	08008fd5 	.word	0x08008fd5
 8008f9c:	08008fd5 	.word	0x08008fd5
 8008fa0:	08008fcd 	.word	0x08008fcd
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008faa:	e0bc      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008fac:	2304      	movs	r3, #4
 8008fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb2:	e0b8      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008fb4:	2308      	movs	r3, #8
 8008fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fba:	e0b4      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008fbc:	2310      	movs	r3, #16
 8008fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fc2:	e0b0      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008fc4:	2320      	movs	r3, #32
 8008fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fca:	e0ac      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008fcc:	2340      	movs	r3, #64	@ 0x40
 8008fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fd2:	e0a8      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008fd4:	2380      	movs	r3, #128	@ 0x80
 8008fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fda:	e0a4      	b.n	8009126 <UART_SetConfig+0x5a6>
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a8f      	ldr	r2, [pc, #572]	@ (8009220 <UART_SetConfig+0x6a0>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d130      	bne.n	8009048 <UART_SetConfig+0x4c8>
 8008fe6:	4b8d      	ldr	r3, [pc, #564]	@ (800921c <UART_SetConfig+0x69c>)
 8008fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fea:	f003 0307 	and.w	r3, r3, #7
 8008fee:	2b05      	cmp	r3, #5
 8008ff0:	d826      	bhi.n	8009040 <UART_SetConfig+0x4c0>
 8008ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ff8 <UART_SetConfig+0x478>)
 8008ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff8:	08009011 	.word	0x08009011
 8008ffc:	08009019 	.word	0x08009019
 8009000:	08009021 	.word	0x08009021
 8009004:	08009029 	.word	0x08009029
 8009008:	08009031 	.word	0x08009031
 800900c:	08009039 	.word	0x08009039
 8009010:	2300      	movs	r3, #0
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009016:	e086      	b.n	8009126 <UART_SetConfig+0x5a6>
 8009018:	2304      	movs	r3, #4
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800901e:	e082      	b.n	8009126 <UART_SetConfig+0x5a6>
 8009020:	2308      	movs	r3, #8
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009026:	e07e      	b.n	8009126 <UART_SetConfig+0x5a6>
 8009028:	2310      	movs	r3, #16
 800902a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800902e:	e07a      	b.n	8009126 <UART_SetConfig+0x5a6>
 8009030:	2320      	movs	r3, #32
 8009032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009036:	e076      	b.n	8009126 <UART_SetConfig+0x5a6>
 8009038:	2340      	movs	r3, #64	@ 0x40
 800903a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800903e:	e072      	b.n	8009126 <UART_SetConfig+0x5a6>
 8009040:	2380      	movs	r3, #128	@ 0x80
 8009042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009046:	e06e      	b.n	8009126 <UART_SetConfig+0x5a6>
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a75      	ldr	r2, [pc, #468]	@ (8009224 <UART_SetConfig+0x6a4>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d130      	bne.n	80090b4 <UART_SetConfig+0x534>
 8009052:	4b72      	ldr	r3, [pc, #456]	@ (800921c <UART_SetConfig+0x69c>)
 8009054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009056:	f003 0307 	and.w	r3, r3, #7
 800905a:	2b05      	cmp	r3, #5
 800905c:	d826      	bhi.n	80090ac <UART_SetConfig+0x52c>
 800905e:	a201      	add	r2, pc, #4	@ (adr r2, 8009064 <UART_SetConfig+0x4e4>)
 8009060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009064:	0800907d 	.word	0x0800907d
 8009068:	08009085 	.word	0x08009085
 800906c:	0800908d 	.word	0x0800908d
 8009070:	08009095 	.word	0x08009095
 8009074:	0800909d 	.word	0x0800909d
 8009078:	080090a5 	.word	0x080090a5
 800907c:	2300      	movs	r3, #0
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009082:	e050      	b.n	8009126 <UART_SetConfig+0x5a6>
 8009084:	2304      	movs	r3, #4
 8009086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800908a:	e04c      	b.n	8009126 <UART_SetConfig+0x5a6>
 800908c:	2308      	movs	r3, #8
 800908e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009092:	e048      	b.n	8009126 <UART_SetConfig+0x5a6>
 8009094:	2310      	movs	r3, #16
 8009096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800909a:	e044      	b.n	8009126 <UART_SetConfig+0x5a6>
 800909c:	2320      	movs	r3, #32
 800909e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090a2:	e040      	b.n	8009126 <UART_SetConfig+0x5a6>
 80090a4:	2340      	movs	r3, #64	@ 0x40
 80090a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090aa:	e03c      	b.n	8009126 <UART_SetConfig+0x5a6>
 80090ac:	2380      	movs	r3, #128	@ 0x80
 80090ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090b2:	e038      	b.n	8009126 <UART_SetConfig+0x5a6>
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a5b      	ldr	r2, [pc, #364]	@ (8009228 <UART_SetConfig+0x6a8>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d130      	bne.n	8009120 <UART_SetConfig+0x5a0>
 80090be:	4b57      	ldr	r3, [pc, #348]	@ (800921c <UART_SetConfig+0x69c>)
 80090c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090c2:	f003 0307 	and.w	r3, r3, #7
 80090c6:	2b05      	cmp	r3, #5
 80090c8:	d826      	bhi.n	8009118 <UART_SetConfig+0x598>
 80090ca:	a201      	add	r2, pc, #4	@ (adr r2, 80090d0 <UART_SetConfig+0x550>)
 80090cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d0:	080090e9 	.word	0x080090e9
 80090d4:	080090f1 	.word	0x080090f1
 80090d8:	080090f9 	.word	0x080090f9
 80090dc:	08009101 	.word	0x08009101
 80090e0:	08009109 	.word	0x08009109
 80090e4:	08009111 	.word	0x08009111
 80090e8:	2302      	movs	r3, #2
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ee:	e01a      	b.n	8009126 <UART_SetConfig+0x5a6>
 80090f0:	2304      	movs	r3, #4
 80090f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090f6:	e016      	b.n	8009126 <UART_SetConfig+0x5a6>
 80090f8:	2308      	movs	r3, #8
 80090fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090fe:	e012      	b.n	8009126 <UART_SetConfig+0x5a6>
 8009100:	2310      	movs	r3, #16
 8009102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009106:	e00e      	b.n	8009126 <UART_SetConfig+0x5a6>
 8009108:	2320      	movs	r3, #32
 800910a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800910e:	e00a      	b.n	8009126 <UART_SetConfig+0x5a6>
 8009110:	2340      	movs	r3, #64	@ 0x40
 8009112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009116:	e006      	b.n	8009126 <UART_SetConfig+0x5a6>
 8009118:	2380      	movs	r3, #128	@ 0x80
 800911a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800911e:	e002      	b.n	8009126 <UART_SetConfig+0x5a6>
 8009120:	2380      	movs	r3, #128	@ 0x80
 8009122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a3f      	ldr	r2, [pc, #252]	@ (8009228 <UART_SetConfig+0x6a8>)
 800912c:	4293      	cmp	r3, r2
 800912e:	f040 80f8 	bne.w	8009322 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009132:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009136:	2b20      	cmp	r3, #32
 8009138:	dc46      	bgt.n	80091c8 <UART_SetConfig+0x648>
 800913a:	2b02      	cmp	r3, #2
 800913c:	f2c0 8082 	blt.w	8009244 <UART_SetConfig+0x6c4>
 8009140:	3b02      	subs	r3, #2
 8009142:	2b1e      	cmp	r3, #30
 8009144:	d87e      	bhi.n	8009244 <UART_SetConfig+0x6c4>
 8009146:	a201      	add	r2, pc, #4	@ (adr r2, 800914c <UART_SetConfig+0x5cc>)
 8009148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800914c:	080091cf 	.word	0x080091cf
 8009150:	08009245 	.word	0x08009245
 8009154:	080091d7 	.word	0x080091d7
 8009158:	08009245 	.word	0x08009245
 800915c:	08009245 	.word	0x08009245
 8009160:	08009245 	.word	0x08009245
 8009164:	080091e7 	.word	0x080091e7
 8009168:	08009245 	.word	0x08009245
 800916c:	08009245 	.word	0x08009245
 8009170:	08009245 	.word	0x08009245
 8009174:	08009245 	.word	0x08009245
 8009178:	08009245 	.word	0x08009245
 800917c:	08009245 	.word	0x08009245
 8009180:	08009245 	.word	0x08009245
 8009184:	080091f7 	.word	0x080091f7
 8009188:	08009245 	.word	0x08009245
 800918c:	08009245 	.word	0x08009245
 8009190:	08009245 	.word	0x08009245
 8009194:	08009245 	.word	0x08009245
 8009198:	08009245 	.word	0x08009245
 800919c:	08009245 	.word	0x08009245
 80091a0:	08009245 	.word	0x08009245
 80091a4:	08009245 	.word	0x08009245
 80091a8:	08009245 	.word	0x08009245
 80091ac:	08009245 	.word	0x08009245
 80091b0:	08009245 	.word	0x08009245
 80091b4:	08009245 	.word	0x08009245
 80091b8:	08009245 	.word	0x08009245
 80091bc:	08009245 	.word	0x08009245
 80091c0:	08009245 	.word	0x08009245
 80091c4:	08009237 	.word	0x08009237
 80091c8:	2b40      	cmp	r3, #64	@ 0x40
 80091ca:	d037      	beq.n	800923c <UART_SetConfig+0x6bc>
 80091cc:	e03a      	b.n	8009244 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80091ce:	f7fe fbed 	bl	80079ac <HAL_RCCEx_GetD3PCLK1Freq>
 80091d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80091d4:	e03c      	b.n	8009250 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fe fbfc 	bl	80079d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80091e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091e4:	e034      	b.n	8009250 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091e6:	f107 0318 	add.w	r3, r7, #24
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7fe fd48 	bl	8007c80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091f4:	e02c      	b.n	8009250 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091f6:	4b09      	ldr	r3, [pc, #36]	@ (800921c <UART_SetConfig+0x69c>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 0320 	and.w	r3, r3, #32
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d016      	beq.n	8009230 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009202:	4b06      	ldr	r3, [pc, #24]	@ (800921c <UART_SetConfig+0x69c>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	08db      	lsrs	r3, r3, #3
 8009208:	f003 0303 	and.w	r3, r3, #3
 800920c:	4a07      	ldr	r2, [pc, #28]	@ (800922c <UART_SetConfig+0x6ac>)
 800920e:	fa22 f303 	lsr.w	r3, r2, r3
 8009212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009214:	e01c      	b.n	8009250 <UART_SetConfig+0x6d0>
 8009216:	bf00      	nop
 8009218:	40011400 	.word	0x40011400
 800921c:	58024400 	.word	0x58024400
 8009220:	40007800 	.word	0x40007800
 8009224:	40007c00 	.word	0x40007c00
 8009228:	58000c00 	.word	0x58000c00
 800922c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009230:	4b9d      	ldr	r3, [pc, #628]	@ (80094a8 <UART_SetConfig+0x928>)
 8009232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009234:	e00c      	b.n	8009250 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009236:	4b9d      	ldr	r3, [pc, #628]	@ (80094ac <UART_SetConfig+0x92c>)
 8009238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800923a:	e009      	b.n	8009250 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800923c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009240:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009242:	e005      	b.n	8009250 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009244:	2300      	movs	r3, #0
 8009246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800924e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009250:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009252:	2b00      	cmp	r3, #0
 8009254:	f000 81de 	beq.w	8009614 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800925c:	4a94      	ldr	r2, [pc, #592]	@ (80094b0 <UART_SetConfig+0x930>)
 800925e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009262:	461a      	mov	r2, r3
 8009264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009266:	fbb3 f3f2 	udiv	r3, r3, r2
 800926a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	685a      	ldr	r2, [r3, #4]
 8009270:	4613      	mov	r3, r2
 8009272:	005b      	lsls	r3, r3, #1
 8009274:	4413      	add	r3, r2
 8009276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009278:	429a      	cmp	r2, r3
 800927a:	d305      	bcc.n	8009288 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009284:	429a      	cmp	r2, r3
 8009286:	d903      	bls.n	8009290 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800928e:	e1c1      	b.n	8009614 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009292:	2200      	movs	r2, #0
 8009294:	60bb      	str	r3, [r7, #8]
 8009296:	60fa      	str	r2, [r7, #12]
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800929c:	4a84      	ldr	r2, [pc, #528]	@ (80094b0 <UART_SetConfig+0x930>)
 800929e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	2200      	movs	r2, #0
 80092a6:	603b      	str	r3, [r7, #0]
 80092a8:	607a      	str	r2, [r7, #4]
 80092aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80092b2:	f7f7 f811 	bl	80002d8 <__aeabi_uldivmod>
 80092b6:	4602      	mov	r2, r0
 80092b8:	460b      	mov	r3, r1
 80092ba:	4610      	mov	r0, r2
 80092bc:	4619      	mov	r1, r3
 80092be:	f04f 0200 	mov.w	r2, #0
 80092c2:	f04f 0300 	mov.w	r3, #0
 80092c6:	020b      	lsls	r3, r1, #8
 80092c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80092cc:	0202      	lsls	r2, r0, #8
 80092ce:	6979      	ldr	r1, [r7, #20]
 80092d0:	6849      	ldr	r1, [r1, #4]
 80092d2:	0849      	lsrs	r1, r1, #1
 80092d4:	2000      	movs	r0, #0
 80092d6:	460c      	mov	r4, r1
 80092d8:	4605      	mov	r5, r0
 80092da:	eb12 0804 	adds.w	r8, r2, r4
 80092de:	eb43 0905 	adc.w	r9, r3, r5
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	469a      	mov	sl, r3
 80092ea:	4693      	mov	fp, r2
 80092ec:	4652      	mov	r2, sl
 80092ee:	465b      	mov	r3, fp
 80092f0:	4640      	mov	r0, r8
 80092f2:	4649      	mov	r1, r9
 80092f4:	f7f6 fff0 	bl	80002d8 <__aeabi_uldivmod>
 80092f8:	4602      	mov	r2, r0
 80092fa:	460b      	mov	r3, r1
 80092fc:	4613      	mov	r3, r2
 80092fe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009302:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009306:	d308      	bcc.n	800931a <UART_SetConfig+0x79a>
 8009308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800930a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800930e:	d204      	bcs.n	800931a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009316:	60da      	str	r2, [r3, #12]
 8009318:	e17c      	b.n	8009614 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009320:	e178      	b.n	8009614 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	69db      	ldr	r3, [r3, #28]
 8009326:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800932a:	f040 80c5 	bne.w	80094b8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800932e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009332:	2b20      	cmp	r3, #32
 8009334:	dc48      	bgt.n	80093c8 <UART_SetConfig+0x848>
 8009336:	2b00      	cmp	r3, #0
 8009338:	db7b      	blt.n	8009432 <UART_SetConfig+0x8b2>
 800933a:	2b20      	cmp	r3, #32
 800933c:	d879      	bhi.n	8009432 <UART_SetConfig+0x8b2>
 800933e:	a201      	add	r2, pc, #4	@ (adr r2, 8009344 <UART_SetConfig+0x7c4>)
 8009340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009344:	080093cf 	.word	0x080093cf
 8009348:	080093d7 	.word	0x080093d7
 800934c:	08009433 	.word	0x08009433
 8009350:	08009433 	.word	0x08009433
 8009354:	080093df 	.word	0x080093df
 8009358:	08009433 	.word	0x08009433
 800935c:	08009433 	.word	0x08009433
 8009360:	08009433 	.word	0x08009433
 8009364:	080093ef 	.word	0x080093ef
 8009368:	08009433 	.word	0x08009433
 800936c:	08009433 	.word	0x08009433
 8009370:	08009433 	.word	0x08009433
 8009374:	08009433 	.word	0x08009433
 8009378:	08009433 	.word	0x08009433
 800937c:	08009433 	.word	0x08009433
 8009380:	08009433 	.word	0x08009433
 8009384:	080093ff 	.word	0x080093ff
 8009388:	08009433 	.word	0x08009433
 800938c:	08009433 	.word	0x08009433
 8009390:	08009433 	.word	0x08009433
 8009394:	08009433 	.word	0x08009433
 8009398:	08009433 	.word	0x08009433
 800939c:	08009433 	.word	0x08009433
 80093a0:	08009433 	.word	0x08009433
 80093a4:	08009433 	.word	0x08009433
 80093a8:	08009433 	.word	0x08009433
 80093ac:	08009433 	.word	0x08009433
 80093b0:	08009433 	.word	0x08009433
 80093b4:	08009433 	.word	0x08009433
 80093b8:	08009433 	.word	0x08009433
 80093bc:	08009433 	.word	0x08009433
 80093c0:	08009433 	.word	0x08009433
 80093c4:	08009425 	.word	0x08009425
 80093c8:	2b40      	cmp	r3, #64	@ 0x40
 80093ca:	d02e      	beq.n	800942a <UART_SetConfig+0x8aa>
 80093cc:	e031      	b.n	8009432 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093ce:	f7fc fb37 	bl	8005a40 <HAL_RCC_GetPCLK1Freq>
 80093d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093d4:	e033      	b.n	800943e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093d6:	f7fc fb49 	bl	8005a6c <HAL_RCC_GetPCLK2Freq>
 80093da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093dc:	e02f      	b.n	800943e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fe faf8 	bl	80079d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80093e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093ec:	e027      	b.n	800943e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093ee:	f107 0318 	add.w	r3, r7, #24
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fe fc44 	bl	8007c80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093fc:	e01f      	b.n	800943e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093fe:	4b2d      	ldr	r3, [pc, #180]	@ (80094b4 <UART_SetConfig+0x934>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f003 0320 	and.w	r3, r3, #32
 8009406:	2b00      	cmp	r3, #0
 8009408:	d009      	beq.n	800941e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800940a:	4b2a      	ldr	r3, [pc, #168]	@ (80094b4 <UART_SetConfig+0x934>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	08db      	lsrs	r3, r3, #3
 8009410:	f003 0303 	and.w	r3, r3, #3
 8009414:	4a24      	ldr	r2, [pc, #144]	@ (80094a8 <UART_SetConfig+0x928>)
 8009416:	fa22 f303 	lsr.w	r3, r2, r3
 800941a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800941c:	e00f      	b.n	800943e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800941e:	4b22      	ldr	r3, [pc, #136]	@ (80094a8 <UART_SetConfig+0x928>)
 8009420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009422:	e00c      	b.n	800943e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009424:	4b21      	ldr	r3, [pc, #132]	@ (80094ac <UART_SetConfig+0x92c>)
 8009426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009428:	e009      	b.n	800943e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800942a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800942e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009430:	e005      	b.n	800943e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009432:	2300      	movs	r3, #0
 8009434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800943c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800943e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009440:	2b00      	cmp	r3, #0
 8009442:	f000 80e7 	beq.w	8009614 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800944a:	4a19      	ldr	r2, [pc, #100]	@ (80094b0 <UART_SetConfig+0x930>)
 800944c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009450:	461a      	mov	r2, r3
 8009452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009454:	fbb3 f3f2 	udiv	r3, r3, r2
 8009458:	005a      	lsls	r2, r3, #1
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	085b      	lsrs	r3, r3, #1
 8009460:	441a      	add	r2, r3
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	fbb2 f3f3 	udiv	r3, r2, r3
 800946a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800946c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800946e:	2b0f      	cmp	r3, #15
 8009470:	d916      	bls.n	80094a0 <UART_SetConfig+0x920>
 8009472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009478:	d212      	bcs.n	80094a0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800947a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800947c:	b29b      	uxth	r3, r3
 800947e:	f023 030f 	bic.w	r3, r3, #15
 8009482:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009486:	085b      	lsrs	r3, r3, #1
 8009488:	b29b      	uxth	r3, r3
 800948a:	f003 0307 	and.w	r3, r3, #7
 800948e:	b29a      	uxth	r2, r3
 8009490:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009492:	4313      	orrs	r3, r2
 8009494:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800949c:	60da      	str	r2, [r3, #12]
 800949e:	e0b9      	b.n	8009614 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80094a6:	e0b5      	b.n	8009614 <UART_SetConfig+0xa94>
 80094a8:	03d09000 	.word	0x03d09000
 80094ac:	003d0900 	.word	0x003d0900
 80094b0:	08009b24 	.word	0x08009b24
 80094b4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80094b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80094bc:	2b20      	cmp	r3, #32
 80094be:	dc49      	bgt.n	8009554 <UART_SetConfig+0x9d4>
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	db7c      	blt.n	80095be <UART_SetConfig+0xa3e>
 80094c4:	2b20      	cmp	r3, #32
 80094c6:	d87a      	bhi.n	80095be <UART_SetConfig+0xa3e>
 80094c8:	a201      	add	r2, pc, #4	@ (adr r2, 80094d0 <UART_SetConfig+0x950>)
 80094ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ce:	bf00      	nop
 80094d0:	0800955b 	.word	0x0800955b
 80094d4:	08009563 	.word	0x08009563
 80094d8:	080095bf 	.word	0x080095bf
 80094dc:	080095bf 	.word	0x080095bf
 80094e0:	0800956b 	.word	0x0800956b
 80094e4:	080095bf 	.word	0x080095bf
 80094e8:	080095bf 	.word	0x080095bf
 80094ec:	080095bf 	.word	0x080095bf
 80094f0:	0800957b 	.word	0x0800957b
 80094f4:	080095bf 	.word	0x080095bf
 80094f8:	080095bf 	.word	0x080095bf
 80094fc:	080095bf 	.word	0x080095bf
 8009500:	080095bf 	.word	0x080095bf
 8009504:	080095bf 	.word	0x080095bf
 8009508:	080095bf 	.word	0x080095bf
 800950c:	080095bf 	.word	0x080095bf
 8009510:	0800958b 	.word	0x0800958b
 8009514:	080095bf 	.word	0x080095bf
 8009518:	080095bf 	.word	0x080095bf
 800951c:	080095bf 	.word	0x080095bf
 8009520:	080095bf 	.word	0x080095bf
 8009524:	080095bf 	.word	0x080095bf
 8009528:	080095bf 	.word	0x080095bf
 800952c:	080095bf 	.word	0x080095bf
 8009530:	080095bf 	.word	0x080095bf
 8009534:	080095bf 	.word	0x080095bf
 8009538:	080095bf 	.word	0x080095bf
 800953c:	080095bf 	.word	0x080095bf
 8009540:	080095bf 	.word	0x080095bf
 8009544:	080095bf 	.word	0x080095bf
 8009548:	080095bf 	.word	0x080095bf
 800954c:	080095bf 	.word	0x080095bf
 8009550:	080095b1 	.word	0x080095b1
 8009554:	2b40      	cmp	r3, #64	@ 0x40
 8009556:	d02e      	beq.n	80095b6 <UART_SetConfig+0xa36>
 8009558:	e031      	b.n	80095be <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800955a:	f7fc fa71 	bl	8005a40 <HAL_RCC_GetPCLK1Freq>
 800955e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009560:	e033      	b.n	80095ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009562:	f7fc fa83 	bl	8005a6c <HAL_RCC_GetPCLK2Freq>
 8009566:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009568:	e02f      	b.n	80095ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800956a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800956e:	4618      	mov	r0, r3
 8009570:	f7fe fa32 	bl	80079d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009578:	e027      	b.n	80095ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800957a:	f107 0318 	add.w	r3, r7, #24
 800957e:	4618      	mov	r0, r3
 8009580:	f7fe fb7e 	bl	8007c80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009588:	e01f      	b.n	80095ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800958a:	4b2d      	ldr	r3, [pc, #180]	@ (8009640 <UART_SetConfig+0xac0>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f003 0320 	and.w	r3, r3, #32
 8009592:	2b00      	cmp	r3, #0
 8009594:	d009      	beq.n	80095aa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009596:	4b2a      	ldr	r3, [pc, #168]	@ (8009640 <UART_SetConfig+0xac0>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	08db      	lsrs	r3, r3, #3
 800959c:	f003 0303 	and.w	r3, r3, #3
 80095a0:	4a28      	ldr	r2, [pc, #160]	@ (8009644 <UART_SetConfig+0xac4>)
 80095a2:	fa22 f303 	lsr.w	r3, r2, r3
 80095a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80095a8:	e00f      	b.n	80095ca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80095aa:	4b26      	ldr	r3, [pc, #152]	@ (8009644 <UART_SetConfig+0xac4>)
 80095ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095ae:	e00c      	b.n	80095ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80095b0:	4b25      	ldr	r3, [pc, #148]	@ (8009648 <UART_SetConfig+0xac8>)
 80095b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095b4:	e009      	b.n	80095ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095bc:	e005      	b.n	80095ca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80095be:	2300      	movs	r3, #0
 80095c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80095c8:	bf00      	nop
    }

    if (pclk != 0U)
 80095ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d021      	beq.n	8009614 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095d4:	4a1d      	ldr	r2, [pc, #116]	@ (800964c <UART_SetConfig+0xacc>)
 80095d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095da:	461a      	mov	r2, r3
 80095dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095de:	fbb3 f2f2 	udiv	r2, r3, r2
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	085b      	lsrs	r3, r3, #1
 80095e8:	441a      	add	r2, r3
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80095f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f6:	2b0f      	cmp	r3, #15
 80095f8:	d909      	bls.n	800960e <UART_SetConfig+0xa8e>
 80095fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009600:	d205      	bcs.n	800960e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009604:	b29a      	uxth	r2, r3
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	60da      	str	r2, [r3, #12]
 800960c:	e002      	b.n	8009614 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	2201      	movs	r2, #1
 8009618:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	2201      	movs	r2, #1
 8009620:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	2200      	movs	r2, #0
 8009628:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	2200      	movs	r2, #0
 800962e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009630:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009634:	4618      	mov	r0, r3
 8009636:	3748      	adds	r7, #72	@ 0x48
 8009638:	46bd      	mov	sp, r7
 800963a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800963e:	bf00      	nop
 8009640:	58024400 	.word	0x58024400
 8009644:	03d09000 	.word	0x03d09000
 8009648:	003d0900 	.word	0x003d0900
 800964c:	08009b24 	.word	0x08009b24

08009650 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800965c:	f003 0308 	and.w	r3, r3, #8
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00a      	beq.n	800967a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	430a      	orrs	r2, r1
 8009678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800967e:	f003 0301 	and.w	r3, r3, #1
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00a      	beq.n	800969c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	430a      	orrs	r2, r1
 800969a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096a0:	f003 0302 	and.w	r3, r3, #2
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d00a      	beq.n	80096be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	430a      	orrs	r2, r1
 80096bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096c2:	f003 0304 	and.w	r3, r3, #4
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00a      	beq.n	80096e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	430a      	orrs	r2, r1
 80096de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096e4:	f003 0310 	and.w	r3, r3, #16
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00a      	beq.n	8009702 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	430a      	orrs	r2, r1
 8009700:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009706:	f003 0320 	and.w	r3, r3, #32
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00a      	beq.n	8009724 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	430a      	orrs	r2, r1
 8009722:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800972c:	2b00      	cmp	r3, #0
 800972e:	d01a      	beq.n	8009766 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	430a      	orrs	r2, r1
 8009744:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800974a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800974e:	d10a      	bne.n	8009766 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	430a      	orrs	r2, r1
 8009764:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800976a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00a      	beq.n	8009788 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	430a      	orrs	r2, r1
 8009786:	605a      	str	r2, [r3, #4]
  }
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b098      	sub	sp, #96	@ 0x60
 8009798:	af02      	add	r7, sp, #8
 800979a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80097a4:	f7f7 fd9c 	bl	80012e0 <HAL_GetTick>
 80097a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 0308 	and.w	r3, r3, #8
 80097b4:	2b08      	cmp	r3, #8
 80097b6:	d12f      	bne.n	8009818 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097c0:	2200      	movs	r2, #0
 80097c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 f88e 	bl	80098e8 <UART_WaitOnFlagUntilTimeout>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d022      	beq.n	8009818 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097da:	e853 3f00 	ldrex	r3, [r3]
 80097de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80097e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	461a      	mov	r2, r3
 80097ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80097f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80097f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80097f8:	e841 2300 	strex	r3, r2, [r1]
 80097fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80097fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009800:	2b00      	cmp	r3, #0
 8009802:	d1e6      	bne.n	80097d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2220      	movs	r2, #32
 8009808:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009814:	2303      	movs	r3, #3
 8009816:	e063      	b.n	80098e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f003 0304 	and.w	r3, r3, #4
 8009822:	2b04      	cmp	r3, #4
 8009824:	d149      	bne.n	80098ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009826:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800982e:	2200      	movs	r2, #0
 8009830:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 f857 	bl	80098e8 <UART_WaitOnFlagUntilTimeout>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d03c      	beq.n	80098ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009848:	e853 3f00 	ldrex	r3, [r3]
 800984c:	623b      	str	r3, [r7, #32]
   return(result);
 800984e:	6a3b      	ldr	r3, [r7, #32]
 8009850:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009854:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	461a      	mov	r2, r3
 800985c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800985e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009860:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009862:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009864:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009866:	e841 2300 	strex	r3, r2, [r1]
 800986a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800986c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1e6      	bne.n	8009840 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	3308      	adds	r3, #8
 8009878:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	e853 3f00 	ldrex	r3, [r3]
 8009880:	60fb      	str	r3, [r7, #12]
   return(result);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f023 0301 	bic.w	r3, r3, #1
 8009888:	64bb      	str	r3, [r7, #72]	@ 0x48
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	3308      	adds	r3, #8
 8009890:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009892:	61fa      	str	r2, [r7, #28]
 8009894:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009896:	69b9      	ldr	r1, [r7, #24]
 8009898:	69fa      	ldr	r2, [r7, #28]
 800989a:	e841 2300 	strex	r3, r2, [r1]
 800989e:	617b      	str	r3, [r7, #20]
   return(result);
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1e5      	bne.n	8009872 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2220      	movs	r2, #32
 80098aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098b6:	2303      	movs	r3, #3
 80098b8:	e012      	b.n	80098e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2220      	movs	r2, #32
 80098be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2220      	movs	r2, #32
 80098c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3758      	adds	r7, #88	@ 0x58
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	603b      	str	r3, [r7, #0]
 80098f4:	4613      	mov	r3, r2
 80098f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098f8:	e04f      	b.n	800999a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009900:	d04b      	beq.n	800999a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009902:	f7f7 fced 	bl	80012e0 <HAL_GetTick>
 8009906:	4602      	mov	r2, r0
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	1ad3      	subs	r3, r2, r3
 800990c:	69ba      	ldr	r2, [r7, #24]
 800990e:	429a      	cmp	r2, r3
 8009910:	d302      	bcc.n	8009918 <UART_WaitOnFlagUntilTimeout+0x30>
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d101      	bne.n	800991c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009918:	2303      	movs	r3, #3
 800991a:	e04e      	b.n	80099ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f003 0304 	and.w	r3, r3, #4
 8009926:	2b00      	cmp	r3, #0
 8009928:	d037      	beq.n	800999a <UART_WaitOnFlagUntilTimeout+0xb2>
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	2b80      	cmp	r3, #128	@ 0x80
 800992e:	d034      	beq.n	800999a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	2b40      	cmp	r3, #64	@ 0x40
 8009934:	d031      	beq.n	800999a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	69db      	ldr	r3, [r3, #28]
 800993c:	f003 0308 	and.w	r3, r3, #8
 8009940:	2b08      	cmp	r3, #8
 8009942:	d110      	bne.n	8009966 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2208      	movs	r2, #8
 800994a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f000 f839 	bl	80099c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2208      	movs	r2, #8
 8009956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2200      	movs	r2, #0
 800995e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	e029      	b.n	80099ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	69db      	ldr	r3, [r3, #28]
 800996c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009970:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009974:	d111      	bne.n	800999a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800997e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f000 f81f 	bl	80099c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2220      	movs	r2, #32
 800998a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2200      	movs	r2, #0
 8009992:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009996:	2303      	movs	r3, #3
 8009998:	e00f      	b.n	80099ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	69da      	ldr	r2, [r3, #28]
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	4013      	ands	r3, r2
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	bf0c      	ite	eq
 80099aa:	2301      	moveq	r3, #1
 80099ac:	2300      	movne	r3, #0
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	461a      	mov	r2, r3
 80099b2:	79fb      	ldrb	r3, [r7, #7]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d0a0      	beq.n	80098fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
	...

080099c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b095      	sub	sp, #84	@ 0x54
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099d4:	e853 3f00 	ldrex	r3, [r3]
 80099d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	461a      	mov	r2, r3
 80099e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80099ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80099f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80099f2:	e841 2300 	strex	r3, r2, [r1]
 80099f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80099f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d1e6      	bne.n	80099cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	3308      	adds	r3, #8
 8009a04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a06:	6a3b      	ldr	r3, [r7, #32]
 8009a08:	e853 3f00 	ldrex	r3, [r3]
 8009a0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a0e:	69fa      	ldr	r2, [r7, #28]
 8009a10:	4b1e      	ldr	r3, [pc, #120]	@ (8009a8c <UART_EndRxTransfer+0xc8>)
 8009a12:	4013      	ands	r3, r2
 8009a14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	3308      	adds	r3, #8
 8009a1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a26:	e841 2300 	strex	r3, r2, [r1]
 8009a2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d1e5      	bne.n	80099fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d118      	bne.n	8009a6c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	e853 3f00 	ldrex	r3, [r3]
 8009a46:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	f023 0310 	bic.w	r3, r3, #16
 8009a4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	461a      	mov	r2, r3
 8009a56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a58:	61bb      	str	r3, [r7, #24]
 8009a5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5c:	6979      	ldr	r1, [r7, #20]
 8009a5e:	69ba      	ldr	r2, [r7, #24]
 8009a60:	e841 2300 	strex	r3, r2, [r1]
 8009a64:	613b      	str	r3, [r7, #16]
   return(result);
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1e6      	bne.n	8009a3a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2220      	movs	r2, #32
 8009a70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009a80:	bf00      	nop
 8009a82:	3754      	adds	r7, #84	@ 0x54
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	effffffe 	.word	0xeffffffe

08009a90 <memset>:
 8009a90:	4402      	add	r2, r0
 8009a92:	4603      	mov	r3, r0
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d100      	bne.n	8009a9a <memset+0xa>
 8009a98:	4770      	bx	lr
 8009a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a9e:	e7f9      	b.n	8009a94 <memset+0x4>

08009aa0 <__libc_init_array>:
 8009aa0:	b570      	push	{r4, r5, r6, lr}
 8009aa2:	4d0d      	ldr	r5, [pc, #52]	@ (8009ad8 <__libc_init_array+0x38>)
 8009aa4:	4c0d      	ldr	r4, [pc, #52]	@ (8009adc <__libc_init_array+0x3c>)
 8009aa6:	1b64      	subs	r4, r4, r5
 8009aa8:	10a4      	asrs	r4, r4, #2
 8009aaa:	2600      	movs	r6, #0
 8009aac:	42a6      	cmp	r6, r4
 8009aae:	d109      	bne.n	8009ac4 <__libc_init_array+0x24>
 8009ab0:	4d0b      	ldr	r5, [pc, #44]	@ (8009ae0 <__libc_init_array+0x40>)
 8009ab2:	4c0c      	ldr	r4, [pc, #48]	@ (8009ae4 <__libc_init_array+0x44>)
 8009ab4:	f000 f818 	bl	8009ae8 <_init>
 8009ab8:	1b64      	subs	r4, r4, r5
 8009aba:	10a4      	asrs	r4, r4, #2
 8009abc:	2600      	movs	r6, #0
 8009abe:	42a6      	cmp	r6, r4
 8009ac0:	d105      	bne.n	8009ace <__libc_init_array+0x2e>
 8009ac2:	bd70      	pop	{r4, r5, r6, pc}
 8009ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ac8:	4798      	blx	r3
 8009aca:	3601      	adds	r6, #1
 8009acc:	e7ee      	b.n	8009aac <__libc_init_array+0xc>
 8009ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ad2:	4798      	blx	r3
 8009ad4:	3601      	adds	r6, #1
 8009ad6:	e7f2      	b.n	8009abe <__libc_init_array+0x1e>
 8009ad8:	08009b44 	.word	0x08009b44
 8009adc:	08009b44 	.word	0x08009b44
 8009ae0:	08009b44 	.word	0x08009b44
 8009ae4:	08009b48 	.word	0x08009b48

08009ae8 <_init>:
 8009ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aea:	bf00      	nop
 8009aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aee:	bc08      	pop	{r3}
 8009af0:	469e      	mov	lr, r3
 8009af2:	4770      	bx	lr

08009af4 <_fini>:
 8009af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af6:	bf00      	nop
 8009af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009afa:	bc08      	pop	{r3}
 8009afc:	469e      	mov	lr, r3
 8009afe:	4770      	bx	lr
