
adc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8b8  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800ab50  0800ab50  0000bb50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ab8c  0800ab8c  0000bb8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ab94  0800ab94  0000bb94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ab98  0800ab98  0000bb98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000002c  24000000  0800ab9c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000200  2400002c  0800abc8  0000c02c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400022c  0800abc8  0000c22c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c02c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001aea0  00000000  00000000  0000c05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002dbd  00000000  00000000  00026efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014e0  00000000  00000000  00029cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001052  00000000  00000000  0002b198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000397fb  00000000  00000000  0002c1ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b9d4  00000000  00000000  000659e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178f0a  00000000  00000000  000813b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001fa2c3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005a98  00000000  00000000  001fa308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  001ffda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400002c 	.word	0x2400002c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ab38 	.word	0x0800ab38

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000030 	.word	0x24000030
 80002d4:	0800ab38 	.word	0x0800ab38

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <HAL_ADC_ConvHalfCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]

	for(uint8_t i = 0; i < CONVERSION_COUNT; ++i) {
 80005d0:	2300      	movs	r3, #0
 80005d2:	73fb      	strb	r3, [r7, #15]
 80005d4:	e015      	b.n	8000602 <HAL_ADC_ConvHalfCpltCallback+0x3a>
		potVoltage[i] = ADC_ROW_TO_VOLTAGE * adc_data[i];
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	4a0f      	ldr	r2, [pc, #60]	@ (8000618 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 80005da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005de:	b29b      	uxth	r3, r3
 80005e0:	ee07 3a90 	vmov	s15, r3
 80005e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800061c <HAL_ADC_ConvHalfCpltCallback+0x54>
 80005ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000620 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	4413      	add	r3, r2
 80005f8:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i < CONVERSION_COUNT; ++i) {
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	3301      	adds	r3, #1
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d9e6      	bls.n	80005d6 <HAL_ADC_ConvHalfCpltCallback+0xe>
	}

}
 8000608:	bf00      	nop
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	24000180 	.word	0x24000180
 800061c:	38533406 	.word	0x38533406
 8000620:	24000184 	.word	0x24000184

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000628:	f000 fa00 	bl	8000a2c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062c:	f000 fe14 	bl	8001258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000630:	f000 f848 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f000 f9c2 	bl	80009bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000638:	f000 f9a0 	bl	800097c <MX_DMA_Init>
  MX_ADC1_Init();
 800063c:	f000 f8be 	bl	80007bc <MX_ADC1_Init>
  MX_TIM8_Init();
 8000640:	f000 f94a 	bl	80008d8 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1,ADC_CALIB_OFFSET,ADC_SINGLE_ENDED);
 8000644:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000648:	2100      	movs	r1, #0
 800064a:	481a      	ldr	r0, [pc, #104]	@ (80006b4 <main+0x90>)
 800064c:	f002 fbba 	bl	8002dc4 <HAL_ADCEx_Calibration_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&adc_data, CONVERSION_COUNT);
 8000650:	2202      	movs	r2, #2
 8000652:	4919      	ldr	r1, [pc, #100]	@ (80006b8 <main+0x94>)
 8000654:	4817      	ldr	r0, [pc, #92]	@ (80006b4 <main+0x90>)
 8000656:	f001 fac5 	bl	8001be4 <HAL_ADC_Start_DMA>
  // it will fill data at 2.5 million

  HAL_TIM_Base_Start(&htim8);
 800065a:	4818      	ldr	r0, [pc, #96]	@ (80006bc <main+0x98>)
 800065c:	f008 ff2a 	bl	80094b4 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000660:	2000      	movs	r0, #0
 8000662:	f000 fc31 	bl	8000ec8 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000666:	2001      	movs	r0, #1
 8000668:	f000 fc2e 	bl	8000ec8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800066c:	2002      	movs	r0, #2
 800066e:	f000 fc2b 	bl	8000ec8 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000672:	2101      	movs	r1, #1
 8000674:	2000      	movs	r0, #0
 8000676:	f000 fc9d 	bl	8000fb4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <main+0x9c>)
 800067c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000680:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000682:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <main+0x9c>)
 8000684:	2200      	movs	r2, #0
 8000686:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000688:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <main+0x9c>)
 800068a:	2200      	movs	r2, #0
 800068c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800068e:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <main+0x9c>)
 8000690:	2200      	movs	r2, #0
 8000692:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000694:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <main+0x9c>)
 8000696:	2200      	movs	r2, #0
 8000698:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800069a:	4909      	ldr	r1, [pc, #36]	@ (80006c0 <main+0x9c>)
 800069c:	2000      	movs	r0, #0
 800069e:	f000 fd19 	bl	80010d4 <BSP_COM_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <main+0x88>
  {
    Error_Handler();
 80006a8:	f000 f9ec 	bl	8000a84 <Error_Handler>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 HAL_Delay(100);
 80006ac:	2064      	movs	r0, #100	@ 0x64
 80006ae:	f000 fe65 	bl	800137c <HAL_Delay>
 80006b2:	e7fb      	b.n	80006ac <main+0x88>
 80006b4:	24000058 	.word	0x24000058
 80006b8:	24000180 	.word	0x24000180
 80006bc:	24000134 	.word	0x24000134
 80006c0:	24000048 	.word	0x24000048

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b09c      	sub	sp, #112	@ 0x70
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ce:	224c      	movs	r2, #76	@ 0x4c
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f00a fa04 	bl	800aae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2220      	movs	r2, #32
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f00a f9fe 	bl	800aae0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006e4:	2002      	movs	r0, #2
 80006e6:	f005 f96f 	bl	80059c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	4b31      	ldr	r3, [pc, #196]	@ (80007b4 <SystemClock_Config+0xf0>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	4a30      	ldr	r2, [pc, #192]	@ (80007b4 <SystemClock_Config+0xf0>)
 80006f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006f8:	6193      	str	r3, [r2, #24]
 80006fa:	4b2e      	ldr	r3, [pc, #184]	@ (80007b4 <SystemClock_Config+0xf0>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	4b2c      	ldr	r3, [pc, #176]	@ (80007b8 <SystemClock_Config+0xf4>)
 8000706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000708:	4a2b      	ldr	r2, [pc, #172]	@ (80007b8 <SystemClock_Config+0xf4>)
 800070a:	f043 0301 	orr.w	r3, r3, #1
 800070e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000710:	4b29      	ldr	r3, [pc, #164]	@ (80007b8 <SystemClock_Config+0xf4>)
 8000712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000714:	f003 0301 	and.w	r3, r3, #1
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800071c:	bf00      	nop
 800071e:	4b25      	ldr	r3, [pc, #148]	@ (80007b4 <SystemClock_Config+0xf0>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800072a:	d1f8      	bne.n	800071e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800072c:	2302      	movs	r3, #2
 800072e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000730:	2301      	movs	r3, #1
 8000732:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000734:	2340      	movs	r3, #64	@ 0x40
 8000736:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000738:	2302      	movs	r3, #2
 800073a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800073c:	2300      	movs	r3, #0
 800073e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000740:	2304      	movs	r3, #4
 8000742:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000744:	233c      	movs	r3, #60	@ 0x3c
 8000746:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000748:	2302      	movs	r3, #2
 800074a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800074c:	2302      	movs	r3, #2
 800074e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000750:	2302      	movs	r3, #2
 8000752:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000754:	230c      	movs	r3, #12
 8000756:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000758:	2300      	movs	r3, #0
 800075a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000764:	4618      	mov	r0, r3
 8000766:	f005 f969 	bl	8005a3c <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000770:	f000 f988 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	233f      	movs	r3, #63	@ 0x3f
 8000776:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000778:	2303      	movs	r3, #3
 800077a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000780:	2308      	movs	r3, #8
 8000782:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000784:	2340      	movs	r3, #64	@ 0x40
 8000786:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000788:	2340      	movs	r3, #64	@ 0x40
 800078a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800078c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000790:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000792:	2340      	movs	r3, #64	@ 0x40
 8000794:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2104      	movs	r1, #4
 800079a:	4618      	mov	r0, r3
 800079c:	f005 fda8 	bl	80062f0 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80007a6:	f000 f96d 	bl	8000a84 <Error_Handler>
  }
}
 80007aa:	bf00      	nop
 80007ac:	3770      	adds	r7, #112	@ 0x70
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	58024800 	.word	0x58024800
 80007b8:	58000400 	.word	0x58000400

080007bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	@ 0x28
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ce:	463b      	mov	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
 80007dc:	615a      	str	r2, [r3, #20]
 80007de:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007e0:	4b39      	ldr	r3, [pc, #228]	@ (80008c8 <MX_ADC1_Init+0x10c>)
 80007e2:	4a3a      	ldr	r2, [pc, #232]	@ (80008cc <MX_ADC1_Init+0x110>)
 80007e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80007e6:	4b38      	ldr	r3, [pc, #224]	@ (80008c8 <MX_ADC1_Init+0x10c>)
 80007e8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007ee:	4b36      	ldr	r3, [pc, #216]	@ (80008c8 <MX_ADC1_Init+0x10c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007f4:	4b34      	ldr	r3, [pc, #208]	@ (80008c8 <MX_ADC1_Init+0x10c>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007fa:	4b33      	ldr	r3, [pc, #204]	@ (80008c8 <MX_ADC1_Init+0x10c>)
 80007fc:	2208      	movs	r2, #8
 80007fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000800:	4b31      	ldr	r3, [pc, #196]	@ (80008c8 <MX_ADC1_Init+0x10c>)
 8000802:	2200      	movs	r2, #0
 8000804:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000806:	4b30      	ldr	r3, [pc, #192]	@ (80008c8 <MX_ADC1_Init+0x10c>)
 8000808:	2200      	movs	r2, #0
 800080a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 800080c:	4b2e      	ldr	r3, [pc, #184]	@ (80008c8 <MX_ADC1_Init+0x10c>)
 800080e:	2202      	movs	r2, #2
 8000810:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000812:	4b2d      	ldr	r3, [pc, #180]	@ (80008c8 <MX_ADC1_Init+0x10c>)
 8000814:	2200      	movs	r2, #0
 8000816:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO2;
 8000818:	4b2b      	ldr	r3, [pc, #172]	@ (80008c8 <MX_ADC1_Init+0x10c>)
 800081a:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800081e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000820:	4b29      	ldr	r3, [pc, #164]	@ (80008c8 <MX_ADC1_Init+0x10c>)
 8000822:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000826:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000828:	4b27      	ldr	r3, [pc, #156]	@ (80008c8 <MX_ADC1_Init+0x10c>)
 800082a:	2203      	movs	r2, #3
 800082c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800082e:	4b26      	ldr	r3, [pc, #152]	@ (80008c8 <MX_ADC1_Init+0x10c>)
 8000830:	2200      	movs	r2, #0
 8000832:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000834:	4b24      	ldr	r3, [pc, #144]	@ (80008c8 <MX_ADC1_Init+0x10c>)
 8000836:	2200      	movs	r2, #0
 8000838:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800083a:	4b23      	ldr	r3, [pc, #140]	@ (80008c8 <MX_ADC1_Init+0x10c>)
 800083c:	2200      	movs	r2, #0
 800083e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000842:	4b21      	ldr	r3, [pc, #132]	@ (80008c8 <MX_ADC1_Init+0x10c>)
 8000844:	2201      	movs	r2, #1
 8000846:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000848:	481f      	ldr	r0, [pc, #124]	@ (80008c8 <MX_ADC1_Init+0x10c>)
 800084a:	f001 f829 	bl	80018a0 <HAL_ADC_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000854:	f000 f916 	bl	8000a84 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	4819      	ldr	r0, [pc, #100]	@ (80008c8 <MX_ADC1_Init+0x10c>)
 8000864:	f002 fb44 	bl	8002ef0 <HAL_ADCEx_MultiModeConfigChannel>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800086e:	f000 f909 	bl	8000a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000872:	4b17      	ldr	r3, [pc, #92]	@ (80008d0 <MX_ADC1_Init+0x114>)
 8000874:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000876:	2306      	movs	r3, #6
 8000878:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800087e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000882:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000884:	2304      	movs	r3, #4
 8000886:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	4619      	mov	r1, r3
 8000894:	480c      	ldr	r0, [pc, #48]	@ (80008c8 <MX_ADC1_Init+0x10c>)
 8000896:	f001 fcc1 	bl	800221c <HAL_ADC_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80008a0:	f000 f8f0 	bl	8000a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80008a4:	4b0b      	ldr	r3, [pc, #44]	@ (80008d4 <MX_ADC1_Init+0x118>)
 80008a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008a8:	230c      	movs	r3, #12
 80008aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ac:	463b      	mov	r3, r7
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <MX_ADC1_Init+0x10c>)
 80008b2:	f001 fcb3 	bl	800221c <HAL_ADC_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80008bc:	f000 f8e2 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	@ 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	24000058 	.word	0x24000058
 80008cc:	40022000 	.word	0x40022000
 80008d0:	43210000 	.word	0x43210000
 80008d4:	47520000 	.word	0x47520000

080008d8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	f107 0310 	add.w	r3, r7, #16
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80008f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000974 <MX_TIM8_Init+0x9c>)
 80008f8:	4a1f      	ldr	r2, [pc, #124]	@ (8000978 <MX_TIM8_Init+0xa0>)
 80008fa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 6 - 1;
 80008fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000974 <MX_TIM8_Init+0x9c>)
 80008fe:	2205      	movs	r2, #5
 8000900:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000902:	4b1c      	ldr	r3, [pc, #112]	@ (8000974 <MX_TIM8_Init+0x9c>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16 - 1;
 8000908:	4b1a      	ldr	r3, [pc, #104]	@ (8000974 <MX_TIM8_Init+0x9c>)
 800090a:	220f      	movs	r2, #15
 800090c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090e:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <MX_TIM8_Init+0x9c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000914:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <MX_TIM8_Init+0x9c>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091a:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <MX_TIM8_Init+0x9c>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000920:	4814      	ldr	r0, [pc, #80]	@ (8000974 <MX_TIM8_Init+0x9c>)
 8000922:	f008 fd6f 	bl	8009404 <HAL_TIM_Base_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 800092c:	f000 f8aa 	bl	8000a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000930:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000934:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000936:	f107 0310 	add.w	r3, r7, #16
 800093a:	4619      	mov	r1, r3
 800093c:	480d      	ldr	r0, [pc, #52]	@ (8000974 <MX_TIM8_Init+0x9c>)
 800093e:	f008 fe29 	bl	8009594 <HAL_TIM_ConfigClockSource>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8000948:	f000 f89c 	bl	8000a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800094c:	2320      	movs	r3, #32
 800094e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	@ (8000974 <MX_TIM8_Init+0x9c>)
 800095e:	f009 f84f 	bl	8009a00 <HAL_TIMEx_MasterConfigSynchronization>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8000968:	f000 f88c 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	3720      	adds	r7, #32
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	24000134 	.word	0x24000134
 8000978:	40010400 	.word	0x40010400

0800097c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000982:	4b0d      	ldr	r3, [pc, #52]	@ (80009b8 <MX_DMA_Init+0x3c>)
 8000984:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000988:	4a0b      	ldr	r2, [pc, #44]	@ (80009b8 <MX_DMA_Init+0x3c>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <MX_DMA_Init+0x3c>)
 8000994:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	200b      	movs	r0, #11
 80009a6:	f002 fc5c 	bl	8003262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80009aa:	200b      	movs	r0, #11
 80009ac:	f002 fc73 	bl	8003296 <HAL_NVIC_EnableIRQ>

}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	58024400 	.word	0x58024400

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <MX_GPIO_Init+0x6c>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c8:	4a17      	ldr	r2, [pc, #92]	@ (8000a28 <MX_GPIO_Init+0x6c>)
 80009ca:	f043 0304 	orr.w	r3, r3, #4
 80009ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d2:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <MX_GPIO_Init+0x6c>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d8:	f003 0304 	and.w	r3, r3, #4
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e0:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <MX_GPIO_Init+0x6c>)
 80009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e6:	4a10      	ldr	r2, [pc, #64]	@ (8000a28 <MX_GPIO_Init+0x6c>)
 80009e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <MX_GPIO_Init+0x6c>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <MX_GPIO_Init+0x6c>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a04:	4a08      	ldr	r2, [pc, #32]	@ (8000a28 <MX_GPIO_Init+0x6c>)
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <MX_GPIO_Init+0x6c>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a1c:	bf00      	nop
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	58024400 	.word	0x58024400

08000a2c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a32:	463b      	mov	r3, r7
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a3e:	f002 fc45 	bl	80032cc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a42:	2301      	movs	r3, #1
 8000a44:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a4e:	231f      	movs	r3, #31
 8000a50:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a52:	2387      	movs	r3, #135	@ 0x87
 8000a54:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a62:	2301      	movs	r3, #1
 8000a64:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a6e:	463b      	mov	r3, r7
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 fc63 	bl	800333c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a76:	2004      	movs	r0, #4
 8000a78:	f002 fc40 	bl	80032fc <HAL_MPU_Enable>

}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <Error_Handler+0x8>

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <HAL_MspInit+0x30>)
 8000a98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a9c:	4a08      	ldr	r2, [pc, #32]	@ (8000ac0 <HAL_MspInit+0x30>)
 8000a9e:	f043 0302 	orr.w	r3, r3, #2
 8000aa2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000aa6:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <HAL_MspInit+0x30>)
 8000aa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000aac:	f003 0302 	and.w	r3, r3, #2
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	58024400 	.word	0x58024400

08000ac4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b0ba      	sub	sp, #232	@ 0xe8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	22c0      	movs	r2, #192	@ 0xc0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f009 fffb 	bl	800aae0 <memset>
  if(hadc->Instance==ADC1)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a48      	ldr	r2, [pc, #288]	@ (8000c10 <HAL_ADC_MspInit+0x14c>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	f040 8088 	bne.w	8000c06 <HAL_ADC_MspInit+0x142>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000af6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000afa:	f04f 0300 	mov.w	r3, #0
 8000afe:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000b02:	2304      	movs	r3, #4
 8000b04:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000b06:	230a      	movs	r3, #10
 8000b08:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b12:	2302      	movs	r3, #2
 8000b14:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b16:	23c0      	movs	r3, #192	@ 0xc0
 8000b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000b1a:	2320      	movs	r3, #32
 8000b1c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b22:	2300      	movs	r3, #0
 8000b24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f005 ff6b 	bl	8006a08 <HAL_RCCEx_PeriphCLKConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000b38:	f7ff ffa4 	bl	8000a84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b3c:	4b35      	ldr	r3, [pc, #212]	@ (8000c14 <HAL_ADC_MspInit+0x150>)
 8000b3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b42:	4a34      	ldr	r2, [pc, #208]	@ (8000c14 <HAL_ADC_MspInit+0x150>)
 8000b44:	f043 0320 	orr.w	r3, r3, #32
 8000b48:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b4c:	4b31      	ldr	r3, [pc, #196]	@ (8000c14 <HAL_ADC_MspInit+0x150>)
 8000b4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b52:	f003 0320 	and.w	r3, r3, #32
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c14 <HAL_ADC_MspInit+0x150>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b60:	4a2c      	ldr	r2, [pc, #176]	@ (8000c14 <HAL_ADC_MspInit+0x150>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000c14 <HAL_ADC_MspInit+0x150>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA1     ------> ADC1_INP17
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4821      	ldr	r0, [pc, #132]	@ (8000c18 <HAL_ADC_MspInit+0x154>)
 8000b92:	f004 fd4f 	bl	8005634 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000b96:	4b21      	ldr	r3, [pc, #132]	@ (8000c1c <HAL_ADC_MspInit+0x158>)
 8000b98:	4a21      	ldr	r2, [pc, #132]	@ (8000c20 <HAL_ADC_MspInit+0x15c>)
 8000b9a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c1c <HAL_ADC_MspInit+0x158>)
 8000b9e:	2209      	movs	r2, #9
 8000ba0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c1c <HAL_ADC_MspInit+0x158>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <HAL_ADC_MspInit+0x158>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bae:	4b1b      	ldr	r3, [pc, #108]	@ (8000c1c <HAL_ADC_MspInit+0x158>)
 8000bb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bb4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <HAL_ADC_MspInit+0x158>)
 8000bb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bbc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <HAL_ADC_MspInit+0x158>)
 8000bc0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bc4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bc6:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <HAL_ADC_MspInit+0x158>)
 8000bc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bcc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bce:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <HAL_ADC_MspInit+0x158>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <HAL_ADC_MspInit+0x158>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bda:	4810      	ldr	r0, [pc, #64]	@ (8000c1c <HAL_ADC_MspInit+0x158>)
 8000bdc:	f002 fbee 	bl	80033bc <HAL_DMA_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <HAL_ADC_MspInit+0x126>
    {
      Error_Handler();
 8000be6:	f7ff ff4d 	bl	8000a84 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a0b      	ldr	r2, [pc, #44]	@ (8000c1c <HAL_ADC_MspInit+0x158>)
 8000bee:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8000c1c <HAL_ADC_MspInit+0x158>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2012      	movs	r0, #18
 8000bfc:	f002 fb31 	bl	8003262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000c00:	2012      	movs	r0, #18
 8000c02:	f002 fb48 	bl	8003296 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c06:	bf00      	nop
 8000c08:	37e8      	adds	r7, #232	@ 0xe8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40022000 	.word	0x40022000
 8000c14:	58024400 	.word	0x58024400
 8000c18:	58020000 	.word	0x58020000
 8000c1c:	240000bc 	.word	0x240000bc
 8000c20:	40020010 	.word	0x40020010

08000c24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0b      	ldr	r2, [pc, #44]	@ (8000c60 <HAL_TIM_Base_MspInit+0x3c>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d10e      	bne.n	8000c54 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000c36:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <HAL_TIM_Base_MspInit+0x40>)
 8000c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c3c:	4a09      	ldr	r2, [pc, #36]	@ (8000c64 <HAL_TIM_Base_MspInit+0x40>)
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000c46:	4b07      	ldr	r3, [pc, #28]	@ (8000c64 <HAL_TIM_Base_MspInit+0x40>)
 8000c48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	40010400 	.word	0x40010400
 8000c64:	58024400 	.word	0x58024400

08000c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <NMI_Handler+0x4>

08000c70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <HardFault_Handler+0x4>

08000c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <MemManage_Handler+0x4>

08000c80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <BusFault_Handler+0x4>

08000c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <UsageFault_Handler+0x4>

08000c90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbe:	f000 fb3d 	bl	800133c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ccc:	4802      	ldr	r0, [pc, #8]	@ (8000cd8 <DMA1_Stream0_IRQHandler+0x10>)
 8000cce:	f003 f93b 	bl	8003f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	240000bc 	.word	0x240000bc

08000cdc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ce0:	4802      	ldr	r0, [pc, #8]	@ (8000cec <ADC_IRQHandler+0x10>)
 8000ce2:	f001 f843 	bl	8001d6c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	24000058 	.word	0x24000058

08000cf0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f000 f9cf 	bl	8001098 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d04:	4b43      	ldr	r3, [pc, #268]	@ (8000e14 <SystemInit+0x114>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d0a:	4a42      	ldr	r2, [pc, #264]	@ (8000e14 <SystemInit+0x114>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d14:	4b40      	ldr	r3, [pc, #256]	@ (8000e18 <SystemInit+0x118>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 030f 	and.w	r3, r3, #15
 8000d1c:	2b06      	cmp	r3, #6
 8000d1e:	d807      	bhi.n	8000d30 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d20:	4b3d      	ldr	r3, [pc, #244]	@ (8000e18 <SystemInit+0x118>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f023 030f 	bic.w	r3, r3, #15
 8000d28:	4a3b      	ldr	r2, [pc, #236]	@ (8000e18 <SystemInit+0x118>)
 8000d2a:	f043 0307 	orr.w	r3, r3, #7
 8000d2e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d30:	4b3a      	ldr	r3, [pc, #232]	@ (8000e1c <SystemInit+0x11c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a39      	ldr	r2, [pc, #228]	@ (8000e1c <SystemInit+0x11c>)
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d3c:	4b37      	ldr	r3, [pc, #220]	@ (8000e1c <SystemInit+0x11c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d42:	4b36      	ldr	r3, [pc, #216]	@ (8000e1c <SystemInit+0x11c>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	4935      	ldr	r1, [pc, #212]	@ (8000e1c <SystemInit+0x11c>)
 8000d48:	4b35      	ldr	r3, [pc, #212]	@ (8000e20 <SystemInit+0x120>)
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d4e:	4b32      	ldr	r3, [pc, #200]	@ (8000e18 <SystemInit+0x118>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0308 	and.w	r3, r3, #8
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d007      	beq.n	8000d6a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e18 <SystemInit+0x118>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f023 030f 	bic.w	r3, r3, #15
 8000d62:	4a2d      	ldr	r2, [pc, #180]	@ (8000e18 <SystemInit+0x118>)
 8000d64:	f043 0307 	orr.w	r3, r3, #7
 8000d68:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d6a:	4b2c      	ldr	r3, [pc, #176]	@ (8000e1c <SystemInit+0x11c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d70:	4b2a      	ldr	r3, [pc, #168]	@ (8000e1c <SystemInit+0x11c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d76:	4b29      	ldr	r3, [pc, #164]	@ (8000e1c <SystemInit+0x11c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d7c:	4b27      	ldr	r3, [pc, #156]	@ (8000e1c <SystemInit+0x11c>)
 8000d7e:	4a29      	ldr	r2, [pc, #164]	@ (8000e24 <SystemInit+0x124>)
 8000d80:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d82:	4b26      	ldr	r3, [pc, #152]	@ (8000e1c <SystemInit+0x11c>)
 8000d84:	4a28      	ldr	r2, [pc, #160]	@ (8000e28 <SystemInit+0x128>)
 8000d86:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d88:	4b24      	ldr	r3, [pc, #144]	@ (8000e1c <SystemInit+0x11c>)
 8000d8a:	4a28      	ldr	r2, [pc, #160]	@ (8000e2c <SystemInit+0x12c>)
 8000d8c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d8e:	4b23      	ldr	r3, [pc, #140]	@ (8000e1c <SystemInit+0x11c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d94:	4b21      	ldr	r3, [pc, #132]	@ (8000e1c <SystemInit+0x11c>)
 8000d96:	4a25      	ldr	r2, [pc, #148]	@ (8000e2c <SystemInit+0x12c>)
 8000d98:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d9a:	4b20      	ldr	r3, [pc, #128]	@ (8000e1c <SystemInit+0x11c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000da0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e1c <SystemInit+0x11c>)
 8000da2:	4a22      	ldr	r2, [pc, #136]	@ (8000e2c <SystemInit+0x12c>)
 8000da4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000da6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e1c <SystemInit+0x11c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dac:	4b1b      	ldr	r3, [pc, #108]	@ (8000e1c <SystemInit+0x11c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a1a      	ldr	r2, [pc, #104]	@ (8000e1c <SystemInit+0x11c>)
 8000db2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000db6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000db8:	4b18      	ldr	r3, [pc, #96]	@ (8000e1c <SystemInit+0x11c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <SystemInit+0x130>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e34 <SystemInit+0x134>)
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000dca:	d202      	bcs.n	8000dd2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e38 <SystemInit+0x138>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000dd2:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <SystemInit+0x11c>)
 8000dd4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000dd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d113      	bne.n	8000e08 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000de0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <SystemInit+0x11c>)
 8000de2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000de6:	4a0d      	ldr	r2, [pc, #52]	@ (8000e1c <SystemInit+0x11c>)
 8000de8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000dec:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000df0:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <SystemInit+0x13c>)
 8000df2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000df6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000df8:	4b08      	ldr	r3, [pc, #32]	@ (8000e1c <SystemInit+0x11c>)
 8000dfa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000dfe:	4a07      	ldr	r2, [pc, #28]	@ (8000e1c <SystemInit+0x11c>)
 8000e00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000e04:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00
 8000e18:	52002000 	.word	0x52002000
 8000e1c:	58024400 	.word	0x58024400
 8000e20:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e24:	02020200 	.word	0x02020200
 8000e28:	01ff0000 	.word	0x01ff0000
 8000e2c:	01010280 	.word	0x01010280
 8000e30:	5c001000 	.word	0x5c001000
 8000e34:	ffff0000 	.word	0xffff0000
 8000e38:	51008108 	.word	0x51008108
 8000e3c:	52004000 	.word	0x52004000

08000e40 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000e44:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <ExitRun0Mode+0x2c>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	4a08      	ldr	r2, [pc, #32]	@ (8000e6c <ExitRun0Mode+0x2c>)
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000e50:	bf00      	nop
 8000e52:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <ExitRun0Mode+0x2c>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d0f9      	beq.n	8000e52 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000e5e:	bf00      	nop
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	58024800 	.word	0x58024800

08000e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e70:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000eac <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000e74:	f7ff ffe4 	bl	8000e40 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e78:	f7ff ff42 	bl	8000d00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e7c:	480c      	ldr	r0, [pc, #48]	@ (8000eb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e7e:	490d      	ldr	r1, [pc, #52]	@ (8000eb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e80:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e84:	e002      	b.n	8000e8c <LoopCopyDataInit>

08000e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8a:	3304      	adds	r3, #4

08000e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e90:	d3f9      	bcc.n	8000e86 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e92:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e94:	4c0a      	ldr	r4, [pc, #40]	@ (8000ec0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e98:	e001      	b.n	8000e9e <LoopFillZerobss>

08000e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e9c:	3204      	adds	r2, #4

08000e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea0:	d3fb      	bcc.n	8000e9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f009 fe25 	bl	800aaf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea6:	f7ff fbbd 	bl	8000624 <main>
  bx  lr
 8000eaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000eb0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000eb4:	2400002c 	.word	0x2400002c
  ldr r2, =_sidata
 8000eb8:	0800ab9c 	.word	0x0800ab9c
  ldr r2, =_sbss
 8000ebc:	2400002c 	.word	0x2400002c
  ldr r4, =_ebss
 8000ec0:	2400022c 	.word	0x2400022c

08000ec4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC3_IRQHandler>
	...

08000ec8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	@ 0x30
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d009      	beq.n	8000ef0 <BSP_LED_Init+0x28>
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d006      	beq.n	8000ef0 <BSP_LED_Init+0x28>
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d003      	beq.n	8000ef0 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000ee8:	f06f 0301 	mvn.w	r3, #1
 8000eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000eee:	e055      	b.n	8000f9c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10f      	bne.n	8000f16 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000ef6:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa8 <BSP_LED_Init+0xe0>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efc:	4a2a      	ldr	r2, [pc, #168]	@ (8000fa8 <BSP_LED_Init+0xe0>)
 8000efe:	f043 0302 	orr.w	r3, r3, #2
 8000f02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f06:	4b28      	ldr	r3, [pc, #160]	@ (8000fa8 <BSP_LED_Init+0xe0>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0c:	f003 0302 	and.w	r3, r3, #2
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	e021      	b.n	8000f5a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d10f      	bne.n	8000f3c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000f1c:	4b22      	ldr	r3, [pc, #136]	@ (8000fa8 <BSP_LED_Init+0xe0>)
 8000f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f22:	4a21      	ldr	r2, [pc, #132]	@ (8000fa8 <BSP_LED_Init+0xe0>)
 8000f24:	f043 0310 	orr.w	r3, r3, #16
 8000f28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa8 <BSP_LED_Init+0xe0>)
 8000f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f32:	f003 0310 	and.w	r3, r3, #16
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	e00e      	b.n	8000f5a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <BSP_LED_Init+0xe0>)
 8000f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f42:	4a19      	ldr	r2, [pc, #100]	@ (8000fa8 <BSP_LED_Init+0xe0>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f4c:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <BSP_LED_Init+0xe0>)
 8000f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	4a13      	ldr	r2, [pc, #76]	@ (8000fac <BSP_LED_Init+0xe4>)
 8000f5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f62:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	4a0f      	ldr	r2, [pc, #60]	@ (8000fb0 <BSP_LED_Init+0xe8>)
 8000f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f78:	f107 0218 	add.w	r2, r7, #24
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f004 fb58 	bl	8005634 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb0 <BSP_LED_Init+0xe8>)
 8000f88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	4a07      	ldr	r2, [pc, #28]	@ (8000fac <BSP_LED_Init+0xe4>)
 8000f90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f94:	2200      	movs	r2, #0
 8000f96:	4619      	mov	r1, r3
 8000f98:	f004 fcfc 	bl	8005994 <HAL_GPIO_WritePin>
  }

  return ret;
 8000f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3730      	adds	r7, #48	@ 0x30
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	58024400 	.word	0x58024400
 8000fac:	0800ab60 	.word	0x0800ab60
 8000fb0:	2400000c 	.word	0x2400000c

08000fb4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	460a      	mov	r2, r1
 8000fbe:	71fb      	strb	r3, [r7, #7]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000fc4:	4b2e      	ldr	r3, [pc, #184]	@ (8001080 <BSP_PB_Init+0xcc>)
 8000fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fca:	4a2d      	ldr	r2, [pc, #180]	@ (8001080 <BSP_PB_Init+0xcc>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fd4:	4b2a      	ldr	r3, [pc, #168]	@ (8001080 <BSP_PB_Init+0xcc>)
 8000fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000fe2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fe6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10c      	bne.n	8001010 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	4a21      	ldr	r2, [pc, #132]	@ (8001084 <BSP_PB_Init+0xd0>)
 8000ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001002:	f107 020c 	add.w	r2, r7, #12
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f004 fb13 	bl	8005634 <HAL_GPIO_Init>
 800100e:	e031      	b.n	8001074 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001010:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001014:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4a1a      	ldr	r2, [pc, #104]	@ (8001084 <BSP_PB_Init+0xd0>)
 800101a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101e:	f107 020c 	add.w	r2, r7, #12
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f004 fb05 	bl	8005634 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	4a16      	ldr	r2, [pc, #88]	@ (8001088 <BSP_PB_Init+0xd4>)
 8001030:	441a      	add	r2, r3
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	4915      	ldr	r1, [pc, #84]	@ (800108c <BSP_PB_Init+0xd8>)
 8001036:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800103a:	4619      	mov	r1, r3
 800103c:	4610      	mov	r0, r2
 800103e:	f004 fab4 	bl	80055aa <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	4a10      	ldr	r2, [pc, #64]	@ (8001088 <BSP_PB_Init+0xd4>)
 8001048:	1898      	adds	r0, r3, r2
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	4a10      	ldr	r2, [pc, #64]	@ (8001090 <BSP_PB_Init+0xdc>)
 800104e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001052:	461a      	mov	r2, r3
 8001054:	2100      	movs	r1, #0
 8001056:	f004 fa89 	bl	800556c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800105a:	2028      	movs	r0, #40	@ 0x28
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	4a0d      	ldr	r2, [pc, #52]	@ (8001094 <BSP_PB_Init+0xe0>)
 8001060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001064:	2200      	movs	r2, #0
 8001066:	4619      	mov	r1, r3
 8001068:	f002 f8fb 	bl	8003262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800106c:	2328      	movs	r3, #40	@ 0x28
 800106e:	4618      	mov	r0, r3
 8001070:	f002 f911 	bl	8003296 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3720      	adds	r7, #32
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	58024400 	.word	0x58024400
 8001084:	24000018 	.word	0x24000018
 8001088:	2400018c 	.word	0x2400018c
 800108c:	0800ab68 	.word	0x0800ab68
 8001090:	2400001c 	.word	0x2400001c
 8001094:	24000020 	.word	0x24000020

08001098 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	4a04      	ldr	r2, [pc, #16]	@ (80010b8 <BSP_PB_IRQHandler+0x20>)
 80010a8:	4413      	add	r3, r2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 fa92 	bl	80055d4 <HAL_EXTI_IRQHandler>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	2400018c 	.word	0x2400018c

080010bc <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80010ea:	f06f 0301 	mvn.w	r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	e018      	b.n	8001124 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	2294      	movs	r2, #148	@ 0x94
 80010f6:	fb02 f303 	mul.w	r3, r2, r3
 80010fa:	4a0d      	ldr	r2, [pc, #52]	@ (8001130 <BSP_COM_Init+0x5c>)
 80010fc:	4413      	add	r3, r2
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f852 	bl	80011a8 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	2294      	movs	r2, #148	@ 0x94
 8001108:	fb02 f303 	mul.w	r3, r2, r3
 800110c:	4a08      	ldr	r2, [pc, #32]	@ (8001130 <BSP_COM_Init+0x5c>)
 800110e:	4413      	add	r3, r2
 8001110:	6839      	ldr	r1, [r7, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f80e 	bl	8001134 <MX_USART3_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800111e:	f06f 0303 	mvn.w	r3, #3
 8001122:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001124:	68fb      	ldr	r3, [r7, #12]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	24000194 	.word	0x24000194

08001134 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <MX_USART3_Init+0x60>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	220c      	movs	r2, #12
 8001152:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	895b      	ldrh	r3, [r3, #10]
 8001158:	461a      	mov	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	891b      	ldrh	r3, [r3, #8]
 800116a:	461a      	mov	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	899b      	ldrh	r3, [r3, #12]
 8001174:	461a      	mov	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001180:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f008 fcca 	bl	8009b1c <HAL_UART_Init>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	24000008 	.word	0x24000008

08001198 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800119c:	2000      	movs	r0, #0
 800119e:	f7ff ff8d 	bl	80010bc <BSP_PB_Callback>
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	@ 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80011b0:	4b27      	ldr	r3, [pc, #156]	@ (8001250 <COM1_MspInit+0xa8>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b6:	4a26      	ldr	r2, [pc, #152]	@ (8001250 <COM1_MspInit+0xa8>)
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011c0:	4b23      	ldr	r3, [pc, #140]	@ (8001250 <COM1_MspInit+0xa8>)
 80011c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c6:	f003 0308 	and.w	r3, r3, #8
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80011ce:	4b20      	ldr	r3, [pc, #128]	@ (8001250 <COM1_MspInit+0xa8>)
 80011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001250 <COM1_MspInit+0xa8>)
 80011d6:	f043 0308 	orr.w	r3, r3, #8
 80011da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011de:	4b1c      	ldr	r3, [pc, #112]	@ (8001250 <COM1_MspInit+0xa8>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80011ec:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <COM1_MspInit+0xa8>)
 80011ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011f2:	4a17      	ldr	r2, [pc, #92]	@ (8001250 <COM1_MspInit+0xa8>)
 80011f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011fc:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <COM1_MspInit+0xa8>)
 80011fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001202:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800120a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800120e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001214:	2302      	movs	r3, #2
 8001216:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001218:	2301      	movs	r3, #1
 800121a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800121c:	2307      	movs	r3, #7
 800121e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	480b      	ldr	r0, [pc, #44]	@ (8001254 <COM1_MspInit+0xac>)
 8001228:	f004 fa04 	bl	8005634 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800122c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001230:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001236:	2307      	movs	r3, #7
 8001238:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	4804      	ldr	r0, [pc, #16]	@ (8001254 <COM1_MspInit+0xac>)
 8001242:	f004 f9f7 	bl	8005634 <HAL_GPIO_Init>
}
 8001246:	bf00      	nop
 8001248:	3728      	adds	r7, #40	@ 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	58024400 	.word	0x58024400
 8001254:	58020c00 	.word	0x58020c00

08001258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800125e:	2003      	movs	r0, #3
 8001260:	f001 fff4 	bl	800324c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001264:	f005 f9fa 	bl	800665c <HAL_RCC_GetSysClockFreq>
 8001268:	4602      	mov	r2, r0
 800126a:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <HAL_Init+0x68>)
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	0a1b      	lsrs	r3, r3, #8
 8001270:	f003 030f 	and.w	r3, r3, #15
 8001274:	4913      	ldr	r1, [pc, #76]	@ (80012c4 <HAL_Init+0x6c>)
 8001276:	5ccb      	ldrb	r3, [r1, r3]
 8001278:	f003 031f 	and.w	r3, r3, #31
 800127c:	fa22 f303 	lsr.w	r3, r2, r3
 8001280:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001282:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <HAL_Init+0x68>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	4a0e      	ldr	r2, [pc, #56]	@ (80012c4 <HAL_Init+0x6c>)
 800128c:	5cd3      	ldrb	r3, [r2, r3]
 800128e:	f003 031f 	and.w	r3, r3, #31
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	fa22 f303 	lsr.w	r3, r2, r3
 8001298:	4a0b      	ldr	r2, [pc, #44]	@ (80012c8 <HAL_Init+0x70>)
 800129a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800129c:	4a0b      	ldr	r2, [pc, #44]	@ (80012cc <HAL_Init+0x74>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012a2:	2000      	movs	r0, #0
 80012a4:	f000 f814 	bl	80012d0 <HAL_InitTick>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e002      	b.n	80012b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012b2:	f7ff fbed 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	58024400 	.word	0x58024400
 80012c4:	0800ab50 	.word	0x0800ab50
 80012c8:	24000004 	.word	0x24000004
 80012cc:	24000000 	.word	0x24000000

080012d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012d8:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <HAL_InitTick+0x60>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d101      	bne.n	80012e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e021      	b.n	8001328 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012e4:	4b13      	ldr	r3, [pc, #76]	@ (8001334 <HAL_InitTick+0x64>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b11      	ldr	r3, [pc, #68]	@ (8001330 <HAL_InitTick+0x60>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	f001 ffd9 	bl	80032b2 <HAL_SYSTICK_Config>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e00e      	b.n	8001328 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b0f      	cmp	r3, #15
 800130e:	d80a      	bhi.n	8001326 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001310:	2200      	movs	r2, #0
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001318:	f001 ffa3 	bl	8003262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800131c:	4a06      	ldr	r2, [pc, #24]	@ (8001338 <HAL_InitTick+0x68>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	e000      	b.n	8001328 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	24000028 	.word	0x24000028
 8001334:	24000000 	.word	0x24000000
 8001338:	24000024 	.word	0x24000024

0800133c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001340:	4b06      	ldr	r3, [pc, #24]	@ (800135c <HAL_IncTick+0x20>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <HAL_IncTick+0x24>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4a04      	ldr	r2, [pc, #16]	@ (8001360 <HAL_IncTick+0x24>)
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	24000028 	.word	0x24000028
 8001360:	24000228 	.word	0x24000228

08001364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return uwTick;
 8001368:	4b03      	ldr	r3, [pc, #12]	@ (8001378 <HAL_GetTick+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	24000228 	.word	0x24000228

0800137c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001384:	f7ff ffee 	bl	8001364 <HAL_GetTick>
 8001388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001394:	d005      	beq.n	80013a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001396:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <HAL_Delay+0x44>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4413      	add	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013a2:	bf00      	nop
 80013a4:	f7ff ffde 	bl	8001364 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d8f7      	bhi.n	80013a4 <HAL_Delay+0x28>
  {
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	24000028 	.word	0x24000028

080013c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013c8:	4b03      	ldr	r3, [pc, #12]	@ (80013d8 <HAL_GetREVID+0x14>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	0c1b      	lsrs	r3, r3, #16
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	5c001000 	.word	0x5c001000

080013dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	609a      	str	r2, [r3, #8]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	609a      	str	r2, [r3, #8]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001444:	b480      	push	{r7}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001454:	2b00      	cmp	r3, #0
 8001456:	d107      	bne.n	8001468 <LL_ADC_SetChannelPreselection+0x24>
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	0e9b      	lsrs	r3, r3, #26
 800145c:	f003 031f 	and.w	r3, r3, #31
 8001460:	2201      	movs	r2, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	e015      	b.n	8001494 <LL_ADC_SetChannelPreselection+0x50>
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	fa93 f3a3 	rbit	r3, r3
 8001472:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 800147e:	2320      	movs	r3, #32
 8001480:	e003      	b.n	800148a <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	fab3 f383 	clz	r3, r3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	f003 031f 	and.w	r3, r3, #31
 800148e:	2201      	movs	r2, #1
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	69d2      	ldr	r2, [r2, #28]
 8001498:	431a      	orrs	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 800149e:	bf00      	nop
 80014a0:	371c      	adds	r7, #28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b087      	sub	sp, #28
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
 80014b6:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	3360      	adds	r3, #96	@ 0x60
 80014bc:	461a      	mov	r2, r3
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	430b      	orrs	r3, r1
 80014d8:	431a      	orrs	r2, r3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80014de:	bf00      	nop
 80014e0:	371c      	adds	r7, #28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b085      	sub	sp, #20
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	f003 031f 	and.w	r3, r3, #31
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	431a      	orrs	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	611a      	str	r2, [r3, #16]
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800151c:	b480      	push	{r7}
 800151e:	b087      	sub	sp, #28
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3360      	adds	r3, #96	@ 0x60
 800152c:	461a      	mov	r2, r3
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	431a      	orrs	r2, r3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	601a      	str	r2, [r3, #0]
  }
}
 8001546:	bf00      	nop
 8001548:	371c      	adds	r7, #28
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001578:	b480      	push	{r7}
 800157a:	b087      	sub	sp, #28
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	3330      	adds	r3, #48	@ 0x30
 8001588:	461a      	mov	r2, r3
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	f003 030c 	and.w	r3, r3, #12
 8001594:	4413      	add	r3, r2
 8001596:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	f003 031f 	and.w	r3, r3, #31
 80015a2:	211f      	movs	r1, #31
 80015a4:	fa01 f303 	lsl.w	r3, r1, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	401a      	ands	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	0e9b      	lsrs	r3, r3, #26
 80015b0:	f003 011f 	and.w	r1, r3, #31
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	431a      	orrs	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015c4:	bf00      	nop
 80015c6:	371c      	adds	r7, #28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	f023 0203 	bic.w	r2, r3, #3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	60da      	str	r2, [r3, #12]
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001602:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800160a:	2301      	movs	r3, #1
 800160c:	e000      	b.n	8001610 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800161c:	b480      	push	{r7}
 800161e:	b087      	sub	sp, #28
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	3314      	adds	r3, #20
 800162c:	461a      	mov	r2, r3
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	0e5b      	lsrs	r3, r3, #25
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	4413      	add	r3, r2
 800163a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	0d1b      	lsrs	r3, r3, #20
 8001644:	f003 031f 	and.w	r3, r3, #31
 8001648:	2107      	movs	r1, #7
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	401a      	ands	r2, r3
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	0d1b      	lsrs	r3, r3, #20
 8001656:	f003 031f 	and.w	r3, r3, #31
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	fa01 f303 	lsl.w	r3, r1, r3
 8001660:	431a      	orrs	r2, r3
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001666:	bf00      	nop
 8001668:	371c      	adds	r7, #28
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800168c:	43db      	mvns	r3, r3
 800168e:	401a      	ands	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0318 	and.w	r3, r3, #24
 8001696:	4908      	ldr	r1, [pc, #32]	@ (80016b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001698:	40d9      	lsrs	r1, r3
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	400b      	ands	r3, r1
 800169e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016a2:	431a      	orrs	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80016aa:	bf00      	nop
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	000fffff 	.word	0x000fffff

080016bc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 031f 	and.w	r3, r3, #31
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	4b04      	ldr	r3, [pc, #16]	@ (8001714 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001702:	4013      	ands	r3, r2
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6093      	str	r3, [r2, #8]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	5fffffc0 	.word	0x5fffffc0

08001718 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001728:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800172c:	d101      	bne.n	8001732 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800172e:	2301      	movs	r3, #1
 8001730:	e000      	b.n	8001734 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <LL_ADC_EnableInternalRegulator+0x24>)
 800174e:	4013      	ands	r3, r2
 8001750:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	6fffffc0 	.word	0x6fffffc0

08001768 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001778:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800177c:	d101      	bne.n	8001782 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <LL_ADC_Enable+0x24>)
 800179e:	4013      	ands	r3, r2
 80017a0:	f043 0201 	orr.w	r2, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	7fffffc0 	.word	0x7fffffc0

080017b8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <LL_ADC_Disable+0x24>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	f043 0202 	orr.w	r2, r3, #2
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	7fffffc0 	.word	0x7fffffc0

080017e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d101      	bne.n	80017f8 <LL_ADC_IsEnabled+0x18>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <LL_ADC_IsEnabled+0x1a>
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b02      	cmp	r3, #2
 8001818:	d101      	bne.n	800181e <LL_ADC_IsDisableOngoing+0x18>
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <LL_ADC_IsDisableOngoing+0x1a>
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <LL_ADC_REG_StartConversion+0x24>)
 800183a:	4013      	ands	r3, r2
 800183c:	f043 0204 	orr.w	r2, r3, #4
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	7fffffc0 	.word	0x7fffffc0

08001854 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b04      	cmp	r3, #4
 8001866:	d101      	bne.n	800186c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b08      	cmp	r3, #8
 800188c:	d101      	bne.n	8001892 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b089      	sub	sp, #36	@ 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e18f      	b.n	8001bda <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d109      	bne.n	80018dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff f8fb 	bl	8000ac4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff19 	bl	8001718 <LL_ADC_IsDeepPowerDownEnabled>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d004      	beq.n	80018f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff feff 	bl	80016f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff ff34 	bl	8001768 <LL_ADC_IsInternalRegulatorEnabled>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d114      	bne.n	8001930 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff ff18 	bl	8001740 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001910:	4b87      	ldr	r3, [pc, #540]	@ (8001b30 <HAL_ADC_Init+0x290>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	099b      	lsrs	r3, r3, #6
 8001916:	4a87      	ldr	r2, [pc, #540]	@ (8001b34 <HAL_ADC_Init+0x294>)
 8001918:	fba2 2303 	umull	r2, r3, r2, r3
 800191c:	099b      	lsrs	r3, r3, #6
 800191e:	3301      	adds	r3, #1
 8001920:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001922:	e002      	b.n	800192a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	3b01      	subs	r3, #1
 8001928:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f9      	bne.n	8001924 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff17 	bl	8001768 <LL_ADC_IsInternalRegulatorEnabled>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d10d      	bne.n	800195c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001944:	f043 0210 	orr.w	r2, r3, #16
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001950:	f043 0201 	orr.w	r2, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff77 	bl	8001854 <LL_ADC_REG_IsConversionOngoing>
 8001966:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800196c:	f003 0310 	and.w	r3, r3, #16
 8001970:	2b00      	cmp	r3, #0
 8001972:	f040 8129 	bne.w	8001bc8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	2b00      	cmp	r3, #0
 800197a:	f040 8125 	bne.w	8001bc8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001982:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001986:	f043 0202 	orr.w	r2, r3, #2
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff ff24 	bl	80017e0 <LL_ADC_IsEnabled>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d136      	bne.n	8001a0c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a65      	ldr	r2, [pc, #404]	@ (8001b38 <HAL_ADC_Init+0x298>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d004      	beq.n	80019b2 <HAL_ADC_Init+0x112>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a63      	ldr	r2, [pc, #396]	@ (8001b3c <HAL_ADC_Init+0x29c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d10e      	bne.n	80019d0 <HAL_ADC_Init+0x130>
 80019b2:	4861      	ldr	r0, [pc, #388]	@ (8001b38 <HAL_ADC_Init+0x298>)
 80019b4:	f7ff ff14 	bl	80017e0 <LL_ADC_IsEnabled>
 80019b8:	4604      	mov	r4, r0
 80019ba:	4860      	ldr	r0, [pc, #384]	@ (8001b3c <HAL_ADC_Init+0x29c>)
 80019bc:	f7ff ff10 	bl	80017e0 <LL_ADC_IsEnabled>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4323      	orrs	r3, r4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bf0c      	ite	eq
 80019c8:	2301      	moveq	r3, #1
 80019ca:	2300      	movne	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	e008      	b.n	80019e2 <HAL_ADC_Init+0x142>
 80019d0:	485b      	ldr	r0, [pc, #364]	@ (8001b40 <HAL_ADC_Init+0x2a0>)
 80019d2:	f7ff ff05 	bl	80017e0 <LL_ADC_IsEnabled>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bf0c      	ite	eq
 80019dc:	2301      	moveq	r3, #1
 80019de:	2300      	movne	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d012      	beq.n	8001a0c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a53      	ldr	r2, [pc, #332]	@ (8001b38 <HAL_ADC_Init+0x298>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d004      	beq.n	80019fa <HAL_ADC_Init+0x15a>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a51      	ldr	r2, [pc, #324]	@ (8001b3c <HAL_ADC_Init+0x29c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d101      	bne.n	80019fe <HAL_ADC_Init+0x15e>
 80019fa:	4a52      	ldr	r2, [pc, #328]	@ (8001b44 <HAL_ADC_Init+0x2a4>)
 80019fc:	e000      	b.n	8001a00 <HAL_ADC_Init+0x160>
 80019fe:	4a52      	ldr	r2, [pc, #328]	@ (8001b48 <HAL_ADC_Init+0x2a8>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	4619      	mov	r1, r3
 8001a06:	4610      	mov	r0, r2
 8001a08:	f7ff fce8 	bl	80013dc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001a0c:	f7ff fcda 	bl	80013c4 <HAL_GetREVID>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d914      	bls.n	8001a44 <HAL_ADC_Init+0x1a4>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b10      	cmp	r3, #16
 8001a20:	d110      	bne.n	8001a44 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	7d5b      	ldrb	r3, [r3, #21]
 8001a26:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a2c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a32:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7f1b      	ldrb	r3, [r3, #28]
 8001a38:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a3a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a3c:	f043 030c 	orr.w	r3, r3, #12
 8001a40:	61bb      	str	r3, [r7, #24]
 8001a42:	e00d      	b.n	8001a60 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	7d5b      	ldrb	r3, [r3, #21]
 8001a48:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a4e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a54:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7f1b      	ldrb	r3, [r3, #28]
 8001a5a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7f1b      	ldrb	r3, [r3, #28]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d106      	bne.n	8001a76 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	045b      	lsls	r3, r3, #17
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d009      	beq.n	8001a92 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a82:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68da      	ldr	r2, [r3, #12]
 8001a98:	4b2c      	ldr	r3, [pc, #176]	@ (8001b4c <HAL_ADC_Init+0x2ac>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	69b9      	ldr	r1, [r7, #24]
 8001aa2:	430b      	orrs	r3, r1
 8001aa4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fed2 	bl	8001854 <LL_ADC_REG_IsConversionOngoing>
 8001ab0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fedf 	bl	800187a <LL_ADC_INJ_IsConversionOngoing>
 8001abc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d15f      	bne.n	8001b84 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d15c      	bne.n	8001b84 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	7d1b      	ldrb	r3, [r3, #20]
 8001ace:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	4b1c      	ldr	r3, [pc, #112]	@ (8001b50 <HAL_ADC_Init+0x2b0>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	69b9      	ldr	r1, [r7, #24]
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d130      	bne.n	8001b58 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	691a      	ldr	r2, [r3, #16]
 8001b02:	4b14      	ldr	r3, [pc, #80]	@ (8001b54 <HAL_ADC_Init+0x2b4>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b0a:	3a01      	subs	r2, #1
 8001b0c:	0411      	lsls	r1, r2, #16
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b12:	4311      	orrs	r1, r2
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001b18:	4311      	orrs	r1, r2
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	431a      	orrs	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0201 	orr.w	r2, r2, #1
 8001b2a:	611a      	str	r2, [r3, #16]
 8001b2c:	e01c      	b.n	8001b68 <HAL_ADC_Init+0x2c8>
 8001b2e:	bf00      	nop
 8001b30:	24000000 	.word	0x24000000
 8001b34:	053e2d63 	.word	0x053e2d63
 8001b38:	40022000 	.word	0x40022000
 8001b3c:	40022100 	.word	0x40022100
 8001b40:	58026000 	.word	0x58026000
 8001b44:	40022300 	.word	0x40022300
 8001b48:	58026300 	.word	0x58026300
 8001b4c:	fff0c003 	.word	0xfff0c003
 8001b50:	ffffbffc 	.word	0xffffbffc
 8001b54:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691a      	ldr	r2, [r3, #16]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0201 	bic.w	r2, r2, #1
 8001b66:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 ffba 	bl	8002af8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d10c      	bne.n	8001ba6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	f023 010f 	bic.w	r1, r3, #15
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	1e5a      	subs	r2, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ba4:	e007      	b.n	8001bb6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 020f 	bic.w	r2, r2, #15
 8001bb4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bba:	f023 0303 	bic.w	r3, r3, #3
 8001bbe:	f043 0201 	orr.w	r2, r3, #1
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	655a      	str	r2, [r3, #84]	@ 0x54
 8001bc6:	e007      	b.n	8001bd8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bcc:	f043 0210 	orr.w	r2, r3, #16
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3724      	adds	r7, #36	@ 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd90      	pop	{r4, r7, pc}
 8001be2:	bf00      	nop

08001be4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a55      	ldr	r2, [pc, #340]	@ (8001d4c <HAL_ADC_Start_DMA+0x168>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d004      	beq.n	8001c04 <HAL_ADC_Start_DMA+0x20>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a54      	ldr	r2, [pc, #336]	@ (8001d50 <HAL_ADC_Start_DMA+0x16c>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d101      	bne.n	8001c08 <HAL_ADC_Start_DMA+0x24>
 8001c04:	4b53      	ldr	r3, [pc, #332]	@ (8001d54 <HAL_ADC_Start_DMA+0x170>)
 8001c06:	e000      	b.n	8001c0a <HAL_ADC_Start_DMA+0x26>
 8001c08:	4b53      	ldr	r3, [pc, #332]	@ (8001d58 <HAL_ADC_Start_DMA+0x174>)
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fd56 	bl	80016bc <LL_ADC_GetMultimode>
 8001c10:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fe1c 	bl	8001854 <LL_ADC_REG_IsConversionOngoing>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f040 808c 	bne.w	8001d3c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_Start_DMA+0x4e>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e087      	b.n	8001d42 <HAL_ADC_Start_DMA+0x15e>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	2b05      	cmp	r3, #5
 8001c44:	d002      	beq.n	8001c4c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	2b09      	cmp	r3, #9
 8001c4a:	d170      	bne.n	8001d2e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f000 fdd5 	bl	80027fc <ADC_Enable>
 8001c52:	4603      	mov	r3, r0
 8001c54:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c56:	7dfb      	ldrb	r3, [r7, #23]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d163      	bne.n	8001d24 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001c60:	4b3e      	ldr	r3, [pc, #248]	@ (8001d5c <HAL_ADC_Start_DMA+0x178>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a37      	ldr	r2, [pc, #220]	@ (8001d50 <HAL_ADC_Start_DMA+0x16c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d002      	beq.n	8001c7c <HAL_ADC_Start_DMA+0x98>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	e000      	b.n	8001c7e <HAL_ADC_Start_DMA+0x9a>
 8001c7c:	4b33      	ldr	r3, [pc, #204]	@ (8001d4c <HAL_ADC_Start_DMA+0x168>)
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	6812      	ldr	r2, [r2, #0]
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d002      	beq.n	8001c8c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d105      	bne.n	8001c98 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d006      	beq.n	8001cb2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca8:	f023 0206 	bic.w	r2, r3, #6
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	659a      	str	r2, [r3, #88]	@ 0x58
 8001cb0:	e002      	b.n	8001cb8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cbc:	4a28      	ldr	r2, [pc, #160]	@ (8001d60 <HAL_ADC_Start_DMA+0x17c>)
 8001cbe:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc4:	4a27      	ldr	r2, [pc, #156]	@ (8001d64 <HAL_ADC_Start_DMA+0x180>)
 8001cc6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ccc:	4a26      	ldr	r2, [pc, #152]	@ (8001d68 <HAL_ADC_Start_DMA+0x184>)
 8001cce:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	221c      	movs	r2, #28
 8001cd6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0210 	orr.w	r2, r2, #16
 8001cee:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	f7ff fc68 	bl	80015d0 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	3340      	adds	r3, #64	@ 0x40
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f001 feb0 	bl	8003a74 <HAL_DMA_Start_IT>
 8001d14:	4603      	mov	r3, r0
 8001d16:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fd85 	bl	800182c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001d22:	e00d      	b.n	8001d40 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8001d2c:	e008      	b.n	8001d40 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001d3a:	e001      	b.n	8001d40 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40022000 	.word	0x40022000
 8001d50:	40022100 	.word	0x40022100
 8001d54:	40022300 	.word	0x40022300
 8001d58:	58026300 	.word	0x58026300
 8001d5c:	fffff0fe 	.word	0xfffff0fe
 8001d60:	080029cf 	.word	0x080029cf
 8001d64:	08002aa7 	.word	0x08002aa7
 8001d68:	08002ac3 	.word	0x08002ac3

08001d6c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	@ 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001d74:	2300      	movs	r3, #0
 8001d76:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a87      	ldr	r2, [pc, #540]	@ (8001fac <HAL_ADC_IRQHandler+0x240>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d004      	beq.n	8001d9c <HAL_ADC_IRQHandler+0x30>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a86      	ldr	r2, [pc, #536]	@ (8001fb0 <HAL_ADC_IRQHandler+0x244>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d101      	bne.n	8001da0 <HAL_ADC_IRQHandler+0x34>
 8001d9c:	4b85      	ldr	r3, [pc, #532]	@ (8001fb4 <HAL_ADC_IRQHandler+0x248>)
 8001d9e:	e000      	b.n	8001da2 <HAL_ADC_IRQHandler+0x36>
 8001da0:	4b85      	ldr	r3, [pc, #532]	@ (8001fb8 <HAL_ADC_IRQHandler+0x24c>)
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fc8a 	bl	80016bc <LL_ADC_GetMultimode>
 8001da8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d017      	beq.n	8001de4 <HAL_ADC_IRQHandler+0x78>
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d012      	beq.n	8001de4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d105      	bne.n	8001dd6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dce:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f001 f880 	bl	8002edc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2202      	movs	r2, #2
 8001de2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d004      	beq.n	8001df8 <HAL_ADC_IRQHandler+0x8c>
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10a      	bne.n	8001e0e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 8083 	beq.w	8001f0a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d07d      	beq.n	8001f0a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e12:	f003 0310 	and.w	r3, r3, #16
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d105      	bne.n	8001e26 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e1e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fb91 	bl	8001552 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d062      	beq.n	8001efc <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a5d      	ldr	r2, [pc, #372]	@ (8001fb0 <HAL_ADC_IRQHandler+0x244>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d002      	beq.n	8001e46 <HAL_ADC_IRQHandler+0xda>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	e000      	b.n	8001e48 <HAL_ADC_IRQHandler+0xdc>
 8001e46:	4b59      	ldr	r3, [pc, #356]	@ (8001fac <HAL_ADC_IRQHandler+0x240>)
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d008      	beq.n	8001e62 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d005      	beq.n	8001e62 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2b05      	cmp	r3, #5
 8001e5a:	d002      	beq.n	8001e62 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	2b09      	cmp	r3, #9
 8001e60:	d104      	bne.n	8001e6c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	623b      	str	r3, [r7, #32]
 8001e6a:	e00c      	b.n	8001e86 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a4f      	ldr	r2, [pc, #316]	@ (8001fb0 <HAL_ADC_IRQHandler+0x244>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d002      	beq.n	8001e7c <HAL_ADC_IRQHandler+0x110>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	e000      	b.n	8001e7e <HAL_ADC_IRQHandler+0x112>
 8001e7c:	4b4b      	ldr	r3, [pc, #300]	@ (8001fac <HAL_ADC_IRQHandler+0x240>)
 8001e7e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d135      	bne.n	8001efc <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d12e      	bne.n	8001efc <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fcd6 	bl	8001854 <LL_ADC_REG_IsConversionOngoing>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d11a      	bne.n	8001ee4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 020c 	bic.w	r2, r2, #12
 8001ebc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ece:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d112      	bne.n	8001efc <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eda:	f043 0201 	orr.w	r2, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ee2:	e00b      	b.n	8001efc <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee8:	f043 0210 	orr.w	r2, r3, #16
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef4:	f043 0201 	orr.w	r2, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f96f 	bl	80021e0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	220c      	movs	r2, #12
 8001f08:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	f003 0320 	and.w	r3, r3, #32
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d004      	beq.n	8001f1e <HAL_ADC_IRQHandler+0x1b2>
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	f003 0320 	and.w	r3, r3, #32
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10b      	bne.n	8001f36 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 80a0 	beq.w	800206a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 809a 	beq.w	800206a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3a:	f003 0310 	and.w	r3, r3, #16
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d105      	bne.n	8001f4e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f46:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fb4f 	bl	80015f6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001f58:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff faf7 	bl	8001552 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f64:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a11      	ldr	r2, [pc, #68]	@ (8001fb0 <HAL_ADC_IRQHandler+0x244>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d002      	beq.n	8001f76 <HAL_ADC_IRQHandler+0x20a>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	e000      	b.n	8001f78 <HAL_ADC_IRQHandler+0x20c>
 8001f76:	4b0d      	ldr	r3, [pc, #52]	@ (8001fac <HAL_ADC_IRQHandler+0x240>)
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d008      	beq.n	8001f92 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d005      	beq.n	8001f92 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	2b06      	cmp	r3, #6
 8001f8a:	d002      	beq.n	8001f92 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2b07      	cmp	r3, #7
 8001f90:	d104      	bne.n	8001f9c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	623b      	str	r3, [r7, #32]
 8001f9a:	e014      	b.n	8001fc6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a03      	ldr	r2, [pc, #12]	@ (8001fb0 <HAL_ADC_IRQHandler+0x244>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00a      	beq.n	8001fbc <HAL_ADC_IRQHandler+0x250>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	e008      	b.n	8001fbe <HAL_ADC_IRQHandler+0x252>
 8001fac:	40022000 	.word	0x40022000
 8001fb0:	40022100 	.word	0x40022100
 8001fb4:	40022300 	.word	0x40022300
 8001fb8:	58026300 	.word	0x58026300
 8001fbc:	4b84      	ldr	r3, [pc, #528]	@ (80021d0 <HAL_ADC_IRQHandler+0x464>)
 8001fbe:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d047      	beq.n	800205c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d007      	beq.n	8001fe6 <HAL_ADC_IRQHandler+0x27a>
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d03f      	beq.n	800205c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d13a      	bne.n	800205c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff0:	2b40      	cmp	r3, #64	@ 0x40
 8001ff2:	d133      	bne.n	800205c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d12e      	bne.n	800205c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fc39 	bl	800187a <LL_ADC_INJ_IsConversionOngoing>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d11a      	bne.n	8002044 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800201c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002022:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800202e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002032:	2b00      	cmp	r3, #0
 8002034:	d112      	bne.n	800205c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203a:	f043 0201 	orr.w	r2, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	655a      	str	r2, [r3, #84]	@ 0x54
 8002042:	e00b      	b.n	800205c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002048:	f043 0210 	orr.w	r2, r3, #16
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002054:	f043 0201 	orr.w	r2, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 ff15 	bl	8002e8c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2260      	movs	r2, #96	@ 0x60
 8002068:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002070:	2b00      	cmp	r3, #0
 8002072:	d011      	beq.n	8002098 <HAL_ADC_IRQHandler+0x32c>
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00c      	beq.n	8002098 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002082:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f8b2 	bl	80021f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2280      	movs	r2, #128	@ 0x80
 8002096:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d012      	beq.n	80020c8 <HAL_ADC_IRQHandler+0x35c>
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00d      	beq.n	80020c8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 fefb 	bl	8002eb4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d012      	beq.n	80020f8 <HAL_ADC_IRQHandler+0x38c>
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00d      	beq.n	80020f8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 feed 	bl	8002ec8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 0310 	and.w	r3, r3, #16
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d043      	beq.n	800218a <HAL_ADC_IRQHandler+0x41e>
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	f003 0310 	and.w	r3, r3, #16
 8002108:	2b00      	cmp	r3, #0
 800210a:	d03e      	beq.n	800218a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002114:	2301      	movs	r3, #1
 8002116:	627b      	str	r3, [r7, #36]	@ 0x24
 8002118:	e021      	b.n	800215e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d015      	beq.n	800214c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a2a      	ldr	r2, [pc, #168]	@ (80021d0 <HAL_ADC_IRQHandler+0x464>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d004      	beq.n	8002134 <HAL_ADC_IRQHandler+0x3c8>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a29      	ldr	r2, [pc, #164]	@ (80021d4 <HAL_ADC_IRQHandler+0x468>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d101      	bne.n	8002138 <HAL_ADC_IRQHandler+0x3cc>
 8002134:	4b28      	ldr	r3, [pc, #160]	@ (80021d8 <HAL_ADC_IRQHandler+0x46c>)
 8002136:	e000      	b.n	800213a <HAL_ADC_IRQHandler+0x3ce>
 8002138:	4b28      	ldr	r3, [pc, #160]	@ (80021dc <HAL_ADC_IRQHandler+0x470>)
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff facc 	bl	80016d8 <LL_ADC_GetMultiDMATransfer>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00b      	beq.n	800215e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002146:	2301      	movs	r3, #1
 8002148:	627b      	str	r3, [r7, #36]	@ 0x24
 800214a:	e008      	b.n	800215e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800215a:	2301      	movs	r3, #1
 800215c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	2b01      	cmp	r3, #1
 8002162:	d10e      	bne.n	8002182 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002168:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002174:	f043 0202 	orr.w	r2, r3, #2
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f843 	bl	8002208 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2210      	movs	r2, #16
 8002188:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002190:	2b00      	cmp	r3, #0
 8002192:	d018      	beq.n	80021c6 <HAL_ADC_IRQHandler+0x45a>
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800219a:	2b00      	cmp	r3, #0
 800219c:	d013      	beq.n	80021c6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ae:	f043 0208 	orr.w	r2, r3, #8
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021be:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 fe6d 	bl	8002ea0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80021c6:	bf00      	nop
 80021c8:	3728      	adds	r7, #40	@ 0x28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40022000 	.word	0x40022000
 80021d4:	40022100 	.word	0x40022100
 80021d8:	40022300 	.word	0x40022300
 80021dc:	58026300 	.word	0x58026300

080021e0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b08d      	sub	sp, #52	@ 0x34
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4a65      	ldr	r2, [pc, #404]	@ (80023cc <HAL_ADC_ConfigChannel+0x1b0>)
 8002236:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x2a>
 8002242:	2302      	movs	r3, #2
 8002244:	e2c7      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x5ba>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fafe 	bl	8001854 <LL_ADC_REG_IsConversionOngoing>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	f040 82ac 	bne.w	80027b8 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	db2c      	blt.n	80022c2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002270:	2b00      	cmp	r3, #0
 8002272:	d108      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x6a>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	0e9b      	lsrs	r3, r3, #26
 800227a:	f003 031f 	and.w	r3, r3, #31
 800227e:	2201      	movs	r2, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	e016      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x98>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	613b      	str	r3, [r7, #16]
  return result;
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 800229e:	2320      	movs	r3, #32
 80022a0:	e003      	b.n	80022aa <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	fab3 f383 	clz	r3, r3
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	2201      	movs	r2, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	69d1      	ldr	r1, [r2, #28]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	430b      	orrs	r3, r1
 80022c0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6859      	ldr	r1, [r3, #4]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	f7ff f952 	bl	8001578 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fabb 	bl	8001854 <LL_ADC_REG_IsConversionOngoing>
 80022de:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff fac8 	bl	800187a <LL_ADC_INJ_IsConversionOngoing>
 80022ea:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f040 80b8 	bne.w	8002464 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f040 80b4 	bne.w	8002464 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	6819      	ldr	r1, [r3, #0]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	461a      	mov	r2, r3
 800230a:	f7ff f987 	bl	800161c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800230e:	4b30      	ldr	r3, [pc, #192]	@ (80023d0 <HAL_ADC_ConfigChannel+0x1b4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002316:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800231a:	d10b      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x118>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	695a      	ldr	r2, [r3, #20]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	089b      	lsrs	r3, r3, #2
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	e01d      	b.n	8002370 <HAL_ADC_ConfigChannel+0x154>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	f003 0310 	and.w	r3, r3, #16
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10b      	bne.n	800235a <HAL_ADC_ConfigChannel+0x13e>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	695a      	ldr	r2, [r3, #20]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	089b      	lsrs	r3, r3, #2
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	e00a      	b.n	8002370 <HAL_ADC_ConfigChannel+0x154>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	695a      	ldr	r2, [r3, #20]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	089b      	lsrs	r3, r3, #2
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	2b04      	cmp	r3, #4
 8002378:	d02c      	beq.n	80023d4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	6919      	ldr	r1, [r3, #16]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	f7ff f88f 	bl	80014aa <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6818      	ldr	r0, [r3, #0]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	6919      	ldr	r1, [r3, #16]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	7e5b      	ldrb	r3, [r3, #25]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d102      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x186>
 800239c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80023a0:	e000      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x188>
 80023a2:	2300      	movs	r3, #0
 80023a4:	461a      	mov	r2, r3
 80023a6:	f7ff f8b9 	bl	800151c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	6919      	ldr	r1, [r3, #16]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	7e1b      	ldrb	r3, [r3, #24]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d102      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x1a4>
 80023ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80023be:	e000      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x1a6>
 80023c0:	2300      	movs	r3, #0
 80023c2:	461a      	mov	r2, r3
 80023c4:	f7ff f891 	bl	80014ea <LL_ADC_SetDataRightShift>
 80023c8:	e04c      	b.n	8002464 <HAL_ADC_ConfigChannel+0x248>
 80023ca:	bf00      	nop
 80023cc:	47ff0000 	.word	0x47ff0000
 80023d0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	069b      	lsls	r3, r3, #26
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d107      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023f6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	069b      	lsls	r3, r3, #26
 8002408:	429a      	cmp	r2, r3
 800240a:	d107      	bne.n	800241c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800241a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002422:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	069b      	lsls	r3, r3, #26
 800242c:	429a      	cmp	r2, r3
 800242e:	d107      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800243e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002446:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	069b      	lsls	r3, r3, #26
 8002450:	429a      	cmp	r2, r3
 8002452:	d107      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002462:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff f9b9 	bl	80017e0 <LL_ADC_IsEnabled>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	f040 81aa 	bne.w	80027ca <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	6819      	ldr	r1, [r3, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	461a      	mov	r2, r3
 8002484:	f7ff f8f6 	bl	8001674 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4a87      	ldr	r2, [pc, #540]	@ (80026ac <HAL_ADC_ConfigChannel+0x490>)
 800248e:	4293      	cmp	r3, r2
 8002490:	f040 809a 	bne.w	80025c8 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4984      	ldr	r1, [pc, #528]	@ (80026b0 <HAL_ADC_ConfigChannel+0x494>)
 800249e:	428b      	cmp	r3, r1
 80024a0:	d147      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x316>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4983      	ldr	r1, [pc, #524]	@ (80026b4 <HAL_ADC_ConfigChannel+0x498>)
 80024a8:	428b      	cmp	r3, r1
 80024aa:	d040      	beq.n	800252e <HAL_ADC_ConfigChannel+0x312>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4981      	ldr	r1, [pc, #516]	@ (80026b8 <HAL_ADC_ConfigChannel+0x49c>)
 80024b2:	428b      	cmp	r3, r1
 80024b4:	d039      	beq.n	800252a <HAL_ADC_ConfigChannel+0x30e>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4980      	ldr	r1, [pc, #512]	@ (80026bc <HAL_ADC_ConfigChannel+0x4a0>)
 80024bc:	428b      	cmp	r3, r1
 80024be:	d032      	beq.n	8002526 <HAL_ADC_ConfigChannel+0x30a>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	497e      	ldr	r1, [pc, #504]	@ (80026c0 <HAL_ADC_ConfigChannel+0x4a4>)
 80024c6:	428b      	cmp	r3, r1
 80024c8:	d02b      	beq.n	8002522 <HAL_ADC_ConfigChannel+0x306>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	497d      	ldr	r1, [pc, #500]	@ (80026c4 <HAL_ADC_ConfigChannel+0x4a8>)
 80024d0:	428b      	cmp	r3, r1
 80024d2:	d024      	beq.n	800251e <HAL_ADC_ConfigChannel+0x302>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	497b      	ldr	r1, [pc, #492]	@ (80026c8 <HAL_ADC_ConfigChannel+0x4ac>)
 80024da:	428b      	cmp	r3, r1
 80024dc:	d01d      	beq.n	800251a <HAL_ADC_ConfigChannel+0x2fe>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	497a      	ldr	r1, [pc, #488]	@ (80026cc <HAL_ADC_ConfigChannel+0x4b0>)
 80024e4:	428b      	cmp	r3, r1
 80024e6:	d016      	beq.n	8002516 <HAL_ADC_ConfigChannel+0x2fa>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4978      	ldr	r1, [pc, #480]	@ (80026d0 <HAL_ADC_ConfigChannel+0x4b4>)
 80024ee:	428b      	cmp	r3, r1
 80024f0:	d00f      	beq.n	8002512 <HAL_ADC_ConfigChannel+0x2f6>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4977      	ldr	r1, [pc, #476]	@ (80026d4 <HAL_ADC_ConfigChannel+0x4b8>)
 80024f8:	428b      	cmp	r3, r1
 80024fa:	d008      	beq.n	800250e <HAL_ADC_ConfigChannel+0x2f2>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4975      	ldr	r1, [pc, #468]	@ (80026d8 <HAL_ADC_ConfigChannel+0x4bc>)
 8002502:	428b      	cmp	r3, r1
 8002504:	d101      	bne.n	800250a <HAL_ADC_ConfigChannel+0x2ee>
 8002506:	4b75      	ldr	r3, [pc, #468]	@ (80026dc <HAL_ADC_ConfigChannel+0x4c0>)
 8002508:	e05a      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x3a4>
 800250a:	2300      	movs	r3, #0
 800250c:	e058      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x3a4>
 800250e:	4b74      	ldr	r3, [pc, #464]	@ (80026e0 <HAL_ADC_ConfigChannel+0x4c4>)
 8002510:	e056      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x3a4>
 8002512:	4b74      	ldr	r3, [pc, #464]	@ (80026e4 <HAL_ADC_ConfigChannel+0x4c8>)
 8002514:	e054      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x3a4>
 8002516:	4b6e      	ldr	r3, [pc, #440]	@ (80026d0 <HAL_ADC_ConfigChannel+0x4b4>)
 8002518:	e052      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x3a4>
 800251a:	4b6c      	ldr	r3, [pc, #432]	@ (80026cc <HAL_ADC_ConfigChannel+0x4b0>)
 800251c:	e050      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x3a4>
 800251e:	4b72      	ldr	r3, [pc, #456]	@ (80026e8 <HAL_ADC_ConfigChannel+0x4cc>)
 8002520:	e04e      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x3a4>
 8002522:	4b72      	ldr	r3, [pc, #456]	@ (80026ec <HAL_ADC_ConfigChannel+0x4d0>)
 8002524:	e04c      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x3a4>
 8002526:	4b72      	ldr	r3, [pc, #456]	@ (80026f0 <HAL_ADC_ConfigChannel+0x4d4>)
 8002528:	e04a      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x3a4>
 800252a:	4b72      	ldr	r3, [pc, #456]	@ (80026f4 <HAL_ADC_ConfigChannel+0x4d8>)
 800252c:	e048      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x3a4>
 800252e:	2301      	movs	r3, #1
 8002530:	e046      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x3a4>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4970      	ldr	r1, [pc, #448]	@ (80026f8 <HAL_ADC_ConfigChannel+0x4dc>)
 8002538:	428b      	cmp	r3, r1
 800253a:	d140      	bne.n	80025be <HAL_ADC_ConfigChannel+0x3a2>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	495c      	ldr	r1, [pc, #368]	@ (80026b4 <HAL_ADC_ConfigChannel+0x498>)
 8002542:	428b      	cmp	r3, r1
 8002544:	d039      	beq.n	80025ba <HAL_ADC_ConfigChannel+0x39e>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	495b      	ldr	r1, [pc, #364]	@ (80026b8 <HAL_ADC_ConfigChannel+0x49c>)
 800254c:	428b      	cmp	r3, r1
 800254e:	d032      	beq.n	80025b6 <HAL_ADC_ConfigChannel+0x39a>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4959      	ldr	r1, [pc, #356]	@ (80026bc <HAL_ADC_ConfigChannel+0x4a0>)
 8002556:	428b      	cmp	r3, r1
 8002558:	d02b      	beq.n	80025b2 <HAL_ADC_ConfigChannel+0x396>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4958      	ldr	r1, [pc, #352]	@ (80026c0 <HAL_ADC_ConfigChannel+0x4a4>)
 8002560:	428b      	cmp	r3, r1
 8002562:	d024      	beq.n	80025ae <HAL_ADC_ConfigChannel+0x392>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4956      	ldr	r1, [pc, #344]	@ (80026c4 <HAL_ADC_ConfigChannel+0x4a8>)
 800256a:	428b      	cmp	r3, r1
 800256c:	d01d      	beq.n	80025aa <HAL_ADC_ConfigChannel+0x38e>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4955      	ldr	r1, [pc, #340]	@ (80026c8 <HAL_ADC_ConfigChannel+0x4ac>)
 8002574:	428b      	cmp	r3, r1
 8002576:	d016      	beq.n	80025a6 <HAL_ADC_ConfigChannel+0x38a>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4953      	ldr	r1, [pc, #332]	@ (80026cc <HAL_ADC_ConfigChannel+0x4b0>)
 800257e:	428b      	cmp	r3, r1
 8002580:	d00f      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0x386>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4952      	ldr	r1, [pc, #328]	@ (80026d0 <HAL_ADC_ConfigChannel+0x4b4>)
 8002588:	428b      	cmp	r3, r1
 800258a:	d008      	beq.n	800259e <HAL_ADC_ConfigChannel+0x382>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4951      	ldr	r1, [pc, #324]	@ (80026d8 <HAL_ADC_ConfigChannel+0x4bc>)
 8002592:	428b      	cmp	r3, r1
 8002594:	d101      	bne.n	800259a <HAL_ADC_ConfigChannel+0x37e>
 8002596:	4b51      	ldr	r3, [pc, #324]	@ (80026dc <HAL_ADC_ConfigChannel+0x4c0>)
 8002598:	e012      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x3a4>
 800259a:	2300      	movs	r3, #0
 800259c:	e010      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x3a4>
 800259e:	4b51      	ldr	r3, [pc, #324]	@ (80026e4 <HAL_ADC_ConfigChannel+0x4c8>)
 80025a0:	e00e      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x3a4>
 80025a2:	4b4b      	ldr	r3, [pc, #300]	@ (80026d0 <HAL_ADC_ConfigChannel+0x4b4>)
 80025a4:	e00c      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x3a4>
 80025a6:	4b49      	ldr	r3, [pc, #292]	@ (80026cc <HAL_ADC_ConfigChannel+0x4b0>)
 80025a8:	e00a      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x3a4>
 80025aa:	4b4f      	ldr	r3, [pc, #316]	@ (80026e8 <HAL_ADC_ConfigChannel+0x4cc>)
 80025ac:	e008      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x3a4>
 80025ae:	4b4f      	ldr	r3, [pc, #316]	@ (80026ec <HAL_ADC_ConfigChannel+0x4d0>)
 80025b0:	e006      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x3a4>
 80025b2:	4b4f      	ldr	r3, [pc, #316]	@ (80026f0 <HAL_ADC_ConfigChannel+0x4d4>)
 80025b4:	e004      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x3a4>
 80025b6:	4b4f      	ldr	r3, [pc, #316]	@ (80026f4 <HAL_ADC_ConfigChannel+0x4d8>)
 80025b8:	e002      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x3a4>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x3a4>
 80025be:	2300      	movs	r3, #0
 80025c0:	4619      	mov	r1, r3
 80025c2:	4610      	mov	r0, r2
 80025c4:	f7fe ff3e 	bl	8001444 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f280 80fc 	bge.w	80027ca <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a36      	ldr	r2, [pc, #216]	@ (80026b0 <HAL_ADC_ConfigChannel+0x494>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d004      	beq.n	80025e6 <HAL_ADC_ConfigChannel+0x3ca>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a45      	ldr	r2, [pc, #276]	@ (80026f8 <HAL_ADC_ConfigChannel+0x4dc>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d101      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x3ce>
 80025e6:	4b45      	ldr	r3, [pc, #276]	@ (80026fc <HAL_ADC_ConfigChannel+0x4e0>)
 80025e8:	e000      	b.n	80025ec <HAL_ADC_ConfigChannel+0x3d0>
 80025ea:	4b45      	ldr	r3, [pc, #276]	@ (8002700 <HAL_ADC_ConfigChannel+0x4e4>)
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe ff1b 	bl	8001428 <LL_ADC_GetCommonPathInternalCh>
 80025f2:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a2d      	ldr	r2, [pc, #180]	@ (80026b0 <HAL_ADC_ConfigChannel+0x494>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d004      	beq.n	8002608 <HAL_ADC_ConfigChannel+0x3ec>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a3d      	ldr	r2, [pc, #244]	@ (80026f8 <HAL_ADC_ConfigChannel+0x4dc>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d10e      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x40a>
 8002608:	4829      	ldr	r0, [pc, #164]	@ (80026b0 <HAL_ADC_ConfigChannel+0x494>)
 800260a:	f7ff f8e9 	bl	80017e0 <LL_ADC_IsEnabled>
 800260e:	4604      	mov	r4, r0
 8002610:	4839      	ldr	r0, [pc, #228]	@ (80026f8 <HAL_ADC_ConfigChannel+0x4dc>)
 8002612:	f7ff f8e5 	bl	80017e0 <LL_ADC_IsEnabled>
 8002616:	4603      	mov	r3, r0
 8002618:	4323      	orrs	r3, r4
 800261a:	2b00      	cmp	r3, #0
 800261c:	bf0c      	ite	eq
 800261e:	2301      	moveq	r3, #1
 8002620:	2300      	movne	r3, #0
 8002622:	b2db      	uxtb	r3, r3
 8002624:	e008      	b.n	8002638 <HAL_ADC_ConfigChannel+0x41c>
 8002626:	4837      	ldr	r0, [pc, #220]	@ (8002704 <HAL_ADC_ConfigChannel+0x4e8>)
 8002628:	f7ff f8da 	bl	80017e0 <LL_ADC_IsEnabled>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	bf0c      	ite	eq
 8002632:	2301      	moveq	r3, #1
 8002634:	2300      	movne	r3, #0
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80b3 	beq.w	80027a4 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a31      	ldr	r2, [pc, #196]	@ (8002708 <HAL_ADC_ConfigChannel+0x4ec>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d165      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x4f8>
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d160      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a2b      	ldr	r2, [pc, #172]	@ (8002704 <HAL_ADC_ConfigChannel+0x4e8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	f040 80b6 	bne.w	80027ca <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a13      	ldr	r2, [pc, #76]	@ (80026b0 <HAL_ADC_ConfigChannel+0x494>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d004      	beq.n	8002672 <HAL_ADC_ConfigChannel+0x456>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a22      	ldr	r2, [pc, #136]	@ (80026f8 <HAL_ADC_ConfigChannel+0x4dc>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d101      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x45a>
 8002672:	4a22      	ldr	r2, [pc, #136]	@ (80026fc <HAL_ADC_ConfigChannel+0x4e0>)
 8002674:	e000      	b.n	8002678 <HAL_ADC_ConfigChannel+0x45c>
 8002676:	4a22      	ldr	r2, [pc, #136]	@ (8002700 <HAL_ADC_ConfigChannel+0x4e4>)
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800267e:	4619      	mov	r1, r3
 8002680:	4610      	mov	r0, r2
 8002682:	f7fe febe 	bl	8001402 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002686:	4b21      	ldr	r3, [pc, #132]	@ (800270c <HAL_ADC_ConfigChannel+0x4f0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	099b      	lsrs	r3, r3, #6
 800268c:	4a20      	ldr	r2, [pc, #128]	@ (8002710 <HAL_ADC_ConfigChannel+0x4f4>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	099b      	lsrs	r3, r3, #6
 8002694:	3301      	adds	r3, #1
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800269a:	e002      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	3b01      	subs	r3, #1
 80026a0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1f9      	bne.n	800269c <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026a8:	e08f      	b.n	80027ca <HAL_ADC_ConfigChannel+0x5ae>
 80026aa:	bf00      	nop
 80026ac:	47ff0000 	.word	0x47ff0000
 80026b0:	40022000 	.word	0x40022000
 80026b4:	04300002 	.word	0x04300002
 80026b8:	08600004 	.word	0x08600004
 80026bc:	0c900008 	.word	0x0c900008
 80026c0:	10c00010 	.word	0x10c00010
 80026c4:	14f00020 	.word	0x14f00020
 80026c8:	2a000400 	.word	0x2a000400
 80026cc:	2e300800 	.word	0x2e300800
 80026d0:	32601000 	.word	0x32601000
 80026d4:	43210000 	.word	0x43210000
 80026d8:	4b840000 	.word	0x4b840000
 80026dc:	4fb80000 	.word	0x4fb80000
 80026e0:	47520000 	.word	0x47520000
 80026e4:	36902000 	.word	0x36902000
 80026e8:	25b00200 	.word	0x25b00200
 80026ec:	21800100 	.word	0x21800100
 80026f0:	1d500080 	.word	0x1d500080
 80026f4:	19200040 	.word	0x19200040
 80026f8:	40022100 	.word	0x40022100
 80026fc:	40022300 	.word	0x40022300
 8002700:	58026300 	.word	0x58026300
 8002704:	58026000 	.word	0x58026000
 8002708:	cb840000 	.word	0xcb840000
 800270c:	24000000 	.word	0x24000000
 8002710:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a31      	ldr	r2, [pc, #196]	@ (80027e0 <HAL_ADC_ConfigChannel+0x5c4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d11e      	bne.n	800275c <HAL_ADC_ConfigChannel+0x540>
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d119      	bne.n	800275c <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a2d      	ldr	r2, [pc, #180]	@ (80027e4 <HAL_ADC_ConfigChannel+0x5c8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d14b      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a2c      	ldr	r2, [pc, #176]	@ (80027e8 <HAL_ADC_ConfigChannel+0x5cc>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d004      	beq.n	8002746 <HAL_ADC_ConfigChannel+0x52a>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a2a      	ldr	r2, [pc, #168]	@ (80027ec <HAL_ADC_ConfigChannel+0x5d0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d101      	bne.n	800274a <HAL_ADC_ConfigChannel+0x52e>
 8002746:	4a2a      	ldr	r2, [pc, #168]	@ (80027f0 <HAL_ADC_ConfigChannel+0x5d4>)
 8002748:	e000      	b.n	800274c <HAL_ADC_ConfigChannel+0x530>
 800274a:	4a2a      	ldr	r2, [pc, #168]	@ (80027f4 <HAL_ADC_ConfigChannel+0x5d8>)
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002752:	4619      	mov	r1, r3
 8002754:	4610      	mov	r0, r2
 8002756:	f7fe fe54 	bl	8001402 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800275a:	e036      	b.n	80027ca <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a25      	ldr	r2, [pc, #148]	@ (80027f8 <HAL_ADC_ConfigChannel+0x5dc>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d131      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x5ae>
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d12c      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a1b      	ldr	r2, [pc, #108]	@ (80027e4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d127      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a1a      	ldr	r2, [pc, #104]	@ (80027e8 <HAL_ADC_ConfigChannel+0x5cc>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d004      	beq.n	800278e <HAL_ADC_ConfigChannel+0x572>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a18      	ldr	r2, [pc, #96]	@ (80027ec <HAL_ADC_ConfigChannel+0x5d0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d101      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x576>
 800278e:	4a18      	ldr	r2, [pc, #96]	@ (80027f0 <HAL_ADC_ConfigChannel+0x5d4>)
 8002790:	e000      	b.n	8002794 <HAL_ADC_ConfigChannel+0x578>
 8002792:	4a18      	ldr	r2, [pc, #96]	@ (80027f4 <HAL_ADC_ConfigChannel+0x5d8>)
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800279a:	4619      	mov	r1, r3
 800279c:	4610      	mov	r0, r2
 800279e:	f7fe fe30 	bl	8001402 <LL_ADC_SetCommonPathInternalCh>
 80027a2:	e012      	b.n	80027ca <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027a8:	f043 0220 	orr.w	r2, r3, #32
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80027b6:	e008      	b.n	80027ca <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027bc:	f043 0220 	orr.w	r2, r3, #32
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80027d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3734      	adds	r7, #52	@ 0x34
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd90      	pop	{r4, r7, pc}
 80027de:	bf00      	nop
 80027e0:	c7520000 	.word	0xc7520000
 80027e4:	58026000 	.word	0x58026000
 80027e8:	40022000 	.word	0x40022000
 80027ec:	40022100 	.word	0x40022100
 80027f0:	40022300 	.word	0x40022300
 80027f4:	58026300 	.word	0x58026300
 80027f8:	cfb80000 	.word	0xcfb80000

080027fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe ffe9 	bl	80017e0 <LL_ADC_IsEnabled>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d16e      	bne.n	80028f2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	4b38      	ldr	r3, [pc, #224]	@ (80028fc <ADC_Enable+0x100>)
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00d      	beq.n	800283e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002826:	f043 0210 	orr.w	r2, r3, #16
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002832:	f043 0201 	orr.w	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e05a      	b.n	80028f4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe ffa4 	bl	8001790 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002848:	f7fe fd8c 	bl	8001364 <HAL_GetTick>
 800284c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a2b      	ldr	r2, [pc, #172]	@ (8002900 <ADC_Enable+0x104>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d004      	beq.n	8002862 <ADC_Enable+0x66>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a29      	ldr	r2, [pc, #164]	@ (8002904 <ADC_Enable+0x108>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d101      	bne.n	8002866 <ADC_Enable+0x6a>
 8002862:	4b29      	ldr	r3, [pc, #164]	@ (8002908 <ADC_Enable+0x10c>)
 8002864:	e000      	b.n	8002868 <ADC_Enable+0x6c>
 8002866:	4b29      	ldr	r3, [pc, #164]	@ (800290c <ADC_Enable+0x110>)
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe ff27 	bl	80016bc <LL_ADC_GetMultimode>
 800286e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a23      	ldr	r2, [pc, #140]	@ (8002904 <ADC_Enable+0x108>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d002      	beq.n	8002880 <ADC_Enable+0x84>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	e000      	b.n	8002882 <ADC_Enable+0x86>
 8002880:	4b1f      	ldr	r3, [pc, #124]	@ (8002900 <ADC_Enable+0x104>)
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	4293      	cmp	r3, r2
 8002888:	d02c      	beq.n	80028e4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d130      	bne.n	80028f2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002890:	e028      	b.n	80028e4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe ffa2 	bl	80017e0 <LL_ADC_IsEnabled>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d104      	bne.n	80028ac <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe ff72 	bl	8001790 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028ac:	f7fe fd5a 	bl	8001364 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d914      	bls.n	80028e4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d00d      	beq.n	80028e4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028cc:	f043 0210 	orr.w	r2, r3, #16
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d8:	f043 0201 	orr.w	r2, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e007      	b.n	80028f4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d1cf      	bne.n	8002892 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	8000003f 	.word	0x8000003f
 8002900:	40022000 	.word	0x40022000
 8002904:	40022100 	.word	0x40022100
 8002908:	40022300 	.word	0x40022300
 800290c:	58026300 	.word	0x58026300

08002910 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f7fe ff72 	bl	8001806 <LL_ADC_IsDisableOngoing>
 8002922:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe ff59 	bl	80017e0 <LL_ADC_IsEnabled>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d047      	beq.n	80029c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d144      	bne.n	80029c4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 030d 	and.w	r3, r3, #13
 8002944:	2b01      	cmp	r3, #1
 8002946:	d10c      	bne.n	8002962 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f7fe ff33 	bl	80017b8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2203      	movs	r2, #3
 8002958:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800295a:	f7fe fd03 	bl	8001364 <HAL_GetTick>
 800295e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002960:	e029      	b.n	80029b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002966:	f043 0210 	orr.w	r2, r3, #16
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002972:	f043 0201 	orr.w	r2, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e023      	b.n	80029c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800297e:	f7fe fcf1 	bl	8001364 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d914      	bls.n	80029b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00d      	beq.n	80029b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299e:	f043 0210 	orr.w	r2, r3, #16
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029aa:	f043 0201 	orr.w	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e007      	b.n	80029c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1dc      	bne.n	800297e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b084      	sub	sp, #16
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029da:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d14b      	bne.n	8002a80 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d021      	beq.n	8002a46 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe fda3 	bl	8001552 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d032      	beq.n	8002a78 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d12b      	bne.n	8002a78 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d11f      	bne.n	8002a78 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3c:	f043 0201 	orr.w	r2, r3, #1
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a44:	e018      	b.n	8002a78 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d111      	bne.n	8002a78 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d105      	bne.n	8002a78 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a70:	f043 0201 	orr.w	r2, r3, #1
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f7ff fbb1 	bl	80021e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a7e:	e00e      	b.n	8002a9e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a84:	f003 0310 	and.w	r3, r3, #16
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f7ff fbbb 	bl	8002208 <HAL_ADC_ErrorCallback>
}
 8002a92:	e004      	b.n	8002a9e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	4798      	blx	r3
}
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f7fd fd87 	bl	80005c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002aba:	bf00      	nop
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b084      	sub	sp, #16
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae0:	f043 0204 	orr.w	r2, r3, #4
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f7ff fb8d 	bl	8002208 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a7a      	ldr	r2, [pc, #488]	@ (8002cf0 <ADC_ConfigureBoostMode+0x1f8>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d004      	beq.n	8002b14 <ADC_ConfigureBoostMode+0x1c>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a79      	ldr	r2, [pc, #484]	@ (8002cf4 <ADC_ConfigureBoostMode+0x1fc>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d109      	bne.n	8002b28 <ADC_ConfigureBoostMode+0x30>
 8002b14:	4b78      	ldr	r3, [pc, #480]	@ (8002cf8 <ADC_ConfigureBoostMode+0x200>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bf14      	ite	ne
 8002b20:	2301      	movne	r3, #1
 8002b22:	2300      	moveq	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	e008      	b.n	8002b3a <ADC_ConfigureBoostMode+0x42>
 8002b28:	4b74      	ldr	r3, [pc, #464]	@ (8002cfc <ADC_ConfigureBoostMode+0x204>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	bf14      	ite	ne
 8002b34:	2301      	movne	r3, #1
 8002b36:	2300      	moveq	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01c      	beq.n	8002b78 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002b3e:	f003 ff07 	bl	8006950 <HAL_RCC_GetHCLKFreq>
 8002b42:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b4c:	d010      	beq.n	8002b70 <ADC_ConfigureBoostMode+0x78>
 8002b4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b52:	d873      	bhi.n	8002c3c <ADC_ConfigureBoostMode+0x144>
 8002b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b58:	d002      	beq.n	8002b60 <ADC_ConfigureBoostMode+0x68>
 8002b5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b5e:	d16d      	bne.n	8002c3c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	0c1b      	lsrs	r3, r3, #16
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6c:	60fb      	str	r3, [r7, #12]
        break;
 8002b6e:	e068      	b.n	8002c42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	089b      	lsrs	r3, r3, #2
 8002b74:	60fb      	str	r3, [r7, #12]
        break;
 8002b76:	e064      	b.n	8002c42 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002b78:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002b7c:	f04f 0100 	mov.w	r1, #0
 8002b80:	f005 f94c 	bl	8007e1c <HAL_RCCEx_GetPeriphCLKFreq>
 8002b84:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002b8e:	d051      	beq.n	8002c34 <ADC_ConfigureBoostMode+0x13c>
 8002b90:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002b94:	d854      	bhi.n	8002c40 <ADC_ConfigureBoostMode+0x148>
 8002b96:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002b9a:	d047      	beq.n	8002c2c <ADC_ConfigureBoostMode+0x134>
 8002b9c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002ba0:	d84e      	bhi.n	8002c40 <ADC_ConfigureBoostMode+0x148>
 8002ba2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002ba6:	d03d      	beq.n	8002c24 <ADC_ConfigureBoostMode+0x12c>
 8002ba8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002bac:	d848      	bhi.n	8002c40 <ADC_ConfigureBoostMode+0x148>
 8002bae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bb2:	d033      	beq.n	8002c1c <ADC_ConfigureBoostMode+0x124>
 8002bb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bb8:	d842      	bhi.n	8002c40 <ADC_ConfigureBoostMode+0x148>
 8002bba:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002bbe:	d029      	beq.n	8002c14 <ADC_ConfigureBoostMode+0x11c>
 8002bc0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002bc4:	d83c      	bhi.n	8002c40 <ADC_ConfigureBoostMode+0x148>
 8002bc6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002bca:	d01a      	beq.n	8002c02 <ADC_ConfigureBoostMode+0x10a>
 8002bcc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002bd0:	d836      	bhi.n	8002c40 <ADC_ConfigureBoostMode+0x148>
 8002bd2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002bd6:	d014      	beq.n	8002c02 <ADC_ConfigureBoostMode+0x10a>
 8002bd8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002bdc:	d830      	bhi.n	8002c40 <ADC_ConfigureBoostMode+0x148>
 8002bde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002be2:	d00e      	beq.n	8002c02 <ADC_ConfigureBoostMode+0x10a>
 8002be4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002be8:	d82a      	bhi.n	8002c40 <ADC_ConfigureBoostMode+0x148>
 8002bea:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002bee:	d008      	beq.n	8002c02 <ADC_ConfigureBoostMode+0x10a>
 8002bf0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002bf4:	d824      	bhi.n	8002c40 <ADC_ConfigureBoostMode+0x148>
 8002bf6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002bfa:	d002      	beq.n	8002c02 <ADC_ConfigureBoostMode+0x10a>
 8002bfc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002c00:	d11e      	bne.n	8002c40 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	0c9b      	lsrs	r3, r3, #18
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c10:	60fb      	str	r3, [r7, #12]
        break;
 8002c12:	e016      	b.n	8002c42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	091b      	lsrs	r3, r3, #4
 8002c18:	60fb      	str	r3, [r7, #12]
        break;
 8002c1a:	e012      	b.n	8002c42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	60fb      	str	r3, [r7, #12]
        break;
 8002c22:	e00e      	b.n	8002c42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	099b      	lsrs	r3, r3, #6
 8002c28:	60fb      	str	r3, [r7, #12]
        break;
 8002c2a:	e00a      	b.n	8002c42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	09db      	lsrs	r3, r3, #7
 8002c30:	60fb      	str	r3, [r7, #12]
        break;
 8002c32:	e006      	b.n	8002c42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	0a1b      	lsrs	r3, r3, #8
 8002c38:	60fb      	str	r3, [r7, #12]
        break;
 8002c3a:	e002      	b.n	8002c42 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002c3c:	bf00      	nop
 8002c3e:	e000      	b.n	8002c42 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002c40:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002c42:	f7fe fbbf 	bl	80013c4 <HAL_GetREVID>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d815      	bhi.n	8002c7c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4a2b      	ldr	r2, [pc, #172]	@ (8002d00 <ADC_ConfigureBoostMode+0x208>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d908      	bls.n	8002c6a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c66:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002c68:	e03e      	b.n	8002ce8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c78:	609a      	str	r2, [r3, #8]
}
 8002c7a:	e035      	b.n	8002ce8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	085b      	lsrs	r3, r3, #1
 8002c80:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4a1f      	ldr	r2, [pc, #124]	@ (8002d04 <ADC_ConfigureBoostMode+0x20c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d808      	bhi.n	8002c9c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002c98:	609a      	str	r2, [r3, #8]
}
 8002c9a:	e025      	b.n	8002ce8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4a1a      	ldr	r2, [pc, #104]	@ (8002d08 <ADC_ConfigureBoostMode+0x210>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d80a      	bhi.n	8002cba <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cb6:	609a      	str	r2, [r3, #8]
}
 8002cb8:	e016      	b.n	8002ce8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4a13      	ldr	r2, [pc, #76]	@ (8002d0c <ADC_ConfigureBoostMode+0x214>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d80a      	bhi.n	8002cd8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cd4:	609a      	str	r2, [r3, #8]
}
 8002cd6:	e007      	b.n	8002ce8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002ce6:	609a      	str	r2, [r3, #8]
}
 8002ce8:	bf00      	nop
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40022000 	.word	0x40022000
 8002cf4:	40022100 	.word	0x40022100
 8002cf8:	40022300 	.word	0x40022300
 8002cfc:	58026300 	.word	0x58026300
 8002d00:	01312d00 	.word	0x01312d00
 8002d04:	005f5e10 	.word	0x005f5e10
 8002d08:	00bebc20 	.word	0x00bebc20
 8002d0c:	017d7840 	.word	0x017d7840

08002d10 <LL_ADC_IsEnabled>:
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <LL_ADC_IsEnabled+0x18>
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <LL_ADC_IsEnabled+0x1a>
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
	...

08002d38 <LL_ADC_StartCalibration>:
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	4b09      	ldr	r3, [pc, #36]	@ (8002d70 <LL_ADC_StartCalibration+0x38>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	609a      	str	r2, [r3, #8]
}
 8002d64:	bf00      	nop
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	3ffeffc0 	.word	0x3ffeffc0

08002d74 <LL_ADC_IsCalibrationOnGoing>:
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d88:	d101      	bne.n	8002d8e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <LL_ADC_REG_IsConversionOngoing>:
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d101      	bne.n	8002db4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
	...

08002dc4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_ADCEx_Calibration_Start+0x1e>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e04c      	b.n	8002e7c <HAL_ADCEx_Calibration_Start+0xb8>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f7ff fd90 	bl	8002910 <ADC_Disable>
 8002df0:	4603      	mov	r3, r0
 8002df2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002df4:	7dfb      	ldrb	r3, [r7, #23]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d135      	bne.n	8002e66 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002dfe:	4b21      	ldr	r3, [pc, #132]	@ (8002e84 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	f043 0202 	orr.w	r2, r3, #2
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff ff90 	bl	8002d38 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e18:	e014      	b.n	8002e44 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4a19      	ldr	r2, [pc, #100]	@ (8002e88 <HAL_ADCEx_Calibration_Start+0xc4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d30d      	bcc.n	8002e44 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e2c:	f023 0312 	bic.w	r3, r3, #18
 8002e30:	f043 0210 	orr.w	r2, r3, #16
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e01b      	b.n	8002e7c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff93 	bl	8002d74 <LL_ADC_IsCalibrationOnGoing>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1e2      	bne.n	8002e1a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e58:	f023 0303 	bic.w	r3, r3, #3
 8002e5c:	f043 0201 	orr.w	r2, r3, #1
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e64:	e005      	b.n	8002e72 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6a:	f043 0210 	orr.w	r2, r3, #16
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	ffffeefd 	.word	0xffffeefd
 8002e88:	25c3f800 	.word	0x25c3f800

08002e8c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b09f      	sub	sp, #124	@ 0x7c
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e0be      	b.n	800308c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002f16:	2300      	movs	r3, #0
 8002f18:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a5c      	ldr	r2, [pc, #368]	@ (8003094 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d102      	bne.n	8002f2e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f28:	4b5b      	ldr	r3, [pc, #364]	@ (8003098 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	e001      	b.n	8002f32 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10b      	bne.n	8002f50 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3c:	f043 0220 	orr.w	r2, r3, #32
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e09d      	b.n	800308c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff ff22 	bl	8002d9c <LL_ADC_REG_IsConversionOngoing>
 8002f58:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff ff1c 	bl	8002d9c <LL_ADC_REG_IsConversionOngoing>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d17f      	bne.n	800306a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002f6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d17c      	bne.n	800306a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a47      	ldr	r2, [pc, #284]	@ (8003094 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d004      	beq.n	8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a46      	ldr	r2, [pc, #280]	@ (8003098 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d101      	bne.n	8002f88 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002f84:	4b45      	ldr	r3, [pc, #276]	@ (800309c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002f86:	e000      	b.n	8002f8a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002f88:	4b45      	ldr	r3, [pc, #276]	@ (80030a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002f8a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d039      	beq.n	8003008 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002f94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fa4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a3a      	ldr	r2, [pc, #232]	@ (8003094 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d004      	beq.n	8002fba <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a38      	ldr	r2, [pc, #224]	@ (8003098 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002fba:	4836      	ldr	r0, [pc, #216]	@ (8003094 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002fbc:	f7ff fea8 	bl	8002d10 <LL_ADC_IsEnabled>
 8002fc0:	4604      	mov	r4, r0
 8002fc2:	4835      	ldr	r0, [pc, #212]	@ (8003098 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002fc4:	f7ff fea4 	bl	8002d10 <LL_ADC_IsEnabled>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	4323      	orrs	r3, r4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	bf0c      	ite	eq
 8002fd0:	2301      	moveq	r3, #1
 8002fd2:	2300      	movne	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	e008      	b.n	8002fea <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002fd8:	4832      	ldr	r0, [pc, #200]	@ (80030a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002fda:	f7ff fe99 	bl	8002d10 <LL_ADC_IsEnabled>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	bf0c      	ite	eq
 8002fe4:	2301      	moveq	r3, #1
 8002fe6:	2300      	movne	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d047      	beq.n	800307e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002fee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80030a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	6811      	ldr	r1, [r2, #0]
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	6892      	ldr	r2, [r2, #8]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	431a      	orrs	r2, r3
 8003002:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003004:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003006:	e03a      	b.n	800307e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003008:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003010:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003012:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1e      	ldr	r2, [pc, #120]	@ (8003094 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d004      	beq.n	8003028 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a1d      	ldr	r2, [pc, #116]	@ (8003098 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d10e      	bne.n	8003046 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003028:	481a      	ldr	r0, [pc, #104]	@ (8003094 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800302a:	f7ff fe71 	bl	8002d10 <LL_ADC_IsEnabled>
 800302e:	4604      	mov	r4, r0
 8003030:	4819      	ldr	r0, [pc, #100]	@ (8003098 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003032:	f7ff fe6d 	bl	8002d10 <LL_ADC_IsEnabled>
 8003036:	4603      	mov	r3, r0
 8003038:	4323      	orrs	r3, r4
 800303a:	2b00      	cmp	r3, #0
 800303c:	bf0c      	ite	eq
 800303e:	2301      	moveq	r3, #1
 8003040:	2300      	movne	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	e008      	b.n	8003058 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003046:	4817      	ldr	r0, [pc, #92]	@ (80030a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003048:	f7ff fe62 	bl	8002d10 <LL_ADC_IsEnabled>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	bf0c      	ite	eq
 8003052:	2301      	moveq	r3, #1
 8003054:	2300      	movne	r3, #0
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d010      	beq.n	800307e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800305c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	4b11      	ldr	r3, [pc, #68]	@ (80030a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003062:	4013      	ands	r3, r2
 8003064:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003066:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003068:	e009      	b.n	800307e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800306e:	f043 0220 	orr.w	r2, r3, #32
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800307c:	e000      	b.n	8003080 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800307e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003088:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800308c:	4618      	mov	r0, r3
 800308e:	377c      	adds	r7, #124	@ 0x7c
 8003090:	46bd      	mov	sp, r7
 8003092:	bd90      	pop	{r4, r7, pc}
 8003094:	40022000 	.word	0x40022000
 8003098:	40022100 	.word	0x40022100
 800309c:	40022300 	.word	0x40022300
 80030a0:	58026300 	.word	0x58026300
 80030a4:	58026000 	.word	0x58026000
 80030a8:	fffff0e0 	.word	0xfffff0e0

080030ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030bc:	4b0b      	ldr	r3, [pc, #44]	@ (80030ec <__NVIC_SetPriorityGrouping+0x40>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030c8:	4013      	ands	r3, r2
 80030ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80030d4:	4b06      	ldr	r3, [pc, #24]	@ (80030f0 <__NVIC_SetPriorityGrouping+0x44>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030da:	4a04      	ldr	r2, [pc, #16]	@ (80030ec <__NVIC_SetPriorityGrouping+0x40>)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	60d3      	str	r3, [r2, #12]
}
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	e000ed00 	.word	0xe000ed00
 80030f0:	05fa0000 	.word	0x05fa0000

080030f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030f8:	4b04      	ldr	r3, [pc, #16]	@ (800310c <__NVIC_GetPriorityGrouping+0x18>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	0a1b      	lsrs	r3, r3, #8
 80030fe:	f003 0307 	and.w	r3, r3, #7
}
 8003102:	4618      	mov	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800311a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800311e:	2b00      	cmp	r3, #0
 8003120:	db0b      	blt.n	800313a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	f003 021f 	and.w	r2, r3, #31
 8003128:	4907      	ldr	r1, [pc, #28]	@ (8003148 <__NVIC_EnableIRQ+0x38>)
 800312a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	2001      	movs	r0, #1
 8003132:	fa00 f202 	lsl.w	r2, r0, r2
 8003136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	e000e100 	.word	0xe000e100

0800314c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	6039      	str	r1, [r7, #0]
 8003156:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003158:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800315c:	2b00      	cmp	r3, #0
 800315e:	db0a      	blt.n	8003176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	b2da      	uxtb	r2, r3
 8003164:	490c      	ldr	r1, [pc, #48]	@ (8003198 <__NVIC_SetPriority+0x4c>)
 8003166:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800316a:	0112      	lsls	r2, r2, #4
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	440b      	add	r3, r1
 8003170:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003174:	e00a      	b.n	800318c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	b2da      	uxtb	r2, r3
 800317a:	4908      	ldr	r1, [pc, #32]	@ (800319c <__NVIC_SetPriority+0x50>)
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	3b04      	subs	r3, #4
 8003184:	0112      	lsls	r2, r2, #4
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	440b      	add	r3, r1
 800318a:	761a      	strb	r2, [r3, #24]
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	e000e100 	.word	0xe000e100
 800319c:	e000ed00 	.word	0xe000ed00

080031a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b089      	sub	sp, #36	@ 0x24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f1c3 0307 	rsb	r3, r3, #7
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	bf28      	it	cs
 80031be:	2304      	movcs	r3, #4
 80031c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	3304      	adds	r3, #4
 80031c6:	2b06      	cmp	r3, #6
 80031c8:	d902      	bls.n	80031d0 <NVIC_EncodePriority+0x30>
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	3b03      	subs	r3, #3
 80031ce:	e000      	b.n	80031d2 <NVIC_EncodePriority+0x32>
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43da      	mvns	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	401a      	ands	r2, r3
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	fa01 f303 	lsl.w	r3, r1, r3
 80031f2:	43d9      	mvns	r1, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f8:	4313      	orrs	r3, r2
         );
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3724      	adds	r7, #36	@ 0x24
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3b01      	subs	r3, #1
 8003214:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003218:	d301      	bcc.n	800321e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800321a:	2301      	movs	r3, #1
 800321c:	e00f      	b.n	800323e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800321e:	4a0a      	ldr	r2, [pc, #40]	@ (8003248 <SysTick_Config+0x40>)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3b01      	subs	r3, #1
 8003224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003226:	210f      	movs	r1, #15
 8003228:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800322c:	f7ff ff8e 	bl	800314c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003230:	4b05      	ldr	r3, [pc, #20]	@ (8003248 <SysTick_Config+0x40>)
 8003232:	2200      	movs	r2, #0
 8003234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003236:	4b04      	ldr	r3, [pc, #16]	@ (8003248 <SysTick_Config+0x40>)
 8003238:	2207      	movs	r2, #7
 800323a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	e000e010 	.word	0xe000e010

0800324c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff ff29 	bl	80030ac <__NVIC_SetPriorityGrouping>
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b086      	sub	sp, #24
 8003266:	af00      	add	r7, sp, #0
 8003268:	4603      	mov	r3, r0
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	607a      	str	r2, [r7, #4]
 800326e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003270:	f7ff ff40 	bl	80030f4 <__NVIC_GetPriorityGrouping>
 8003274:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	6978      	ldr	r0, [r7, #20]
 800327c:	f7ff ff90 	bl	80031a0 <NVIC_EncodePriority>
 8003280:	4602      	mov	r2, r0
 8003282:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003286:	4611      	mov	r1, r2
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff ff5f 	bl	800314c <__NVIC_SetPriority>
}
 800328e:	bf00      	nop
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	4603      	mov	r3, r0
 800329e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff ff33 	bl	8003110 <__NVIC_EnableIRQ>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff ffa4 	bl	8003208 <SysTick_Config>
 80032c0:	4603      	mov	r3, r0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80032d0:	f3bf 8f5f 	dmb	sy
}
 80032d4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80032d6:	4b07      	ldr	r3, [pc, #28]	@ (80032f4 <HAL_MPU_Disable+0x28>)
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032da:	4a06      	ldr	r2, [pc, #24]	@ (80032f4 <HAL_MPU_Disable+0x28>)
 80032dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032e0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80032e2:	4b05      	ldr	r3, [pc, #20]	@ (80032f8 <HAL_MPU_Disable+0x2c>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	605a      	str	r2, [r3, #4]
}
 80032e8:	bf00      	nop
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	e000ed00 	.word	0xe000ed00
 80032f8:	e000ed90 	.word	0xe000ed90

080032fc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003304:	4a0b      	ldr	r2, [pc, #44]	@ (8003334 <HAL_MPU_Enable+0x38>)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f043 0301 	orr.w	r3, r3, #1
 800330c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800330e:	4b0a      	ldr	r3, [pc, #40]	@ (8003338 <HAL_MPU_Enable+0x3c>)
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003312:	4a09      	ldr	r2, [pc, #36]	@ (8003338 <HAL_MPU_Enable+0x3c>)
 8003314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003318:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800331a:	f3bf 8f4f 	dsb	sy
}
 800331e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003320:	f3bf 8f6f 	isb	sy
}
 8003324:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	e000ed90 	.word	0xe000ed90
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	785a      	ldrb	r2, [r3, #1]
 8003348:	4b1b      	ldr	r3, [pc, #108]	@ (80033b8 <HAL_MPU_ConfigRegion+0x7c>)
 800334a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800334c:	4b1a      	ldr	r3, [pc, #104]	@ (80033b8 <HAL_MPU_ConfigRegion+0x7c>)
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	4a19      	ldr	r2, [pc, #100]	@ (80033b8 <HAL_MPU_ConfigRegion+0x7c>)
 8003352:	f023 0301 	bic.w	r3, r3, #1
 8003356:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003358:	4a17      	ldr	r2, [pc, #92]	@ (80033b8 <HAL_MPU_ConfigRegion+0x7c>)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	7b1b      	ldrb	r3, [r3, #12]
 8003364:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	7adb      	ldrb	r3, [r3, #11]
 800336a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800336c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	7a9b      	ldrb	r3, [r3, #10]
 8003372:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003374:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	7b5b      	ldrb	r3, [r3, #13]
 800337a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800337c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	7b9b      	ldrb	r3, [r3, #14]
 8003382:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003384:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	7bdb      	ldrb	r3, [r3, #15]
 800338a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800338c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	7a5b      	ldrb	r3, [r3, #9]
 8003392:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003394:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	7a1b      	ldrb	r3, [r3, #8]
 800339a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800339c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	7812      	ldrb	r2, [r2, #0]
 80033a2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80033a4:	4a04      	ldr	r2, [pc, #16]	@ (80033b8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80033a6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80033a8:	6113      	str	r3, [r2, #16]
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	e000ed90 	.word	0xe000ed90

080033bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80033c4:	f7fd ffce 	bl	8001364 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e316      	b.n	8003a02 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a66      	ldr	r2, [pc, #408]	@ (8003574 <HAL_DMA_Init+0x1b8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d04a      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a65      	ldr	r2, [pc, #404]	@ (8003578 <HAL_DMA_Init+0x1bc>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d045      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a63      	ldr	r2, [pc, #396]	@ (800357c <HAL_DMA_Init+0x1c0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d040      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a62      	ldr	r2, [pc, #392]	@ (8003580 <HAL_DMA_Init+0x1c4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d03b      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a60      	ldr	r2, [pc, #384]	@ (8003584 <HAL_DMA_Init+0x1c8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d036      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a5f      	ldr	r2, [pc, #380]	@ (8003588 <HAL_DMA_Init+0x1cc>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d031      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a5d      	ldr	r2, [pc, #372]	@ (800358c <HAL_DMA_Init+0x1d0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d02c      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a5c      	ldr	r2, [pc, #368]	@ (8003590 <HAL_DMA_Init+0x1d4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d027      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a5a      	ldr	r2, [pc, #360]	@ (8003594 <HAL_DMA_Init+0x1d8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d022      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a59      	ldr	r2, [pc, #356]	@ (8003598 <HAL_DMA_Init+0x1dc>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d01d      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a57      	ldr	r2, [pc, #348]	@ (800359c <HAL_DMA_Init+0x1e0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d018      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a56      	ldr	r2, [pc, #344]	@ (80035a0 <HAL_DMA_Init+0x1e4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d013      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a54      	ldr	r2, [pc, #336]	@ (80035a4 <HAL_DMA_Init+0x1e8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d00e      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a53      	ldr	r2, [pc, #332]	@ (80035a8 <HAL_DMA_Init+0x1ec>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d009      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a51      	ldr	r2, [pc, #324]	@ (80035ac <HAL_DMA_Init+0x1f0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d004      	beq.n	8003474 <HAL_DMA_Init+0xb8>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a50      	ldr	r2, [pc, #320]	@ (80035b0 <HAL_DMA_Init+0x1f4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d101      	bne.n	8003478 <HAL_DMA_Init+0xbc>
 8003474:	2301      	movs	r3, #1
 8003476:	e000      	b.n	800347a <HAL_DMA_Init+0xbe>
 8003478:	2300      	movs	r3, #0
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 813b 	beq.w	80036f6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a37      	ldr	r2, [pc, #220]	@ (8003574 <HAL_DMA_Init+0x1b8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d04a      	beq.n	8003530 <HAL_DMA_Init+0x174>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a36      	ldr	r2, [pc, #216]	@ (8003578 <HAL_DMA_Init+0x1bc>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d045      	beq.n	8003530 <HAL_DMA_Init+0x174>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a34      	ldr	r2, [pc, #208]	@ (800357c <HAL_DMA_Init+0x1c0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d040      	beq.n	8003530 <HAL_DMA_Init+0x174>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a33      	ldr	r2, [pc, #204]	@ (8003580 <HAL_DMA_Init+0x1c4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d03b      	beq.n	8003530 <HAL_DMA_Init+0x174>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a31      	ldr	r2, [pc, #196]	@ (8003584 <HAL_DMA_Init+0x1c8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d036      	beq.n	8003530 <HAL_DMA_Init+0x174>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a30      	ldr	r2, [pc, #192]	@ (8003588 <HAL_DMA_Init+0x1cc>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d031      	beq.n	8003530 <HAL_DMA_Init+0x174>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a2e      	ldr	r2, [pc, #184]	@ (800358c <HAL_DMA_Init+0x1d0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d02c      	beq.n	8003530 <HAL_DMA_Init+0x174>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a2d      	ldr	r2, [pc, #180]	@ (8003590 <HAL_DMA_Init+0x1d4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d027      	beq.n	8003530 <HAL_DMA_Init+0x174>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003594 <HAL_DMA_Init+0x1d8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d022      	beq.n	8003530 <HAL_DMA_Init+0x174>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a2a      	ldr	r2, [pc, #168]	@ (8003598 <HAL_DMA_Init+0x1dc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d01d      	beq.n	8003530 <HAL_DMA_Init+0x174>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a28      	ldr	r2, [pc, #160]	@ (800359c <HAL_DMA_Init+0x1e0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d018      	beq.n	8003530 <HAL_DMA_Init+0x174>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a27      	ldr	r2, [pc, #156]	@ (80035a0 <HAL_DMA_Init+0x1e4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d013      	beq.n	8003530 <HAL_DMA_Init+0x174>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a25      	ldr	r2, [pc, #148]	@ (80035a4 <HAL_DMA_Init+0x1e8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00e      	beq.n	8003530 <HAL_DMA_Init+0x174>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a24      	ldr	r2, [pc, #144]	@ (80035a8 <HAL_DMA_Init+0x1ec>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d009      	beq.n	8003530 <HAL_DMA_Init+0x174>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a22      	ldr	r2, [pc, #136]	@ (80035ac <HAL_DMA_Init+0x1f0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d004      	beq.n	8003530 <HAL_DMA_Init+0x174>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a21      	ldr	r2, [pc, #132]	@ (80035b0 <HAL_DMA_Init+0x1f4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d108      	bne.n	8003542 <HAL_DMA_Init+0x186>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0201 	bic.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	e007      	b.n	8003552 <HAL_DMA_Init+0x196>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003552:	e02f      	b.n	80035b4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003554:	f7fd ff06 	bl	8001364 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b05      	cmp	r3, #5
 8003560:	d928      	bls.n	80035b4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2220      	movs	r2, #32
 8003566:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2203      	movs	r2, #3
 800356c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e246      	b.n	8003a02 <HAL_DMA_Init+0x646>
 8003574:	40020010 	.word	0x40020010
 8003578:	40020028 	.word	0x40020028
 800357c:	40020040 	.word	0x40020040
 8003580:	40020058 	.word	0x40020058
 8003584:	40020070 	.word	0x40020070
 8003588:	40020088 	.word	0x40020088
 800358c:	400200a0 	.word	0x400200a0
 8003590:	400200b8 	.word	0x400200b8
 8003594:	40020410 	.word	0x40020410
 8003598:	40020428 	.word	0x40020428
 800359c:	40020440 	.word	0x40020440
 80035a0:	40020458 	.word	0x40020458
 80035a4:	40020470 	.word	0x40020470
 80035a8:	40020488 	.word	0x40020488
 80035ac:	400204a0 	.word	0x400204a0
 80035b0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1c8      	bne.n	8003554 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4b83      	ldr	r3, [pc, #524]	@ (80037dc <HAL_DMA_Init+0x420>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80035da:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035f2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003604:	2b04      	cmp	r3, #4
 8003606:	d107      	bne.n	8003618 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003610:	4313      	orrs	r3, r2
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003618:	4b71      	ldr	r3, [pc, #452]	@ (80037e0 <HAL_DMA_Init+0x424>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	4b71      	ldr	r3, [pc, #452]	@ (80037e4 <HAL_DMA_Init+0x428>)
 800361e:	4013      	ands	r3, r2
 8003620:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003624:	d328      	bcc.n	8003678 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b28      	cmp	r3, #40	@ 0x28
 800362c:	d903      	bls.n	8003636 <HAL_DMA_Init+0x27a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b2e      	cmp	r3, #46	@ 0x2e
 8003634:	d917      	bls.n	8003666 <HAL_DMA_Init+0x2aa>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b3e      	cmp	r3, #62	@ 0x3e
 800363c:	d903      	bls.n	8003646 <HAL_DMA_Init+0x28a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b42      	cmp	r3, #66	@ 0x42
 8003644:	d90f      	bls.n	8003666 <HAL_DMA_Init+0x2aa>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b46      	cmp	r3, #70	@ 0x46
 800364c:	d903      	bls.n	8003656 <HAL_DMA_Init+0x29a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b48      	cmp	r3, #72	@ 0x48
 8003654:	d907      	bls.n	8003666 <HAL_DMA_Init+0x2aa>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b4e      	cmp	r3, #78	@ 0x4e
 800365c:	d905      	bls.n	800366a <HAL_DMA_Init+0x2ae>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b52      	cmp	r3, #82	@ 0x52
 8003664:	d801      	bhi.n	800366a <HAL_DMA_Init+0x2ae>
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <HAL_DMA_Init+0x2b0>
 800366a:	2300      	movs	r3, #0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003676:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f023 0307 	bic.w	r3, r3, #7
 800368e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	4313      	orrs	r3, r2
 8003698:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d117      	bne.n	80036d2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00e      	beq.n	80036d2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f001 fdcf 	bl	8005258 <DMA_CheckFifoParam>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2240      	movs	r2, #64	@ 0x40
 80036c4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e197      	b.n	8003a02 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f001 fd0a 	bl	80050f4 <DMA_CalcBaseAndBitshift>
 80036e0:	4603      	mov	r3, r0
 80036e2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e8:	f003 031f 	and.w	r3, r3, #31
 80036ec:	223f      	movs	r2, #63	@ 0x3f
 80036ee:	409a      	lsls	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	e0cd      	b.n	8003892 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a3b      	ldr	r2, [pc, #236]	@ (80037e8 <HAL_DMA_Init+0x42c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d022      	beq.n	8003746 <HAL_DMA_Init+0x38a>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a39      	ldr	r2, [pc, #228]	@ (80037ec <HAL_DMA_Init+0x430>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d01d      	beq.n	8003746 <HAL_DMA_Init+0x38a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a38      	ldr	r2, [pc, #224]	@ (80037f0 <HAL_DMA_Init+0x434>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d018      	beq.n	8003746 <HAL_DMA_Init+0x38a>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a36      	ldr	r2, [pc, #216]	@ (80037f4 <HAL_DMA_Init+0x438>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d013      	beq.n	8003746 <HAL_DMA_Init+0x38a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a35      	ldr	r2, [pc, #212]	@ (80037f8 <HAL_DMA_Init+0x43c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00e      	beq.n	8003746 <HAL_DMA_Init+0x38a>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a33      	ldr	r2, [pc, #204]	@ (80037fc <HAL_DMA_Init+0x440>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d009      	beq.n	8003746 <HAL_DMA_Init+0x38a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a32      	ldr	r2, [pc, #200]	@ (8003800 <HAL_DMA_Init+0x444>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d004      	beq.n	8003746 <HAL_DMA_Init+0x38a>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a30      	ldr	r2, [pc, #192]	@ (8003804 <HAL_DMA_Init+0x448>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <HAL_DMA_Init+0x38e>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <HAL_DMA_Init+0x390>
 800374a:	2300      	movs	r3, #0
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 8097 	beq.w	8003880 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a24      	ldr	r2, [pc, #144]	@ (80037e8 <HAL_DMA_Init+0x42c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d021      	beq.n	80037a0 <HAL_DMA_Init+0x3e4>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a22      	ldr	r2, [pc, #136]	@ (80037ec <HAL_DMA_Init+0x430>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d01c      	beq.n	80037a0 <HAL_DMA_Init+0x3e4>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a21      	ldr	r2, [pc, #132]	@ (80037f0 <HAL_DMA_Init+0x434>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d017      	beq.n	80037a0 <HAL_DMA_Init+0x3e4>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1f      	ldr	r2, [pc, #124]	@ (80037f4 <HAL_DMA_Init+0x438>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d012      	beq.n	80037a0 <HAL_DMA_Init+0x3e4>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1e      	ldr	r2, [pc, #120]	@ (80037f8 <HAL_DMA_Init+0x43c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00d      	beq.n	80037a0 <HAL_DMA_Init+0x3e4>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a1c      	ldr	r2, [pc, #112]	@ (80037fc <HAL_DMA_Init+0x440>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d008      	beq.n	80037a0 <HAL_DMA_Init+0x3e4>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1b      	ldr	r2, [pc, #108]	@ (8003800 <HAL_DMA_Init+0x444>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d003      	beq.n	80037a0 <HAL_DMA_Init+0x3e4>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a19      	ldr	r2, [pc, #100]	@ (8003804 <HAL_DMA_Init+0x448>)
 800379e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4b13      	ldr	r3, [pc, #76]	@ (8003808 <HAL_DMA_Init+0x44c>)
 80037bc:	4013      	ands	r3, r2
 80037be:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b40      	cmp	r3, #64	@ 0x40
 80037c6:	d021      	beq.n	800380c <HAL_DMA_Init+0x450>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b80      	cmp	r3, #128	@ 0x80
 80037ce:	d102      	bne.n	80037d6 <HAL_DMA_Init+0x41a>
 80037d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80037d4:	e01b      	b.n	800380e <HAL_DMA_Init+0x452>
 80037d6:	2300      	movs	r3, #0
 80037d8:	e019      	b.n	800380e <HAL_DMA_Init+0x452>
 80037da:	bf00      	nop
 80037dc:	fe10803f 	.word	0xfe10803f
 80037e0:	5c001000 	.word	0x5c001000
 80037e4:	ffff0000 	.word	0xffff0000
 80037e8:	58025408 	.word	0x58025408
 80037ec:	5802541c 	.word	0x5802541c
 80037f0:	58025430 	.word	0x58025430
 80037f4:	58025444 	.word	0x58025444
 80037f8:	58025458 	.word	0x58025458
 80037fc:	5802546c 	.word	0x5802546c
 8003800:	58025480 	.word	0x58025480
 8003804:	58025494 	.word	0x58025494
 8003808:	fffe000f 	.word	0xfffe000f
 800380c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	68d2      	ldr	r2, [r2, #12]
 8003812:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003814:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800381c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003824:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800382c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003834:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800383c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	4b6e      	ldr	r3, [pc, #440]	@ (8003a0c <HAL_DMA_Init+0x650>)
 8003854:	4413      	add	r3, r2
 8003856:	4a6e      	ldr	r2, [pc, #440]	@ (8003a10 <HAL_DMA_Init+0x654>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	091b      	lsrs	r3, r3, #4
 800385e:	009a      	lsls	r2, r3, #2
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f001 fc45 	bl	80050f4 <DMA_CalcBaseAndBitshift>
 800386a:	4603      	mov	r3, r0
 800386c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003872:	f003 031f 	and.w	r3, r3, #31
 8003876:	2201      	movs	r2, #1
 8003878:	409a      	lsls	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	e008      	b.n	8003892 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2240      	movs	r2, #64	@ 0x40
 8003884:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2203      	movs	r2, #3
 800388a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e0b7      	b.n	8003a02 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a5f      	ldr	r2, [pc, #380]	@ (8003a14 <HAL_DMA_Init+0x658>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d072      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a5d      	ldr	r2, [pc, #372]	@ (8003a18 <HAL_DMA_Init+0x65c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d06d      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a5c      	ldr	r2, [pc, #368]	@ (8003a1c <HAL_DMA_Init+0x660>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d068      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a5a      	ldr	r2, [pc, #360]	@ (8003a20 <HAL_DMA_Init+0x664>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d063      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a59      	ldr	r2, [pc, #356]	@ (8003a24 <HAL_DMA_Init+0x668>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d05e      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a57      	ldr	r2, [pc, #348]	@ (8003a28 <HAL_DMA_Init+0x66c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d059      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a56      	ldr	r2, [pc, #344]	@ (8003a2c <HAL_DMA_Init+0x670>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d054      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a54      	ldr	r2, [pc, #336]	@ (8003a30 <HAL_DMA_Init+0x674>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d04f      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a53      	ldr	r2, [pc, #332]	@ (8003a34 <HAL_DMA_Init+0x678>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d04a      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a51      	ldr	r2, [pc, #324]	@ (8003a38 <HAL_DMA_Init+0x67c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d045      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a50      	ldr	r2, [pc, #320]	@ (8003a3c <HAL_DMA_Init+0x680>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d040      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a4e      	ldr	r2, [pc, #312]	@ (8003a40 <HAL_DMA_Init+0x684>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d03b      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a4d      	ldr	r2, [pc, #308]	@ (8003a44 <HAL_DMA_Init+0x688>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d036      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a4b      	ldr	r2, [pc, #300]	@ (8003a48 <HAL_DMA_Init+0x68c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d031      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a4a      	ldr	r2, [pc, #296]	@ (8003a4c <HAL_DMA_Init+0x690>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d02c      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a48      	ldr	r2, [pc, #288]	@ (8003a50 <HAL_DMA_Init+0x694>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d027      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a47      	ldr	r2, [pc, #284]	@ (8003a54 <HAL_DMA_Init+0x698>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d022      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a45      	ldr	r2, [pc, #276]	@ (8003a58 <HAL_DMA_Init+0x69c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d01d      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a44      	ldr	r2, [pc, #272]	@ (8003a5c <HAL_DMA_Init+0x6a0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d018      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a42      	ldr	r2, [pc, #264]	@ (8003a60 <HAL_DMA_Init+0x6a4>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d013      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a41      	ldr	r2, [pc, #260]	@ (8003a64 <HAL_DMA_Init+0x6a8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00e      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a3f      	ldr	r2, [pc, #252]	@ (8003a68 <HAL_DMA_Init+0x6ac>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d009      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a3e      	ldr	r2, [pc, #248]	@ (8003a6c <HAL_DMA_Init+0x6b0>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d004      	beq.n	8003982 <HAL_DMA_Init+0x5c6>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a3c      	ldr	r2, [pc, #240]	@ (8003a70 <HAL_DMA_Init+0x6b4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d101      	bne.n	8003986 <HAL_DMA_Init+0x5ca>
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <HAL_DMA_Init+0x5cc>
 8003986:	2300      	movs	r3, #0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d032      	beq.n	80039f2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f001 fcdf 	bl	8005350 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b80      	cmp	r3, #128	@ 0x80
 8003998:	d102      	bne.n	80039a0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80039b4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d010      	beq.n	80039e0 <HAL_DMA_Init+0x624>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d80c      	bhi.n	80039e0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f001 fd5c 	bl	8005484 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80039dc:	605a      	str	r2, [r3, #4]
 80039de:	e008      	b.n	80039f2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	a7fdabf8 	.word	0xa7fdabf8
 8003a10:	cccccccd 	.word	0xcccccccd
 8003a14:	40020010 	.word	0x40020010
 8003a18:	40020028 	.word	0x40020028
 8003a1c:	40020040 	.word	0x40020040
 8003a20:	40020058 	.word	0x40020058
 8003a24:	40020070 	.word	0x40020070
 8003a28:	40020088 	.word	0x40020088
 8003a2c:	400200a0 	.word	0x400200a0
 8003a30:	400200b8 	.word	0x400200b8
 8003a34:	40020410 	.word	0x40020410
 8003a38:	40020428 	.word	0x40020428
 8003a3c:	40020440 	.word	0x40020440
 8003a40:	40020458 	.word	0x40020458
 8003a44:	40020470 	.word	0x40020470
 8003a48:	40020488 	.word	0x40020488
 8003a4c:	400204a0 	.word	0x400204a0
 8003a50:	400204b8 	.word	0x400204b8
 8003a54:	58025408 	.word	0x58025408
 8003a58:	5802541c 	.word	0x5802541c
 8003a5c:	58025430 	.word	0x58025430
 8003a60:	58025444 	.word	0x58025444
 8003a64:	58025458 	.word	0x58025458
 8003a68:	5802546c 	.word	0x5802546c
 8003a6c:	58025480 	.word	0x58025480
 8003a70:	58025494 	.word	0x58025494

08003a74 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e226      	b.n	8003ede <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <HAL_DMA_Start_IT+0x2a>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e21f      	b.n	8003ede <HAL_DMA_Start_IT+0x46a>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	f040 820a 	bne.w	8003ec8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a68      	ldr	r2, [pc, #416]	@ (8003c68 <HAL_DMA_Start_IT+0x1f4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d04a      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a66      	ldr	r2, [pc, #408]	@ (8003c6c <HAL_DMA_Start_IT+0x1f8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d045      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a65      	ldr	r2, [pc, #404]	@ (8003c70 <HAL_DMA_Start_IT+0x1fc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d040      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a63      	ldr	r2, [pc, #396]	@ (8003c74 <HAL_DMA_Start_IT+0x200>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d03b      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a62      	ldr	r2, [pc, #392]	@ (8003c78 <HAL_DMA_Start_IT+0x204>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d036      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a60      	ldr	r2, [pc, #384]	@ (8003c7c <HAL_DMA_Start_IT+0x208>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d031      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a5f      	ldr	r2, [pc, #380]	@ (8003c80 <HAL_DMA_Start_IT+0x20c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d02c      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a5d      	ldr	r2, [pc, #372]	@ (8003c84 <HAL_DMA_Start_IT+0x210>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d027      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a5c      	ldr	r2, [pc, #368]	@ (8003c88 <HAL_DMA_Start_IT+0x214>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d022      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a5a      	ldr	r2, [pc, #360]	@ (8003c8c <HAL_DMA_Start_IT+0x218>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d01d      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a59      	ldr	r2, [pc, #356]	@ (8003c90 <HAL_DMA_Start_IT+0x21c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d018      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a57      	ldr	r2, [pc, #348]	@ (8003c94 <HAL_DMA_Start_IT+0x220>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d013      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a56      	ldr	r2, [pc, #344]	@ (8003c98 <HAL_DMA_Start_IT+0x224>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00e      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a54      	ldr	r2, [pc, #336]	@ (8003c9c <HAL_DMA_Start_IT+0x228>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d009      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a53      	ldr	r2, [pc, #332]	@ (8003ca0 <HAL_DMA_Start_IT+0x22c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d004      	beq.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a51      	ldr	r2, [pc, #324]	@ (8003ca4 <HAL_DMA_Start_IT+0x230>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d108      	bne.n	8003b74 <HAL_DMA_Start_IT+0x100>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0201 	bic.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	e007      	b.n	8003b84 <HAL_DMA_Start_IT+0x110>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0201 	bic.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	68b9      	ldr	r1, [r7, #8]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f001 f906 	bl	8004d9c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a34      	ldr	r2, [pc, #208]	@ (8003c68 <HAL_DMA_Start_IT+0x1f4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d04a      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a33      	ldr	r2, [pc, #204]	@ (8003c6c <HAL_DMA_Start_IT+0x1f8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d045      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a31      	ldr	r2, [pc, #196]	@ (8003c70 <HAL_DMA_Start_IT+0x1fc>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d040      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a30      	ldr	r2, [pc, #192]	@ (8003c74 <HAL_DMA_Start_IT+0x200>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d03b      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a2e      	ldr	r2, [pc, #184]	@ (8003c78 <HAL_DMA_Start_IT+0x204>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d036      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2d      	ldr	r2, [pc, #180]	@ (8003c7c <HAL_DMA_Start_IT+0x208>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d031      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a2b      	ldr	r2, [pc, #172]	@ (8003c80 <HAL_DMA_Start_IT+0x20c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d02c      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a2a      	ldr	r2, [pc, #168]	@ (8003c84 <HAL_DMA_Start_IT+0x210>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d027      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a28      	ldr	r2, [pc, #160]	@ (8003c88 <HAL_DMA_Start_IT+0x214>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d022      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a27      	ldr	r2, [pc, #156]	@ (8003c8c <HAL_DMA_Start_IT+0x218>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d01d      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a25      	ldr	r2, [pc, #148]	@ (8003c90 <HAL_DMA_Start_IT+0x21c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d018      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a24      	ldr	r2, [pc, #144]	@ (8003c94 <HAL_DMA_Start_IT+0x220>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d013      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a22      	ldr	r2, [pc, #136]	@ (8003c98 <HAL_DMA_Start_IT+0x224>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00e      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a21      	ldr	r2, [pc, #132]	@ (8003c9c <HAL_DMA_Start_IT+0x228>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d009      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a1f      	ldr	r2, [pc, #124]	@ (8003ca0 <HAL_DMA_Start_IT+0x22c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d004      	beq.n	8003c30 <HAL_DMA_Start_IT+0x1bc>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ca4 <HAL_DMA_Start_IT+0x230>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d101      	bne.n	8003c34 <HAL_DMA_Start_IT+0x1c0>
 8003c30:	2301      	movs	r3, #1
 8003c32:	e000      	b.n	8003c36 <HAL_DMA_Start_IT+0x1c2>
 8003c34:	2300      	movs	r3, #0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d036      	beq.n	8003ca8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f023 021e 	bic.w	r2, r3, #30
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 0216 	orr.w	r2, r2, #22
 8003c4c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d03e      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0208 	orr.w	r2, r2, #8
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	e035      	b.n	8003cd4 <HAL_DMA_Start_IT+0x260>
 8003c68:	40020010 	.word	0x40020010
 8003c6c:	40020028 	.word	0x40020028
 8003c70:	40020040 	.word	0x40020040
 8003c74:	40020058 	.word	0x40020058
 8003c78:	40020070 	.word	0x40020070
 8003c7c:	40020088 	.word	0x40020088
 8003c80:	400200a0 	.word	0x400200a0
 8003c84:	400200b8 	.word	0x400200b8
 8003c88:	40020410 	.word	0x40020410
 8003c8c:	40020428 	.word	0x40020428
 8003c90:	40020440 	.word	0x40020440
 8003c94:	40020458 	.word	0x40020458
 8003c98:	40020470 	.word	0x40020470
 8003c9c:	40020488 	.word	0x40020488
 8003ca0:	400204a0 	.word	0x400204a0
 8003ca4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f023 020e 	bic.w	r2, r3, #14
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 020a 	orr.w	r2, r2, #10
 8003cba:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d007      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0204 	orr.w	r2, r2, #4
 8003cd2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a83      	ldr	r2, [pc, #524]	@ (8003ee8 <HAL_DMA_Start_IT+0x474>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d072      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a82      	ldr	r2, [pc, #520]	@ (8003eec <HAL_DMA_Start_IT+0x478>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d06d      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a80      	ldr	r2, [pc, #512]	@ (8003ef0 <HAL_DMA_Start_IT+0x47c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d068      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a7f      	ldr	r2, [pc, #508]	@ (8003ef4 <HAL_DMA_Start_IT+0x480>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d063      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a7d      	ldr	r2, [pc, #500]	@ (8003ef8 <HAL_DMA_Start_IT+0x484>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d05e      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a7c      	ldr	r2, [pc, #496]	@ (8003efc <HAL_DMA_Start_IT+0x488>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d059      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a7a      	ldr	r2, [pc, #488]	@ (8003f00 <HAL_DMA_Start_IT+0x48c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d054      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a79      	ldr	r2, [pc, #484]	@ (8003f04 <HAL_DMA_Start_IT+0x490>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d04f      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a77      	ldr	r2, [pc, #476]	@ (8003f08 <HAL_DMA_Start_IT+0x494>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d04a      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a76      	ldr	r2, [pc, #472]	@ (8003f0c <HAL_DMA_Start_IT+0x498>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d045      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a74      	ldr	r2, [pc, #464]	@ (8003f10 <HAL_DMA_Start_IT+0x49c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d040      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a73      	ldr	r2, [pc, #460]	@ (8003f14 <HAL_DMA_Start_IT+0x4a0>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d03b      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a71      	ldr	r2, [pc, #452]	@ (8003f18 <HAL_DMA_Start_IT+0x4a4>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d036      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a70      	ldr	r2, [pc, #448]	@ (8003f1c <HAL_DMA_Start_IT+0x4a8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d031      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a6e      	ldr	r2, [pc, #440]	@ (8003f20 <HAL_DMA_Start_IT+0x4ac>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d02c      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a6d      	ldr	r2, [pc, #436]	@ (8003f24 <HAL_DMA_Start_IT+0x4b0>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d027      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a6b      	ldr	r2, [pc, #428]	@ (8003f28 <HAL_DMA_Start_IT+0x4b4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d022      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a6a      	ldr	r2, [pc, #424]	@ (8003f2c <HAL_DMA_Start_IT+0x4b8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d01d      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a68      	ldr	r2, [pc, #416]	@ (8003f30 <HAL_DMA_Start_IT+0x4bc>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d018      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a67      	ldr	r2, [pc, #412]	@ (8003f34 <HAL_DMA_Start_IT+0x4c0>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d013      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a65      	ldr	r2, [pc, #404]	@ (8003f38 <HAL_DMA_Start_IT+0x4c4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00e      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a64      	ldr	r2, [pc, #400]	@ (8003f3c <HAL_DMA_Start_IT+0x4c8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d009      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a62      	ldr	r2, [pc, #392]	@ (8003f40 <HAL_DMA_Start_IT+0x4cc>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d004      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x350>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a61      	ldr	r2, [pc, #388]	@ (8003f44 <HAL_DMA_Start_IT+0x4d0>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d101      	bne.n	8003dc8 <HAL_DMA_Start_IT+0x354>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <HAL_DMA_Start_IT+0x356>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d01a      	beq.n	8003e04 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d007      	beq.n	8003dec <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003de6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dea:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e02:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a37      	ldr	r2, [pc, #220]	@ (8003ee8 <HAL_DMA_Start_IT+0x474>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d04a      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a36      	ldr	r2, [pc, #216]	@ (8003eec <HAL_DMA_Start_IT+0x478>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d045      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a34      	ldr	r2, [pc, #208]	@ (8003ef0 <HAL_DMA_Start_IT+0x47c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d040      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a33      	ldr	r2, [pc, #204]	@ (8003ef4 <HAL_DMA_Start_IT+0x480>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d03b      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a31      	ldr	r2, [pc, #196]	@ (8003ef8 <HAL_DMA_Start_IT+0x484>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d036      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a30      	ldr	r2, [pc, #192]	@ (8003efc <HAL_DMA_Start_IT+0x488>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d031      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a2e      	ldr	r2, [pc, #184]	@ (8003f00 <HAL_DMA_Start_IT+0x48c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d02c      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a2d      	ldr	r2, [pc, #180]	@ (8003f04 <HAL_DMA_Start_IT+0x490>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d027      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a2b      	ldr	r2, [pc, #172]	@ (8003f08 <HAL_DMA_Start_IT+0x494>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d022      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a2a      	ldr	r2, [pc, #168]	@ (8003f0c <HAL_DMA_Start_IT+0x498>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d01d      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a28      	ldr	r2, [pc, #160]	@ (8003f10 <HAL_DMA_Start_IT+0x49c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d018      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a27      	ldr	r2, [pc, #156]	@ (8003f14 <HAL_DMA_Start_IT+0x4a0>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d013      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a25      	ldr	r2, [pc, #148]	@ (8003f18 <HAL_DMA_Start_IT+0x4a4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00e      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a24      	ldr	r2, [pc, #144]	@ (8003f1c <HAL_DMA_Start_IT+0x4a8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d009      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a22      	ldr	r2, [pc, #136]	@ (8003f20 <HAL_DMA_Start_IT+0x4ac>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d004      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x430>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a21      	ldr	r2, [pc, #132]	@ (8003f24 <HAL_DMA_Start_IT+0x4b0>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d108      	bne.n	8003eb6 <HAL_DMA_Start_IT+0x442>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	e012      	b.n	8003edc <HAL_DMA_Start_IT+0x468>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0201 	orr.w	r2, r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	e009      	b.n	8003edc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ece:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40020010 	.word	0x40020010
 8003eec:	40020028 	.word	0x40020028
 8003ef0:	40020040 	.word	0x40020040
 8003ef4:	40020058 	.word	0x40020058
 8003ef8:	40020070 	.word	0x40020070
 8003efc:	40020088 	.word	0x40020088
 8003f00:	400200a0 	.word	0x400200a0
 8003f04:	400200b8 	.word	0x400200b8
 8003f08:	40020410 	.word	0x40020410
 8003f0c:	40020428 	.word	0x40020428
 8003f10:	40020440 	.word	0x40020440
 8003f14:	40020458 	.word	0x40020458
 8003f18:	40020470 	.word	0x40020470
 8003f1c:	40020488 	.word	0x40020488
 8003f20:	400204a0 	.word	0x400204a0
 8003f24:	400204b8 	.word	0x400204b8
 8003f28:	58025408 	.word	0x58025408
 8003f2c:	5802541c 	.word	0x5802541c
 8003f30:	58025430 	.word	0x58025430
 8003f34:	58025444 	.word	0x58025444
 8003f38:	58025458 	.word	0x58025458
 8003f3c:	5802546c 	.word	0x5802546c
 8003f40:	58025480 	.word	0x58025480
 8003f44:	58025494 	.word	0x58025494

08003f48 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08a      	sub	sp, #40	@ 0x28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f54:	4b67      	ldr	r3, [pc, #412]	@ (80040f4 <HAL_DMA_IRQHandler+0x1ac>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a67      	ldr	r2, [pc, #412]	@ (80040f8 <HAL_DMA_IRQHandler+0x1b0>)
 8003f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5e:	0a9b      	lsrs	r3, r3, #10
 8003f60:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f66:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a5f      	ldr	r2, [pc, #380]	@ (80040fc <HAL_DMA_IRQHandler+0x1b4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d04a      	beq.n	800401a <HAL_DMA_IRQHandler+0xd2>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a5d      	ldr	r2, [pc, #372]	@ (8004100 <HAL_DMA_IRQHandler+0x1b8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d045      	beq.n	800401a <HAL_DMA_IRQHandler+0xd2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a5c      	ldr	r2, [pc, #368]	@ (8004104 <HAL_DMA_IRQHandler+0x1bc>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d040      	beq.n	800401a <HAL_DMA_IRQHandler+0xd2>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a5a      	ldr	r2, [pc, #360]	@ (8004108 <HAL_DMA_IRQHandler+0x1c0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d03b      	beq.n	800401a <HAL_DMA_IRQHandler+0xd2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a59      	ldr	r2, [pc, #356]	@ (800410c <HAL_DMA_IRQHandler+0x1c4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d036      	beq.n	800401a <HAL_DMA_IRQHandler+0xd2>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a57      	ldr	r2, [pc, #348]	@ (8004110 <HAL_DMA_IRQHandler+0x1c8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d031      	beq.n	800401a <HAL_DMA_IRQHandler+0xd2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a56      	ldr	r2, [pc, #344]	@ (8004114 <HAL_DMA_IRQHandler+0x1cc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d02c      	beq.n	800401a <HAL_DMA_IRQHandler+0xd2>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a54      	ldr	r2, [pc, #336]	@ (8004118 <HAL_DMA_IRQHandler+0x1d0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d027      	beq.n	800401a <HAL_DMA_IRQHandler+0xd2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a53      	ldr	r2, [pc, #332]	@ (800411c <HAL_DMA_IRQHandler+0x1d4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d022      	beq.n	800401a <HAL_DMA_IRQHandler+0xd2>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a51      	ldr	r2, [pc, #324]	@ (8004120 <HAL_DMA_IRQHandler+0x1d8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d01d      	beq.n	800401a <HAL_DMA_IRQHandler+0xd2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a50      	ldr	r2, [pc, #320]	@ (8004124 <HAL_DMA_IRQHandler+0x1dc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d018      	beq.n	800401a <HAL_DMA_IRQHandler+0xd2>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a4e      	ldr	r2, [pc, #312]	@ (8004128 <HAL_DMA_IRQHandler+0x1e0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d013      	beq.n	800401a <HAL_DMA_IRQHandler+0xd2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a4d      	ldr	r2, [pc, #308]	@ (800412c <HAL_DMA_IRQHandler+0x1e4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00e      	beq.n	800401a <HAL_DMA_IRQHandler+0xd2>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a4b      	ldr	r2, [pc, #300]	@ (8004130 <HAL_DMA_IRQHandler+0x1e8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d009      	beq.n	800401a <HAL_DMA_IRQHandler+0xd2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a4a      	ldr	r2, [pc, #296]	@ (8004134 <HAL_DMA_IRQHandler+0x1ec>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d004      	beq.n	800401a <HAL_DMA_IRQHandler+0xd2>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a48      	ldr	r2, [pc, #288]	@ (8004138 <HAL_DMA_IRQHandler+0x1f0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d101      	bne.n	800401e <HAL_DMA_IRQHandler+0xd6>
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <HAL_DMA_IRQHandler+0xd8>
 800401e:	2300      	movs	r3, #0
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 842b 	beq.w	800487c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800402a:	f003 031f 	and.w	r3, r3, #31
 800402e:	2208      	movs	r2, #8
 8004030:	409a      	lsls	r2, r3
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	4013      	ands	r3, r2
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 80a2 	beq.w	8004180 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a2e      	ldr	r2, [pc, #184]	@ (80040fc <HAL_DMA_IRQHandler+0x1b4>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d04a      	beq.n	80040dc <HAL_DMA_IRQHandler+0x194>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a2d      	ldr	r2, [pc, #180]	@ (8004100 <HAL_DMA_IRQHandler+0x1b8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d045      	beq.n	80040dc <HAL_DMA_IRQHandler+0x194>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a2b      	ldr	r2, [pc, #172]	@ (8004104 <HAL_DMA_IRQHandler+0x1bc>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d040      	beq.n	80040dc <HAL_DMA_IRQHandler+0x194>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a2a      	ldr	r2, [pc, #168]	@ (8004108 <HAL_DMA_IRQHandler+0x1c0>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d03b      	beq.n	80040dc <HAL_DMA_IRQHandler+0x194>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a28      	ldr	r2, [pc, #160]	@ (800410c <HAL_DMA_IRQHandler+0x1c4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d036      	beq.n	80040dc <HAL_DMA_IRQHandler+0x194>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a27      	ldr	r2, [pc, #156]	@ (8004110 <HAL_DMA_IRQHandler+0x1c8>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d031      	beq.n	80040dc <HAL_DMA_IRQHandler+0x194>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a25      	ldr	r2, [pc, #148]	@ (8004114 <HAL_DMA_IRQHandler+0x1cc>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d02c      	beq.n	80040dc <HAL_DMA_IRQHandler+0x194>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a24      	ldr	r2, [pc, #144]	@ (8004118 <HAL_DMA_IRQHandler+0x1d0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d027      	beq.n	80040dc <HAL_DMA_IRQHandler+0x194>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a22      	ldr	r2, [pc, #136]	@ (800411c <HAL_DMA_IRQHandler+0x1d4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d022      	beq.n	80040dc <HAL_DMA_IRQHandler+0x194>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a21      	ldr	r2, [pc, #132]	@ (8004120 <HAL_DMA_IRQHandler+0x1d8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d01d      	beq.n	80040dc <HAL_DMA_IRQHandler+0x194>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a1f      	ldr	r2, [pc, #124]	@ (8004124 <HAL_DMA_IRQHandler+0x1dc>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d018      	beq.n	80040dc <HAL_DMA_IRQHandler+0x194>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004128 <HAL_DMA_IRQHandler+0x1e0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d013      	beq.n	80040dc <HAL_DMA_IRQHandler+0x194>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a1c      	ldr	r2, [pc, #112]	@ (800412c <HAL_DMA_IRQHandler+0x1e4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00e      	beq.n	80040dc <HAL_DMA_IRQHandler+0x194>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004130 <HAL_DMA_IRQHandler+0x1e8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d009      	beq.n	80040dc <HAL_DMA_IRQHandler+0x194>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a19      	ldr	r2, [pc, #100]	@ (8004134 <HAL_DMA_IRQHandler+0x1ec>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d004      	beq.n	80040dc <HAL_DMA_IRQHandler+0x194>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a18      	ldr	r2, [pc, #96]	@ (8004138 <HAL_DMA_IRQHandler+0x1f0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d12f      	bne.n	800413c <HAL_DMA_IRQHandler+0x1f4>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	bf14      	ite	ne
 80040ea:	2301      	movne	r3, #1
 80040ec:	2300      	moveq	r3, #0
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	e02e      	b.n	8004150 <HAL_DMA_IRQHandler+0x208>
 80040f2:	bf00      	nop
 80040f4:	24000000 	.word	0x24000000
 80040f8:	1b4e81b5 	.word	0x1b4e81b5
 80040fc:	40020010 	.word	0x40020010
 8004100:	40020028 	.word	0x40020028
 8004104:	40020040 	.word	0x40020040
 8004108:	40020058 	.word	0x40020058
 800410c:	40020070 	.word	0x40020070
 8004110:	40020088 	.word	0x40020088
 8004114:	400200a0 	.word	0x400200a0
 8004118:	400200b8 	.word	0x400200b8
 800411c:	40020410 	.word	0x40020410
 8004120:	40020428 	.word	0x40020428
 8004124:	40020440 	.word	0x40020440
 8004128:	40020458 	.word	0x40020458
 800412c:	40020470 	.word	0x40020470
 8004130:	40020488 	.word	0x40020488
 8004134:	400204a0 	.word	0x400204a0
 8004138:	400204b8 	.word	0x400204b8
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b00      	cmp	r3, #0
 8004148:	bf14      	ite	ne
 800414a:	2301      	movne	r3, #1
 800414c:	2300      	moveq	r3, #0
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d015      	beq.n	8004180 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0204 	bic.w	r2, r2, #4
 8004162:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004168:	f003 031f 	and.w	r3, r3, #31
 800416c:	2208      	movs	r2, #8
 800416e:	409a      	lsls	r2, r3
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004178:	f043 0201 	orr.w	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	fa22 f303 	lsr.w	r3, r2, r3
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d06e      	beq.n	8004274 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a69      	ldr	r2, [pc, #420]	@ (8004340 <HAL_DMA_IRQHandler+0x3f8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d04a      	beq.n	8004236 <HAL_DMA_IRQHandler+0x2ee>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a67      	ldr	r2, [pc, #412]	@ (8004344 <HAL_DMA_IRQHandler+0x3fc>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d045      	beq.n	8004236 <HAL_DMA_IRQHandler+0x2ee>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a66      	ldr	r2, [pc, #408]	@ (8004348 <HAL_DMA_IRQHandler+0x400>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d040      	beq.n	8004236 <HAL_DMA_IRQHandler+0x2ee>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a64      	ldr	r2, [pc, #400]	@ (800434c <HAL_DMA_IRQHandler+0x404>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d03b      	beq.n	8004236 <HAL_DMA_IRQHandler+0x2ee>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a63      	ldr	r2, [pc, #396]	@ (8004350 <HAL_DMA_IRQHandler+0x408>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d036      	beq.n	8004236 <HAL_DMA_IRQHandler+0x2ee>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a61      	ldr	r2, [pc, #388]	@ (8004354 <HAL_DMA_IRQHandler+0x40c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d031      	beq.n	8004236 <HAL_DMA_IRQHandler+0x2ee>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a60      	ldr	r2, [pc, #384]	@ (8004358 <HAL_DMA_IRQHandler+0x410>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d02c      	beq.n	8004236 <HAL_DMA_IRQHandler+0x2ee>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a5e      	ldr	r2, [pc, #376]	@ (800435c <HAL_DMA_IRQHandler+0x414>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d027      	beq.n	8004236 <HAL_DMA_IRQHandler+0x2ee>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a5d      	ldr	r2, [pc, #372]	@ (8004360 <HAL_DMA_IRQHandler+0x418>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d022      	beq.n	8004236 <HAL_DMA_IRQHandler+0x2ee>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a5b      	ldr	r2, [pc, #364]	@ (8004364 <HAL_DMA_IRQHandler+0x41c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d01d      	beq.n	8004236 <HAL_DMA_IRQHandler+0x2ee>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a5a      	ldr	r2, [pc, #360]	@ (8004368 <HAL_DMA_IRQHandler+0x420>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d018      	beq.n	8004236 <HAL_DMA_IRQHandler+0x2ee>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a58      	ldr	r2, [pc, #352]	@ (800436c <HAL_DMA_IRQHandler+0x424>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d013      	beq.n	8004236 <HAL_DMA_IRQHandler+0x2ee>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a57      	ldr	r2, [pc, #348]	@ (8004370 <HAL_DMA_IRQHandler+0x428>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00e      	beq.n	8004236 <HAL_DMA_IRQHandler+0x2ee>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a55      	ldr	r2, [pc, #340]	@ (8004374 <HAL_DMA_IRQHandler+0x42c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d009      	beq.n	8004236 <HAL_DMA_IRQHandler+0x2ee>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a54      	ldr	r2, [pc, #336]	@ (8004378 <HAL_DMA_IRQHandler+0x430>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d004      	beq.n	8004236 <HAL_DMA_IRQHandler+0x2ee>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a52      	ldr	r2, [pc, #328]	@ (800437c <HAL_DMA_IRQHandler+0x434>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d10a      	bne.n	800424c <HAL_DMA_IRQHandler+0x304>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004240:	2b00      	cmp	r3, #0
 8004242:	bf14      	ite	ne
 8004244:	2301      	movne	r3, #1
 8004246:	2300      	moveq	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	e003      	b.n	8004254 <HAL_DMA_IRQHandler+0x30c>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2300      	movs	r3, #0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00d      	beq.n	8004274 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800425c:	f003 031f 	and.w	r3, r3, #31
 8004260:	2201      	movs	r2, #1
 8004262:	409a      	lsls	r2, r3
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800426c:	f043 0202 	orr.w	r2, r3, #2
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004278:	f003 031f 	and.w	r3, r3, #31
 800427c:	2204      	movs	r2, #4
 800427e:	409a      	lsls	r2, r3
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	4013      	ands	r3, r2
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 808f 	beq.w	80043a8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a2c      	ldr	r2, [pc, #176]	@ (8004340 <HAL_DMA_IRQHandler+0x3f8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d04a      	beq.n	800432a <HAL_DMA_IRQHandler+0x3e2>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a2a      	ldr	r2, [pc, #168]	@ (8004344 <HAL_DMA_IRQHandler+0x3fc>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d045      	beq.n	800432a <HAL_DMA_IRQHandler+0x3e2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a29      	ldr	r2, [pc, #164]	@ (8004348 <HAL_DMA_IRQHandler+0x400>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d040      	beq.n	800432a <HAL_DMA_IRQHandler+0x3e2>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a27      	ldr	r2, [pc, #156]	@ (800434c <HAL_DMA_IRQHandler+0x404>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d03b      	beq.n	800432a <HAL_DMA_IRQHandler+0x3e2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a26      	ldr	r2, [pc, #152]	@ (8004350 <HAL_DMA_IRQHandler+0x408>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d036      	beq.n	800432a <HAL_DMA_IRQHandler+0x3e2>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a24      	ldr	r2, [pc, #144]	@ (8004354 <HAL_DMA_IRQHandler+0x40c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d031      	beq.n	800432a <HAL_DMA_IRQHandler+0x3e2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a23      	ldr	r2, [pc, #140]	@ (8004358 <HAL_DMA_IRQHandler+0x410>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d02c      	beq.n	800432a <HAL_DMA_IRQHandler+0x3e2>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a21      	ldr	r2, [pc, #132]	@ (800435c <HAL_DMA_IRQHandler+0x414>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d027      	beq.n	800432a <HAL_DMA_IRQHandler+0x3e2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a20      	ldr	r2, [pc, #128]	@ (8004360 <HAL_DMA_IRQHandler+0x418>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d022      	beq.n	800432a <HAL_DMA_IRQHandler+0x3e2>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004364 <HAL_DMA_IRQHandler+0x41c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d01d      	beq.n	800432a <HAL_DMA_IRQHandler+0x3e2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a1d      	ldr	r2, [pc, #116]	@ (8004368 <HAL_DMA_IRQHandler+0x420>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d018      	beq.n	800432a <HAL_DMA_IRQHandler+0x3e2>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a1b      	ldr	r2, [pc, #108]	@ (800436c <HAL_DMA_IRQHandler+0x424>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d013      	beq.n	800432a <HAL_DMA_IRQHandler+0x3e2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1a      	ldr	r2, [pc, #104]	@ (8004370 <HAL_DMA_IRQHandler+0x428>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00e      	beq.n	800432a <HAL_DMA_IRQHandler+0x3e2>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a18      	ldr	r2, [pc, #96]	@ (8004374 <HAL_DMA_IRQHandler+0x42c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d009      	beq.n	800432a <HAL_DMA_IRQHandler+0x3e2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a17      	ldr	r2, [pc, #92]	@ (8004378 <HAL_DMA_IRQHandler+0x430>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d004      	beq.n	800432a <HAL_DMA_IRQHandler+0x3e2>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a15      	ldr	r2, [pc, #84]	@ (800437c <HAL_DMA_IRQHandler+0x434>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d12a      	bne.n	8004380 <HAL_DMA_IRQHandler+0x438>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	bf14      	ite	ne
 8004338:	2301      	movne	r3, #1
 800433a:	2300      	moveq	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	e023      	b.n	8004388 <HAL_DMA_IRQHandler+0x440>
 8004340:	40020010 	.word	0x40020010
 8004344:	40020028 	.word	0x40020028
 8004348:	40020040 	.word	0x40020040
 800434c:	40020058 	.word	0x40020058
 8004350:	40020070 	.word	0x40020070
 8004354:	40020088 	.word	0x40020088
 8004358:	400200a0 	.word	0x400200a0
 800435c:	400200b8 	.word	0x400200b8
 8004360:	40020410 	.word	0x40020410
 8004364:	40020428 	.word	0x40020428
 8004368:	40020440 	.word	0x40020440
 800436c:	40020458 	.word	0x40020458
 8004370:	40020470 	.word	0x40020470
 8004374:	40020488 	.word	0x40020488
 8004378:	400204a0 	.word	0x400204a0
 800437c:	400204b8 	.word	0x400204b8
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2300      	movs	r3, #0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00d      	beq.n	80043a8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004390:	f003 031f 	and.w	r3, r3, #31
 8004394:	2204      	movs	r2, #4
 8004396:	409a      	lsls	r2, r3
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a0:	f043 0204 	orr.w	r2, r3, #4
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ac:	f003 031f 	and.w	r3, r3, #31
 80043b0:	2210      	movs	r2, #16
 80043b2:	409a      	lsls	r2, r3
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	4013      	ands	r3, r2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 80a6 	beq.w	800450a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a85      	ldr	r2, [pc, #532]	@ (80045d8 <HAL_DMA_IRQHandler+0x690>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d04a      	beq.n	800445e <HAL_DMA_IRQHandler+0x516>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a83      	ldr	r2, [pc, #524]	@ (80045dc <HAL_DMA_IRQHandler+0x694>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d045      	beq.n	800445e <HAL_DMA_IRQHandler+0x516>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a82      	ldr	r2, [pc, #520]	@ (80045e0 <HAL_DMA_IRQHandler+0x698>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d040      	beq.n	800445e <HAL_DMA_IRQHandler+0x516>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a80      	ldr	r2, [pc, #512]	@ (80045e4 <HAL_DMA_IRQHandler+0x69c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d03b      	beq.n	800445e <HAL_DMA_IRQHandler+0x516>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a7f      	ldr	r2, [pc, #508]	@ (80045e8 <HAL_DMA_IRQHandler+0x6a0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d036      	beq.n	800445e <HAL_DMA_IRQHandler+0x516>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a7d      	ldr	r2, [pc, #500]	@ (80045ec <HAL_DMA_IRQHandler+0x6a4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d031      	beq.n	800445e <HAL_DMA_IRQHandler+0x516>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a7c      	ldr	r2, [pc, #496]	@ (80045f0 <HAL_DMA_IRQHandler+0x6a8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d02c      	beq.n	800445e <HAL_DMA_IRQHandler+0x516>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a7a      	ldr	r2, [pc, #488]	@ (80045f4 <HAL_DMA_IRQHandler+0x6ac>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d027      	beq.n	800445e <HAL_DMA_IRQHandler+0x516>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a79      	ldr	r2, [pc, #484]	@ (80045f8 <HAL_DMA_IRQHandler+0x6b0>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d022      	beq.n	800445e <HAL_DMA_IRQHandler+0x516>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a77      	ldr	r2, [pc, #476]	@ (80045fc <HAL_DMA_IRQHandler+0x6b4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d01d      	beq.n	800445e <HAL_DMA_IRQHandler+0x516>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a76      	ldr	r2, [pc, #472]	@ (8004600 <HAL_DMA_IRQHandler+0x6b8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d018      	beq.n	800445e <HAL_DMA_IRQHandler+0x516>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a74      	ldr	r2, [pc, #464]	@ (8004604 <HAL_DMA_IRQHandler+0x6bc>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d013      	beq.n	800445e <HAL_DMA_IRQHandler+0x516>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a73      	ldr	r2, [pc, #460]	@ (8004608 <HAL_DMA_IRQHandler+0x6c0>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d00e      	beq.n	800445e <HAL_DMA_IRQHandler+0x516>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a71      	ldr	r2, [pc, #452]	@ (800460c <HAL_DMA_IRQHandler+0x6c4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d009      	beq.n	800445e <HAL_DMA_IRQHandler+0x516>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a70      	ldr	r2, [pc, #448]	@ (8004610 <HAL_DMA_IRQHandler+0x6c8>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d004      	beq.n	800445e <HAL_DMA_IRQHandler+0x516>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a6e      	ldr	r2, [pc, #440]	@ (8004614 <HAL_DMA_IRQHandler+0x6cc>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d10a      	bne.n	8004474 <HAL_DMA_IRQHandler+0x52c>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b00      	cmp	r3, #0
 800446a:	bf14      	ite	ne
 800446c:	2301      	movne	r3, #1
 800446e:	2300      	moveq	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	e009      	b.n	8004488 <HAL_DMA_IRQHandler+0x540>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	2b00      	cmp	r3, #0
 8004480:	bf14      	ite	ne
 8004482:	2301      	movne	r3, #1
 8004484:	2300      	moveq	r3, #0
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d03e      	beq.n	800450a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004490:	f003 031f 	and.w	r3, r3, #31
 8004494:	2210      	movs	r2, #16
 8004496:	409a      	lsls	r2, r3
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d018      	beq.n	80044dc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d108      	bne.n	80044ca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d024      	beq.n	800450a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	4798      	blx	r3
 80044c8:	e01f      	b.n	800450a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d01b      	beq.n	800450a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	4798      	blx	r3
 80044da:	e016      	b.n	800450a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d107      	bne.n	80044fa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0208 	bic.w	r2, r2, #8
 80044f8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800450e:	f003 031f 	and.w	r3, r3, #31
 8004512:	2220      	movs	r2, #32
 8004514:	409a      	lsls	r2, r3
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	4013      	ands	r3, r2
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 8110 	beq.w	8004740 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a2c      	ldr	r2, [pc, #176]	@ (80045d8 <HAL_DMA_IRQHandler+0x690>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d04a      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x678>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a2b      	ldr	r2, [pc, #172]	@ (80045dc <HAL_DMA_IRQHandler+0x694>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d045      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x678>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a29      	ldr	r2, [pc, #164]	@ (80045e0 <HAL_DMA_IRQHandler+0x698>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d040      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x678>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a28      	ldr	r2, [pc, #160]	@ (80045e4 <HAL_DMA_IRQHandler+0x69c>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d03b      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x678>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a26      	ldr	r2, [pc, #152]	@ (80045e8 <HAL_DMA_IRQHandler+0x6a0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d036      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x678>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a25      	ldr	r2, [pc, #148]	@ (80045ec <HAL_DMA_IRQHandler+0x6a4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d031      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x678>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a23      	ldr	r2, [pc, #140]	@ (80045f0 <HAL_DMA_IRQHandler+0x6a8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d02c      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x678>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a22      	ldr	r2, [pc, #136]	@ (80045f4 <HAL_DMA_IRQHandler+0x6ac>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d027      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x678>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a20      	ldr	r2, [pc, #128]	@ (80045f8 <HAL_DMA_IRQHandler+0x6b0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d022      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x678>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a1f      	ldr	r2, [pc, #124]	@ (80045fc <HAL_DMA_IRQHandler+0x6b4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d01d      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x678>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a1d      	ldr	r2, [pc, #116]	@ (8004600 <HAL_DMA_IRQHandler+0x6b8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d018      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x678>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a1c      	ldr	r2, [pc, #112]	@ (8004604 <HAL_DMA_IRQHandler+0x6bc>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d013      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x678>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a1a      	ldr	r2, [pc, #104]	@ (8004608 <HAL_DMA_IRQHandler+0x6c0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00e      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x678>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a19      	ldr	r2, [pc, #100]	@ (800460c <HAL_DMA_IRQHandler+0x6c4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d009      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x678>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a17      	ldr	r2, [pc, #92]	@ (8004610 <HAL_DMA_IRQHandler+0x6c8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d004      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x678>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a16      	ldr	r2, [pc, #88]	@ (8004614 <HAL_DMA_IRQHandler+0x6cc>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d12b      	bne.n	8004618 <HAL_DMA_IRQHandler+0x6d0>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0310 	and.w	r3, r3, #16
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	bf14      	ite	ne
 80045ce:	2301      	movne	r3, #1
 80045d0:	2300      	moveq	r3, #0
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	e02a      	b.n	800462c <HAL_DMA_IRQHandler+0x6e4>
 80045d6:	bf00      	nop
 80045d8:	40020010 	.word	0x40020010
 80045dc:	40020028 	.word	0x40020028
 80045e0:	40020040 	.word	0x40020040
 80045e4:	40020058 	.word	0x40020058
 80045e8:	40020070 	.word	0x40020070
 80045ec:	40020088 	.word	0x40020088
 80045f0:	400200a0 	.word	0x400200a0
 80045f4:	400200b8 	.word	0x400200b8
 80045f8:	40020410 	.word	0x40020410
 80045fc:	40020428 	.word	0x40020428
 8004600:	40020440 	.word	0x40020440
 8004604:	40020458 	.word	0x40020458
 8004608:	40020470 	.word	0x40020470
 800460c:	40020488 	.word	0x40020488
 8004610:	400204a0 	.word	0x400204a0
 8004614:	400204b8 	.word	0x400204b8
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	bf14      	ite	ne
 8004626:	2301      	movne	r3, #1
 8004628:	2300      	moveq	r3, #0
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 8087 	beq.w	8004740 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004636:	f003 031f 	and.w	r3, r3, #31
 800463a:	2220      	movs	r2, #32
 800463c:	409a      	lsls	r2, r3
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b04      	cmp	r3, #4
 800464c:	d139      	bne.n	80046c2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0216 	bic.w	r2, r2, #22
 800465c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695a      	ldr	r2, [r3, #20]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800466c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004672:	2b00      	cmp	r3, #0
 8004674:	d103      	bne.n	800467e <HAL_DMA_IRQHandler+0x736>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800467a:	2b00      	cmp	r3, #0
 800467c:	d007      	beq.n	800468e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0208 	bic.w	r2, r2, #8
 800468c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004692:	f003 031f 	and.w	r3, r3, #31
 8004696:	223f      	movs	r2, #63	@ 0x3f
 8004698:	409a      	lsls	r2, r3
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 834a 	beq.w	8004d4c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	4798      	blx	r3
          }
          return;
 80046c0:	e344      	b.n	8004d4c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d018      	beq.n	8004702 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d108      	bne.n	80046f0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d02c      	beq.n	8004740 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	4798      	blx	r3
 80046ee:	e027      	b.n	8004740 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d023      	beq.n	8004740 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	4798      	blx	r3
 8004700:	e01e      	b.n	8004740 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10f      	bne.n	8004730 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0210 	bic.w	r2, r2, #16
 800471e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 8306 	beq.w	8004d56 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 8088 	beq.w	8004868 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2204      	movs	r2, #4
 800475c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a7a      	ldr	r2, [pc, #488]	@ (8004950 <HAL_DMA_IRQHandler+0xa08>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d04a      	beq.n	8004800 <HAL_DMA_IRQHandler+0x8b8>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a79      	ldr	r2, [pc, #484]	@ (8004954 <HAL_DMA_IRQHandler+0xa0c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d045      	beq.n	8004800 <HAL_DMA_IRQHandler+0x8b8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a77      	ldr	r2, [pc, #476]	@ (8004958 <HAL_DMA_IRQHandler+0xa10>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d040      	beq.n	8004800 <HAL_DMA_IRQHandler+0x8b8>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a76      	ldr	r2, [pc, #472]	@ (800495c <HAL_DMA_IRQHandler+0xa14>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d03b      	beq.n	8004800 <HAL_DMA_IRQHandler+0x8b8>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a74      	ldr	r2, [pc, #464]	@ (8004960 <HAL_DMA_IRQHandler+0xa18>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d036      	beq.n	8004800 <HAL_DMA_IRQHandler+0x8b8>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a73      	ldr	r2, [pc, #460]	@ (8004964 <HAL_DMA_IRQHandler+0xa1c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d031      	beq.n	8004800 <HAL_DMA_IRQHandler+0x8b8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a71      	ldr	r2, [pc, #452]	@ (8004968 <HAL_DMA_IRQHandler+0xa20>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d02c      	beq.n	8004800 <HAL_DMA_IRQHandler+0x8b8>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a70      	ldr	r2, [pc, #448]	@ (800496c <HAL_DMA_IRQHandler+0xa24>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d027      	beq.n	8004800 <HAL_DMA_IRQHandler+0x8b8>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a6e      	ldr	r2, [pc, #440]	@ (8004970 <HAL_DMA_IRQHandler+0xa28>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d022      	beq.n	8004800 <HAL_DMA_IRQHandler+0x8b8>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a6d      	ldr	r2, [pc, #436]	@ (8004974 <HAL_DMA_IRQHandler+0xa2c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d01d      	beq.n	8004800 <HAL_DMA_IRQHandler+0x8b8>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a6b      	ldr	r2, [pc, #428]	@ (8004978 <HAL_DMA_IRQHandler+0xa30>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d018      	beq.n	8004800 <HAL_DMA_IRQHandler+0x8b8>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a6a      	ldr	r2, [pc, #424]	@ (800497c <HAL_DMA_IRQHandler+0xa34>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d013      	beq.n	8004800 <HAL_DMA_IRQHandler+0x8b8>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a68      	ldr	r2, [pc, #416]	@ (8004980 <HAL_DMA_IRQHandler+0xa38>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00e      	beq.n	8004800 <HAL_DMA_IRQHandler+0x8b8>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a67      	ldr	r2, [pc, #412]	@ (8004984 <HAL_DMA_IRQHandler+0xa3c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d009      	beq.n	8004800 <HAL_DMA_IRQHandler+0x8b8>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a65      	ldr	r2, [pc, #404]	@ (8004988 <HAL_DMA_IRQHandler+0xa40>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d004      	beq.n	8004800 <HAL_DMA_IRQHandler+0x8b8>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a64      	ldr	r2, [pc, #400]	@ (800498c <HAL_DMA_IRQHandler+0xa44>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d108      	bne.n	8004812 <HAL_DMA_IRQHandler+0x8ca>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0201 	bic.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	e007      	b.n	8004822 <HAL_DMA_IRQHandler+0x8da>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0201 	bic.w	r2, r2, #1
 8004820:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	3301      	adds	r3, #1
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800482a:	429a      	cmp	r2, r3
 800482c:	d307      	bcc.n	800483e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1f2      	bne.n	8004822 <HAL_DMA_IRQHandler+0x8da>
 800483c:	e000      	b.n	8004840 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800483e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d004      	beq.n	8004858 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2203      	movs	r2, #3
 8004852:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004856:	e003      	b.n	8004860 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 8272 	beq.w	8004d56 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	4798      	blx	r3
 800487a:	e26c      	b.n	8004d56 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a43      	ldr	r2, [pc, #268]	@ (8004990 <HAL_DMA_IRQHandler+0xa48>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d022      	beq.n	80048cc <HAL_DMA_IRQHandler+0x984>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a42      	ldr	r2, [pc, #264]	@ (8004994 <HAL_DMA_IRQHandler+0xa4c>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d01d      	beq.n	80048cc <HAL_DMA_IRQHandler+0x984>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a40      	ldr	r2, [pc, #256]	@ (8004998 <HAL_DMA_IRQHandler+0xa50>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d018      	beq.n	80048cc <HAL_DMA_IRQHandler+0x984>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a3f      	ldr	r2, [pc, #252]	@ (800499c <HAL_DMA_IRQHandler+0xa54>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d013      	beq.n	80048cc <HAL_DMA_IRQHandler+0x984>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a3d      	ldr	r2, [pc, #244]	@ (80049a0 <HAL_DMA_IRQHandler+0xa58>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00e      	beq.n	80048cc <HAL_DMA_IRQHandler+0x984>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a3c      	ldr	r2, [pc, #240]	@ (80049a4 <HAL_DMA_IRQHandler+0xa5c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d009      	beq.n	80048cc <HAL_DMA_IRQHandler+0x984>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a3a      	ldr	r2, [pc, #232]	@ (80049a8 <HAL_DMA_IRQHandler+0xa60>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <HAL_DMA_IRQHandler+0x984>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a39      	ldr	r2, [pc, #228]	@ (80049ac <HAL_DMA_IRQHandler+0xa64>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d101      	bne.n	80048d0 <HAL_DMA_IRQHandler+0x988>
 80048cc:	2301      	movs	r3, #1
 80048ce:	e000      	b.n	80048d2 <HAL_DMA_IRQHandler+0x98a>
 80048d0:	2300      	movs	r3, #0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 823f 	beq.w	8004d56 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e4:	f003 031f 	and.w	r3, r3, #31
 80048e8:	2204      	movs	r2, #4
 80048ea:	409a      	lsls	r2, r3
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	4013      	ands	r3, r2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 80cd 	beq.w	8004a90 <HAL_DMA_IRQHandler+0xb48>
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80c7 	beq.w	8004a90 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004906:	f003 031f 	and.w	r3, r3, #31
 800490a:	2204      	movs	r2, #4
 800490c:	409a      	lsls	r2, r3
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d049      	beq.n	80049b0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d109      	bne.n	800493a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 8210 	beq.w	8004d50 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004938:	e20a      	b.n	8004d50 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 8206 	beq.w	8004d50 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800494c:	e200      	b.n	8004d50 <HAL_DMA_IRQHandler+0xe08>
 800494e:	bf00      	nop
 8004950:	40020010 	.word	0x40020010
 8004954:	40020028 	.word	0x40020028
 8004958:	40020040 	.word	0x40020040
 800495c:	40020058 	.word	0x40020058
 8004960:	40020070 	.word	0x40020070
 8004964:	40020088 	.word	0x40020088
 8004968:	400200a0 	.word	0x400200a0
 800496c:	400200b8 	.word	0x400200b8
 8004970:	40020410 	.word	0x40020410
 8004974:	40020428 	.word	0x40020428
 8004978:	40020440 	.word	0x40020440
 800497c:	40020458 	.word	0x40020458
 8004980:	40020470 	.word	0x40020470
 8004984:	40020488 	.word	0x40020488
 8004988:	400204a0 	.word	0x400204a0
 800498c:	400204b8 	.word	0x400204b8
 8004990:	58025408 	.word	0x58025408
 8004994:	5802541c 	.word	0x5802541c
 8004998:	58025430 	.word	0x58025430
 800499c:	58025444 	.word	0x58025444
 80049a0:	58025458 	.word	0x58025458
 80049a4:	5802546c 	.word	0x5802546c
 80049a8:	58025480 	.word	0x58025480
 80049ac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f003 0320 	and.w	r3, r3, #32
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d160      	bne.n	8004a7c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a7f      	ldr	r2, [pc, #508]	@ (8004bbc <HAL_DMA_IRQHandler+0xc74>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d04a      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xb12>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a7d      	ldr	r2, [pc, #500]	@ (8004bc0 <HAL_DMA_IRQHandler+0xc78>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d045      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xb12>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a7c      	ldr	r2, [pc, #496]	@ (8004bc4 <HAL_DMA_IRQHandler+0xc7c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d040      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xb12>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a7a      	ldr	r2, [pc, #488]	@ (8004bc8 <HAL_DMA_IRQHandler+0xc80>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d03b      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xb12>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a79      	ldr	r2, [pc, #484]	@ (8004bcc <HAL_DMA_IRQHandler+0xc84>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d036      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xb12>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a77      	ldr	r2, [pc, #476]	@ (8004bd0 <HAL_DMA_IRQHandler+0xc88>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d031      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xb12>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a76      	ldr	r2, [pc, #472]	@ (8004bd4 <HAL_DMA_IRQHandler+0xc8c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d02c      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xb12>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a74      	ldr	r2, [pc, #464]	@ (8004bd8 <HAL_DMA_IRQHandler+0xc90>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d027      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xb12>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a73      	ldr	r2, [pc, #460]	@ (8004bdc <HAL_DMA_IRQHandler+0xc94>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d022      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xb12>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a71      	ldr	r2, [pc, #452]	@ (8004be0 <HAL_DMA_IRQHandler+0xc98>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d01d      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xb12>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a70      	ldr	r2, [pc, #448]	@ (8004be4 <HAL_DMA_IRQHandler+0xc9c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d018      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xb12>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a6e      	ldr	r2, [pc, #440]	@ (8004be8 <HAL_DMA_IRQHandler+0xca0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d013      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xb12>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a6d      	ldr	r2, [pc, #436]	@ (8004bec <HAL_DMA_IRQHandler+0xca4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d00e      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xb12>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a6b      	ldr	r2, [pc, #428]	@ (8004bf0 <HAL_DMA_IRQHandler+0xca8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d009      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xb12>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a6a      	ldr	r2, [pc, #424]	@ (8004bf4 <HAL_DMA_IRQHandler+0xcac>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d004      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xb12>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a68      	ldr	r2, [pc, #416]	@ (8004bf8 <HAL_DMA_IRQHandler+0xcb0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d108      	bne.n	8004a6c <HAL_DMA_IRQHandler+0xb24>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0208 	bic.w	r2, r2, #8
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	e007      	b.n	8004a7c <HAL_DMA_IRQHandler+0xb34>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0204 	bic.w	r2, r2, #4
 8004a7a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 8165 	beq.w	8004d50 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a8e:	e15f      	b.n	8004d50 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a94:	f003 031f 	and.w	r3, r3, #31
 8004a98:	2202      	movs	r2, #2
 8004a9a:	409a      	lsls	r2, r3
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 80c5 	beq.w	8004c30 <HAL_DMA_IRQHandler+0xce8>
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 80bf 	beq.w	8004c30 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab6:	f003 031f 	and.w	r3, r3, #31
 8004aba:	2202      	movs	r2, #2
 8004abc:	409a      	lsls	r2, r3
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d018      	beq.n	8004afe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d109      	bne.n	8004aea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 813a 	beq.w	8004d54 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ae8:	e134      	b.n	8004d54 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 8130 	beq.w	8004d54 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004afc:	e12a      	b.n	8004d54 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f003 0320 	and.w	r3, r3, #32
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f040 8089 	bne.w	8004c1c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a2b      	ldr	r2, [pc, #172]	@ (8004bbc <HAL_DMA_IRQHandler+0xc74>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d04a      	beq.n	8004baa <HAL_DMA_IRQHandler+0xc62>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a29      	ldr	r2, [pc, #164]	@ (8004bc0 <HAL_DMA_IRQHandler+0xc78>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d045      	beq.n	8004baa <HAL_DMA_IRQHandler+0xc62>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a28      	ldr	r2, [pc, #160]	@ (8004bc4 <HAL_DMA_IRQHandler+0xc7c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d040      	beq.n	8004baa <HAL_DMA_IRQHandler+0xc62>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a26      	ldr	r2, [pc, #152]	@ (8004bc8 <HAL_DMA_IRQHandler+0xc80>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d03b      	beq.n	8004baa <HAL_DMA_IRQHandler+0xc62>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a25      	ldr	r2, [pc, #148]	@ (8004bcc <HAL_DMA_IRQHandler+0xc84>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d036      	beq.n	8004baa <HAL_DMA_IRQHandler+0xc62>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a23      	ldr	r2, [pc, #140]	@ (8004bd0 <HAL_DMA_IRQHandler+0xc88>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d031      	beq.n	8004baa <HAL_DMA_IRQHandler+0xc62>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a22      	ldr	r2, [pc, #136]	@ (8004bd4 <HAL_DMA_IRQHandler+0xc8c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d02c      	beq.n	8004baa <HAL_DMA_IRQHandler+0xc62>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a20      	ldr	r2, [pc, #128]	@ (8004bd8 <HAL_DMA_IRQHandler+0xc90>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d027      	beq.n	8004baa <HAL_DMA_IRQHandler+0xc62>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8004bdc <HAL_DMA_IRQHandler+0xc94>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d022      	beq.n	8004baa <HAL_DMA_IRQHandler+0xc62>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a1d      	ldr	r2, [pc, #116]	@ (8004be0 <HAL_DMA_IRQHandler+0xc98>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d01d      	beq.n	8004baa <HAL_DMA_IRQHandler+0xc62>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a1c      	ldr	r2, [pc, #112]	@ (8004be4 <HAL_DMA_IRQHandler+0xc9c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d018      	beq.n	8004baa <HAL_DMA_IRQHandler+0xc62>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a1a      	ldr	r2, [pc, #104]	@ (8004be8 <HAL_DMA_IRQHandler+0xca0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d013      	beq.n	8004baa <HAL_DMA_IRQHandler+0xc62>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a19      	ldr	r2, [pc, #100]	@ (8004bec <HAL_DMA_IRQHandler+0xca4>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00e      	beq.n	8004baa <HAL_DMA_IRQHandler+0xc62>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a17      	ldr	r2, [pc, #92]	@ (8004bf0 <HAL_DMA_IRQHandler+0xca8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d009      	beq.n	8004baa <HAL_DMA_IRQHandler+0xc62>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a16      	ldr	r2, [pc, #88]	@ (8004bf4 <HAL_DMA_IRQHandler+0xcac>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d004      	beq.n	8004baa <HAL_DMA_IRQHandler+0xc62>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a14      	ldr	r2, [pc, #80]	@ (8004bf8 <HAL_DMA_IRQHandler+0xcb0>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d128      	bne.n	8004bfc <HAL_DMA_IRQHandler+0xcb4>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0214 	bic.w	r2, r2, #20
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	e027      	b.n	8004c0c <HAL_DMA_IRQHandler+0xcc4>
 8004bbc:	40020010 	.word	0x40020010
 8004bc0:	40020028 	.word	0x40020028
 8004bc4:	40020040 	.word	0x40020040
 8004bc8:	40020058 	.word	0x40020058
 8004bcc:	40020070 	.word	0x40020070
 8004bd0:	40020088 	.word	0x40020088
 8004bd4:	400200a0 	.word	0x400200a0
 8004bd8:	400200b8 	.word	0x400200b8
 8004bdc:	40020410 	.word	0x40020410
 8004be0:	40020428 	.word	0x40020428
 8004be4:	40020440 	.word	0x40020440
 8004be8:	40020458 	.word	0x40020458
 8004bec:	40020470 	.word	0x40020470
 8004bf0:	40020488 	.word	0x40020488
 8004bf4:	400204a0 	.word	0x400204a0
 8004bf8:	400204b8 	.word	0x400204b8
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 020a 	bic.w	r2, r2, #10
 8004c0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 8097 	beq.w	8004d54 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c2e:	e091      	b.n	8004d54 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c34:	f003 031f 	and.w	r3, r3, #31
 8004c38:	2208      	movs	r2, #8
 8004c3a:	409a      	lsls	r2, r3
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 8088 	beq.w	8004d56 <HAL_DMA_IRQHandler+0xe0e>
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f003 0308 	and.w	r3, r3, #8
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 8082 	beq.w	8004d56 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a41      	ldr	r2, [pc, #260]	@ (8004d5c <HAL_DMA_IRQHandler+0xe14>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d04a      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xdaa>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a3f      	ldr	r2, [pc, #252]	@ (8004d60 <HAL_DMA_IRQHandler+0xe18>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d045      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xdaa>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a3e      	ldr	r2, [pc, #248]	@ (8004d64 <HAL_DMA_IRQHandler+0xe1c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d040      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xdaa>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a3c      	ldr	r2, [pc, #240]	@ (8004d68 <HAL_DMA_IRQHandler+0xe20>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d03b      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xdaa>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a3b      	ldr	r2, [pc, #236]	@ (8004d6c <HAL_DMA_IRQHandler+0xe24>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d036      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xdaa>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a39      	ldr	r2, [pc, #228]	@ (8004d70 <HAL_DMA_IRQHandler+0xe28>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d031      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xdaa>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a38      	ldr	r2, [pc, #224]	@ (8004d74 <HAL_DMA_IRQHandler+0xe2c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d02c      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xdaa>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a36      	ldr	r2, [pc, #216]	@ (8004d78 <HAL_DMA_IRQHandler+0xe30>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d027      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xdaa>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a35      	ldr	r2, [pc, #212]	@ (8004d7c <HAL_DMA_IRQHandler+0xe34>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d022      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xdaa>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a33      	ldr	r2, [pc, #204]	@ (8004d80 <HAL_DMA_IRQHandler+0xe38>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d01d      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xdaa>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a32      	ldr	r2, [pc, #200]	@ (8004d84 <HAL_DMA_IRQHandler+0xe3c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d018      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xdaa>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a30      	ldr	r2, [pc, #192]	@ (8004d88 <HAL_DMA_IRQHandler+0xe40>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d013      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xdaa>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a2f      	ldr	r2, [pc, #188]	@ (8004d8c <HAL_DMA_IRQHandler+0xe44>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d00e      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xdaa>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a2d      	ldr	r2, [pc, #180]	@ (8004d90 <HAL_DMA_IRQHandler+0xe48>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d009      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xdaa>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a2c      	ldr	r2, [pc, #176]	@ (8004d94 <HAL_DMA_IRQHandler+0xe4c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d004      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xdaa>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a2a      	ldr	r2, [pc, #168]	@ (8004d98 <HAL_DMA_IRQHandler+0xe50>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d108      	bne.n	8004d04 <HAL_DMA_IRQHandler+0xdbc>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 021c 	bic.w	r2, r2, #28
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	e007      	b.n	8004d14 <HAL_DMA_IRQHandler+0xdcc>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 020e 	bic.w	r2, r2, #14
 8004d12:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d18:	f003 031f 	and.w	r3, r3, #31
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	409a      	lsls	r2, r3
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d009      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	4798      	blx	r3
 8004d4a:	e004      	b.n	8004d56 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004d4c:	bf00      	nop
 8004d4e:	e002      	b.n	8004d56 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d50:	bf00      	nop
 8004d52:	e000      	b.n	8004d56 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d54:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004d56:	3728      	adds	r7, #40	@ 0x28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40020010 	.word	0x40020010
 8004d60:	40020028 	.word	0x40020028
 8004d64:	40020040 	.word	0x40020040
 8004d68:	40020058 	.word	0x40020058
 8004d6c:	40020070 	.word	0x40020070
 8004d70:	40020088 	.word	0x40020088
 8004d74:	400200a0 	.word	0x400200a0
 8004d78:	400200b8 	.word	0x400200b8
 8004d7c:	40020410 	.word	0x40020410
 8004d80:	40020428 	.word	0x40020428
 8004d84:	40020440 	.word	0x40020440
 8004d88:	40020458 	.word	0x40020458
 8004d8c:	40020470 	.word	0x40020470
 8004d90:	40020488 	.word	0x40020488
 8004d94:	400204a0 	.word	0x400204a0
 8004d98:	400204b8 	.word	0x400204b8

08004d9c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dae:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a7f      	ldr	r2, [pc, #508]	@ (8004fb8 <DMA_SetConfig+0x21c>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d072      	beq.n	8004ea6 <DMA_SetConfig+0x10a>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a7d      	ldr	r2, [pc, #500]	@ (8004fbc <DMA_SetConfig+0x220>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d06d      	beq.n	8004ea6 <DMA_SetConfig+0x10a>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a7c      	ldr	r2, [pc, #496]	@ (8004fc0 <DMA_SetConfig+0x224>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d068      	beq.n	8004ea6 <DMA_SetConfig+0x10a>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a7a      	ldr	r2, [pc, #488]	@ (8004fc4 <DMA_SetConfig+0x228>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d063      	beq.n	8004ea6 <DMA_SetConfig+0x10a>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a79      	ldr	r2, [pc, #484]	@ (8004fc8 <DMA_SetConfig+0x22c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d05e      	beq.n	8004ea6 <DMA_SetConfig+0x10a>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a77      	ldr	r2, [pc, #476]	@ (8004fcc <DMA_SetConfig+0x230>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d059      	beq.n	8004ea6 <DMA_SetConfig+0x10a>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a76      	ldr	r2, [pc, #472]	@ (8004fd0 <DMA_SetConfig+0x234>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d054      	beq.n	8004ea6 <DMA_SetConfig+0x10a>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a74      	ldr	r2, [pc, #464]	@ (8004fd4 <DMA_SetConfig+0x238>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d04f      	beq.n	8004ea6 <DMA_SetConfig+0x10a>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a73      	ldr	r2, [pc, #460]	@ (8004fd8 <DMA_SetConfig+0x23c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d04a      	beq.n	8004ea6 <DMA_SetConfig+0x10a>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a71      	ldr	r2, [pc, #452]	@ (8004fdc <DMA_SetConfig+0x240>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d045      	beq.n	8004ea6 <DMA_SetConfig+0x10a>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a70      	ldr	r2, [pc, #448]	@ (8004fe0 <DMA_SetConfig+0x244>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d040      	beq.n	8004ea6 <DMA_SetConfig+0x10a>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a6e      	ldr	r2, [pc, #440]	@ (8004fe4 <DMA_SetConfig+0x248>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d03b      	beq.n	8004ea6 <DMA_SetConfig+0x10a>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a6d      	ldr	r2, [pc, #436]	@ (8004fe8 <DMA_SetConfig+0x24c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d036      	beq.n	8004ea6 <DMA_SetConfig+0x10a>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a6b      	ldr	r2, [pc, #428]	@ (8004fec <DMA_SetConfig+0x250>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d031      	beq.n	8004ea6 <DMA_SetConfig+0x10a>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a6a      	ldr	r2, [pc, #424]	@ (8004ff0 <DMA_SetConfig+0x254>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d02c      	beq.n	8004ea6 <DMA_SetConfig+0x10a>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a68      	ldr	r2, [pc, #416]	@ (8004ff4 <DMA_SetConfig+0x258>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d027      	beq.n	8004ea6 <DMA_SetConfig+0x10a>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a67      	ldr	r2, [pc, #412]	@ (8004ff8 <DMA_SetConfig+0x25c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d022      	beq.n	8004ea6 <DMA_SetConfig+0x10a>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a65      	ldr	r2, [pc, #404]	@ (8004ffc <DMA_SetConfig+0x260>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d01d      	beq.n	8004ea6 <DMA_SetConfig+0x10a>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a64      	ldr	r2, [pc, #400]	@ (8005000 <DMA_SetConfig+0x264>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d018      	beq.n	8004ea6 <DMA_SetConfig+0x10a>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a62      	ldr	r2, [pc, #392]	@ (8005004 <DMA_SetConfig+0x268>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d013      	beq.n	8004ea6 <DMA_SetConfig+0x10a>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a61      	ldr	r2, [pc, #388]	@ (8005008 <DMA_SetConfig+0x26c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d00e      	beq.n	8004ea6 <DMA_SetConfig+0x10a>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a5f      	ldr	r2, [pc, #380]	@ (800500c <DMA_SetConfig+0x270>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d009      	beq.n	8004ea6 <DMA_SetConfig+0x10a>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a5e      	ldr	r2, [pc, #376]	@ (8005010 <DMA_SetConfig+0x274>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d004      	beq.n	8004ea6 <DMA_SetConfig+0x10a>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a5c      	ldr	r2, [pc, #368]	@ (8005014 <DMA_SetConfig+0x278>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d101      	bne.n	8004eaa <DMA_SetConfig+0x10e>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e000      	b.n	8004eac <DMA_SetConfig+0x110>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00d      	beq.n	8004ecc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004eb8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d004      	beq.n	8004ecc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004eca:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a39      	ldr	r2, [pc, #228]	@ (8004fb8 <DMA_SetConfig+0x21c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d04a      	beq.n	8004f6c <DMA_SetConfig+0x1d0>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a38      	ldr	r2, [pc, #224]	@ (8004fbc <DMA_SetConfig+0x220>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d045      	beq.n	8004f6c <DMA_SetConfig+0x1d0>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a36      	ldr	r2, [pc, #216]	@ (8004fc0 <DMA_SetConfig+0x224>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d040      	beq.n	8004f6c <DMA_SetConfig+0x1d0>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a35      	ldr	r2, [pc, #212]	@ (8004fc4 <DMA_SetConfig+0x228>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d03b      	beq.n	8004f6c <DMA_SetConfig+0x1d0>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a33      	ldr	r2, [pc, #204]	@ (8004fc8 <DMA_SetConfig+0x22c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d036      	beq.n	8004f6c <DMA_SetConfig+0x1d0>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a32      	ldr	r2, [pc, #200]	@ (8004fcc <DMA_SetConfig+0x230>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d031      	beq.n	8004f6c <DMA_SetConfig+0x1d0>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a30      	ldr	r2, [pc, #192]	@ (8004fd0 <DMA_SetConfig+0x234>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d02c      	beq.n	8004f6c <DMA_SetConfig+0x1d0>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a2f      	ldr	r2, [pc, #188]	@ (8004fd4 <DMA_SetConfig+0x238>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d027      	beq.n	8004f6c <DMA_SetConfig+0x1d0>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a2d      	ldr	r2, [pc, #180]	@ (8004fd8 <DMA_SetConfig+0x23c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d022      	beq.n	8004f6c <DMA_SetConfig+0x1d0>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a2c      	ldr	r2, [pc, #176]	@ (8004fdc <DMA_SetConfig+0x240>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d01d      	beq.n	8004f6c <DMA_SetConfig+0x1d0>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a2a      	ldr	r2, [pc, #168]	@ (8004fe0 <DMA_SetConfig+0x244>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d018      	beq.n	8004f6c <DMA_SetConfig+0x1d0>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a29      	ldr	r2, [pc, #164]	@ (8004fe4 <DMA_SetConfig+0x248>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d013      	beq.n	8004f6c <DMA_SetConfig+0x1d0>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a27      	ldr	r2, [pc, #156]	@ (8004fe8 <DMA_SetConfig+0x24c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d00e      	beq.n	8004f6c <DMA_SetConfig+0x1d0>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a26      	ldr	r2, [pc, #152]	@ (8004fec <DMA_SetConfig+0x250>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d009      	beq.n	8004f6c <DMA_SetConfig+0x1d0>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a24      	ldr	r2, [pc, #144]	@ (8004ff0 <DMA_SetConfig+0x254>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d004      	beq.n	8004f6c <DMA_SetConfig+0x1d0>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a23      	ldr	r2, [pc, #140]	@ (8004ff4 <DMA_SetConfig+0x258>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d101      	bne.n	8004f70 <DMA_SetConfig+0x1d4>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e000      	b.n	8004f72 <DMA_SetConfig+0x1d6>
 8004f70:	2300      	movs	r3, #0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d059      	beq.n	800502a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f7a:	f003 031f 	and.w	r3, r3, #31
 8004f7e:	223f      	movs	r2, #63	@ 0x3f
 8004f80:	409a      	lsls	r2, r3
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004f94:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	2b40      	cmp	r3, #64	@ 0x40
 8004fa4:	d138      	bne.n	8005018 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004fb6:	e086      	b.n	80050c6 <DMA_SetConfig+0x32a>
 8004fb8:	40020010 	.word	0x40020010
 8004fbc:	40020028 	.word	0x40020028
 8004fc0:	40020040 	.word	0x40020040
 8004fc4:	40020058 	.word	0x40020058
 8004fc8:	40020070 	.word	0x40020070
 8004fcc:	40020088 	.word	0x40020088
 8004fd0:	400200a0 	.word	0x400200a0
 8004fd4:	400200b8 	.word	0x400200b8
 8004fd8:	40020410 	.word	0x40020410
 8004fdc:	40020428 	.word	0x40020428
 8004fe0:	40020440 	.word	0x40020440
 8004fe4:	40020458 	.word	0x40020458
 8004fe8:	40020470 	.word	0x40020470
 8004fec:	40020488 	.word	0x40020488
 8004ff0:	400204a0 	.word	0x400204a0
 8004ff4:	400204b8 	.word	0x400204b8
 8004ff8:	58025408 	.word	0x58025408
 8004ffc:	5802541c 	.word	0x5802541c
 8005000:	58025430 	.word	0x58025430
 8005004:	58025444 	.word	0x58025444
 8005008:	58025458 	.word	0x58025458
 800500c:	5802546c 	.word	0x5802546c
 8005010:	58025480 	.word	0x58025480
 8005014:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	60da      	str	r2, [r3, #12]
}
 8005028:	e04d      	b.n	80050c6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a29      	ldr	r2, [pc, #164]	@ (80050d4 <DMA_SetConfig+0x338>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d022      	beq.n	800507a <DMA_SetConfig+0x2de>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a27      	ldr	r2, [pc, #156]	@ (80050d8 <DMA_SetConfig+0x33c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d01d      	beq.n	800507a <DMA_SetConfig+0x2de>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a26      	ldr	r2, [pc, #152]	@ (80050dc <DMA_SetConfig+0x340>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d018      	beq.n	800507a <DMA_SetConfig+0x2de>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a24      	ldr	r2, [pc, #144]	@ (80050e0 <DMA_SetConfig+0x344>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d013      	beq.n	800507a <DMA_SetConfig+0x2de>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a23      	ldr	r2, [pc, #140]	@ (80050e4 <DMA_SetConfig+0x348>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d00e      	beq.n	800507a <DMA_SetConfig+0x2de>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a21      	ldr	r2, [pc, #132]	@ (80050e8 <DMA_SetConfig+0x34c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d009      	beq.n	800507a <DMA_SetConfig+0x2de>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a20      	ldr	r2, [pc, #128]	@ (80050ec <DMA_SetConfig+0x350>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d004      	beq.n	800507a <DMA_SetConfig+0x2de>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a1e      	ldr	r2, [pc, #120]	@ (80050f0 <DMA_SetConfig+0x354>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d101      	bne.n	800507e <DMA_SetConfig+0x2e2>
 800507a:	2301      	movs	r3, #1
 800507c:	e000      	b.n	8005080 <DMA_SetConfig+0x2e4>
 800507e:	2300      	movs	r3, #0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d020      	beq.n	80050c6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005088:	f003 031f 	and.w	r3, r3, #31
 800508c:	2201      	movs	r2, #1
 800508e:	409a      	lsls	r2, r3
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	2b40      	cmp	r3, #64	@ 0x40
 80050a2:	d108      	bne.n	80050b6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	60da      	str	r2, [r3, #12]
}
 80050b4:	e007      	b.n	80050c6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	60da      	str	r2, [r3, #12]
}
 80050c6:	bf00      	nop
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	58025408 	.word	0x58025408
 80050d8:	5802541c 	.word	0x5802541c
 80050dc:	58025430 	.word	0x58025430
 80050e0:	58025444 	.word	0x58025444
 80050e4:	58025458 	.word	0x58025458
 80050e8:	5802546c 	.word	0x5802546c
 80050ec:	58025480 	.word	0x58025480
 80050f0:	58025494 	.word	0x58025494

080050f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a42      	ldr	r2, [pc, #264]	@ (800520c <DMA_CalcBaseAndBitshift+0x118>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d04a      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a41      	ldr	r2, [pc, #260]	@ (8005210 <DMA_CalcBaseAndBitshift+0x11c>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d045      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a3f      	ldr	r2, [pc, #252]	@ (8005214 <DMA_CalcBaseAndBitshift+0x120>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d040      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a3e      	ldr	r2, [pc, #248]	@ (8005218 <DMA_CalcBaseAndBitshift+0x124>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d03b      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a3c      	ldr	r2, [pc, #240]	@ (800521c <DMA_CalcBaseAndBitshift+0x128>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d036      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a3b      	ldr	r2, [pc, #236]	@ (8005220 <DMA_CalcBaseAndBitshift+0x12c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d031      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a39      	ldr	r2, [pc, #228]	@ (8005224 <DMA_CalcBaseAndBitshift+0x130>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d02c      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a38      	ldr	r2, [pc, #224]	@ (8005228 <DMA_CalcBaseAndBitshift+0x134>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d027      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a36      	ldr	r2, [pc, #216]	@ (800522c <DMA_CalcBaseAndBitshift+0x138>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d022      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a35      	ldr	r2, [pc, #212]	@ (8005230 <DMA_CalcBaseAndBitshift+0x13c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d01d      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a33      	ldr	r2, [pc, #204]	@ (8005234 <DMA_CalcBaseAndBitshift+0x140>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d018      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a32      	ldr	r2, [pc, #200]	@ (8005238 <DMA_CalcBaseAndBitshift+0x144>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d013      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a30      	ldr	r2, [pc, #192]	@ (800523c <DMA_CalcBaseAndBitshift+0x148>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d00e      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a2f      	ldr	r2, [pc, #188]	@ (8005240 <DMA_CalcBaseAndBitshift+0x14c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d009      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a2d      	ldr	r2, [pc, #180]	@ (8005244 <DMA_CalcBaseAndBitshift+0x150>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d004      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a2c      	ldr	r2, [pc, #176]	@ (8005248 <DMA_CalcBaseAndBitshift+0x154>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d101      	bne.n	80051a0 <DMA_CalcBaseAndBitshift+0xac>
 800519c:	2301      	movs	r3, #1
 800519e:	e000      	b.n	80051a2 <DMA_CalcBaseAndBitshift+0xae>
 80051a0:	2300      	movs	r3, #0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d024      	beq.n	80051f0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	3b10      	subs	r3, #16
 80051ae:	4a27      	ldr	r2, [pc, #156]	@ (800524c <DMA_CalcBaseAndBitshift+0x158>)
 80051b0:	fba2 2303 	umull	r2, r3, r2, r3
 80051b4:	091b      	lsrs	r3, r3, #4
 80051b6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	4a24      	ldr	r2, [pc, #144]	@ (8005250 <DMA_CalcBaseAndBitshift+0x15c>)
 80051c0:	5cd3      	ldrb	r3, [r2, r3]
 80051c2:	461a      	mov	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b03      	cmp	r3, #3
 80051cc:	d908      	bls.n	80051e0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	4b1f      	ldr	r3, [pc, #124]	@ (8005254 <DMA_CalcBaseAndBitshift+0x160>)
 80051d6:	4013      	ands	r3, r2
 80051d8:	1d1a      	adds	r2, r3, #4
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80051de:	e00d      	b.n	80051fc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	461a      	mov	r2, r3
 80051e6:	4b1b      	ldr	r3, [pc, #108]	@ (8005254 <DMA_CalcBaseAndBitshift+0x160>)
 80051e8:	4013      	ands	r3, r2
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80051ee:	e005      	b.n	80051fc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005200:	4618      	mov	r0, r3
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	40020010 	.word	0x40020010
 8005210:	40020028 	.word	0x40020028
 8005214:	40020040 	.word	0x40020040
 8005218:	40020058 	.word	0x40020058
 800521c:	40020070 	.word	0x40020070
 8005220:	40020088 	.word	0x40020088
 8005224:	400200a0 	.word	0x400200a0
 8005228:	400200b8 	.word	0x400200b8
 800522c:	40020410 	.word	0x40020410
 8005230:	40020428 	.word	0x40020428
 8005234:	40020440 	.word	0x40020440
 8005238:	40020458 	.word	0x40020458
 800523c:	40020470 	.word	0x40020470
 8005240:	40020488 	.word	0x40020488
 8005244:	400204a0 	.word	0x400204a0
 8005248:	400204b8 	.word	0x400204b8
 800524c:	aaaaaaab 	.word	0xaaaaaaab
 8005250:	0800ab6c 	.word	0x0800ab6c
 8005254:	fffffc00 	.word	0xfffffc00

08005258 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d120      	bne.n	80052ae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005270:	2b03      	cmp	r3, #3
 8005272:	d858      	bhi.n	8005326 <DMA_CheckFifoParam+0xce>
 8005274:	a201      	add	r2, pc, #4	@ (adr r2, 800527c <DMA_CheckFifoParam+0x24>)
 8005276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527a:	bf00      	nop
 800527c:	0800528d 	.word	0x0800528d
 8005280:	0800529f 	.word	0x0800529f
 8005284:	0800528d 	.word	0x0800528d
 8005288:	08005327 	.word	0x08005327
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005290:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d048      	beq.n	800532a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800529c:	e045      	b.n	800532a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80052a6:	d142      	bne.n	800532e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052ac:	e03f      	b.n	800532e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052b6:	d123      	bne.n	8005300 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d838      	bhi.n	8005332 <DMA_CheckFifoParam+0xda>
 80052c0:	a201      	add	r2, pc, #4	@ (adr r2, 80052c8 <DMA_CheckFifoParam+0x70>)
 80052c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c6:	bf00      	nop
 80052c8:	080052d9 	.word	0x080052d9
 80052cc:	080052df 	.word	0x080052df
 80052d0:	080052d9 	.word	0x080052d9
 80052d4:	080052f1 	.word	0x080052f1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	73fb      	strb	r3, [r7, #15]
        break;
 80052dc:	e030      	b.n	8005340 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d025      	beq.n	8005336 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052ee:	e022      	b.n	8005336 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80052f8:	d11f      	bne.n	800533a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052fe:	e01c      	b.n	800533a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005304:	2b02      	cmp	r3, #2
 8005306:	d902      	bls.n	800530e <DMA_CheckFifoParam+0xb6>
 8005308:	2b03      	cmp	r3, #3
 800530a:	d003      	beq.n	8005314 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800530c:	e018      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	73fb      	strb	r3, [r7, #15]
        break;
 8005312:	e015      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005318:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00e      	beq.n	800533e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	73fb      	strb	r3, [r7, #15]
    break;
 8005324:	e00b      	b.n	800533e <DMA_CheckFifoParam+0xe6>
        break;
 8005326:	bf00      	nop
 8005328:	e00a      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
        break;
 800532a:	bf00      	nop
 800532c:	e008      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
        break;
 800532e:	bf00      	nop
 8005330:	e006      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
        break;
 8005332:	bf00      	nop
 8005334:	e004      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
        break;
 8005336:	bf00      	nop
 8005338:	e002      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
        break;
 800533a:	bf00      	nop
 800533c:	e000      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
    break;
 800533e:	bf00      	nop
    }
  }

  return status;
 8005340:	7bfb      	ldrb	r3, [r7, #15]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop

08005350 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a38      	ldr	r2, [pc, #224]	@ (8005444 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d022      	beq.n	80053ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a36      	ldr	r2, [pc, #216]	@ (8005448 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d01d      	beq.n	80053ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a35      	ldr	r2, [pc, #212]	@ (800544c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d018      	beq.n	80053ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a33      	ldr	r2, [pc, #204]	@ (8005450 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d013      	beq.n	80053ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a32      	ldr	r2, [pc, #200]	@ (8005454 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d00e      	beq.n	80053ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a30      	ldr	r2, [pc, #192]	@ (8005458 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d009      	beq.n	80053ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a2f      	ldr	r2, [pc, #188]	@ (800545c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d004      	beq.n	80053ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a2d      	ldr	r2, [pc, #180]	@ (8005460 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d101      	bne.n	80053b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80053ae:	2301      	movs	r3, #1
 80053b0:	e000      	b.n	80053b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80053b2:	2300      	movs	r3, #0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01a      	beq.n	80053ee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	3b08      	subs	r3, #8
 80053c0:	4a28      	ldr	r2, [pc, #160]	@ (8005464 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80053c2:	fba2 2303 	umull	r2, r3, r2, r3
 80053c6:	091b      	lsrs	r3, r3, #4
 80053c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4b26      	ldr	r3, [pc, #152]	@ (8005468 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80053ce:	4413      	add	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	461a      	mov	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a24      	ldr	r2, [pc, #144]	@ (800546c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80053dc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f003 031f 	and.w	r3, r3, #31
 80053e4:	2201      	movs	r2, #1
 80053e6:	409a      	lsls	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80053ec:	e024      	b.n	8005438 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	3b10      	subs	r3, #16
 80053f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005470 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80053f8:	fba2 2303 	umull	r2, r3, r2, r3
 80053fc:	091b      	lsrs	r3, r3, #4
 80053fe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	4a1c      	ldr	r2, [pc, #112]	@ (8005474 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d806      	bhi.n	8005416 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	4a1b      	ldr	r2, [pc, #108]	@ (8005478 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d902      	bls.n	8005416 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	3308      	adds	r3, #8
 8005414:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	4b18      	ldr	r3, [pc, #96]	@ (800547c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	461a      	mov	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a16      	ldr	r2, [pc, #88]	@ (8005480 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005428:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f003 031f 	and.w	r3, r3, #31
 8005430:	2201      	movs	r2, #1
 8005432:	409a      	lsls	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005438:	bf00      	nop
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	58025408 	.word	0x58025408
 8005448:	5802541c 	.word	0x5802541c
 800544c:	58025430 	.word	0x58025430
 8005450:	58025444 	.word	0x58025444
 8005454:	58025458 	.word	0x58025458
 8005458:	5802546c 	.word	0x5802546c
 800545c:	58025480 	.word	0x58025480
 8005460:	58025494 	.word	0x58025494
 8005464:	cccccccd 	.word	0xcccccccd
 8005468:	16009600 	.word	0x16009600
 800546c:	58025880 	.word	0x58025880
 8005470:	aaaaaaab 	.word	0xaaaaaaab
 8005474:	400204b8 	.word	0x400204b8
 8005478:	4002040f 	.word	0x4002040f
 800547c:	10008200 	.word	0x10008200
 8005480:	40020880 	.word	0x40020880

08005484 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	b2db      	uxtb	r3, r3
 8005492:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d04a      	beq.n	8005530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b08      	cmp	r3, #8
 800549e:	d847      	bhi.n	8005530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a25      	ldr	r2, [pc, #148]	@ (800553c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d022      	beq.n	80054f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a24      	ldr	r2, [pc, #144]	@ (8005540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d01d      	beq.n	80054f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a22      	ldr	r2, [pc, #136]	@ (8005544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d018      	beq.n	80054f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a21      	ldr	r2, [pc, #132]	@ (8005548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d013      	beq.n	80054f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a1f      	ldr	r2, [pc, #124]	@ (800554c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00e      	beq.n	80054f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d009      	beq.n	80054f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d004      	beq.n	80054f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d101      	bne.n	80054f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80054f0:	2301      	movs	r3, #1
 80054f2:	e000      	b.n	80054f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80054f4:	2300      	movs	r3, #0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	4b17      	ldr	r3, [pc, #92]	@ (800555c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80054fe:	4413      	add	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	461a      	mov	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a15      	ldr	r2, [pc, #84]	@ (8005560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800550c:	671a      	str	r2, [r3, #112]	@ 0x70
 800550e:	e009      	b.n	8005524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4b14      	ldr	r3, [pc, #80]	@ (8005564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005514:	4413      	add	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	461a      	mov	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a11      	ldr	r2, [pc, #68]	@ (8005568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005522:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3b01      	subs	r3, #1
 8005528:	2201      	movs	r2, #1
 800552a:	409a      	lsls	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005530:	bf00      	nop
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	58025408 	.word	0x58025408
 8005540:	5802541c 	.word	0x5802541c
 8005544:	58025430 	.word	0x58025430
 8005548:	58025444 	.word	0x58025444
 800554c:	58025458 	.word	0x58025458
 8005550:	5802546c 	.word	0x5802546c
 8005554:	58025480 	.word	0x58025480
 8005558:	58025494 	.word	0x58025494
 800555c:	1600963f 	.word	0x1600963f
 8005560:	58025940 	.word	0x58025940
 8005564:	1000823f 	.word	0x1000823f
 8005568:	40020940 	.word	0x40020940

0800556c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800556c:	b480      	push	{r7}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	460b      	mov	r3, r1
 8005576:	607a      	str	r2, [r7, #4]
 8005578:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e00a      	b.n	800559e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8005588:	7afb      	ldrb	r3, [r7, #11]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d103      	bne.n	8005596 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	605a      	str	r2, [r3, #4]
      break;
 8005594:	e002      	b.n	800559c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	75fb      	strb	r3, [r7, #23]
      break;
 800559a:	bf00      	nop
  }

  return status;
 800559c:	7dfb      	ldrb	r3, [r7, #23]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e003      	b.n	80055c6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80055c4:	2300      	movs	r3, #0
  }
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
	...

080055d4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	0c1b      	lsrs	r3, r3, #16
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 031f 	and.w	r3, r3, #31
 80055f0:	2201      	movs	r2, #1
 80055f2:	fa02 f303 	lsl.w	r3, r2, r3
 80055f6:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	011a      	lsls	r2, r3, #4
 80055fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005630 <HAL_EXTI_IRQHandler+0x5c>)
 80055fe:	4413      	add	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4013      	ands	r3, r2
 800560a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d009      	beq.n	8005626 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	4798      	blx	r3
    }
  }
}
 8005626:	bf00      	nop
 8005628:	3718      	adds	r7, #24
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	58000088 	.word	0x58000088

08005634 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005634:	b480      	push	{r7}
 8005636:	b089      	sub	sp, #36	@ 0x24
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800563e:	2300      	movs	r3, #0
 8005640:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005642:	4b89      	ldr	r3, [pc, #548]	@ (8005868 <HAL_GPIO_Init+0x234>)
 8005644:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005646:	e194      	b.n	8005972 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	2101      	movs	r1, #1
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	fa01 f303 	lsl.w	r3, r1, r3
 8005654:	4013      	ands	r3, r2
 8005656:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 8186 	beq.w	800596c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f003 0303 	and.w	r3, r3, #3
 8005668:	2b01      	cmp	r3, #1
 800566a:	d005      	beq.n	8005678 <HAL_GPIO_Init+0x44>
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f003 0303 	and.w	r3, r3, #3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d130      	bne.n	80056da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	2203      	movs	r2, #3
 8005684:	fa02 f303 	lsl.w	r3, r2, r3
 8005688:	43db      	mvns	r3, r3
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	4013      	ands	r3, r2
 800568e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	fa02 f303 	lsl.w	r3, r2, r3
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	4313      	orrs	r3, r2
 80056a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056ae:	2201      	movs	r2, #1
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	43db      	mvns	r3, r3
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	4013      	ands	r3, r2
 80056bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	091b      	lsrs	r3, r3, #4
 80056c4:	f003 0201 	and.w	r2, r3, #1
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	fa02 f303 	lsl.w	r3, r2, r3
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	d017      	beq.n	8005716 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	2203      	movs	r2, #3
 80056f2:	fa02 f303 	lsl.w	r3, r2, r3
 80056f6:	43db      	mvns	r3, r3
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	4013      	ands	r3, r2
 80056fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	689a      	ldr	r2, [r3, #8]
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	fa02 f303 	lsl.w	r3, r2, r3
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	4313      	orrs	r3, r2
 800570e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f003 0303 	and.w	r3, r3, #3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d123      	bne.n	800576a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	08da      	lsrs	r2, r3, #3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	3208      	adds	r2, #8
 800572a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800572e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	f003 0307 	and.w	r3, r3, #7
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	220f      	movs	r2, #15
 800573a:	fa02 f303 	lsl.w	r3, r2, r3
 800573e:	43db      	mvns	r3, r3
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	4013      	ands	r3, r2
 8005744:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	691a      	ldr	r2, [r3, #16]
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	f003 0307 	and.w	r3, r3, #7
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	4313      	orrs	r3, r2
 800575a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	08da      	lsrs	r2, r3, #3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3208      	adds	r2, #8
 8005764:	69b9      	ldr	r1, [r7, #24]
 8005766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	2203      	movs	r2, #3
 8005776:	fa02 f303 	lsl.w	r3, r2, r3
 800577a:	43db      	mvns	r3, r3
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	4013      	ands	r3, r2
 8005780:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f003 0203 	and.w	r2, r3, #3
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	4313      	orrs	r3, r2
 8005796:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 80e0 	beq.w	800596c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ac:	4b2f      	ldr	r3, [pc, #188]	@ (800586c <HAL_GPIO_Init+0x238>)
 80057ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80057b2:	4a2e      	ldr	r2, [pc, #184]	@ (800586c <HAL_GPIO_Init+0x238>)
 80057b4:	f043 0302 	orr.w	r3, r3, #2
 80057b8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80057bc:	4b2b      	ldr	r3, [pc, #172]	@ (800586c <HAL_GPIO_Init+0x238>)
 80057be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057ca:	4a29      	ldr	r2, [pc, #164]	@ (8005870 <HAL_GPIO_Init+0x23c>)
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	089b      	lsrs	r3, r3, #2
 80057d0:	3302      	adds	r3, #2
 80057d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	220f      	movs	r2, #15
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	43db      	mvns	r3, r3
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	4013      	ands	r3, r2
 80057ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a20      	ldr	r2, [pc, #128]	@ (8005874 <HAL_GPIO_Init+0x240>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d052      	beq.n	800589c <HAL_GPIO_Init+0x268>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a1f      	ldr	r2, [pc, #124]	@ (8005878 <HAL_GPIO_Init+0x244>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d031      	beq.n	8005862 <HAL_GPIO_Init+0x22e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a1e      	ldr	r2, [pc, #120]	@ (800587c <HAL_GPIO_Init+0x248>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d02b      	beq.n	800585e <HAL_GPIO_Init+0x22a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a1d      	ldr	r2, [pc, #116]	@ (8005880 <HAL_GPIO_Init+0x24c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d025      	beq.n	800585a <HAL_GPIO_Init+0x226>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a1c      	ldr	r2, [pc, #112]	@ (8005884 <HAL_GPIO_Init+0x250>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d01f      	beq.n	8005856 <HAL_GPIO_Init+0x222>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a1b      	ldr	r2, [pc, #108]	@ (8005888 <HAL_GPIO_Init+0x254>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d019      	beq.n	8005852 <HAL_GPIO_Init+0x21e>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a1a      	ldr	r2, [pc, #104]	@ (800588c <HAL_GPIO_Init+0x258>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d013      	beq.n	800584e <HAL_GPIO_Init+0x21a>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a19      	ldr	r2, [pc, #100]	@ (8005890 <HAL_GPIO_Init+0x25c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00d      	beq.n	800584a <HAL_GPIO_Init+0x216>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a18      	ldr	r2, [pc, #96]	@ (8005894 <HAL_GPIO_Init+0x260>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d007      	beq.n	8005846 <HAL_GPIO_Init+0x212>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a17      	ldr	r2, [pc, #92]	@ (8005898 <HAL_GPIO_Init+0x264>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d101      	bne.n	8005842 <HAL_GPIO_Init+0x20e>
 800583e:	2309      	movs	r3, #9
 8005840:	e02d      	b.n	800589e <HAL_GPIO_Init+0x26a>
 8005842:	230a      	movs	r3, #10
 8005844:	e02b      	b.n	800589e <HAL_GPIO_Init+0x26a>
 8005846:	2308      	movs	r3, #8
 8005848:	e029      	b.n	800589e <HAL_GPIO_Init+0x26a>
 800584a:	2307      	movs	r3, #7
 800584c:	e027      	b.n	800589e <HAL_GPIO_Init+0x26a>
 800584e:	2306      	movs	r3, #6
 8005850:	e025      	b.n	800589e <HAL_GPIO_Init+0x26a>
 8005852:	2305      	movs	r3, #5
 8005854:	e023      	b.n	800589e <HAL_GPIO_Init+0x26a>
 8005856:	2304      	movs	r3, #4
 8005858:	e021      	b.n	800589e <HAL_GPIO_Init+0x26a>
 800585a:	2303      	movs	r3, #3
 800585c:	e01f      	b.n	800589e <HAL_GPIO_Init+0x26a>
 800585e:	2302      	movs	r3, #2
 8005860:	e01d      	b.n	800589e <HAL_GPIO_Init+0x26a>
 8005862:	2301      	movs	r3, #1
 8005864:	e01b      	b.n	800589e <HAL_GPIO_Init+0x26a>
 8005866:	bf00      	nop
 8005868:	58000080 	.word	0x58000080
 800586c:	58024400 	.word	0x58024400
 8005870:	58000400 	.word	0x58000400
 8005874:	58020000 	.word	0x58020000
 8005878:	58020400 	.word	0x58020400
 800587c:	58020800 	.word	0x58020800
 8005880:	58020c00 	.word	0x58020c00
 8005884:	58021000 	.word	0x58021000
 8005888:	58021400 	.word	0x58021400
 800588c:	58021800 	.word	0x58021800
 8005890:	58021c00 	.word	0x58021c00
 8005894:	58022000 	.word	0x58022000
 8005898:	58022400 	.word	0x58022400
 800589c:	2300      	movs	r3, #0
 800589e:	69fa      	ldr	r2, [r7, #28]
 80058a0:	f002 0203 	and.w	r2, r2, #3
 80058a4:	0092      	lsls	r2, r2, #2
 80058a6:	4093      	lsls	r3, r2
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058ae:	4938      	ldr	r1, [pc, #224]	@ (8005990 <HAL_GPIO_Init+0x35c>)
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	089b      	lsrs	r3, r3, #2
 80058b4:	3302      	adds	r3, #2
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	43db      	mvns	r3, r3
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	4013      	ands	r3, r2
 80058cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80058e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80058ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	43db      	mvns	r3, r3
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	4013      	ands	r3, r2
 80058fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	4313      	orrs	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005910:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	43db      	mvns	r3, r3
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	4013      	ands	r3, r2
 8005926:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	43db      	mvns	r3, r3
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	4013      	ands	r3, r2
 8005950:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	4313      	orrs	r3, r2
 8005964:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	3301      	adds	r3, #1
 8005970:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	fa22 f303 	lsr.w	r3, r2, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	f47f ae63 	bne.w	8005648 <HAL_GPIO_Init+0x14>
  }
}
 8005982:	bf00      	nop
 8005984:	bf00      	nop
 8005986:	3724      	adds	r7, #36	@ 0x24
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	58000400 	.word	0x58000400

08005994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	807b      	strh	r3, [r7, #2]
 80059a0:	4613      	mov	r3, r2
 80059a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059a4:	787b      	ldrb	r3, [r7, #1]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059aa:	887a      	ldrh	r2, [r7, #2]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80059b0:	e003      	b.n	80059ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80059b2:	887b      	ldrh	r3, [r7, #2]
 80059b4:	041a      	lsls	r2, r3, #16
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	619a      	str	r2, [r3, #24]
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
	...

080059c8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80059d0:	4b19      	ldr	r3, [pc, #100]	@ (8005a38 <HAL_PWREx_ConfigSupply+0x70>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b04      	cmp	r3, #4
 80059da:	d00a      	beq.n	80059f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80059dc:	4b16      	ldr	r3, [pc, #88]	@ (8005a38 <HAL_PWREx_ConfigSupply+0x70>)
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f003 0307 	and.w	r3, r3, #7
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d001      	beq.n	80059ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e01f      	b.n	8005a2e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	e01d      	b.n	8005a2e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80059f2:	4b11      	ldr	r3, [pc, #68]	@ (8005a38 <HAL_PWREx_ConfigSupply+0x70>)
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	f023 0207 	bic.w	r2, r3, #7
 80059fa:	490f      	ldr	r1, [pc, #60]	@ (8005a38 <HAL_PWREx_ConfigSupply+0x70>)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005a02:	f7fb fcaf 	bl	8001364 <HAL_GetTick>
 8005a06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a08:	e009      	b.n	8005a1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005a0a:	f7fb fcab 	bl	8001364 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a18:	d901      	bls.n	8005a1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e007      	b.n	8005a2e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a1e:	4b06      	ldr	r3, [pc, #24]	@ (8005a38 <HAL_PWREx_ConfigSupply+0x70>)
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a2a:	d1ee      	bne.n	8005a0a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	58024800 	.word	0x58024800

08005a3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b08c      	sub	sp, #48	@ 0x30
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d102      	bne.n	8005a50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	f000 bc48 	b.w	80062e0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 8088 	beq.w	8005b6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a5e:	4b99      	ldr	r3, [pc, #612]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a68:	4b96      	ldr	r3, [pc, #600]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a70:	2b10      	cmp	r3, #16
 8005a72:	d007      	beq.n	8005a84 <HAL_RCC_OscConfig+0x48>
 8005a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a76:	2b18      	cmp	r3, #24
 8005a78:	d111      	bne.n	8005a9e <HAL_RCC_OscConfig+0x62>
 8005a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7c:	f003 0303 	and.w	r3, r3, #3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d10c      	bne.n	8005a9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a84:	4b8f      	ldr	r3, [pc, #572]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d06d      	beq.n	8005b6c <HAL_RCC_OscConfig+0x130>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d169      	bne.n	8005b6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	f000 bc21 	b.w	80062e0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aa6:	d106      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x7a>
 8005aa8:	4b86      	ldr	r3, [pc, #536]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a85      	ldr	r2, [pc, #532]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005aae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ab2:	6013      	str	r3, [r2, #0]
 8005ab4:	e02e      	b.n	8005b14 <HAL_RCC_OscConfig+0xd8>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10c      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x9c>
 8005abe:	4b81      	ldr	r3, [pc, #516]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a80      	ldr	r2, [pc, #512]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005ac4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	4b7e      	ldr	r3, [pc, #504]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a7d      	ldr	r2, [pc, #500]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005ad0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ad4:	6013      	str	r3, [r2, #0]
 8005ad6:	e01d      	b.n	8005b14 <HAL_RCC_OscConfig+0xd8>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ae0:	d10c      	bne.n	8005afc <HAL_RCC_OscConfig+0xc0>
 8005ae2:	4b78      	ldr	r3, [pc, #480]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a77      	ldr	r2, [pc, #476]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005ae8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005aec:	6013      	str	r3, [r2, #0]
 8005aee:	4b75      	ldr	r3, [pc, #468]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a74      	ldr	r2, [pc, #464]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005af8:	6013      	str	r3, [r2, #0]
 8005afa:	e00b      	b.n	8005b14 <HAL_RCC_OscConfig+0xd8>
 8005afc:	4b71      	ldr	r3, [pc, #452]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a70      	ldr	r2, [pc, #448]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005b02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b06:	6013      	str	r3, [r2, #0]
 8005b08:	4b6e      	ldr	r3, [pc, #440]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a6d      	ldr	r2, [pc, #436]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005b0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d013      	beq.n	8005b44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b1c:	f7fb fc22 	bl	8001364 <HAL_GetTick>
 8005b20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b22:	e008      	b.n	8005b36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b24:	f7fb fc1e 	bl	8001364 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b64      	cmp	r3, #100	@ 0x64
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e3d4      	b.n	80062e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b36:	4b63      	ldr	r3, [pc, #396]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d0f0      	beq.n	8005b24 <HAL_RCC_OscConfig+0xe8>
 8005b42:	e014      	b.n	8005b6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b44:	f7fb fc0e 	bl	8001364 <HAL_GetTick>
 8005b48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b4a:	e008      	b.n	8005b5e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b4c:	f7fb fc0a 	bl	8001364 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b64      	cmp	r3, #100	@ 0x64
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e3c0      	b.n	80062e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b5e:	4b59      	ldr	r3, [pc, #356]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1f0      	bne.n	8005b4c <HAL_RCC_OscConfig+0x110>
 8005b6a:	e000      	b.n	8005b6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 80ca 	beq.w	8005d10 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b7c:	4b51      	ldr	r3, [pc, #324]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b84:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b86:	4b4f      	ldr	r3, [pc, #316]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d007      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x166>
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	2b18      	cmp	r3, #24
 8005b96:	d156      	bne.n	8005c46 <HAL_RCC_OscConfig+0x20a>
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d151      	bne.n	8005c46 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ba2:	4b48      	ldr	r3, [pc, #288]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0304 	and.w	r3, r3, #4
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d005      	beq.n	8005bba <HAL_RCC_OscConfig+0x17e>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e392      	b.n	80062e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005bba:	4b42      	ldr	r3, [pc, #264]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f023 0219 	bic.w	r2, r3, #25
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	493f      	ldr	r1, [pc, #252]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bcc:	f7fb fbca 	bl	8001364 <HAL_GetTick>
 8005bd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bd4:	f7fb fbc6 	bl	8001364 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e37c      	b.n	80062e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005be6:	4b37      	ldr	r3, [pc, #220]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0304 	and.w	r3, r3, #4
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0f0      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf2:	f7fb fbe7 	bl	80013c4 <HAL_GetREVID>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d817      	bhi.n	8005c30 <HAL_RCC_OscConfig+0x1f4>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	2b40      	cmp	r3, #64	@ 0x40
 8005c06:	d108      	bne.n	8005c1a <HAL_RCC_OscConfig+0x1de>
 8005c08:	4b2e      	ldr	r3, [pc, #184]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005c10:	4a2c      	ldr	r2, [pc, #176]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005c12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c16:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c18:	e07a      	b.n	8005d10 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	031b      	lsls	r3, r3, #12
 8005c28:	4926      	ldr	r1, [pc, #152]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c2e:	e06f      	b.n	8005d10 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c30:	4b24      	ldr	r3, [pc, #144]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	061b      	lsls	r3, r3, #24
 8005c3e:	4921      	ldr	r1, [pc, #132]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c44:	e064      	b.n	8005d10 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d047      	beq.n	8005cde <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f023 0219 	bic.w	r2, r3, #25
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	491a      	ldr	r1, [pc, #104]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c60:	f7fb fb80 	bl	8001364 <HAL_GetTick>
 8005c64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c66:	e008      	b.n	8005c7a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c68:	f7fb fb7c 	bl	8001364 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d901      	bls.n	8005c7a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e332      	b.n	80062e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c7a:	4b12      	ldr	r3, [pc, #72]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0304 	and.w	r3, r3, #4
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d0f0      	beq.n	8005c68 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c86:	f7fb fb9d 	bl	80013c4 <HAL_GetREVID>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d819      	bhi.n	8005cc8 <HAL_RCC_OscConfig+0x28c>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	2b40      	cmp	r3, #64	@ 0x40
 8005c9a:	d108      	bne.n	8005cae <HAL_RCC_OscConfig+0x272>
 8005c9c:	4b09      	ldr	r3, [pc, #36]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005ca4:	4a07      	ldr	r2, [pc, #28]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005ca6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005caa:	6053      	str	r3, [r2, #4]
 8005cac:	e030      	b.n	8005d10 <HAL_RCC_OscConfig+0x2d4>
 8005cae:	4b05      	ldr	r3, [pc, #20]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	031b      	lsls	r3, r3, #12
 8005cbc:	4901      	ldr	r1, [pc, #4]	@ (8005cc4 <HAL_RCC_OscConfig+0x288>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	604b      	str	r3, [r1, #4]
 8005cc2:	e025      	b.n	8005d10 <HAL_RCC_OscConfig+0x2d4>
 8005cc4:	58024400 	.word	0x58024400
 8005cc8:	4b9a      	ldr	r3, [pc, #616]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	061b      	lsls	r3, r3, #24
 8005cd6:	4997      	ldr	r1, [pc, #604]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	604b      	str	r3, [r1, #4]
 8005cdc:	e018      	b.n	8005d10 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cde:	4b95      	ldr	r3, [pc, #596]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a94      	ldr	r2, [pc, #592]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005ce4:	f023 0301 	bic.w	r3, r3, #1
 8005ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cea:	f7fb fb3b 	bl	8001364 <HAL_GetTick>
 8005cee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005cf0:	e008      	b.n	8005d04 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cf2:	f7fb fb37 	bl	8001364 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d901      	bls.n	8005d04 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e2ed      	b.n	80062e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d04:	4b8b      	ldr	r3, [pc, #556]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0304 	and.w	r3, r3, #4
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1f0      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0310 	and.w	r3, r3, #16
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 80a9 	beq.w	8005e70 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d1e:	4b85      	ldr	r3, [pc, #532]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d26:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d28:	4b82      	ldr	r3, [pc, #520]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	2b08      	cmp	r3, #8
 8005d32:	d007      	beq.n	8005d44 <HAL_RCC_OscConfig+0x308>
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	2b18      	cmp	r3, #24
 8005d38:	d13a      	bne.n	8005db0 <HAL_RCC_OscConfig+0x374>
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f003 0303 	and.w	r3, r3, #3
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d135      	bne.n	8005db0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d44:	4b7b      	ldr	r3, [pc, #492]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d005      	beq.n	8005d5c <HAL_RCC_OscConfig+0x320>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	2b80      	cmp	r3, #128	@ 0x80
 8005d56:	d001      	beq.n	8005d5c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e2c1      	b.n	80062e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d5c:	f7fb fb32 	bl	80013c4 <HAL_GetREVID>
 8005d60:	4603      	mov	r3, r0
 8005d62:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d817      	bhi.n	8005d9a <HAL_RCC_OscConfig+0x35e>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	2b20      	cmp	r3, #32
 8005d70:	d108      	bne.n	8005d84 <HAL_RCC_OscConfig+0x348>
 8005d72:	4b70      	ldr	r3, [pc, #448]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005d7a:	4a6e      	ldr	r2, [pc, #440]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005d7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d80:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d82:	e075      	b.n	8005e70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d84:	4b6b      	ldr	r3, [pc, #428]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	069b      	lsls	r3, r3, #26
 8005d92:	4968      	ldr	r1, [pc, #416]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d98:	e06a      	b.n	8005e70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d9a:	4b66      	ldr	r3, [pc, #408]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	061b      	lsls	r3, r3, #24
 8005da8:	4962      	ldr	r1, [pc, #392]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005dae:	e05f      	b.n	8005e70 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d042      	beq.n	8005e3e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005db8:	4b5e      	ldr	r3, [pc, #376]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a5d      	ldr	r2, [pc, #372]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc4:	f7fb face 	bl	8001364 <HAL_GetTick>
 8005dc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005dca:	e008      	b.n	8005dde <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005dcc:	f7fb faca 	bl	8001364 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e280      	b.n	80062e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005dde:	4b55      	ldr	r3, [pc, #340]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d0f0      	beq.n	8005dcc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005dea:	f7fb faeb 	bl	80013c4 <HAL_GetREVID>
 8005dee:	4603      	mov	r3, r0
 8005df0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d817      	bhi.n	8005e28 <HAL_RCC_OscConfig+0x3ec>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	2b20      	cmp	r3, #32
 8005dfe:	d108      	bne.n	8005e12 <HAL_RCC_OscConfig+0x3d6>
 8005e00:	4b4c      	ldr	r3, [pc, #304]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005e08:	4a4a      	ldr	r2, [pc, #296]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005e0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e0e:	6053      	str	r3, [r2, #4]
 8005e10:	e02e      	b.n	8005e70 <HAL_RCC_OscConfig+0x434>
 8005e12:	4b48      	ldr	r3, [pc, #288]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	069b      	lsls	r3, r3, #26
 8005e20:	4944      	ldr	r1, [pc, #272]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	604b      	str	r3, [r1, #4]
 8005e26:	e023      	b.n	8005e70 <HAL_RCC_OscConfig+0x434>
 8005e28:	4b42      	ldr	r3, [pc, #264]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	061b      	lsls	r3, r3, #24
 8005e36:	493f      	ldr	r1, [pc, #252]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60cb      	str	r3, [r1, #12]
 8005e3c:	e018      	b.n	8005e70 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005e3e:	4b3d      	ldr	r3, [pc, #244]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a3c      	ldr	r2, [pc, #240]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005e44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e4a:	f7fb fa8b 	bl	8001364 <HAL_GetTick>
 8005e4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e50:	e008      	b.n	8005e64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005e52:	f7fb fa87 	bl	8001364 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d901      	bls.n	8005e64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e23d      	b.n	80062e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e64:	4b33      	ldr	r3, [pc, #204]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1f0      	bne.n	8005e52 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0308 	and.w	r3, r3, #8
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d036      	beq.n	8005eea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d019      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e84:	4b2b      	ldr	r3, [pc, #172]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005e86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e88:	4a2a      	ldr	r2, [pc, #168]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005e8a:	f043 0301 	orr.w	r3, r3, #1
 8005e8e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e90:	f7fb fa68 	bl	8001364 <HAL_GetTick>
 8005e94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e98:	f7fb fa64 	bl	8001364 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e21a      	b.n	80062e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005eaa:	4b22      	ldr	r3, [pc, #136]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0f0      	beq.n	8005e98 <HAL_RCC_OscConfig+0x45c>
 8005eb6:	e018      	b.n	8005eea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005ebe:	f023 0301 	bic.w	r3, r3, #1
 8005ec2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec4:	f7fb fa4e 	bl	8001364 <HAL_GetTick>
 8005ec8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005eca:	e008      	b.n	8005ede <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ecc:	f7fb fa4a 	bl	8001364 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d901      	bls.n	8005ede <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e200      	b.n	80062e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ede:	4b15      	ldr	r3, [pc, #84]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005ee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1f0      	bne.n	8005ecc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0320 	and.w	r3, r3, #32
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d039      	beq.n	8005f6a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d01c      	beq.n	8005f38 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005efe:	4b0d      	ldr	r3, [pc, #52]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a0c      	ldr	r2, [pc, #48]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005f04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005f08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f0a:	f7fb fa2b 	bl	8001364 <HAL_GetTick>
 8005f0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f10:	e008      	b.n	8005f24 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f12:	f7fb fa27 	bl	8001364 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d901      	bls.n	8005f24 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e1dd      	b.n	80062e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f24:	4b03      	ldr	r3, [pc, #12]	@ (8005f34 <HAL_RCC_OscConfig+0x4f8>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d0f0      	beq.n	8005f12 <HAL_RCC_OscConfig+0x4d6>
 8005f30:	e01b      	b.n	8005f6a <HAL_RCC_OscConfig+0x52e>
 8005f32:	bf00      	nop
 8005f34:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f38:	4b9b      	ldr	r3, [pc, #620]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a9a      	ldr	r2, [pc, #616]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8005f3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f44:	f7fb fa0e 	bl	8001364 <HAL_GetTick>
 8005f48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f4a:	e008      	b.n	8005f5e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f4c:	f7fb fa0a 	bl	8001364 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e1c0      	b.n	80062e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f5e:	4b92      	ldr	r3, [pc, #584]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1f0      	bne.n	8005f4c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0304 	and.w	r3, r3, #4
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 8081 	beq.w	800607a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f78:	4b8c      	ldr	r3, [pc, #560]	@ (80061ac <HAL_RCC_OscConfig+0x770>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a8b      	ldr	r2, [pc, #556]	@ (80061ac <HAL_RCC_OscConfig+0x770>)
 8005f7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f84:	f7fb f9ee 	bl	8001364 <HAL_GetTick>
 8005f88:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f8a:	e008      	b.n	8005f9e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f8c:	f7fb f9ea 	bl	8001364 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b64      	cmp	r3, #100	@ 0x64
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e1a0      	b.n	80062e0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f9e:	4b83      	ldr	r3, [pc, #524]	@ (80061ac <HAL_RCC_OscConfig+0x770>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d0f0      	beq.n	8005f8c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d106      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x584>
 8005fb2:	4b7d      	ldr	r3, [pc, #500]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8005fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb6:	4a7c      	ldr	r2, [pc, #496]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8005fb8:	f043 0301 	orr.w	r3, r3, #1
 8005fbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fbe:	e02d      	b.n	800601c <HAL_RCC_OscConfig+0x5e0>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10c      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x5a6>
 8005fc8:	4b77      	ldr	r3, [pc, #476]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8005fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fcc:	4a76      	ldr	r2, [pc, #472]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8005fce:	f023 0301 	bic.w	r3, r3, #1
 8005fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fd4:	4b74      	ldr	r3, [pc, #464]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8005fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fd8:	4a73      	ldr	r2, [pc, #460]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8005fda:	f023 0304 	bic.w	r3, r3, #4
 8005fde:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fe0:	e01c      	b.n	800601c <HAL_RCC_OscConfig+0x5e0>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	2b05      	cmp	r3, #5
 8005fe8:	d10c      	bne.n	8006004 <HAL_RCC_OscConfig+0x5c8>
 8005fea:	4b6f      	ldr	r3, [pc, #444]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8005fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fee:	4a6e      	ldr	r2, [pc, #440]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8005ff0:	f043 0304 	orr.w	r3, r3, #4
 8005ff4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ff6:	4b6c      	ldr	r3, [pc, #432]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8005ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ffa:	4a6b      	ldr	r2, [pc, #428]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8005ffc:	f043 0301 	orr.w	r3, r3, #1
 8006000:	6713      	str	r3, [r2, #112]	@ 0x70
 8006002:	e00b      	b.n	800601c <HAL_RCC_OscConfig+0x5e0>
 8006004:	4b68      	ldr	r3, [pc, #416]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8006006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006008:	4a67      	ldr	r2, [pc, #412]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 800600a:	f023 0301 	bic.w	r3, r3, #1
 800600e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006010:	4b65      	ldr	r3, [pc, #404]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8006012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006014:	4a64      	ldr	r2, [pc, #400]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8006016:	f023 0304 	bic.w	r3, r3, #4
 800601a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d015      	beq.n	8006050 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006024:	f7fb f99e 	bl	8001364 <HAL_GetTick>
 8006028:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800602a:	e00a      	b.n	8006042 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800602c:	f7fb f99a 	bl	8001364 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800603a:	4293      	cmp	r3, r2
 800603c:	d901      	bls.n	8006042 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e14e      	b.n	80062e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006042:	4b59      	ldr	r3, [pc, #356]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8006044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0ee      	beq.n	800602c <HAL_RCC_OscConfig+0x5f0>
 800604e:	e014      	b.n	800607a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006050:	f7fb f988 	bl	8001364 <HAL_GetTick>
 8006054:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006056:	e00a      	b.n	800606e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006058:	f7fb f984 	bl	8001364 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006066:	4293      	cmp	r3, r2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e138      	b.n	80062e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800606e:	4b4e      	ldr	r3, [pc, #312]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8006070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1ee      	bne.n	8006058 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607e:	2b00      	cmp	r3, #0
 8006080:	f000 812d 	beq.w	80062de <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006084:	4b48      	ldr	r3, [pc, #288]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800608c:	2b18      	cmp	r3, #24
 800608e:	f000 80bd 	beq.w	800620c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006096:	2b02      	cmp	r3, #2
 8006098:	f040 809e 	bne.w	80061d8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800609c:	4b42      	ldr	r3, [pc, #264]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a41      	ldr	r2, [pc, #260]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 80060a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a8:	f7fb f95c 	bl	8001364 <HAL_GetTick>
 80060ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060ae:	e008      	b.n	80060c2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060b0:	f7fb f958 	bl	8001364 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e10e      	b.n	80062e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060c2:	4b39      	ldr	r3, [pc, #228]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1f0      	bne.n	80060b0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060ce:	4b36      	ldr	r3, [pc, #216]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 80060d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060d2:	4b37      	ldr	r3, [pc, #220]	@ (80061b0 <HAL_RCC_OscConfig+0x774>)
 80060d4:	4013      	ands	r3, r2
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80060de:	0112      	lsls	r2, r2, #4
 80060e0:	430a      	orrs	r2, r1
 80060e2:	4931      	ldr	r1, [pc, #196]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ec:	3b01      	subs	r3, #1
 80060ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060f6:	3b01      	subs	r3, #1
 80060f8:	025b      	lsls	r3, r3, #9
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	431a      	orrs	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006102:	3b01      	subs	r3, #1
 8006104:	041b      	lsls	r3, r3, #16
 8006106:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006110:	3b01      	subs	r3, #1
 8006112:	061b      	lsls	r3, r3, #24
 8006114:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006118:	4923      	ldr	r1, [pc, #140]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 800611a:	4313      	orrs	r3, r2
 800611c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800611e:	4b22      	ldr	r3, [pc, #136]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8006120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006122:	4a21      	ldr	r2, [pc, #132]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8006124:	f023 0301 	bic.w	r3, r3, #1
 8006128:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800612a:	4b1f      	ldr	r3, [pc, #124]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 800612c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800612e:	4b21      	ldr	r3, [pc, #132]	@ (80061b4 <HAL_RCC_OscConfig+0x778>)
 8006130:	4013      	ands	r3, r2
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006136:	00d2      	lsls	r2, r2, #3
 8006138:	491b      	ldr	r1, [pc, #108]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 800613a:	4313      	orrs	r3, r2
 800613c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800613e:	4b1a      	ldr	r3, [pc, #104]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8006140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006142:	f023 020c 	bic.w	r2, r3, #12
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614a:	4917      	ldr	r1, [pc, #92]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 800614c:	4313      	orrs	r3, r2
 800614e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006150:	4b15      	ldr	r3, [pc, #84]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8006152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006154:	f023 0202 	bic.w	r2, r3, #2
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800615c:	4912      	ldr	r1, [pc, #72]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 800615e:	4313      	orrs	r3, r2
 8006160:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006162:	4b11      	ldr	r3, [pc, #68]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8006164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006166:	4a10      	ldr	r2, [pc, #64]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8006168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800616c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800616e:	4b0e      	ldr	r3, [pc, #56]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8006170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006172:	4a0d      	ldr	r2, [pc, #52]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8006174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006178:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800617a:	4b0b      	ldr	r3, [pc, #44]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 800617c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617e:	4a0a      	ldr	r2, [pc, #40]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8006180:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006184:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006186:	4b08      	ldr	r3, [pc, #32]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8006188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618a:	4a07      	ldr	r2, [pc, #28]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 800618c:	f043 0301 	orr.w	r3, r3, #1
 8006190:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006192:	4b05      	ldr	r3, [pc, #20]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a04      	ldr	r2, [pc, #16]	@ (80061a8 <HAL_RCC_OscConfig+0x76c>)
 8006198:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800619c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800619e:	f7fb f8e1 	bl	8001364 <HAL_GetTick>
 80061a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061a4:	e011      	b.n	80061ca <HAL_RCC_OscConfig+0x78e>
 80061a6:	bf00      	nop
 80061a8:	58024400 	.word	0x58024400
 80061ac:	58024800 	.word	0x58024800
 80061b0:	fffffc0c 	.word	0xfffffc0c
 80061b4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061b8:	f7fb f8d4 	bl	8001364 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e08a      	b.n	80062e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061ca:	4b47      	ldr	r3, [pc, #284]	@ (80062e8 <HAL_RCC_OscConfig+0x8ac>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d0f0      	beq.n	80061b8 <HAL_RCC_OscConfig+0x77c>
 80061d6:	e082      	b.n	80062de <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061d8:	4b43      	ldr	r3, [pc, #268]	@ (80062e8 <HAL_RCC_OscConfig+0x8ac>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a42      	ldr	r2, [pc, #264]	@ (80062e8 <HAL_RCC_OscConfig+0x8ac>)
 80061de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e4:	f7fb f8be 	bl	8001364 <HAL_GetTick>
 80061e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061ea:	e008      	b.n	80061fe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ec:	f7fb f8ba 	bl	8001364 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e070      	b.n	80062e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061fe:	4b3a      	ldr	r3, [pc, #232]	@ (80062e8 <HAL_RCC_OscConfig+0x8ac>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1f0      	bne.n	80061ec <HAL_RCC_OscConfig+0x7b0>
 800620a:	e068      	b.n	80062de <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800620c:	4b36      	ldr	r3, [pc, #216]	@ (80062e8 <HAL_RCC_OscConfig+0x8ac>)
 800620e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006210:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006212:	4b35      	ldr	r3, [pc, #212]	@ (80062e8 <HAL_RCC_OscConfig+0x8ac>)
 8006214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006216:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621c:	2b01      	cmp	r3, #1
 800621e:	d031      	beq.n	8006284 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	f003 0203 	and.w	r2, r3, #3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800622a:	429a      	cmp	r2, r3
 800622c:	d12a      	bne.n	8006284 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	091b      	lsrs	r3, r3, #4
 8006232:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800623a:	429a      	cmp	r2, r3
 800623c:	d122      	bne.n	8006284 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006248:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800624a:	429a      	cmp	r2, r3
 800624c:	d11a      	bne.n	8006284 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	0a5b      	lsrs	r3, r3, #9
 8006252:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800625a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800625c:	429a      	cmp	r2, r3
 800625e:	d111      	bne.n	8006284 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	0c1b      	lsrs	r3, r3, #16
 8006264:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800626e:	429a      	cmp	r2, r3
 8006270:	d108      	bne.n	8006284 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	0e1b      	lsrs	r3, r3, #24
 8006276:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800627e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006280:	429a      	cmp	r2, r3
 8006282:	d001      	beq.n	8006288 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e02b      	b.n	80062e0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006288:	4b17      	ldr	r3, [pc, #92]	@ (80062e8 <HAL_RCC_OscConfig+0x8ac>)
 800628a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800628c:	08db      	lsrs	r3, r3, #3
 800628e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006292:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	429a      	cmp	r2, r3
 800629c:	d01f      	beq.n	80062de <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800629e:	4b12      	ldr	r3, [pc, #72]	@ (80062e8 <HAL_RCC_OscConfig+0x8ac>)
 80062a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a2:	4a11      	ldr	r2, [pc, #68]	@ (80062e8 <HAL_RCC_OscConfig+0x8ac>)
 80062a4:	f023 0301 	bic.w	r3, r3, #1
 80062a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80062aa:	f7fb f85b 	bl	8001364 <HAL_GetTick>
 80062ae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80062b0:	bf00      	nop
 80062b2:	f7fb f857 	bl	8001364 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d0f9      	beq.n	80062b2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80062be:	4b0a      	ldr	r3, [pc, #40]	@ (80062e8 <HAL_RCC_OscConfig+0x8ac>)
 80062c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062c2:	4b0a      	ldr	r3, [pc, #40]	@ (80062ec <HAL_RCC_OscConfig+0x8b0>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80062ca:	00d2      	lsls	r2, r2, #3
 80062cc:	4906      	ldr	r1, [pc, #24]	@ (80062e8 <HAL_RCC_OscConfig+0x8ac>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80062d2:	4b05      	ldr	r3, [pc, #20]	@ (80062e8 <HAL_RCC_OscConfig+0x8ac>)
 80062d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d6:	4a04      	ldr	r2, [pc, #16]	@ (80062e8 <HAL_RCC_OscConfig+0x8ac>)
 80062d8:	f043 0301 	orr.w	r3, r3, #1
 80062dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3730      	adds	r7, #48	@ 0x30
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	58024400 	.word	0x58024400
 80062ec:	ffff0007 	.word	0xffff0007

080062f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e19c      	b.n	800663e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006304:	4b8a      	ldr	r3, [pc, #552]	@ (8006530 <HAL_RCC_ClockConfig+0x240>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 030f 	and.w	r3, r3, #15
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	429a      	cmp	r2, r3
 8006310:	d910      	bls.n	8006334 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006312:	4b87      	ldr	r3, [pc, #540]	@ (8006530 <HAL_RCC_ClockConfig+0x240>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f023 020f 	bic.w	r2, r3, #15
 800631a:	4985      	ldr	r1, [pc, #532]	@ (8006530 <HAL_RCC_ClockConfig+0x240>)
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	4313      	orrs	r3, r2
 8006320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006322:	4b83      	ldr	r3, [pc, #524]	@ (8006530 <HAL_RCC_ClockConfig+0x240>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 030f 	and.w	r3, r3, #15
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	429a      	cmp	r2, r3
 800632e:	d001      	beq.n	8006334 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e184      	b.n	800663e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	2b00      	cmp	r3, #0
 800633e:	d010      	beq.n	8006362 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	691a      	ldr	r2, [r3, #16]
 8006344:	4b7b      	ldr	r3, [pc, #492]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800634c:	429a      	cmp	r2, r3
 800634e:	d908      	bls.n	8006362 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006350:	4b78      	ldr	r3, [pc, #480]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	4975      	ldr	r1, [pc, #468]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 800635e:	4313      	orrs	r3, r2
 8006360:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0308 	and.w	r3, r3, #8
 800636a:	2b00      	cmp	r3, #0
 800636c:	d010      	beq.n	8006390 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	695a      	ldr	r2, [r3, #20]
 8006372:	4b70      	ldr	r3, [pc, #448]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800637a:	429a      	cmp	r2, r3
 800637c:	d908      	bls.n	8006390 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800637e:	4b6d      	ldr	r3, [pc, #436]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	496a      	ldr	r1, [pc, #424]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 800638c:	4313      	orrs	r3, r2
 800638e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0310 	and.w	r3, r3, #16
 8006398:	2b00      	cmp	r3, #0
 800639a:	d010      	beq.n	80063be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	699a      	ldr	r2, [r3, #24]
 80063a0:	4b64      	ldr	r3, [pc, #400]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 80063a2:	69db      	ldr	r3, [r3, #28]
 80063a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d908      	bls.n	80063be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80063ac:	4b61      	ldr	r3, [pc, #388]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 80063ae:	69db      	ldr	r3, [r3, #28]
 80063b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	495e      	ldr	r1, [pc, #376]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0320 	and.w	r3, r3, #32
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d010      	beq.n	80063ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69da      	ldr	r2, [r3, #28]
 80063ce:	4b59      	ldr	r3, [pc, #356]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d908      	bls.n	80063ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80063da:	4b56      	ldr	r3, [pc, #344]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	4953      	ldr	r1, [pc, #332]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d010      	beq.n	800641a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68da      	ldr	r2, [r3, #12]
 80063fc:	4b4d      	ldr	r3, [pc, #308]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	f003 030f 	and.w	r3, r3, #15
 8006404:	429a      	cmp	r2, r3
 8006406:	d908      	bls.n	800641a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006408:	4b4a      	ldr	r3, [pc, #296]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	f023 020f 	bic.w	r2, r3, #15
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	4947      	ldr	r1, [pc, #284]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 8006416:	4313      	orrs	r3, r2
 8006418:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d055      	beq.n	80064d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006426:	4b43      	ldr	r3, [pc, #268]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	4940      	ldr	r1, [pc, #256]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 8006434:	4313      	orrs	r3, r2
 8006436:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	2b02      	cmp	r3, #2
 800643e:	d107      	bne.n	8006450 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006440:	4b3c      	ldr	r3, [pc, #240]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d121      	bne.n	8006490 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e0f6      	b.n	800663e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2b03      	cmp	r3, #3
 8006456:	d107      	bne.n	8006468 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006458:	4b36      	ldr	r3, [pc, #216]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d115      	bne.n	8006490 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e0ea      	b.n	800663e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d107      	bne.n	8006480 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006470:	4b30      	ldr	r3, [pc, #192]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006478:	2b00      	cmp	r3, #0
 800647a:	d109      	bne.n	8006490 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e0de      	b.n	800663e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006480:	4b2c      	ldr	r3, [pc, #176]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e0d6      	b.n	800663e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006490:	4b28      	ldr	r3, [pc, #160]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	f023 0207 	bic.w	r2, r3, #7
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	4925      	ldr	r1, [pc, #148]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064a2:	f7fa ff5f 	bl	8001364 <HAL_GetTick>
 80064a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064a8:	e00a      	b.n	80064c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064aa:	f7fa ff5b 	bl	8001364 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d901      	bls.n	80064c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e0be      	b.n	800663e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064c0:	4b1c      	ldr	r3, [pc, #112]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	00db      	lsls	r3, r3, #3
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d1eb      	bne.n	80064aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d010      	beq.n	8006500 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	4b14      	ldr	r3, [pc, #80]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	f003 030f 	and.w	r3, r3, #15
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d208      	bcs.n	8006500 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064ee:	4b11      	ldr	r3, [pc, #68]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	f023 020f 	bic.w	r2, r3, #15
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	490e      	ldr	r1, [pc, #56]	@ (8006534 <HAL_RCC_ClockConfig+0x244>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006500:	4b0b      	ldr	r3, [pc, #44]	@ (8006530 <HAL_RCC_ClockConfig+0x240>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 030f 	and.w	r3, r3, #15
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	429a      	cmp	r2, r3
 800650c:	d214      	bcs.n	8006538 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800650e:	4b08      	ldr	r3, [pc, #32]	@ (8006530 <HAL_RCC_ClockConfig+0x240>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f023 020f 	bic.w	r2, r3, #15
 8006516:	4906      	ldr	r1, [pc, #24]	@ (8006530 <HAL_RCC_ClockConfig+0x240>)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	4313      	orrs	r3, r2
 800651c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800651e:	4b04      	ldr	r3, [pc, #16]	@ (8006530 <HAL_RCC_ClockConfig+0x240>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 030f 	and.w	r3, r3, #15
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	429a      	cmp	r2, r3
 800652a:	d005      	beq.n	8006538 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e086      	b.n	800663e <HAL_RCC_ClockConfig+0x34e>
 8006530:	52002000 	.word	0x52002000
 8006534:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b00      	cmp	r3, #0
 8006542:	d010      	beq.n	8006566 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691a      	ldr	r2, [r3, #16]
 8006548:	4b3f      	ldr	r3, [pc, #252]	@ (8006648 <HAL_RCC_ClockConfig+0x358>)
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006550:	429a      	cmp	r2, r3
 8006552:	d208      	bcs.n	8006566 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006554:	4b3c      	ldr	r3, [pc, #240]	@ (8006648 <HAL_RCC_ClockConfig+0x358>)
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	4939      	ldr	r1, [pc, #228]	@ (8006648 <HAL_RCC_ClockConfig+0x358>)
 8006562:	4313      	orrs	r3, r2
 8006564:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0308 	and.w	r3, r3, #8
 800656e:	2b00      	cmp	r3, #0
 8006570:	d010      	beq.n	8006594 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	695a      	ldr	r2, [r3, #20]
 8006576:	4b34      	ldr	r3, [pc, #208]	@ (8006648 <HAL_RCC_ClockConfig+0x358>)
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800657e:	429a      	cmp	r2, r3
 8006580:	d208      	bcs.n	8006594 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006582:	4b31      	ldr	r3, [pc, #196]	@ (8006648 <HAL_RCC_ClockConfig+0x358>)
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	492e      	ldr	r1, [pc, #184]	@ (8006648 <HAL_RCC_ClockConfig+0x358>)
 8006590:	4313      	orrs	r3, r2
 8006592:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0310 	and.w	r3, r3, #16
 800659c:	2b00      	cmp	r3, #0
 800659e:	d010      	beq.n	80065c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	699a      	ldr	r2, [r3, #24]
 80065a4:	4b28      	ldr	r3, [pc, #160]	@ (8006648 <HAL_RCC_ClockConfig+0x358>)
 80065a6:	69db      	ldr	r3, [r3, #28]
 80065a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d208      	bcs.n	80065c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065b0:	4b25      	ldr	r3, [pc, #148]	@ (8006648 <HAL_RCC_ClockConfig+0x358>)
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	4922      	ldr	r1, [pc, #136]	@ (8006648 <HAL_RCC_ClockConfig+0x358>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0320 	and.w	r3, r3, #32
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d010      	beq.n	80065f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	69da      	ldr	r2, [r3, #28]
 80065d2:	4b1d      	ldr	r3, [pc, #116]	@ (8006648 <HAL_RCC_ClockConfig+0x358>)
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80065da:	429a      	cmp	r2, r3
 80065dc:	d208      	bcs.n	80065f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80065de:	4b1a      	ldr	r3, [pc, #104]	@ (8006648 <HAL_RCC_ClockConfig+0x358>)
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	4917      	ldr	r1, [pc, #92]	@ (8006648 <HAL_RCC_ClockConfig+0x358>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80065f0:	f000 f834 	bl	800665c <HAL_RCC_GetSysClockFreq>
 80065f4:	4602      	mov	r2, r0
 80065f6:	4b14      	ldr	r3, [pc, #80]	@ (8006648 <HAL_RCC_ClockConfig+0x358>)
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	0a1b      	lsrs	r3, r3, #8
 80065fc:	f003 030f 	and.w	r3, r3, #15
 8006600:	4912      	ldr	r1, [pc, #72]	@ (800664c <HAL_RCC_ClockConfig+0x35c>)
 8006602:	5ccb      	ldrb	r3, [r1, r3]
 8006604:	f003 031f 	and.w	r3, r3, #31
 8006608:	fa22 f303 	lsr.w	r3, r2, r3
 800660c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800660e:	4b0e      	ldr	r3, [pc, #56]	@ (8006648 <HAL_RCC_ClockConfig+0x358>)
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	4a0d      	ldr	r2, [pc, #52]	@ (800664c <HAL_RCC_ClockConfig+0x35c>)
 8006618:	5cd3      	ldrb	r3, [r2, r3]
 800661a:	f003 031f 	and.w	r3, r3, #31
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	fa22 f303 	lsr.w	r3, r2, r3
 8006624:	4a0a      	ldr	r2, [pc, #40]	@ (8006650 <HAL_RCC_ClockConfig+0x360>)
 8006626:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006628:	4a0a      	ldr	r2, [pc, #40]	@ (8006654 <HAL_RCC_ClockConfig+0x364>)
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800662e:	4b0a      	ldr	r3, [pc, #40]	@ (8006658 <HAL_RCC_ClockConfig+0x368>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4618      	mov	r0, r3
 8006634:	f7fa fe4c 	bl	80012d0 <HAL_InitTick>
 8006638:	4603      	mov	r3, r0
 800663a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800663c:	7bfb      	ldrb	r3, [r7, #15]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	58024400 	.word	0x58024400
 800664c:	0800ab50 	.word	0x0800ab50
 8006650:	24000004 	.word	0x24000004
 8006654:	24000000 	.word	0x24000000
 8006658:	24000024 	.word	0x24000024

0800665c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800665c:	b480      	push	{r7}
 800665e:	b089      	sub	sp, #36	@ 0x24
 8006660:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006662:	4bb3      	ldr	r3, [pc, #716]	@ (8006930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800666a:	2b18      	cmp	r3, #24
 800666c:	f200 8155 	bhi.w	800691a <HAL_RCC_GetSysClockFreq+0x2be>
 8006670:	a201      	add	r2, pc, #4	@ (adr r2, 8006678 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006676:	bf00      	nop
 8006678:	080066dd 	.word	0x080066dd
 800667c:	0800691b 	.word	0x0800691b
 8006680:	0800691b 	.word	0x0800691b
 8006684:	0800691b 	.word	0x0800691b
 8006688:	0800691b 	.word	0x0800691b
 800668c:	0800691b 	.word	0x0800691b
 8006690:	0800691b 	.word	0x0800691b
 8006694:	0800691b 	.word	0x0800691b
 8006698:	08006703 	.word	0x08006703
 800669c:	0800691b 	.word	0x0800691b
 80066a0:	0800691b 	.word	0x0800691b
 80066a4:	0800691b 	.word	0x0800691b
 80066a8:	0800691b 	.word	0x0800691b
 80066ac:	0800691b 	.word	0x0800691b
 80066b0:	0800691b 	.word	0x0800691b
 80066b4:	0800691b 	.word	0x0800691b
 80066b8:	08006709 	.word	0x08006709
 80066bc:	0800691b 	.word	0x0800691b
 80066c0:	0800691b 	.word	0x0800691b
 80066c4:	0800691b 	.word	0x0800691b
 80066c8:	0800691b 	.word	0x0800691b
 80066cc:	0800691b 	.word	0x0800691b
 80066d0:	0800691b 	.word	0x0800691b
 80066d4:	0800691b 	.word	0x0800691b
 80066d8:	0800670f 	.word	0x0800670f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066dc:	4b94      	ldr	r3, [pc, #592]	@ (8006930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0320 	and.w	r3, r3, #32
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d009      	beq.n	80066fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066e8:	4b91      	ldr	r3, [pc, #580]	@ (8006930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	08db      	lsrs	r3, r3, #3
 80066ee:	f003 0303 	and.w	r3, r3, #3
 80066f2:	4a90      	ldr	r2, [pc, #576]	@ (8006934 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066f4:	fa22 f303 	lsr.w	r3, r2, r3
 80066f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80066fa:	e111      	b.n	8006920 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80066fc:	4b8d      	ldr	r3, [pc, #564]	@ (8006934 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066fe:	61bb      	str	r3, [r7, #24]
      break;
 8006700:	e10e      	b.n	8006920 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006702:	4b8d      	ldr	r3, [pc, #564]	@ (8006938 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006704:	61bb      	str	r3, [r7, #24]
      break;
 8006706:	e10b      	b.n	8006920 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006708:	4b8c      	ldr	r3, [pc, #560]	@ (800693c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800670a:	61bb      	str	r3, [r7, #24]
      break;
 800670c:	e108      	b.n	8006920 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800670e:	4b88      	ldr	r3, [pc, #544]	@ (8006930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006712:	f003 0303 	and.w	r3, r3, #3
 8006716:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006718:	4b85      	ldr	r3, [pc, #532]	@ (8006930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800671a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800671c:	091b      	lsrs	r3, r3, #4
 800671e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006722:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006724:	4b82      	ldr	r3, [pc, #520]	@ (8006930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800672e:	4b80      	ldr	r3, [pc, #512]	@ (8006930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006732:	08db      	lsrs	r3, r3, #3
 8006734:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	fb02 f303 	mul.w	r3, r2, r3
 800673e:	ee07 3a90 	vmov	s15, r3
 8006742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006746:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	f000 80e1 	beq.w	8006914 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	2b02      	cmp	r3, #2
 8006756:	f000 8083 	beq.w	8006860 <HAL_RCC_GetSysClockFreq+0x204>
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b02      	cmp	r3, #2
 800675e:	f200 80a1 	bhi.w	80068a4 <HAL_RCC_GetSysClockFreq+0x248>
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d003      	beq.n	8006770 <HAL_RCC_GetSysClockFreq+0x114>
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d056      	beq.n	800681c <HAL_RCC_GetSysClockFreq+0x1c0>
 800676e:	e099      	b.n	80068a4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006770:	4b6f      	ldr	r3, [pc, #444]	@ (8006930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0320 	and.w	r3, r3, #32
 8006778:	2b00      	cmp	r3, #0
 800677a:	d02d      	beq.n	80067d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800677c:	4b6c      	ldr	r3, [pc, #432]	@ (8006930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	08db      	lsrs	r3, r3, #3
 8006782:	f003 0303 	and.w	r3, r3, #3
 8006786:	4a6b      	ldr	r2, [pc, #428]	@ (8006934 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006788:	fa22 f303 	lsr.w	r3, r2, r3
 800678c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	ee07 3a90 	vmov	s15, r3
 8006794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	ee07 3a90 	vmov	s15, r3
 800679e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067a6:	4b62      	ldr	r3, [pc, #392]	@ (8006930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ae:	ee07 3a90 	vmov	s15, r3
 80067b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80067ba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006940 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80067d6:	e087      	b.n	80068e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	ee07 3a90 	vmov	s15, r3
 80067de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006944 <HAL_RCC_GetSysClockFreq+0x2e8>
 80067e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ea:	4b51      	ldr	r3, [pc, #324]	@ (8006930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f2:	ee07 3a90 	vmov	s15, r3
 80067f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80067fe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006940 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800680a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800680e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006816:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800681a:	e065      	b.n	80068e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	ee07 3a90 	vmov	s15, r3
 8006822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006826:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006948 <HAL_RCC_GetSysClockFreq+0x2ec>
 800682a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800682e:	4b40      	ldr	r3, [pc, #256]	@ (8006930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006836:	ee07 3a90 	vmov	s15, r3
 800683a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800683e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006842:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006940 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800684a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800684e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800685a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800685e:	e043      	b.n	80068e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	ee07 3a90 	vmov	s15, r3
 8006866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800686a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800694c <HAL_RCC_GetSysClockFreq+0x2f0>
 800686e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006872:	4b2f      	ldr	r3, [pc, #188]	@ (8006930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800687a:	ee07 3a90 	vmov	s15, r3
 800687e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006882:	ed97 6a02 	vldr	s12, [r7, #8]
 8006886:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006940 <HAL_RCC_GetSysClockFreq+0x2e4>
 800688a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800688e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006892:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800689a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800689e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80068a2:	e021      	b.n	80068e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	ee07 3a90 	vmov	s15, r3
 80068aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006948 <HAL_RCC_GetSysClockFreq+0x2ec>
 80068b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068b6:	4b1e      	ldr	r3, [pc, #120]	@ (8006930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068be:	ee07 3a90 	vmov	s15, r3
 80068c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80068ca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006940 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80068e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80068e8:	4b11      	ldr	r3, [pc, #68]	@ (8006930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ec:	0a5b      	lsrs	r3, r3, #9
 80068ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068f2:	3301      	adds	r3, #1
 80068f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	ee07 3a90 	vmov	s15, r3
 80068fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006900:	edd7 6a07 	vldr	s13, [r7, #28]
 8006904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800690c:	ee17 3a90 	vmov	r3, s15
 8006910:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006912:	e005      	b.n	8006920 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006914:	2300      	movs	r3, #0
 8006916:	61bb      	str	r3, [r7, #24]
      break;
 8006918:	e002      	b.n	8006920 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800691a:	4b07      	ldr	r3, [pc, #28]	@ (8006938 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800691c:	61bb      	str	r3, [r7, #24]
      break;
 800691e:	bf00      	nop
  }

  return sysclockfreq;
 8006920:	69bb      	ldr	r3, [r7, #24]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3724      	adds	r7, #36	@ 0x24
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	58024400 	.word	0x58024400
 8006934:	03d09000 	.word	0x03d09000
 8006938:	003d0900 	.word	0x003d0900
 800693c:	017d7840 	.word	0x017d7840
 8006940:	46000000 	.word	0x46000000
 8006944:	4c742400 	.word	0x4c742400
 8006948:	4a742400 	.word	0x4a742400
 800694c:	4bbebc20 	.word	0x4bbebc20

08006950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006956:	f7ff fe81 	bl	800665c <HAL_RCC_GetSysClockFreq>
 800695a:	4602      	mov	r2, r0
 800695c:	4b10      	ldr	r3, [pc, #64]	@ (80069a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	0a1b      	lsrs	r3, r3, #8
 8006962:	f003 030f 	and.w	r3, r3, #15
 8006966:	490f      	ldr	r1, [pc, #60]	@ (80069a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006968:	5ccb      	ldrb	r3, [r1, r3]
 800696a:	f003 031f 	and.w	r3, r3, #31
 800696e:	fa22 f303 	lsr.w	r3, r2, r3
 8006972:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006974:	4b0a      	ldr	r3, [pc, #40]	@ (80069a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	f003 030f 	and.w	r3, r3, #15
 800697c:	4a09      	ldr	r2, [pc, #36]	@ (80069a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800697e:	5cd3      	ldrb	r3, [r2, r3]
 8006980:	f003 031f 	and.w	r3, r3, #31
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	fa22 f303 	lsr.w	r3, r2, r3
 800698a:	4a07      	ldr	r2, [pc, #28]	@ (80069a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800698c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800698e:	4a07      	ldr	r2, [pc, #28]	@ (80069ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006994:	4b04      	ldr	r3, [pc, #16]	@ (80069a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006996:	681b      	ldr	r3, [r3, #0]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	58024400 	.word	0x58024400
 80069a4:	0800ab50 	.word	0x0800ab50
 80069a8:	24000004 	.word	0x24000004
 80069ac:	24000000 	.word	0x24000000

080069b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80069b4:	f7ff ffcc 	bl	8006950 <HAL_RCC_GetHCLKFreq>
 80069b8:	4602      	mov	r2, r0
 80069ba:	4b06      	ldr	r3, [pc, #24]	@ (80069d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	091b      	lsrs	r3, r3, #4
 80069c0:	f003 0307 	and.w	r3, r3, #7
 80069c4:	4904      	ldr	r1, [pc, #16]	@ (80069d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80069c6:	5ccb      	ldrb	r3, [r1, r3]
 80069c8:	f003 031f 	and.w	r3, r3, #31
 80069cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	58024400 	.word	0x58024400
 80069d8:	0800ab50 	.word	0x0800ab50

080069dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80069e0:	f7ff ffb6 	bl	8006950 <HAL_RCC_GetHCLKFreq>
 80069e4:	4602      	mov	r2, r0
 80069e6:	4b06      	ldr	r3, [pc, #24]	@ (8006a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	0a1b      	lsrs	r3, r3, #8
 80069ec:	f003 0307 	and.w	r3, r3, #7
 80069f0:	4904      	ldr	r1, [pc, #16]	@ (8006a04 <HAL_RCC_GetPCLK2Freq+0x28>)
 80069f2:	5ccb      	ldrb	r3, [r1, r3]
 80069f4:	f003 031f 	and.w	r3, r3, #31
 80069f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	58024400 	.word	0x58024400
 8006a04:	0800ab50 	.word	0x0800ab50

08006a08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a0c:	b0ca      	sub	sp, #296	@ 0x128
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a14:	2300      	movs	r3, #0
 8006a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a28:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006a2c:	2500      	movs	r5, #0
 8006a2e:	ea54 0305 	orrs.w	r3, r4, r5
 8006a32:	d049      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a3e:	d02f      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006a40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a44:	d828      	bhi.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a4a:	d01a      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006a4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a50:	d822      	bhi.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006a56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a5a:	d007      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006a5c:	e01c      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a5e:	4bb8      	ldr	r3, [pc, #736]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a62:	4ab7      	ldr	r2, [pc, #732]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006a6a:	e01a      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a70:	3308      	adds	r3, #8
 8006a72:	2102      	movs	r1, #2
 8006a74:	4618      	mov	r0, r3
 8006a76:	f002 fb61 	bl	800913c <RCCEx_PLL2_Config>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006a80:	e00f      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a86:	3328      	adds	r3, #40	@ 0x28
 8006a88:	2102      	movs	r1, #2
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f002 fc08 	bl	80092a0 <RCCEx_PLL3_Config>
 8006a90:	4603      	mov	r3, r0
 8006a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006a96:	e004      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a9e:	e000      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10a      	bne.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006aaa:	4ba5      	ldr	r3, [pc, #660]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006aac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ab8:	4aa1      	ldr	r2, [pc, #644]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006aba:	430b      	orrs	r3, r1
 8006abc:	6513      	str	r3, [r2, #80]	@ 0x50
 8006abe:	e003      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ac4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006ad4:	f04f 0900 	mov.w	r9, #0
 8006ad8:	ea58 0309 	orrs.w	r3, r8, r9
 8006adc:	d047      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ae4:	2b04      	cmp	r3, #4
 8006ae6:	d82a      	bhi.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8006af0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aee:	bf00      	nop
 8006af0:	08006b05 	.word	0x08006b05
 8006af4:	08006b13 	.word	0x08006b13
 8006af8:	08006b29 	.word	0x08006b29
 8006afc:	08006b47 	.word	0x08006b47
 8006b00:	08006b47 	.word	0x08006b47
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b04:	4b8e      	ldr	r3, [pc, #568]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b08:	4a8d      	ldr	r2, [pc, #564]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b10:	e01a      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b16:	3308      	adds	r3, #8
 8006b18:	2100      	movs	r1, #0
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f002 fb0e 	bl	800913c <RCCEx_PLL2_Config>
 8006b20:	4603      	mov	r3, r0
 8006b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b26:	e00f      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b2c:	3328      	adds	r3, #40	@ 0x28
 8006b2e:	2100      	movs	r1, #0
 8006b30:	4618      	mov	r0, r3
 8006b32:	f002 fbb5 	bl	80092a0 <RCCEx_PLL3_Config>
 8006b36:	4603      	mov	r3, r0
 8006b38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b3c:	e004      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b44:	e000      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10a      	bne.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b50:	4b7b      	ldr	r3, [pc, #492]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b54:	f023 0107 	bic.w	r1, r3, #7
 8006b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b5e:	4a78      	ldr	r2, [pc, #480]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b60:	430b      	orrs	r3, r1
 8006b62:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b64:	e003      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006b7a:	f04f 0b00 	mov.w	fp, #0
 8006b7e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006b82:	d04c      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b8e:	d030      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006b90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b94:	d829      	bhi.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006b96:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b98:	d02d      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006b9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b9c:	d825      	bhi.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006b9e:	2b80      	cmp	r3, #128	@ 0x80
 8006ba0:	d018      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006ba2:	2b80      	cmp	r3, #128	@ 0x80
 8006ba4:	d821      	bhi.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d002      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006baa:	2b40      	cmp	r3, #64	@ 0x40
 8006bac:	d007      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006bae:	e01c      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bb0:	4b63      	ldr	r3, [pc, #396]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb4:	4a62      	ldr	r2, [pc, #392]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006bbc:	e01c      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc2:	3308      	adds	r3, #8
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f002 fab8 	bl	800913c <RCCEx_PLL2_Config>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006bd2:	e011      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd8:	3328      	adds	r3, #40	@ 0x28
 8006bda:	2100      	movs	r1, #0
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f002 fb5f 	bl	80092a0 <RCCEx_PLL3_Config>
 8006be2:	4603      	mov	r3, r0
 8006be4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006be8:	e006      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bf0:	e002      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006bf2:	bf00      	nop
 8006bf4:	e000      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006bf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10a      	bne.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006c00:	4b4f      	ldr	r3, [pc, #316]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c04:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c0e:	4a4c      	ldr	r2, [pc, #304]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c10:	430b      	orrs	r3, r1
 8006c12:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c14:	e003      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c26:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006c2a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006c2e:	2300      	movs	r3, #0
 8006c30:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006c34:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006c38:	460b      	mov	r3, r1
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	d053      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006c46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c4a:	d035      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006c4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c50:	d82e      	bhi.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006c52:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006c56:	d031      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006c58:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006c5c:	d828      	bhi.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006c5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c62:	d01a      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006c64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c68:	d822      	bhi.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d003      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006c6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c72:	d007      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006c74:	e01c      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c76:	4b32      	ldr	r3, [pc, #200]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7a:	4a31      	ldr	r2, [pc, #196]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c82:	e01c      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c88:	3308      	adds	r3, #8
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f002 fa55 	bl	800913c <RCCEx_PLL2_Config>
 8006c92:	4603      	mov	r3, r0
 8006c94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006c98:	e011      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c9e:	3328      	adds	r3, #40	@ 0x28
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f002 fafc 	bl	80092a0 <RCCEx_PLL3_Config>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cae:	e006      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cb6:	e002      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006cb8:	bf00      	nop
 8006cba:	e000      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d10b      	bne.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cca:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006cd6:	4a1a      	ldr	r2, [pc, #104]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cd8:	430b      	orrs	r3, r1
 8006cda:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cdc:	e003      	b.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ce2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006cf2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006cfc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006d00:	460b      	mov	r3, r1
 8006d02:	4313      	orrs	r3, r2
 8006d04:	d056      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006d0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d12:	d038      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006d14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d18:	d831      	bhi.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006d1a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006d1e:	d034      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006d20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006d24:	d82b      	bhi.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006d26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d2a:	d01d      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006d2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d30:	d825      	bhi.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d006      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006d36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d3a:	d00a      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006d3c:	e01f      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006d3e:	bf00      	nop
 8006d40:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d44:	4ba2      	ldr	r3, [pc, #648]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d48:	4aa1      	ldr	r2, [pc, #644]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d50:	e01c      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d56:	3308      	adds	r3, #8
 8006d58:	2100      	movs	r1, #0
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f002 f9ee 	bl	800913c <RCCEx_PLL2_Config>
 8006d60:	4603      	mov	r3, r0
 8006d62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006d66:	e011      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d6c:	3328      	adds	r3, #40	@ 0x28
 8006d6e:	2100      	movs	r1, #0
 8006d70:	4618      	mov	r0, r3
 8006d72:	f002 fa95 	bl	80092a0 <RCCEx_PLL3_Config>
 8006d76:	4603      	mov	r3, r0
 8006d78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d7c:	e006      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d84:	e002      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006d86:	bf00      	nop
 8006d88:	e000      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10b      	bne.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006d94:	4b8e      	ldr	r3, [pc, #568]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d98:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006da4:	4a8a      	ldr	r2, [pc, #552]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006da6:	430b      	orrs	r3, r1
 8006da8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006daa:	e003      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006db0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006dc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006dca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006dce:	460b      	mov	r3, r1
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	d03a      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dda:	2b30      	cmp	r3, #48	@ 0x30
 8006ddc:	d01f      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006dde:	2b30      	cmp	r3, #48	@ 0x30
 8006de0:	d819      	bhi.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006de2:	2b20      	cmp	r3, #32
 8006de4:	d00c      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006de6:	2b20      	cmp	r3, #32
 8006de8:	d815      	bhi.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d019      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006dee:	2b10      	cmp	r3, #16
 8006df0:	d111      	bne.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006df2:	4b77      	ldr	r3, [pc, #476]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df6:	4a76      	ldr	r2, [pc, #472]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006dfe:	e011      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e04:	3308      	adds	r3, #8
 8006e06:	2102      	movs	r1, #2
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f002 f997 	bl	800913c <RCCEx_PLL2_Config>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006e14:	e006      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e1c:	e002      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006e1e:	bf00      	nop
 8006e20:	e000      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006e22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10a      	bne.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006e2c:	4b68      	ldr	r3, [pc, #416]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e30:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e3a:	4a65      	ldr	r2, [pc, #404]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e3c:	430b      	orrs	r3, r1
 8006e3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006e40:	e003      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e52:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006e56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006e60:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006e64:	460b      	mov	r3, r1
 8006e66:	4313      	orrs	r3, r2
 8006e68:	d051      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e74:	d035      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006e76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e7a:	d82e      	bhi.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006e7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e80:	d031      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006e82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e86:	d828      	bhi.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006e88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e8c:	d01a      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006e8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e92:	d822      	bhi.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d003      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006e98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e9c:	d007      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006e9e:	e01c      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ea0:	4b4b      	ldr	r3, [pc, #300]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea4:	4a4a      	ldr	r2, [pc, #296]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ea6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006eaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006eac:	e01c      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb2:	3308      	adds	r3, #8
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f002 f940 	bl	800913c <RCCEx_PLL2_Config>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ec2:	e011      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec8:	3328      	adds	r3, #40	@ 0x28
 8006eca:	2100      	movs	r1, #0
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f002 f9e7 	bl	80092a0 <RCCEx_PLL3_Config>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ed8:	e006      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ee0:	e002      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006ee2:	bf00      	nop
 8006ee4:	e000      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10a      	bne.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006ef0:	4b37      	ldr	r3, [pc, #220]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ef4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006efe:	4a34      	ldr	r2, [pc, #208]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f00:	430b      	orrs	r3, r1
 8006f02:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f04:	e003      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f16:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006f1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f1e:	2300      	movs	r3, #0
 8006f20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f24:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	d056      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f38:	d033      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006f3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f3e:	d82c      	bhi.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f44:	d02f      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006f46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f4a:	d826      	bhi.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f50:	d02b      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006f52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f56:	d820      	bhi.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f5c:	d012      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006f5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f62:	d81a      	bhi.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d022      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f6c:	d115      	bne.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f72:	3308      	adds	r3, #8
 8006f74:	2101      	movs	r1, #1
 8006f76:	4618      	mov	r0, r3
 8006f78:	f002 f8e0 	bl	800913c <RCCEx_PLL2_Config>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f82:	e015      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f88:	3328      	adds	r3, #40	@ 0x28
 8006f8a:	2101      	movs	r1, #1
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f002 f987 	bl	80092a0 <RCCEx_PLL3_Config>
 8006f92:	4603      	mov	r3, r0
 8006f94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f98:	e00a      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fa0:	e006      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006fa2:	bf00      	nop
 8006fa4:	e004      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006fa6:	bf00      	nop
 8006fa8:	e002      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006faa:	bf00      	nop
 8006fac:	e000      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006fae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10d      	bne.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006fb8:	4b05      	ldr	r3, [pc, #20]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fbc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fc6:	4a02      	ldr	r2, [pc, #8]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fc8:	430b      	orrs	r3, r1
 8006fca:	6513      	str	r3, [r2, #80]	@ 0x50
 8006fcc:	e006      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006fce:	bf00      	nop
 8006fd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006fec:	2300      	movs	r3, #0
 8006fee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ff2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	d055      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007000:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007004:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007008:	d033      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800700a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800700e:	d82c      	bhi.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007014:	d02f      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800701a:	d826      	bhi.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800701c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007020:	d02b      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007022:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007026:	d820      	bhi.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007028:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800702c:	d012      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800702e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007032:	d81a      	bhi.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007034:	2b00      	cmp	r3, #0
 8007036:	d022      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007038:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800703c:	d115      	bne.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800703e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007042:	3308      	adds	r3, #8
 8007044:	2101      	movs	r1, #1
 8007046:	4618      	mov	r0, r3
 8007048:	f002 f878 	bl	800913c <RCCEx_PLL2_Config>
 800704c:	4603      	mov	r3, r0
 800704e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007052:	e015      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007058:	3328      	adds	r3, #40	@ 0x28
 800705a:	2101      	movs	r1, #1
 800705c:	4618      	mov	r0, r3
 800705e:	f002 f91f 	bl	80092a0 <RCCEx_PLL3_Config>
 8007062:	4603      	mov	r3, r0
 8007064:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007068:	e00a      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007070:	e006      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007072:	bf00      	nop
 8007074:	e004      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007076:	bf00      	nop
 8007078:	e002      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800707a:	bf00      	nop
 800707c:	e000      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800707e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007080:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10b      	bne.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007088:	4ba3      	ldr	r3, [pc, #652]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800708a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800708c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007094:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007098:	4a9f      	ldr	r2, [pc, #636]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800709a:	430b      	orrs	r3, r1
 800709c:	6593      	str	r3, [r2, #88]	@ 0x58
 800709e:	e003      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80070a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80070b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80070b8:	2300      	movs	r3, #0
 80070ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80070be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80070c2:	460b      	mov	r3, r1
 80070c4:	4313      	orrs	r3, r2
 80070c6:	d037      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80070c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070d2:	d00e      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80070d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070d8:	d816      	bhi.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d018      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80070de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070e2:	d111      	bne.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070e4:	4b8c      	ldr	r3, [pc, #560]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e8:	4a8b      	ldr	r2, [pc, #556]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80070f0:	e00f      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f6:	3308      	adds	r3, #8
 80070f8:	2101      	movs	r1, #1
 80070fa:	4618      	mov	r0, r3
 80070fc:	f002 f81e 	bl	800913c <RCCEx_PLL2_Config>
 8007100:	4603      	mov	r3, r0
 8007102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007106:	e004      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800710e:	e000      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007110:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10a      	bne.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800711a:	4b7f      	ldr	r3, [pc, #508]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800711c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800711e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007128:	4a7b      	ldr	r2, [pc, #492]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800712a:	430b      	orrs	r3, r1
 800712c:	6513      	str	r3, [r2, #80]	@ 0x50
 800712e:	e003      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007130:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007134:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800713c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007140:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007144:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007148:	2300      	movs	r3, #0
 800714a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800714e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007152:	460b      	mov	r3, r1
 8007154:	4313      	orrs	r3, r2
 8007156:	d039      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800715c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800715e:	2b03      	cmp	r3, #3
 8007160:	d81c      	bhi.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007162:	a201      	add	r2, pc, #4	@ (adr r2, 8007168 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007168:	080071a5 	.word	0x080071a5
 800716c:	08007179 	.word	0x08007179
 8007170:	08007187 	.word	0x08007187
 8007174:	080071a5 	.word	0x080071a5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007178:	4b67      	ldr	r3, [pc, #412]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800717a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717c:	4a66      	ldr	r2, [pc, #408]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800717e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007182:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007184:	e00f      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800718a:	3308      	adds	r3, #8
 800718c:	2102      	movs	r1, #2
 800718e:	4618      	mov	r0, r3
 8007190:	f001 ffd4 	bl	800913c <RCCEx_PLL2_Config>
 8007194:	4603      	mov	r3, r0
 8007196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800719a:	e004      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071a2:	e000      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80071a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10a      	bne.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80071ae:	4b5a      	ldr	r3, [pc, #360]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071b2:	f023 0103 	bic.w	r1, r3, #3
 80071b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071bc:	4a56      	ldr	r2, [pc, #344]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071be:	430b      	orrs	r3, r1
 80071c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80071c2:	e003      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80071d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80071dc:	2300      	movs	r3, #0
 80071de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80071e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80071e6:	460b      	mov	r3, r1
 80071e8:	4313      	orrs	r3, r2
 80071ea:	f000 809f 	beq.w	800732c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071ee:	4b4b      	ldr	r3, [pc, #300]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a4a      	ldr	r2, [pc, #296]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80071f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071fa:	f7fa f8b3 	bl	8001364 <HAL_GetTick>
 80071fe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007202:	e00b      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007204:	f7fa f8ae 	bl	8001364 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	2b64      	cmp	r3, #100	@ 0x64
 8007212:	d903      	bls.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800721a:	e005      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800721c:	4b3f      	ldr	r3, [pc, #252]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007224:	2b00      	cmp	r3, #0
 8007226:	d0ed      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007228:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800722c:	2b00      	cmp	r3, #0
 800722e:	d179      	bne.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007230:	4b39      	ldr	r3, [pc, #228]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007232:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007238:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800723c:	4053      	eors	r3, r2
 800723e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007242:	2b00      	cmp	r3, #0
 8007244:	d015      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007246:	4b34      	ldr	r3, [pc, #208]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800724a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800724e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007252:	4b31      	ldr	r3, [pc, #196]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007256:	4a30      	ldr	r2, [pc, #192]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800725c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800725e:	4b2e      	ldr	r3, [pc, #184]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007262:	4a2d      	ldr	r2, [pc, #180]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007264:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007268:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800726a:	4a2b      	ldr	r2, [pc, #172]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800726c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007270:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007276:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800727a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800727e:	d118      	bne.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007280:	f7fa f870 	bl	8001364 <HAL_GetTick>
 8007284:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007288:	e00d      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800728a:	f7fa f86b 	bl	8001364 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007294:	1ad2      	subs	r2, r2, r3
 8007296:	f241 3388 	movw	r3, #5000	@ 0x1388
 800729a:	429a      	cmp	r2, r3
 800729c:	d903      	bls.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80072a4:	e005      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072a6:	4b1c      	ldr	r3, [pc, #112]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072aa:	f003 0302 	and.w	r3, r3, #2
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d0eb      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80072b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d129      	bne.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80072c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072ca:	d10e      	bne.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80072cc:	4b12      	ldr	r3, [pc, #72]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80072d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80072dc:	091a      	lsrs	r2, r3, #4
 80072de:	4b10      	ldr	r3, [pc, #64]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80072e0:	4013      	ands	r3, r2
 80072e2:	4a0d      	ldr	r2, [pc, #52]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072e4:	430b      	orrs	r3, r1
 80072e6:	6113      	str	r3, [r2, #16]
 80072e8:	e005      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80072ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	4a0a      	ldr	r2, [pc, #40]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80072f4:	6113      	str	r3, [r2, #16]
 80072f6:	4b08      	ldr	r3, [pc, #32]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072f8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80072fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007306:	4a04      	ldr	r2, [pc, #16]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007308:	430b      	orrs	r3, r1
 800730a:	6713      	str	r3, [r2, #112]	@ 0x70
 800730c:	e00e      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800730e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007312:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007316:	e009      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007318:	58024400 	.word	0x58024400
 800731c:	58024800 	.word	0x58024800
 8007320:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007324:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007328:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800732c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007334:	f002 0301 	and.w	r3, r2, #1
 8007338:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800733c:	2300      	movs	r3, #0
 800733e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007342:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007346:	460b      	mov	r3, r1
 8007348:	4313      	orrs	r3, r2
 800734a:	f000 8089 	beq.w	8007460 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800734e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007352:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007354:	2b28      	cmp	r3, #40	@ 0x28
 8007356:	d86b      	bhi.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007358:	a201      	add	r2, pc, #4	@ (adr r2, 8007360 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800735a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735e:	bf00      	nop
 8007360:	08007439 	.word	0x08007439
 8007364:	08007431 	.word	0x08007431
 8007368:	08007431 	.word	0x08007431
 800736c:	08007431 	.word	0x08007431
 8007370:	08007431 	.word	0x08007431
 8007374:	08007431 	.word	0x08007431
 8007378:	08007431 	.word	0x08007431
 800737c:	08007431 	.word	0x08007431
 8007380:	08007405 	.word	0x08007405
 8007384:	08007431 	.word	0x08007431
 8007388:	08007431 	.word	0x08007431
 800738c:	08007431 	.word	0x08007431
 8007390:	08007431 	.word	0x08007431
 8007394:	08007431 	.word	0x08007431
 8007398:	08007431 	.word	0x08007431
 800739c:	08007431 	.word	0x08007431
 80073a0:	0800741b 	.word	0x0800741b
 80073a4:	08007431 	.word	0x08007431
 80073a8:	08007431 	.word	0x08007431
 80073ac:	08007431 	.word	0x08007431
 80073b0:	08007431 	.word	0x08007431
 80073b4:	08007431 	.word	0x08007431
 80073b8:	08007431 	.word	0x08007431
 80073bc:	08007431 	.word	0x08007431
 80073c0:	08007439 	.word	0x08007439
 80073c4:	08007431 	.word	0x08007431
 80073c8:	08007431 	.word	0x08007431
 80073cc:	08007431 	.word	0x08007431
 80073d0:	08007431 	.word	0x08007431
 80073d4:	08007431 	.word	0x08007431
 80073d8:	08007431 	.word	0x08007431
 80073dc:	08007431 	.word	0x08007431
 80073e0:	08007439 	.word	0x08007439
 80073e4:	08007431 	.word	0x08007431
 80073e8:	08007431 	.word	0x08007431
 80073ec:	08007431 	.word	0x08007431
 80073f0:	08007431 	.word	0x08007431
 80073f4:	08007431 	.word	0x08007431
 80073f8:	08007431 	.word	0x08007431
 80073fc:	08007431 	.word	0x08007431
 8007400:	08007439 	.word	0x08007439
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007408:	3308      	adds	r3, #8
 800740a:	2101      	movs	r1, #1
 800740c:	4618      	mov	r0, r3
 800740e:	f001 fe95 	bl	800913c <RCCEx_PLL2_Config>
 8007412:	4603      	mov	r3, r0
 8007414:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007418:	e00f      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800741a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800741e:	3328      	adds	r3, #40	@ 0x28
 8007420:	2101      	movs	r1, #1
 8007422:	4618      	mov	r0, r3
 8007424:	f001 ff3c 	bl	80092a0 <RCCEx_PLL3_Config>
 8007428:	4603      	mov	r3, r0
 800742a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800742e:	e004      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007436:	e000      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800743a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10a      	bne.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007442:	4bbf      	ldr	r3, [pc, #764]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007446:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800744a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800744e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007450:	4abb      	ldr	r2, [pc, #748]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007452:	430b      	orrs	r3, r1
 8007454:	6553      	str	r3, [r2, #84]	@ 0x54
 8007456:	e003      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007458:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800745c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007468:	f002 0302 	and.w	r3, r2, #2
 800746c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007470:	2300      	movs	r3, #0
 8007472:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007476:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800747a:	460b      	mov	r3, r1
 800747c:	4313      	orrs	r3, r2
 800747e:	d041      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007484:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007486:	2b05      	cmp	r3, #5
 8007488:	d824      	bhi.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800748a:	a201      	add	r2, pc, #4	@ (adr r2, 8007490 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800748c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007490:	080074dd 	.word	0x080074dd
 8007494:	080074a9 	.word	0x080074a9
 8007498:	080074bf 	.word	0x080074bf
 800749c:	080074dd 	.word	0x080074dd
 80074a0:	080074dd 	.word	0x080074dd
 80074a4:	080074dd 	.word	0x080074dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ac:	3308      	adds	r3, #8
 80074ae:	2101      	movs	r1, #1
 80074b0:	4618      	mov	r0, r3
 80074b2:	f001 fe43 	bl	800913c <RCCEx_PLL2_Config>
 80074b6:	4603      	mov	r3, r0
 80074b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80074bc:	e00f      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c2:	3328      	adds	r3, #40	@ 0x28
 80074c4:	2101      	movs	r1, #1
 80074c6:	4618      	mov	r0, r3
 80074c8:	f001 feea 	bl	80092a0 <RCCEx_PLL3_Config>
 80074cc:	4603      	mov	r3, r0
 80074ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80074d2:	e004      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074da:	e000      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80074dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10a      	bne.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80074e6:	4b96      	ldr	r3, [pc, #600]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ea:	f023 0107 	bic.w	r1, r3, #7
 80074ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074f4:	4a92      	ldr	r2, [pc, #584]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074f6:	430b      	orrs	r3, r1
 80074f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80074fa:	e003      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007500:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750c:	f002 0304 	and.w	r3, r2, #4
 8007510:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007514:	2300      	movs	r3, #0
 8007516:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800751a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800751e:	460b      	mov	r3, r1
 8007520:	4313      	orrs	r3, r2
 8007522:	d044      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800752c:	2b05      	cmp	r3, #5
 800752e:	d825      	bhi.n	800757c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007530:	a201      	add	r2, pc, #4	@ (adr r2, 8007538 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007536:	bf00      	nop
 8007538:	08007585 	.word	0x08007585
 800753c:	08007551 	.word	0x08007551
 8007540:	08007567 	.word	0x08007567
 8007544:	08007585 	.word	0x08007585
 8007548:	08007585 	.word	0x08007585
 800754c:	08007585 	.word	0x08007585
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007554:	3308      	adds	r3, #8
 8007556:	2101      	movs	r1, #1
 8007558:	4618      	mov	r0, r3
 800755a:	f001 fdef 	bl	800913c <RCCEx_PLL2_Config>
 800755e:	4603      	mov	r3, r0
 8007560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007564:	e00f      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800756a:	3328      	adds	r3, #40	@ 0x28
 800756c:	2101      	movs	r1, #1
 800756e:	4618      	mov	r0, r3
 8007570:	f001 fe96 	bl	80092a0 <RCCEx_PLL3_Config>
 8007574:	4603      	mov	r3, r0
 8007576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800757a:	e004      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007582:	e000      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10b      	bne.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800758e:	4b6c      	ldr	r3, [pc, #432]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007592:	f023 0107 	bic.w	r1, r3, #7
 8007596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800759a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800759e:	4a68      	ldr	r2, [pc, #416]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075a0:	430b      	orrs	r3, r1
 80075a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80075a4:	e003      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b6:	f002 0320 	and.w	r3, r2, #32
 80075ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80075be:	2300      	movs	r3, #0
 80075c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80075c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80075c8:	460b      	mov	r3, r1
 80075ca:	4313      	orrs	r3, r2
 80075cc:	d055      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80075ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075da:	d033      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80075dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075e0:	d82c      	bhi.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80075e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075e6:	d02f      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80075e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075ec:	d826      	bhi.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80075ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075f2:	d02b      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80075f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075f8:	d820      	bhi.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80075fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075fe:	d012      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007600:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007604:	d81a      	bhi.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007606:	2b00      	cmp	r3, #0
 8007608:	d022      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800760a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800760e:	d115      	bne.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007614:	3308      	adds	r3, #8
 8007616:	2100      	movs	r1, #0
 8007618:	4618      	mov	r0, r3
 800761a:	f001 fd8f 	bl	800913c <RCCEx_PLL2_Config>
 800761e:	4603      	mov	r3, r0
 8007620:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007624:	e015      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800762a:	3328      	adds	r3, #40	@ 0x28
 800762c:	2102      	movs	r1, #2
 800762e:	4618      	mov	r0, r3
 8007630:	f001 fe36 	bl	80092a0 <RCCEx_PLL3_Config>
 8007634:	4603      	mov	r3, r0
 8007636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800763a:	e00a      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007642:	e006      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007644:	bf00      	nop
 8007646:	e004      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007648:	bf00      	nop
 800764a:	e002      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800764c:	bf00      	nop
 800764e:	e000      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10b      	bne.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800765a:	4b39      	ldr	r3, [pc, #228]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800765c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800765e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800766a:	4a35      	ldr	r2, [pc, #212]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800766c:	430b      	orrs	r3, r1
 800766e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007670:	e003      	b.n	800767a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007676:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800767a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800767e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007682:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007686:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800768a:	2300      	movs	r3, #0
 800768c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007690:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007694:	460b      	mov	r3, r1
 8007696:	4313      	orrs	r3, r2
 8007698:	d058      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800769a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800769e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80076a2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80076a6:	d033      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80076a8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80076ac:	d82c      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80076ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076b2:	d02f      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80076b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076b8:	d826      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80076ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80076be:	d02b      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80076c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80076c4:	d820      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80076c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076ca:	d012      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80076cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076d0:	d81a      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d022      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80076d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076da:	d115      	bne.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e0:	3308      	adds	r3, #8
 80076e2:	2100      	movs	r1, #0
 80076e4:	4618      	mov	r0, r3
 80076e6:	f001 fd29 	bl	800913c <RCCEx_PLL2_Config>
 80076ea:	4603      	mov	r3, r0
 80076ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80076f0:	e015      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f6:	3328      	adds	r3, #40	@ 0x28
 80076f8:	2102      	movs	r1, #2
 80076fa:	4618      	mov	r0, r3
 80076fc:	f001 fdd0 	bl	80092a0 <RCCEx_PLL3_Config>
 8007700:	4603      	mov	r3, r0
 8007702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007706:	e00a      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800770e:	e006      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007710:	bf00      	nop
 8007712:	e004      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007714:	bf00      	nop
 8007716:	e002      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007718:	bf00      	nop
 800771a:	e000      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800771c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800771e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10e      	bne.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007726:	4b06      	ldr	r3, [pc, #24]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800772a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800772e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007732:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007736:	4a02      	ldr	r2, [pc, #8]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007738:	430b      	orrs	r3, r1
 800773a:	6593      	str	r3, [r2, #88]	@ 0x58
 800773c:	e006      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800773e:	bf00      	nop
 8007740:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007748:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800774c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007754:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007758:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800775c:	2300      	movs	r3, #0
 800775e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007762:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007766:	460b      	mov	r3, r1
 8007768:	4313      	orrs	r3, r2
 800776a:	d055      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800776c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007770:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007774:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007778:	d033      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800777a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800777e:	d82c      	bhi.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007780:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007784:	d02f      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007786:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800778a:	d826      	bhi.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800778c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007790:	d02b      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007792:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007796:	d820      	bhi.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007798:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800779c:	d012      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800779e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077a2:	d81a      	bhi.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d022      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80077a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077ac:	d115      	bne.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077b2:	3308      	adds	r3, #8
 80077b4:	2100      	movs	r1, #0
 80077b6:	4618      	mov	r0, r3
 80077b8:	f001 fcc0 	bl	800913c <RCCEx_PLL2_Config>
 80077bc:	4603      	mov	r3, r0
 80077be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80077c2:	e015      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c8:	3328      	adds	r3, #40	@ 0x28
 80077ca:	2102      	movs	r1, #2
 80077cc:	4618      	mov	r0, r3
 80077ce:	f001 fd67 	bl	80092a0 <RCCEx_PLL3_Config>
 80077d2:	4603      	mov	r3, r0
 80077d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80077d8:	e00a      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077e0:	e006      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80077e2:	bf00      	nop
 80077e4:	e004      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80077e6:	bf00      	nop
 80077e8:	e002      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80077ea:	bf00      	nop
 80077ec:	e000      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80077ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10b      	bne.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80077f8:	4ba1      	ldr	r3, [pc, #644]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077fc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007804:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007808:	4a9d      	ldr	r2, [pc, #628]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800780a:	430b      	orrs	r3, r1
 800780c:	6593      	str	r3, [r2, #88]	@ 0x58
 800780e:	e003      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007810:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007814:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800781c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007820:	f002 0308 	and.w	r3, r2, #8
 8007824:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007828:	2300      	movs	r3, #0
 800782a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800782e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007832:	460b      	mov	r3, r1
 8007834:	4313      	orrs	r3, r2
 8007836:	d01e      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800783c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007840:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007844:	d10c      	bne.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800784a:	3328      	adds	r3, #40	@ 0x28
 800784c:	2102      	movs	r1, #2
 800784e:	4618      	mov	r0, r3
 8007850:	f001 fd26 	bl	80092a0 <RCCEx_PLL3_Config>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d002      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007860:	4b87      	ldr	r3, [pc, #540]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007864:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800786c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007870:	4a83      	ldr	r2, [pc, #524]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007872:	430b      	orrs	r3, r1
 8007874:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800787a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787e:	f002 0310 	and.w	r3, r2, #16
 8007882:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007886:	2300      	movs	r3, #0
 8007888:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800788c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007890:	460b      	mov	r3, r1
 8007892:	4313      	orrs	r3, r2
 8007894:	d01e      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800789a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800789e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078a2:	d10c      	bne.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80078a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a8:	3328      	adds	r3, #40	@ 0x28
 80078aa:	2102      	movs	r1, #2
 80078ac:	4618      	mov	r0, r3
 80078ae:	f001 fcf7 	bl	80092a0 <RCCEx_PLL3_Config>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80078be:	4b70      	ldr	r3, [pc, #448]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80078c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80078ce:	4a6c      	ldr	r2, [pc, #432]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078d0:	430b      	orrs	r3, r1
 80078d2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80078d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078dc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80078e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80078e4:	2300      	movs	r3, #0
 80078e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80078ea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80078ee:	460b      	mov	r3, r1
 80078f0:	4313      	orrs	r3, r2
 80078f2:	d03e      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80078f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80078fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007900:	d022      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007902:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007906:	d81b      	bhi.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007908:	2b00      	cmp	r3, #0
 800790a:	d003      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800790c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007910:	d00b      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007912:	e015      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007918:	3308      	adds	r3, #8
 800791a:	2100      	movs	r1, #0
 800791c:	4618      	mov	r0, r3
 800791e:	f001 fc0d 	bl	800913c <RCCEx_PLL2_Config>
 8007922:	4603      	mov	r3, r0
 8007924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007928:	e00f      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800792a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800792e:	3328      	adds	r3, #40	@ 0x28
 8007930:	2102      	movs	r1, #2
 8007932:	4618      	mov	r0, r3
 8007934:	f001 fcb4 	bl	80092a0 <RCCEx_PLL3_Config>
 8007938:	4603      	mov	r3, r0
 800793a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800793e:	e004      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007946:	e000      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800794a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10b      	bne.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007952:	4b4b      	ldr	r3, [pc, #300]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007956:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800795a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800795e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007962:	4a47      	ldr	r2, [pc, #284]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007964:	430b      	orrs	r3, r1
 8007966:	6593      	str	r3, [r2, #88]	@ 0x58
 8007968:	e003      	b.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800796a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800796e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800797e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007980:	2300      	movs	r3, #0
 8007982:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007984:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007988:	460b      	mov	r3, r1
 800798a:	4313      	orrs	r3, r2
 800798c:	d03b      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800798e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007996:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800799a:	d01f      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800799c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80079a0:	d818      	bhi.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80079a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079a6:	d003      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80079a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079ac:	d007      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80079ae:	e011      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b0:	4b33      	ldr	r3, [pc, #204]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b4:	4a32      	ldr	r2, [pc, #200]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80079bc:	e00f      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c2:	3328      	adds	r3, #40	@ 0x28
 80079c4:	2101      	movs	r1, #1
 80079c6:	4618      	mov	r0, r3
 80079c8:	f001 fc6a 	bl	80092a0 <RCCEx_PLL3_Config>
 80079cc:	4603      	mov	r3, r0
 80079ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80079d2:	e004      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079da:	e000      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80079dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d10b      	bne.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80079e6:	4b26      	ldr	r3, [pc, #152]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80079ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079f6:	4a22      	ldr	r2, [pc, #136]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079f8:	430b      	orrs	r3, r1
 80079fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80079fc:	e003      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007a12:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a14:	2300      	movs	r3, #0
 8007a16:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a18:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	d034      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d003      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a30:	d007      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007a32:	e011      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a34:	4b12      	ldr	r3, [pc, #72]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a38:	4a11      	ldr	r2, [pc, #68]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a40:	e00e      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a46:	3308      	adds	r3, #8
 8007a48:	2102      	movs	r1, #2
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f001 fb76 	bl	800913c <RCCEx_PLL2_Config>
 8007a50:	4603      	mov	r3, r0
 8007a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a56:	e003      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10d      	bne.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007a68:	4b05      	ldr	r3, [pc, #20]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a6c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a76:	4a02      	ldr	r2, [pc, #8]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a78:	430b      	orrs	r3, r1
 8007a7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a7c:	e006      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007a7e:	bf00      	nop
 8007a80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a94:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007a98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a9e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	d00c      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aac:	3328      	adds	r3, #40	@ 0x28
 8007aae:	2102      	movs	r1, #2
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f001 fbf5 	bl	80092a0 <RCCEx_PLL3_Config>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007ace:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ad4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4313      	orrs	r3, r2
 8007adc:	d038      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ae6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007aea:	d018      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007aec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007af0:	d811      	bhi.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007af2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007af6:	d014      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007af8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007afc:	d80b      	bhi.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d011      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007b02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b06:	d106      	bne.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b08:	4bc3      	ldr	r3, [pc, #780]	@ (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b0c:	4ac2      	ldr	r2, [pc, #776]	@ (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007b14:	e008      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b1c:	e004      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007b1e:	bf00      	nop
 8007b20:	e002      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007b22:	bf00      	nop
 8007b24:	e000      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007b26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10b      	bne.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b30:	4bb9      	ldr	r3, [pc, #740]	@ (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b34:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b40:	4ab5      	ldr	r2, [pc, #724]	@ (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b42:	430b      	orrs	r3, r1
 8007b44:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b46:	e003      	b.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b58:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007b5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b5e:	2300      	movs	r3, #0
 8007b60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b62:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007b66:	460b      	mov	r3, r1
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	d009      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b6c:	4baa      	ldr	r3, [pc, #680]	@ (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b7a:	4aa7      	ldr	r2, [pc, #668]	@ (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b7c:	430b      	orrs	r3, r1
 8007b7e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b88:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007b8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b8e:	2300      	movs	r3, #0
 8007b90:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b92:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007b96:	460b      	mov	r3, r1
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	d00a      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007b9c:	4b9e      	ldr	r3, [pc, #632]	@ (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007bac:	4a9a      	ldr	r2, [pc, #616]	@ (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bae:	430b      	orrs	r3, r1
 8007bb0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bba:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bc4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	d009      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007bce:	4b92      	ldr	r3, [pc, #584]	@ (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bd2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bdc:	4a8e      	ldr	r2, [pc, #568]	@ (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bde:	430b      	orrs	r3, r1
 8007be0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bea:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007bee:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bf4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	d00e      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007bfe:	4b86      	ldr	r3, [pc, #536]	@ (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	4a85      	ldr	r2, [pc, #532]	@ (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c04:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007c08:	6113      	str	r3, [r2, #16]
 8007c0a:	4b83      	ldr	r3, [pc, #524]	@ (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c0c:	6919      	ldr	r1, [r3, #16]
 8007c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007c16:	4a80      	ldr	r2, [pc, #512]	@ (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c18:	430b      	orrs	r3, r1
 8007c1a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c24:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007c28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c2e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007c32:	460b      	mov	r3, r1
 8007c34:	4313      	orrs	r3, r2
 8007c36:	d009      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007c38:	4b77      	ldr	r3, [pc, #476]	@ (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c3c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c46:	4a74      	ldr	r2, [pc, #464]	@ (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c48:	430b      	orrs	r3, r1
 8007c4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c54:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007c58:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c5e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007c62:	460b      	mov	r3, r1
 8007c64:	4313      	orrs	r3, r2
 8007c66:	d00a      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c68:	4b6b      	ldr	r3, [pc, #428]	@ (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c6c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c78:	4a67      	ldr	r2, [pc, #412]	@ (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c7a:	430b      	orrs	r3, r1
 8007c7c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	2100      	movs	r1, #0
 8007c88:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c90:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007c94:	460b      	mov	r3, r1
 8007c96:	4313      	orrs	r3, r2
 8007c98:	d011      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c9e:	3308      	adds	r3, #8
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f001 fa4a 	bl	800913c <RCCEx_PLL2_Config>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007cae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d003      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	6239      	str	r1, [r7, #32]
 8007cca:	f003 0302 	and.w	r3, r3, #2
 8007cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cd0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	d011      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cde:	3308      	adds	r3, #8
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f001 fa2a 	bl	800913c <RCCEx_PLL2_Config>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d003      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d06:	2100      	movs	r1, #0
 8007d08:	61b9      	str	r1, [r7, #24]
 8007d0a:	f003 0304 	and.w	r3, r3, #4
 8007d0e:	61fb      	str	r3, [r7, #28]
 8007d10:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007d14:	460b      	mov	r3, r1
 8007d16:	4313      	orrs	r3, r2
 8007d18:	d011      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1e:	3308      	adds	r3, #8
 8007d20:	2102      	movs	r1, #2
 8007d22:	4618      	mov	r0, r3
 8007d24:	f001 fa0a 	bl	800913c <RCCEx_PLL2_Config>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d46:	2100      	movs	r1, #0
 8007d48:	6139      	str	r1, [r7, #16]
 8007d4a:	f003 0308 	and.w	r3, r3, #8
 8007d4e:	617b      	str	r3, [r7, #20]
 8007d50:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007d54:	460b      	mov	r3, r1
 8007d56:	4313      	orrs	r3, r2
 8007d58:	d011      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d5e:	3328      	adds	r3, #40	@ 0x28
 8007d60:	2100      	movs	r1, #0
 8007d62:	4618      	mov	r0, r3
 8007d64:	f001 fa9c 	bl	80092a0 <RCCEx_PLL3_Config>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d003      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d86:	2100      	movs	r1, #0
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	f003 0310 	and.w	r3, r3, #16
 8007d8e:	60fb      	str	r3, [r7, #12]
 8007d90:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007d94:	460b      	mov	r3, r1
 8007d96:	4313      	orrs	r3, r2
 8007d98:	d011      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d9e:	3328      	adds	r3, #40	@ 0x28
 8007da0:	2101      	movs	r1, #1
 8007da2:	4618      	mov	r0, r3
 8007da4:	f001 fa7c 	bl	80092a0 <RCCEx_PLL3_Config>
 8007da8:	4603      	mov	r3, r0
 8007daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007dae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007db6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	6039      	str	r1, [r7, #0]
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	607b      	str	r3, [r7, #4]
 8007dd0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	d011      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dde:	3328      	adds	r3, #40	@ 0x28
 8007de0:	2102      	movs	r1, #2
 8007de2:	4618      	mov	r0, r3
 8007de4:	f001 fa5c 	bl	80092a0 <RCCEx_PLL3_Config>
 8007de8:	4603      	mov	r3, r0
 8007dea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007dee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d003      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007dfe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	e000      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007e12:	46bd      	mov	sp, r7
 8007e14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e18:	58024400 	.word	0x58024400

08007e1c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b090      	sub	sp, #64	@ 0x40
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007e26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e2a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007e2e:	430b      	orrs	r3, r1
 8007e30:	f040 8094 	bne.w	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007e34:	4b9e      	ldr	r3, [pc, #632]	@ (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e38:	f003 0307 	and.w	r3, r3, #7
 8007e3c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	f200 8087 	bhi.w	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007e46:	a201      	add	r2, pc, #4	@ (adr r2, 8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4c:	08007e61 	.word	0x08007e61
 8007e50:	08007e89 	.word	0x08007e89
 8007e54:	08007eb1 	.word	0x08007eb1
 8007e58:	08007f4d 	.word	0x08007f4d
 8007e5c:	08007ed9 	.word	0x08007ed9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e60:	4b93      	ldr	r3, [pc, #588]	@ (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e6c:	d108      	bne.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e72:	4618      	mov	r0, r3
 8007e74:	f001 f810 	bl	8008e98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e7c:	f000 bd45 	b.w	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e80:	2300      	movs	r3, #0
 8007e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e84:	f000 bd41 	b.w	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e88:	4b89      	ldr	r3, [pc, #548]	@ (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e94:	d108      	bne.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e96:	f107 0318 	add.w	r3, r7, #24
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 fd54 	bl	8008948 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ea4:	f000 bd31 	b.w	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eac:	f000 bd2d 	b.w	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007eb0:	4b7f      	ldr	r3, [pc, #508]	@ (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007eb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ebc:	d108      	bne.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ebe:	f107 030c 	add.w	r3, r7, #12
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 fe94 	bl	8008bf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ecc:	f000 bd1d 	b.w	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ed4:	f000 bd19 	b.w	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ed8:	4b75      	ldr	r3, [pc, #468]	@ (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007edc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ee0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ee2:	4b73      	ldr	r3, [pc, #460]	@ (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 0304 	and.w	r3, r3, #4
 8007eea:	2b04      	cmp	r3, #4
 8007eec:	d10c      	bne.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d109      	bne.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ef4:	4b6e      	ldr	r3, [pc, #440]	@ (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	08db      	lsrs	r3, r3, #3
 8007efa:	f003 0303 	and.w	r3, r3, #3
 8007efe:	4a6d      	ldr	r2, [pc, #436]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f00:	fa22 f303 	lsr.w	r3, r2, r3
 8007f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f06:	e01f      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f08:	4b69      	ldr	r3, [pc, #420]	@ (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f14:	d106      	bne.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f1c:	d102      	bne.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007f1e:	4b66      	ldr	r3, [pc, #408]	@ (80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f22:	e011      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f24:	4b62      	ldr	r3, [pc, #392]	@ (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f30:	d106      	bne.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f38:	d102      	bne.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f3a:	4b60      	ldr	r3, [pc, #384]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f3e:	e003      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f40:	2300      	movs	r3, #0
 8007f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007f44:	f000 bce1 	b.w	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f48:	f000 bcdf 	b.w	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f4c:	4b5c      	ldr	r3, [pc, #368]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f50:	f000 bcdb 	b.w	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007f54:	2300      	movs	r3, #0
 8007f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f58:	f000 bcd7 	b.w	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007f5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f60:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007f64:	430b      	orrs	r3, r1
 8007f66:	f040 80ad 	bne.w	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007f6a:	4b51      	ldr	r3, [pc, #324]	@ (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f6e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007f72:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f7a:	d056      	beq.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f82:	f200 8090 	bhi.w	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f88:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f8a:	f000 8088 	beq.w	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f90:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f92:	f200 8088 	bhi.w	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f98:	2b80      	cmp	r3, #128	@ 0x80
 8007f9a:	d032      	beq.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f9e:	2b80      	cmp	r3, #128	@ 0x80
 8007fa0:	f200 8081 	bhi.w	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d003      	beq.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fac:	2b40      	cmp	r3, #64	@ 0x40
 8007fae:	d014      	beq.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007fb0:	e079      	b.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007fb2:	4b3f      	ldr	r3, [pc, #252]	@ (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fbe:	d108      	bne.n	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 ff67 	bl	8008e98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fce:	f000 bc9c 	b.w	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fd6:	f000 bc98 	b.w	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fda:	4b35      	ldr	r3, [pc, #212]	@ (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fe2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fe6:	d108      	bne.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fe8:	f107 0318 	add.w	r3, r7, #24
 8007fec:	4618      	mov	r0, r3
 8007fee:	f000 fcab 	bl	8008948 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ff6:	f000 bc88 	b.w	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ffe:	f000 bc84 	b.w	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008002:	4b2b      	ldr	r3, [pc, #172]	@ (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800800a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800800e:	d108      	bne.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008010:	f107 030c 	add.w	r3, r7, #12
 8008014:	4618      	mov	r0, r3
 8008016:	f000 fdeb 	bl	8008bf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800801e:	f000 bc74 	b.w	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008022:	2300      	movs	r3, #0
 8008024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008026:	f000 bc70 	b.w	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800802a:	4b21      	ldr	r3, [pc, #132]	@ (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800802c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800802e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008032:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008034:	4b1e      	ldr	r3, [pc, #120]	@ (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 0304 	and.w	r3, r3, #4
 800803c:	2b04      	cmp	r3, #4
 800803e:	d10c      	bne.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008042:	2b00      	cmp	r3, #0
 8008044:	d109      	bne.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008046:	4b1a      	ldr	r3, [pc, #104]	@ (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	08db      	lsrs	r3, r3, #3
 800804c:	f003 0303 	and.w	r3, r3, #3
 8008050:	4a18      	ldr	r2, [pc, #96]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008052:	fa22 f303 	lsr.w	r3, r2, r3
 8008056:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008058:	e01f      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800805a:	4b15      	ldr	r3, [pc, #84]	@ (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008066:	d106      	bne.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800806a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800806e:	d102      	bne.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008070:	4b11      	ldr	r3, [pc, #68]	@ (80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008072:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008074:	e011      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008076:	4b0e      	ldr	r3, [pc, #56]	@ (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800807e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008082:	d106      	bne.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008086:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800808a:	d102      	bne.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800808c:	4b0b      	ldr	r3, [pc, #44]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800808e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008090:	e003      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008092:	2300      	movs	r3, #0
 8008094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008096:	f000 bc38 	b.w	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800809a:	f000 bc36 	b.w	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800809e:	4b08      	ldr	r3, [pc, #32]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80080a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080a2:	f000 bc32 	b.w	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80080a6:	2300      	movs	r3, #0
 80080a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080aa:	f000 bc2e 	b.w	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80080ae:	bf00      	nop
 80080b0:	58024400 	.word	0x58024400
 80080b4:	03d09000 	.word	0x03d09000
 80080b8:	003d0900 	.word	0x003d0900
 80080bc:	017d7840 	.word	0x017d7840
 80080c0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80080c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080c8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80080cc:	430b      	orrs	r3, r1
 80080ce:	f040 809c 	bne.w	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80080d2:	4b9e      	ldr	r3, [pc, #632]	@ (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080d6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80080da:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80080dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80080e2:	d054      	beq.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80080e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80080ea:	f200 808b 	bhi.w	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80080ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80080f4:	f000 8083 	beq.w	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80080f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80080fe:	f200 8081 	bhi.w	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008104:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008108:	d02f      	beq.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800810a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800810c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008110:	d878      	bhi.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008114:	2b00      	cmp	r3, #0
 8008116:	d004      	beq.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800811e:	d012      	beq.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008120:	e070      	b.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008122:	4b8a      	ldr	r3, [pc, #552]	@ (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800812a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800812e:	d107      	bne.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008130:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008134:	4618      	mov	r0, r3
 8008136:	f000 feaf 	bl	8008e98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800813a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800813c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800813e:	e3e4      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008140:	2300      	movs	r3, #0
 8008142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008144:	e3e1      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008146:	4b81      	ldr	r3, [pc, #516]	@ (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800814e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008152:	d107      	bne.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008154:	f107 0318 	add.w	r3, r7, #24
 8008158:	4618      	mov	r0, r3
 800815a:	f000 fbf5 	bl	8008948 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008162:	e3d2      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008164:	2300      	movs	r3, #0
 8008166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008168:	e3cf      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800816a:	4b78      	ldr	r3, [pc, #480]	@ (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008172:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008176:	d107      	bne.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008178:	f107 030c 	add.w	r3, r7, #12
 800817c:	4618      	mov	r0, r3
 800817e:	f000 fd37 	bl	8008bf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008186:	e3c0      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008188:	2300      	movs	r3, #0
 800818a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800818c:	e3bd      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800818e:	4b6f      	ldr	r3, [pc, #444]	@ (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008192:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008196:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008198:	4b6c      	ldr	r3, [pc, #432]	@ (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 0304 	and.w	r3, r3, #4
 80081a0:	2b04      	cmp	r3, #4
 80081a2:	d10c      	bne.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80081a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d109      	bne.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081aa:	4b68      	ldr	r3, [pc, #416]	@ (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	08db      	lsrs	r3, r3, #3
 80081b0:	f003 0303 	and.w	r3, r3, #3
 80081b4:	4a66      	ldr	r2, [pc, #408]	@ (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80081b6:	fa22 f303 	lsr.w	r3, r2, r3
 80081ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081bc:	e01e      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081be:	4b63      	ldr	r3, [pc, #396]	@ (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081ca:	d106      	bne.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80081cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081d2:	d102      	bne.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80081d4:	4b5f      	ldr	r3, [pc, #380]	@ (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80081d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081d8:	e010      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081da:	4b5c      	ldr	r3, [pc, #368]	@ (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081e6:	d106      	bne.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80081e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081ee:	d102      	bne.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80081f0:	4b59      	ldr	r3, [pc, #356]	@ (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80081f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081f4:	e002      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081f6:	2300      	movs	r3, #0
 80081f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80081fa:	e386      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081fc:	e385      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80081fe:	4b57      	ldr	r3, [pc, #348]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008200:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008202:	e382      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008204:	2300      	movs	r3, #0
 8008206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008208:	e37f      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800820a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800820e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008212:	430b      	orrs	r3, r1
 8008214:	f040 80a7 	bne.w	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008218:	4b4c      	ldr	r3, [pc, #304]	@ (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800821a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800821c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008220:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008224:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008228:	d055      	beq.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800822a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008230:	f200 8096 	bhi.w	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008236:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800823a:	f000 8084 	beq.w	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800823e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008240:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008244:	f200 808c 	bhi.w	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800824e:	d030      	beq.n	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008252:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008256:	f200 8083 	bhi.w	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800825a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825c:	2b00      	cmp	r3, #0
 800825e:	d004      	beq.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008262:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008266:	d012      	beq.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008268:	e07a      	b.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800826a:	4b38      	ldr	r3, [pc, #224]	@ (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008272:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008276:	d107      	bne.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008278:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800827c:	4618      	mov	r0, r3
 800827e:	f000 fe0b 	bl	8008e98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008286:	e340      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008288:	2300      	movs	r3, #0
 800828a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800828c:	e33d      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800828e:	4b2f      	ldr	r3, [pc, #188]	@ (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008296:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800829a:	d107      	bne.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800829c:	f107 0318 	add.w	r3, r7, #24
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 fb51 	bl	8008948 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082aa:	e32e      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082ac:	2300      	movs	r3, #0
 80082ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082b0:	e32b      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082b2:	4b26      	ldr	r3, [pc, #152]	@ (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082be:	d107      	bne.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082c0:	f107 030c 	add.w	r3, r7, #12
 80082c4:	4618      	mov	r0, r3
 80082c6:	f000 fc93 	bl	8008bf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082ce:	e31c      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082d0:	2300      	movs	r3, #0
 80082d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082d4:	e319      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082d6:	4b1d      	ldr	r3, [pc, #116]	@ (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80082de:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082e0:	4b1a      	ldr	r3, [pc, #104]	@ (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0304 	and.w	r3, r3, #4
 80082e8:	2b04      	cmp	r3, #4
 80082ea:	d10c      	bne.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80082ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d109      	bne.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082f2:	4b16      	ldr	r3, [pc, #88]	@ (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	08db      	lsrs	r3, r3, #3
 80082f8:	f003 0303 	and.w	r3, r3, #3
 80082fc:	4a14      	ldr	r2, [pc, #80]	@ (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80082fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008302:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008304:	e01e      	b.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008306:	4b11      	ldr	r3, [pc, #68]	@ (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800830e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008312:	d106      	bne.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008316:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800831a:	d102      	bne.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800831c:	4b0d      	ldr	r3, [pc, #52]	@ (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800831e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008320:	e010      	b.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008322:	4b0a      	ldr	r3, [pc, #40]	@ (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800832a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800832e:	d106      	bne.n	800833e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008332:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008336:	d102      	bne.n	800833e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008338:	4b07      	ldr	r3, [pc, #28]	@ (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800833a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800833c:	e002      	b.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800833e:	2300      	movs	r3, #0
 8008340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008342:	e2e2      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008344:	e2e1      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008346:	4b05      	ldr	r3, [pc, #20]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008348:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800834a:	e2de      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800834c:	58024400 	.word	0x58024400
 8008350:	03d09000 	.word	0x03d09000
 8008354:	003d0900 	.word	0x003d0900
 8008358:	017d7840 	.word	0x017d7840
 800835c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008360:	2300      	movs	r3, #0
 8008362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008364:	e2d1      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800836a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800836e:	430b      	orrs	r3, r1
 8008370:	f040 809c 	bne.w	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008374:	4b93      	ldr	r3, [pc, #588]	@ (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008378:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800837c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800837e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008380:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008384:	d054      	beq.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008388:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800838c:	f200 808b 	bhi.w	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008392:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008396:	f000 8083 	beq.w	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800839a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800839c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80083a0:	f200 8081 	bhi.w	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80083a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083aa:	d02f      	beq.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80083ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083b2:	d878      	bhi.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80083b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d004      	beq.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80083ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083c0:	d012      	beq.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80083c2:	e070      	b.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083c4:	4b7f      	ldr	r3, [pc, #508]	@ (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083d0:	d107      	bne.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 fd5e 	bl	8008e98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083e0:	e293      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083e6:	e290      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083e8:	4b76      	ldr	r3, [pc, #472]	@ (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083f4:	d107      	bne.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083f6:	f107 0318 	add.w	r3, r7, #24
 80083fa:	4618      	mov	r0, r3
 80083fc:	f000 faa4 	bl	8008948 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008404:	e281      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008406:	2300      	movs	r3, #0
 8008408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800840a:	e27e      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800840c:	4b6d      	ldr	r3, [pc, #436]	@ (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008414:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008418:	d107      	bne.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800841a:	f107 030c 	add.w	r3, r7, #12
 800841e:	4618      	mov	r0, r3
 8008420:	f000 fbe6 	bl	8008bf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008428:	e26f      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800842a:	2300      	movs	r3, #0
 800842c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800842e:	e26c      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008430:	4b64      	ldr	r3, [pc, #400]	@ (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008434:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008438:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800843a:	4b62      	ldr	r3, [pc, #392]	@ (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 0304 	and.w	r3, r3, #4
 8008442:	2b04      	cmp	r3, #4
 8008444:	d10c      	bne.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008448:	2b00      	cmp	r3, #0
 800844a:	d109      	bne.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800844c:	4b5d      	ldr	r3, [pc, #372]	@ (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	08db      	lsrs	r3, r3, #3
 8008452:	f003 0303 	and.w	r3, r3, #3
 8008456:	4a5c      	ldr	r2, [pc, #368]	@ (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008458:	fa22 f303 	lsr.w	r3, r2, r3
 800845c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800845e:	e01e      	b.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008460:	4b58      	ldr	r3, [pc, #352]	@ (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008468:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800846c:	d106      	bne.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800846e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008470:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008474:	d102      	bne.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008476:	4b55      	ldr	r3, [pc, #340]	@ (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008478:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800847a:	e010      	b.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800847c:	4b51      	ldr	r3, [pc, #324]	@ (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008484:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008488:	d106      	bne.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800848a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800848c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008490:	d102      	bne.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008492:	4b4f      	ldr	r3, [pc, #316]	@ (80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008494:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008496:	e002      	b.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008498:	2300      	movs	r3, #0
 800849a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800849c:	e235      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800849e:	e234      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80084a0:	4b4c      	ldr	r3, [pc, #304]	@ (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80084a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084a4:	e231      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80084a6:	2300      	movs	r3, #0
 80084a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084aa:	e22e      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80084ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084b0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80084b4:	430b      	orrs	r3, r1
 80084b6:	f040 808f 	bne.w	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80084ba:	4b42      	ldr	r3, [pc, #264]	@ (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084be:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80084c2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80084c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80084ca:	d06b      	beq.n	80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80084cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80084d2:	d874      	bhi.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80084d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80084da:	d056      	beq.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80084dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80084e2:	d86c      	bhi.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80084e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80084ea:	d03b      	beq.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80084ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80084f2:	d864      	bhi.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80084f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084fa:	d021      	beq.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80084fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008502:	d85c      	bhi.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008506:	2b00      	cmp	r3, #0
 8008508:	d004      	beq.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800850a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800850c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008510:	d004      	beq.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008512:	e054      	b.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008514:	f7fe fa4c 	bl	80069b0 <HAL_RCC_GetPCLK1Freq>
 8008518:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800851a:	e1f6      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800851c:	4b29      	ldr	r3, [pc, #164]	@ (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008524:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008528:	d107      	bne.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800852a:	f107 0318 	add.w	r3, r7, #24
 800852e:	4618      	mov	r0, r3
 8008530:	f000 fa0a 	bl	8008948 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008538:	e1e7      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800853a:	2300      	movs	r3, #0
 800853c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800853e:	e1e4      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008540:	4b20      	ldr	r3, [pc, #128]	@ (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008548:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800854c:	d107      	bne.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800854e:	f107 030c 	add.w	r3, r7, #12
 8008552:	4618      	mov	r0, r3
 8008554:	f000 fb4c 	bl	8008bf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800855c:	e1d5      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800855e:	2300      	movs	r3, #0
 8008560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008562:	e1d2      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008564:	4b17      	ldr	r3, [pc, #92]	@ (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 0304 	and.w	r3, r3, #4
 800856c:	2b04      	cmp	r3, #4
 800856e:	d109      	bne.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008570:	4b14      	ldr	r3, [pc, #80]	@ (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	08db      	lsrs	r3, r3, #3
 8008576:	f003 0303 	and.w	r3, r3, #3
 800857a:	4a13      	ldr	r2, [pc, #76]	@ (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800857c:	fa22 f303 	lsr.w	r3, r2, r3
 8008580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008582:	e1c2      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008584:	2300      	movs	r3, #0
 8008586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008588:	e1bf      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800858a:	4b0e      	ldr	r3, [pc, #56]	@ (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008592:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008596:	d102      	bne.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008598:	4b0c      	ldr	r3, [pc, #48]	@ (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800859a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800859c:	e1b5      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800859e:	2300      	movs	r3, #0
 80085a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085a2:	e1b2      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80085a4:	4b07      	ldr	r3, [pc, #28]	@ (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085b0:	d102      	bne.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80085b2:	4b07      	ldr	r3, [pc, #28]	@ (80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80085b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085b6:	e1a8      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085b8:	2300      	movs	r3, #0
 80085ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085bc:	e1a5      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80085be:	2300      	movs	r3, #0
 80085c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085c2:	e1a2      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085c4:	58024400 	.word	0x58024400
 80085c8:	03d09000 	.word	0x03d09000
 80085cc:	003d0900 	.word	0x003d0900
 80085d0:	017d7840 	.word	0x017d7840
 80085d4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80085d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085dc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80085e0:	430b      	orrs	r3, r1
 80085e2:	d173      	bne.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80085e4:	4b9c      	ldr	r3, [pc, #624]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80085ec:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80085ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085f4:	d02f      	beq.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80085f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085fc:	d863      	bhi.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80085fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008600:	2b00      	cmp	r3, #0
 8008602:	d004      	beq.n	800860e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008606:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800860a:	d012      	beq.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800860c:	e05b      	b.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800860e:	4b92      	ldr	r3, [pc, #584]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008616:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800861a:	d107      	bne.n	800862c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800861c:	f107 0318 	add.w	r3, r7, #24
 8008620:	4618      	mov	r0, r3
 8008622:	f000 f991 	bl	8008948 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800862a:	e16e      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800862c:	2300      	movs	r3, #0
 800862e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008630:	e16b      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008632:	4b89      	ldr	r3, [pc, #548]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800863a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800863e:	d107      	bne.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008640:	f107 030c 	add.w	r3, r7, #12
 8008644:	4618      	mov	r0, r3
 8008646:	f000 fad3 	bl	8008bf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800864e:	e15c      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008650:	2300      	movs	r3, #0
 8008652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008654:	e159      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008656:	4b80      	ldr	r3, [pc, #512]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800865a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800865e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008660:	4b7d      	ldr	r3, [pc, #500]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 0304 	and.w	r3, r3, #4
 8008668:	2b04      	cmp	r3, #4
 800866a:	d10c      	bne.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800866c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800866e:	2b00      	cmp	r3, #0
 8008670:	d109      	bne.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008672:	4b79      	ldr	r3, [pc, #484]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	08db      	lsrs	r3, r3, #3
 8008678:	f003 0303 	and.w	r3, r3, #3
 800867c:	4a77      	ldr	r2, [pc, #476]	@ (800885c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800867e:	fa22 f303 	lsr.w	r3, r2, r3
 8008682:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008684:	e01e      	b.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008686:	4b74      	ldr	r3, [pc, #464]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800868e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008692:	d106      	bne.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008696:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800869a:	d102      	bne.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800869c:	4b70      	ldr	r3, [pc, #448]	@ (8008860 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800869e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086a0:	e010      	b.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086a2:	4b6d      	ldr	r3, [pc, #436]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086ae:	d106      	bne.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80086b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086b6:	d102      	bne.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80086b8:	4b6a      	ldr	r3, [pc, #424]	@ (8008864 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80086ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086bc:	e002      	b.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80086be:	2300      	movs	r3, #0
 80086c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80086c2:	e122      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80086c4:	e121      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80086c6:	2300      	movs	r3, #0
 80086c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086ca:	e11e      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80086cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086d0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80086d4:	430b      	orrs	r3, r1
 80086d6:	d133      	bne.n	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80086d8:	4b5f      	ldr	r3, [pc, #380]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80086e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d004      	beq.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80086e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086ee:	d012      	beq.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80086f0:	e023      	b.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086f2:	4b59      	ldr	r3, [pc, #356]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086fe:	d107      	bne.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008700:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008704:	4618      	mov	r0, r3
 8008706:	f000 fbc7 	bl	8008e98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800870a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800870c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800870e:	e0fc      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008710:	2300      	movs	r3, #0
 8008712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008714:	e0f9      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008716:	4b50      	ldr	r3, [pc, #320]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800871e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008722:	d107      	bne.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008724:	f107 0318 	add.w	r3, r7, #24
 8008728:	4618      	mov	r0, r3
 800872a:	f000 f90d 	bl	8008948 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800872e:	6a3b      	ldr	r3, [r7, #32]
 8008730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008732:	e0ea      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008734:	2300      	movs	r3, #0
 8008736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008738:	e0e7      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800873a:	2300      	movs	r3, #0
 800873c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800873e:	e0e4      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008744:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008748:	430b      	orrs	r3, r1
 800874a:	f040 808d 	bne.w	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800874e:	4b42      	ldr	r3, [pc, #264]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008752:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008756:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800875a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800875e:	d06b      	beq.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008762:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008766:	d874      	bhi.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800876a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800876e:	d056      	beq.n	800881e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008772:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008776:	d86c      	bhi.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800877e:	d03b      	beq.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008782:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008786:	d864      	bhi.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800878a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800878e:	d021      	beq.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008792:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008796:	d85c      	bhi.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879a:	2b00      	cmp	r3, #0
 800879c:	d004      	beq.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800879e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087a4:	d004      	beq.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80087a6:	e054      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80087a8:	f000 f8b8 	bl	800891c <HAL_RCCEx_GetD3PCLK1Freq>
 80087ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80087ae:	e0ac      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087b0:	4b29      	ldr	r3, [pc, #164]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087bc:	d107      	bne.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087be:	f107 0318 	add.w	r3, r7, #24
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 f8c0 	bl	8008948 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087cc:	e09d      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087ce:	2300      	movs	r3, #0
 80087d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087d2:	e09a      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087d4:	4b20      	ldr	r3, [pc, #128]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087e0:	d107      	bne.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087e2:	f107 030c 	add.w	r3, r7, #12
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 fa02 	bl	8008bf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087f0:	e08b      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087f2:	2300      	movs	r3, #0
 80087f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087f6:	e088      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80087f8:	4b17      	ldr	r3, [pc, #92]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 0304 	and.w	r3, r3, #4
 8008800:	2b04      	cmp	r3, #4
 8008802:	d109      	bne.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008804:	4b14      	ldr	r3, [pc, #80]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	08db      	lsrs	r3, r3, #3
 800880a:	f003 0303 	and.w	r3, r3, #3
 800880e:	4a13      	ldr	r2, [pc, #76]	@ (800885c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008810:	fa22 f303 	lsr.w	r3, r2, r3
 8008814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008816:	e078      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008818:	2300      	movs	r3, #0
 800881a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800881c:	e075      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800881e:	4b0e      	ldr	r3, [pc, #56]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008826:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800882a:	d102      	bne.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800882c:	4b0c      	ldr	r3, [pc, #48]	@ (8008860 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800882e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008830:	e06b      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008832:	2300      	movs	r3, #0
 8008834:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008836:	e068      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008838:	4b07      	ldr	r3, [pc, #28]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008840:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008844:	d102      	bne.n	800884c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008846:	4b07      	ldr	r3, [pc, #28]	@ (8008864 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800884a:	e05e      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800884c:	2300      	movs	r3, #0
 800884e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008850:	e05b      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008852:	2300      	movs	r3, #0
 8008854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008856:	e058      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008858:	58024400 	.word	0x58024400
 800885c:	03d09000 	.word	0x03d09000
 8008860:	003d0900 	.word	0x003d0900
 8008864:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800886c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008870:	430b      	orrs	r3, r1
 8008872:	d148      	bne.n	8008906 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008874:	4b27      	ldr	r3, [pc, #156]	@ (8008914 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008878:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800887c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800887e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008880:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008884:	d02a      	beq.n	80088dc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008888:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800888c:	d838      	bhi.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800888e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008890:	2b00      	cmp	r3, #0
 8008892:	d004      	beq.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008896:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800889a:	d00d      	beq.n	80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800889c:	e030      	b.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800889e:	4b1d      	ldr	r3, [pc, #116]	@ (8008914 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088aa:	d102      	bne.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80088ac:	4b1a      	ldr	r3, [pc, #104]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80088ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088b0:	e02b      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088b2:	2300      	movs	r3, #0
 80088b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088b6:	e028      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088b8:	4b16      	ldr	r3, [pc, #88]	@ (8008914 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088c4:	d107      	bne.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 fae4 	bl	8008e98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088d4:	e019      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088d6:	2300      	movs	r3, #0
 80088d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088da:	e016      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088dc:	4b0d      	ldr	r3, [pc, #52]	@ (8008914 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088e8:	d107      	bne.n	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088ea:	f107 0318 	add.w	r3, r7, #24
 80088ee:	4618      	mov	r0, r3
 80088f0:	f000 f82a 	bl	8008948 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088f8:	e007      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088fa:	2300      	movs	r3, #0
 80088fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088fe:	e004      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008900:	2300      	movs	r3, #0
 8008902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008904:	e001      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008906:	2300      	movs	r3, #0
 8008908:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800890a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800890c:	4618      	mov	r0, r3
 800890e:	3740      	adds	r7, #64	@ 0x40
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	58024400 	.word	0x58024400
 8008918:	017d7840 	.word	0x017d7840

0800891c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008920:	f7fe f816 	bl	8006950 <HAL_RCC_GetHCLKFreq>
 8008924:	4602      	mov	r2, r0
 8008926:	4b06      	ldr	r3, [pc, #24]	@ (8008940 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	091b      	lsrs	r3, r3, #4
 800892c:	f003 0307 	and.w	r3, r3, #7
 8008930:	4904      	ldr	r1, [pc, #16]	@ (8008944 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008932:	5ccb      	ldrb	r3, [r1, r3]
 8008934:	f003 031f 	and.w	r3, r3, #31
 8008938:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800893c:	4618      	mov	r0, r3
 800893e:	bd80      	pop	{r7, pc}
 8008940:	58024400 	.word	0x58024400
 8008944:	0800ab50 	.word	0x0800ab50

08008948 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008948:	b480      	push	{r7}
 800894a:	b089      	sub	sp, #36	@ 0x24
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008950:	4ba1      	ldr	r3, [pc, #644]	@ (8008bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008954:	f003 0303 	and.w	r3, r3, #3
 8008958:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800895a:	4b9f      	ldr	r3, [pc, #636]	@ (8008bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800895c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800895e:	0b1b      	lsrs	r3, r3, #12
 8008960:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008964:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008966:	4b9c      	ldr	r3, [pc, #624]	@ (8008bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800896a:	091b      	lsrs	r3, r3, #4
 800896c:	f003 0301 	and.w	r3, r3, #1
 8008970:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008972:	4b99      	ldr	r3, [pc, #612]	@ (8008bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008976:	08db      	lsrs	r3, r3, #3
 8008978:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	fb02 f303 	mul.w	r3, r2, r3
 8008982:	ee07 3a90 	vmov	s15, r3
 8008986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800898a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	2b00      	cmp	r3, #0
 8008992:	f000 8111 	beq.w	8008bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	2b02      	cmp	r3, #2
 800899a:	f000 8083 	beq.w	8008aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	f200 80a1 	bhi.w	8008ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d003      	beq.n	80089b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d056      	beq.n	8008a60 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80089b2:	e099      	b.n	8008ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089b4:	4b88      	ldr	r3, [pc, #544]	@ (8008bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 0320 	and.w	r3, r3, #32
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d02d      	beq.n	8008a1c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089c0:	4b85      	ldr	r3, [pc, #532]	@ (8008bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	08db      	lsrs	r3, r3, #3
 80089c6:	f003 0303 	and.w	r3, r3, #3
 80089ca:	4a84      	ldr	r2, [pc, #528]	@ (8008bdc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80089cc:	fa22 f303 	lsr.w	r3, r2, r3
 80089d0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	ee07 3a90 	vmov	s15, r3
 80089d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	ee07 3a90 	vmov	s15, r3
 80089e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ea:	4b7b      	ldr	r3, [pc, #492]	@ (8008bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f2:	ee07 3a90 	vmov	s15, r3
 80089f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80089fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008a1a:	e087      	b.n	8008b2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	ee07 3a90 	vmov	s15, r3
 8008a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a26:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a2e:	4b6a      	ldr	r3, [pc, #424]	@ (8008bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a36:	ee07 3a90 	vmov	s15, r3
 8008a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a42:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a5e:	e065      	b.n	8008b2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	ee07 3a90 	vmov	s15, r3
 8008a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a6a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008be8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a72:	4b59      	ldr	r3, [pc, #356]	@ (8008bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a7a:	ee07 3a90 	vmov	s15, r3
 8008a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a86:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aa2:	e043      	b.n	8008b2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	ee07 3a90 	vmov	s15, r3
 8008aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008bec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ab6:	4b48      	ldr	r3, [pc, #288]	@ (8008bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008abe:	ee07 3a90 	vmov	s15, r3
 8008ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008aca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ae6:	e021      	b.n	8008b2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	ee07 3a90 	vmov	s15, r3
 8008aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008af2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008be8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008afa:	4b37      	ldr	r3, [pc, #220]	@ (8008bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b02:	ee07 3a90 	vmov	s15, r3
 8008b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b0e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b2a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008b2c:	4b2a      	ldr	r3, [pc, #168]	@ (8008bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b30:	0a5b      	lsrs	r3, r3, #9
 8008b32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b36:	ee07 3a90 	vmov	s15, r3
 8008b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b46:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b52:	ee17 2a90 	vmov	r2, s15
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8008bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b5e:	0c1b      	lsrs	r3, r3, #16
 8008b60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b64:	ee07 3a90 	vmov	s15, r3
 8008b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b74:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b80:	ee17 2a90 	vmov	r2, s15
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008b88:	4b13      	ldr	r3, [pc, #76]	@ (8008bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b8c:	0e1b      	lsrs	r3, r3, #24
 8008b8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b92:	ee07 3a90 	vmov	s15, r3
 8008b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ba2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bae:	ee17 2a90 	vmov	r2, s15
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008bb6:	e008      	b.n	8008bca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	609a      	str	r2, [r3, #8]
}
 8008bca:	bf00      	nop
 8008bcc:	3724      	adds	r7, #36	@ 0x24
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	58024400 	.word	0x58024400
 8008bdc:	03d09000 	.word	0x03d09000
 8008be0:	46000000 	.word	0x46000000
 8008be4:	4c742400 	.word	0x4c742400
 8008be8:	4a742400 	.word	0x4a742400
 8008bec:	4bbebc20 	.word	0x4bbebc20

08008bf0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b089      	sub	sp, #36	@ 0x24
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bf8:	4ba1      	ldr	r3, [pc, #644]	@ (8008e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bfc:	f003 0303 	and.w	r3, r3, #3
 8008c00:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008c02:	4b9f      	ldr	r3, [pc, #636]	@ (8008e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c06:	0d1b      	lsrs	r3, r3, #20
 8008c08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c0c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008c0e:	4b9c      	ldr	r3, [pc, #624]	@ (8008e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c12:	0a1b      	lsrs	r3, r3, #8
 8008c14:	f003 0301 	and.w	r3, r3, #1
 8008c18:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008c1a:	4b99      	ldr	r3, [pc, #612]	@ (8008e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c1e:	08db      	lsrs	r3, r3, #3
 8008c20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	fb02 f303 	mul.w	r3, r2, r3
 8008c2a:	ee07 3a90 	vmov	s15, r3
 8008c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	f000 8111 	beq.w	8008e60 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	f000 8083 	beq.w	8008d4c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	f200 80a1 	bhi.w	8008d90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d003      	beq.n	8008c5c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d056      	beq.n	8008d08 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008c5a:	e099      	b.n	8008d90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c5c:	4b88      	ldr	r3, [pc, #544]	@ (8008e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 0320 	and.w	r3, r3, #32
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d02d      	beq.n	8008cc4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c68:	4b85      	ldr	r3, [pc, #532]	@ (8008e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	08db      	lsrs	r3, r3, #3
 8008c6e:	f003 0303 	and.w	r3, r3, #3
 8008c72:	4a84      	ldr	r2, [pc, #528]	@ (8008e84 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008c74:	fa22 f303 	lsr.w	r3, r2, r3
 8008c78:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	ee07 3a90 	vmov	s15, r3
 8008c80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	ee07 3a90 	vmov	s15, r3
 8008c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c92:	4b7b      	ldr	r3, [pc, #492]	@ (8008e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c9a:	ee07 3a90 	vmov	s15, r3
 8008c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ca6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cbe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008cc2:	e087      	b.n	8008dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	ee07 3a90 	vmov	s15, r3
 8008cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cd6:	4b6a      	ldr	r3, [pc, #424]	@ (8008e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cde:	ee07 3a90 	vmov	s15, r3
 8008ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d06:	e065      	b.n	8008dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	ee07 3a90 	vmov	s15, r3
 8008d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d12:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008e90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d1a:	4b59      	ldr	r3, [pc, #356]	@ (8008e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d22:	ee07 3a90 	vmov	s15, r3
 8008d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d2e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d4a:	e043      	b.n	8008dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	ee07 3a90 	vmov	s15, r3
 8008d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d56:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d5e:	4b48      	ldr	r3, [pc, #288]	@ (8008e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d66:	ee07 3a90 	vmov	s15, r3
 8008d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d72:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d8e:	e021      	b.n	8008dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	ee07 3a90 	vmov	s15, r3
 8008d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d9a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008e90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008da2:	4b37      	ldr	r3, [pc, #220]	@ (8008e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008daa:	ee07 3a90 	vmov	s15, r3
 8008dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008db6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dd2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8008e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dd8:	0a5b      	lsrs	r3, r3, #9
 8008dda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dde:	ee07 3a90 	vmov	s15, r3
 8008de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008dea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dee:	edd7 6a07 	vldr	s13, [r7, #28]
 8008df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dfa:	ee17 2a90 	vmov	r2, s15
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008e02:	4b1f      	ldr	r3, [pc, #124]	@ (8008e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e06:	0c1b      	lsrs	r3, r3, #16
 8008e08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e0c:	ee07 3a90 	vmov	s15, r3
 8008e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e28:	ee17 2a90 	vmov	r2, s15
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008e30:	4b13      	ldr	r3, [pc, #76]	@ (8008e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e34:	0e1b      	lsrs	r3, r3, #24
 8008e36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e3a:	ee07 3a90 	vmov	s15, r3
 8008e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e56:	ee17 2a90 	vmov	r2, s15
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008e5e:	e008      	b.n	8008e72 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	609a      	str	r2, [r3, #8]
}
 8008e72:	bf00      	nop
 8008e74:	3724      	adds	r7, #36	@ 0x24
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	58024400 	.word	0x58024400
 8008e84:	03d09000 	.word	0x03d09000
 8008e88:	46000000 	.word	0x46000000
 8008e8c:	4c742400 	.word	0x4c742400
 8008e90:	4a742400 	.word	0x4a742400
 8008e94:	4bbebc20 	.word	0x4bbebc20

08008e98 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b089      	sub	sp, #36	@ 0x24
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ea0:	4ba0      	ldr	r3, [pc, #640]	@ (8009124 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ea4:	f003 0303 	and.w	r3, r3, #3
 8008ea8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008eaa:	4b9e      	ldr	r3, [pc, #632]	@ (8009124 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eae:	091b      	lsrs	r3, r3, #4
 8008eb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008eb4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008eb6:	4b9b      	ldr	r3, [pc, #620]	@ (8009124 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eba:	f003 0301 	and.w	r3, r3, #1
 8008ebe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008ec0:	4b98      	ldr	r3, [pc, #608]	@ (8009124 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ec4:	08db      	lsrs	r3, r3, #3
 8008ec6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008eca:	693a      	ldr	r2, [r7, #16]
 8008ecc:	fb02 f303 	mul.w	r3, r2, r3
 8008ed0:	ee07 3a90 	vmov	s15, r3
 8008ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ed8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f000 8111 	beq.w	8009106 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	f000 8083 	beq.w	8008ff2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	f200 80a1 	bhi.w	8009036 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d056      	beq.n	8008fae <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008f00:	e099      	b.n	8009036 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f02:	4b88      	ldr	r3, [pc, #544]	@ (8009124 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 0320 	and.w	r3, r3, #32
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d02d      	beq.n	8008f6a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f0e:	4b85      	ldr	r3, [pc, #532]	@ (8009124 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	08db      	lsrs	r3, r3, #3
 8008f14:	f003 0303 	and.w	r3, r3, #3
 8008f18:	4a83      	ldr	r2, [pc, #524]	@ (8009128 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f1e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	ee07 3a90 	vmov	s15, r3
 8008f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	ee07 3a90 	vmov	s15, r3
 8008f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f38:	4b7a      	ldr	r3, [pc, #488]	@ (8009124 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f40:	ee07 3a90 	vmov	s15, r3
 8008f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f48:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f4c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800912c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f64:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008f68:	e087      	b.n	800907a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	ee07 3a90 	vmov	s15, r3
 8008f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f74:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009130 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008f78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f7c:	4b69      	ldr	r3, [pc, #420]	@ (8009124 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f84:	ee07 3a90 	vmov	s15, r3
 8008f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f90:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800912c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fa8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fac:	e065      	b.n	800907a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	ee07 3a90 	vmov	s15, r3
 8008fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fb8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009134 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008fbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fc0:	4b58      	ldr	r3, [pc, #352]	@ (8009124 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fc8:	ee07 3a90 	vmov	s15, r3
 8008fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fd0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fd4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800912c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008fd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fe0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fe4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ff0:	e043      	b.n	800907a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	ee07 3a90 	vmov	s15, r3
 8008ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ffc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009138 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009000:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009004:	4b47      	ldr	r3, [pc, #284]	@ (8009124 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800900c:	ee07 3a90 	vmov	s15, r3
 8009010:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009014:	ed97 6a03 	vldr	s12, [r7, #12]
 8009018:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800912c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800901c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009020:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009024:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009028:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800902c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009030:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009034:	e021      	b.n	800907a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	ee07 3a90 	vmov	s15, r3
 800903c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009040:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009130 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009044:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009048:	4b36      	ldr	r3, [pc, #216]	@ (8009124 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800904a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800904c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009050:	ee07 3a90 	vmov	s15, r3
 8009054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009058:	ed97 6a03 	vldr	s12, [r7, #12]
 800905c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800912c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009060:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009064:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009068:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800906c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009074:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009078:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800907a:	4b2a      	ldr	r3, [pc, #168]	@ (8009124 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800907c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800907e:	0a5b      	lsrs	r3, r3, #9
 8009080:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009084:	ee07 3a90 	vmov	s15, r3
 8009088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800908c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009090:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009094:	edd7 6a07 	vldr	s13, [r7, #28]
 8009098:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800909c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090a0:	ee17 2a90 	vmov	r2, s15
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80090a8:	4b1e      	ldr	r3, [pc, #120]	@ (8009124 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ac:	0c1b      	lsrs	r3, r3, #16
 80090ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090b2:	ee07 3a90 	vmov	s15, r3
 80090b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80090c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090ce:	ee17 2a90 	vmov	r2, s15
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80090d6:	4b13      	ldr	r3, [pc, #76]	@ (8009124 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090da:	0e1b      	lsrs	r3, r3, #24
 80090dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090e0:	ee07 3a90 	vmov	s15, r3
 80090e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80090f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090fc:	ee17 2a90 	vmov	r2, s15
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009104:	e008      	b.n	8009118 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	609a      	str	r2, [r3, #8]
}
 8009118:	bf00      	nop
 800911a:	3724      	adds	r7, #36	@ 0x24
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr
 8009124:	58024400 	.word	0x58024400
 8009128:	03d09000 	.word	0x03d09000
 800912c:	46000000 	.word	0x46000000
 8009130:	4c742400 	.word	0x4c742400
 8009134:	4a742400 	.word	0x4a742400
 8009138:	4bbebc20 	.word	0x4bbebc20

0800913c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800914a:	4b53      	ldr	r3, [pc, #332]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 800914c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800914e:	f003 0303 	and.w	r3, r3, #3
 8009152:	2b03      	cmp	r3, #3
 8009154:	d101      	bne.n	800915a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e099      	b.n	800928e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800915a:	4b4f      	ldr	r3, [pc, #316]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a4e      	ldr	r2, [pc, #312]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 8009160:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009164:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009166:	f7f8 f8fd 	bl	8001364 <HAL_GetTick>
 800916a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800916c:	e008      	b.n	8009180 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800916e:	f7f8 f8f9 	bl	8001364 <HAL_GetTick>
 8009172:	4602      	mov	r2, r0
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	1ad3      	subs	r3, r2, r3
 8009178:	2b02      	cmp	r3, #2
 800917a:	d901      	bls.n	8009180 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800917c:	2303      	movs	r3, #3
 800917e:	e086      	b.n	800928e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009180:	4b45      	ldr	r3, [pc, #276]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1f0      	bne.n	800916e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800918c:	4b42      	ldr	r3, [pc, #264]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 800918e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009190:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	031b      	lsls	r3, r3, #12
 800919a:	493f      	ldr	r1, [pc, #252]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 800919c:	4313      	orrs	r3, r2
 800919e:	628b      	str	r3, [r1, #40]	@ 0x28
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	3b01      	subs	r3, #1
 80091a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	3b01      	subs	r3, #1
 80091b0:	025b      	lsls	r3, r3, #9
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	431a      	orrs	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	3b01      	subs	r3, #1
 80091bc:	041b      	lsls	r3, r3, #16
 80091be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80091c2:	431a      	orrs	r2, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	3b01      	subs	r3, #1
 80091ca:	061b      	lsls	r3, r3, #24
 80091cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80091d0:	4931      	ldr	r1, [pc, #196]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 80091d2:	4313      	orrs	r3, r2
 80091d4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80091d6:	4b30      	ldr	r3, [pc, #192]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 80091d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	492d      	ldr	r1, [pc, #180]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 80091e4:	4313      	orrs	r3, r2
 80091e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80091e8:	4b2b      	ldr	r3, [pc, #172]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 80091ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ec:	f023 0220 	bic.w	r2, r3, #32
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	699b      	ldr	r3, [r3, #24]
 80091f4:	4928      	ldr	r1, [pc, #160]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 80091f6:	4313      	orrs	r3, r2
 80091f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80091fa:	4b27      	ldr	r3, [pc, #156]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 80091fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091fe:	4a26      	ldr	r2, [pc, #152]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 8009200:	f023 0310 	bic.w	r3, r3, #16
 8009204:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009206:	4b24      	ldr	r3, [pc, #144]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 8009208:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800920a:	4b24      	ldr	r3, [pc, #144]	@ (800929c <RCCEx_PLL2_Config+0x160>)
 800920c:	4013      	ands	r3, r2
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	69d2      	ldr	r2, [r2, #28]
 8009212:	00d2      	lsls	r2, r2, #3
 8009214:	4920      	ldr	r1, [pc, #128]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 8009216:	4313      	orrs	r3, r2
 8009218:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800921a:	4b1f      	ldr	r3, [pc, #124]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 800921c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800921e:	4a1e      	ldr	r2, [pc, #120]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 8009220:	f043 0310 	orr.w	r3, r3, #16
 8009224:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d106      	bne.n	800923a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800922c:	4b1a      	ldr	r3, [pc, #104]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 800922e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009230:	4a19      	ldr	r2, [pc, #100]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 8009232:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009236:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009238:	e00f      	b.n	800925a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d106      	bne.n	800924e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009240:	4b15      	ldr	r3, [pc, #84]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 8009242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009244:	4a14      	ldr	r2, [pc, #80]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 8009246:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800924a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800924c:	e005      	b.n	800925a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800924e:	4b12      	ldr	r3, [pc, #72]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 8009250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009252:	4a11      	ldr	r2, [pc, #68]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 8009254:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009258:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800925a:	4b0f      	ldr	r3, [pc, #60]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a0e      	ldr	r2, [pc, #56]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 8009260:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009266:	f7f8 f87d 	bl	8001364 <HAL_GetTick>
 800926a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800926c:	e008      	b.n	8009280 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800926e:	f7f8 f879 	bl	8001364 <HAL_GetTick>
 8009272:	4602      	mov	r2, r0
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	2b02      	cmp	r3, #2
 800927a:	d901      	bls.n	8009280 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800927c:	2303      	movs	r3, #3
 800927e:	e006      	b.n	800928e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009280:	4b05      	ldr	r3, [pc, #20]	@ (8009298 <RCCEx_PLL2_Config+0x15c>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d0f0      	beq.n	800926e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800928c:	7bfb      	ldrb	r3, [r7, #15]
}
 800928e:	4618      	mov	r0, r3
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	58024400 	.word	0x58024400
 800929c:	ffff0007 	.word	0xffff0007

080092a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80092aa:	2300      	movs	r3, #0
 80092ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80092ae:	4b53      	ldr	r3, [pc, #332]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 80092b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b2:	f003 0303 	and.w	r3, r3, #3
 80092b6:	2b03      	cmp	r3, #3
 80092b8:	d101      	bne.n	80092be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	e099      	b.n	80093f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80092be:	4b4f      	ldr	r3, [pc, #316]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a4e      	ldr	r2, [pc, #312]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 80092c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092ca:	f7f8 f84b 	bl	8001364 <HAL_GetTick>
 80092ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80092d0:	e008      	b.n	80092e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80092d2:	f7f8 f847 	bl	8001364 <HAL_GetTick>
 80092d6:	4602      	mov	r2, r0
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d901      	bls.n	80092e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80092e0:	2303      	movs	r3, #3
 80092e2:	e086      	b.n	80093f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80092e4:	4b45      	ldr	r3, [pc, #276]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1f0      	bne.n	80092d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80092f0:	4b42      	ldr	r3, [pc, #264]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 80092f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	051b      	lsls	r3, r3, #20
 80092fe:	493f      	ldr	r1, [pc, #252]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 8009300:	4313      	orrs	r3, r2
 8009302:	628b      	str	r3, [r1, #40]	@ 0x28
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	3b01      	subs	r3, #1
 800930a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	3b01      	subs	r3, #1
 8009314:	025b      	lsls	r3, r3, #9
 8009316:	b29b      	uxth	r3, r3
 8009318:	431a      	orrs	r2, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	3b01      	subs	r3, #1
 8009320:	041b      	lsls	r3, r3, #16
 8009322:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009326:	431a      	orrs	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	3b01      	subs	r3, #1
 800932e:	061b      	lsls	r3, r3, #24
 8009330:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009334:	4931      	ldr	r1, [pc, #196]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 8009336:	4313      	orrs	r3, r2
 8009338:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800933a:	4b30      	ldr	r3, [pc, #192]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 800933c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800933e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	695b      	ldr	r3, [r3, #20]
 8009346:	492d      	ldr	r1, [pc, #180]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 8009348:	4313      	orrs	r3, r2
 800934a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800934c:	4b2b      	ldr	r3, [pc, #172]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 800934e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009350:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	699b      	ldr	r3, [r3, #24]
 8009358:	4928      	ldr	r1, [pc, #160]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 800935a:	4313      	orrs	r3, r2
 800935c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800935e:	4b27      	ldr	r3, [pc, #156]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 8009360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009362:	4a26      	ldr	r2, [pc, #152]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 8009364:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009368:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800936a:	4b24      	ldr	r3, [pc, #144]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 800936c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800936e:	4b24      	ldr	r3, [pc, #144]	@ (8009400 <RCCEx_PLL3_Config+0x160>)
 8009370:	4013      	ands	r3, r2
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	69d2      	ldr	r2, [r2, #28]
 8009376:	00d2      	lsls	r2, r2, #3
 8009378:	4920      	ldr	r1, [pc, #128]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 800937a:	4313      	orrs	r3, r2
 800937c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800937e:	4b1f      	ldr	r3, [pc, #124]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 8009380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009382:	4a1e      	ldr	r2, [pc, #120]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 8009384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009388:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d106      	bne.n	800939e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009390:	4b1a      	ldr	r3, [pc, #104]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 8009392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009394:	4a19      	ldr	r2, [pc, #100]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 8009396:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800939a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800939c:	e00f      	b.n	80093be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d106      	bne.n	80093b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80093a4:	4b15      	ldr	r3, [pc, #84]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 80093a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a8:	4a14      	ldr	r2, [pc, #80]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 80093aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80093ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80093b0:	e005      	b.n	80093be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80093b2:	4b12      	ldr	r3, [pc, #72]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 80093b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b6:	4a11      	ldr	r2, [pc, #68]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 80093b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80093bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80093be:	4b0f      	ldr	r3, [pc, #60]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a0e      	ldr	r2, [pc, #56]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 80093c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80093c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093ca:	f7f7 ffcb 	bl	8001364 <HAL_GetTick>
 80093ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80093d0:	e008      	b.n	80093e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80093d2:	f7f7 ffc7 	bl	8001364 <HAL_GetTick>
 80093d6:	4602      	mov	r2, r0
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	1ad3      	subs	r3, r2, r3
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d901      	bls.n	80093e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	e006      	b.n	80093f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80093e4:	4b05      	ldr	r3, [pc, #20]	@ (80093fc <RCCEx_PLL3_Config+0x15c>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d0f0      	beq.n	80093d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	58024400 	.word	0x58024400
 8009400:	ffff0007 	.word	0xffff0007

08009404 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d101      	bne.n	8009416 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	e049      	b.n	80094aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800941c:	b2db      	uxtb	r3, r3
 800941e:	2b00      	cmp	r3, #0
 8009420:	d106      	bne.n	8009430 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7f7 fbfa 	bl	8000c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2202      	movs	r2, #2
 8009434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	3304      	adds	r3, #4
 8009440:	4619      	mov	r1, r3
 8009442:	4610      	mov	r0, r2
 8009444:	f000 f99e 	bl	8009784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
	...

080094b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d001      	beq.n	80094cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e04c      	b.n	8009566 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2202      	movs	r2, #2
 80094d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a26      	ldr	r2, [pc, #152]	@ (8009574 <HAL_TIM_Base_Start+0xc0>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d022      	beq.n	8009524 <HAL_TIM_Base_Start+0x70>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094e6:	d01d      	beq.n	8009524 <HAL_TIM_Base_Start+0x70>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a22      	ldr	r2, [pc, #136]	@ (8009578 <HAL_TIM_Base_Start+0xc4>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d018      	beq.n	8009524 <HAL_TIM_Base_Start+0x70>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a21      	ldr	r2, [pc, #132]	@ (800957c <HAL_TIM_Base_Start+0xc8>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d013      	beq.n	8009524 <HAL_TIM_Base_Start+0x70>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a1f      	ldr	r2, [pc, #124]	@ (8009580 <HAL_TIM_Base_Start+0xcc>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d00e      	beq.n	8009524 <HAL_TIM_Base_Start+0x70>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a1e      	ldr	r2, [pc, #120]	@ (8009584 <HAL_TIM_Base_Start+0xd0>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d009      	beq.n	8009524 <HAL_TIM_Base_Start+0x70>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a1c      	ldr	r2, [pc, #112]	@ (8009588 <HAL_TIM_Base_Start+0xd4>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d004      	beq.n	8009524 <HAL_TIM_Base_Start+0x70>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a1b      	ldr	r2, [pc, #108]	@ (800958c <HAL_TIM_Base_Start+0xd8>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d115      	bne.n	8009550 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	689a      	ldr	r2, [r3, #8]
 800952a:	4b19      	ldr	r3, [pc, #100]	@ (8009590 <HAL_TIM_Base_Start+0xdc>)
 800952c:	4013      	ands	r3, r2
 800952e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2b06      	cmp	r3, #6
 8009534:	d015      	beq.n	8009562 <HAL_TIM_Base_Start+0xae>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800953c:	d011      	beq.n	8009562 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f042 0201 	orr.w	r2, r2, #1
 800954c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800954e:	e008      	b.n	8009562 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f042 0201 	orr.w	r2, r2, #1
 800955e:	601a      	str	r2, [r3, #0]
 8009560:	e000      	b.n	8009564 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009562:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	3714      	adds	r7, #20
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	40010000 	.word	0x40010000
 8009578:	40000400 	.word	0x40000400
 800957c:	40000800 	.word	0x40000800
 8009580:	40000c00 	.word	0x40000c00
 8009584:	40010400 	.word	0x40010400
 8009588:	40001800 	.word	0x40001800
 800958c:	40014000 	.word	0x40014000
 8009590:	00010007 	.word	0x00010007

08009594 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800959e:	2300      	movs	r3, #0
 80095a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d101      	bne.n	80095b0 <HAL_TIM_ConfigClockSource+0x1c>
 80095ac:	2302      	movs	r3, #2
 80095ae:	e0dc      	b.n	800976a <HAL_TIM_ConfigClockSource+0x1d6>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2202      	movs	r2, #2
 80095bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095c8:	68ba      	ldr	r2, [r7, #8]
 80095ca:	4b6a      	ldr	r3, [pc, #424]	@ (8009774 <HAL_TIM_ConfigClockSource+0x1e0>)
 80095cc:	4013      	ands	r3, r2
 80095ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80095d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a64      	ldr	r2, [pc, #400]	@ (8009778 <HAL_TIM_ConfigClockSource+0x1e4>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	f000 80a9 	beq.w	800973e <HAL_TIM_ConfigClockSource+0x1aa>
 80095ec:	4a62      	ldr	r2, [pc, #392]	@ (8009778 <HAL_TIM_ConfigClockSource+0x1e4>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	f200 80ae 	bhi.w	8009750 <HAL_TIM_ConfigClockSource+0x1bc>
 80095f4:	4a61      	ldr	r2, [pc, #388]	@ (800977c <HAL_TIM_ConfigClockSource+0x1e8>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	f000 80a1 	beq.w	800973e <HAL_TIM_ConfigClockSource+0x1aa>
 80095fc:	4a5f      	ldr	r2, [pc, #380]	@ (800977c <HAL_TIM_ConfigClockSource+0x1e8>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	f200 80a6 	bhi.w	8009750 <HAL_TIM_ConfigClockSource+0x1bc>
 8009604:	4a5e      	ldr	r2, [pc, #376]	@ (8009780 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009606:	4293      	cmp	r3, r2
 8009608:	f000 8099 	beq.w	800973e <HAL_TIM_ConfigClockSource+0x1aa>
 800960c:	4a5c      	ldr	r2, [pc, #368]	@ (8009780 <HAL_TIM_ConfigClockSource+0x1ec>)
 800960e:	4293      	cmp	r3, r2
 8009610:	f200 809e 	bhi.w	8009750 <HAL_TIM_ConfigClockSource+0x1bc>
 8009614:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009618:	f000 8091 	beq.w	800973e <HAL_TIM_ConfigClockSource+0x1aa>
 800961c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009620:	f200 8096 	bhi.w	8009750 <HAL_TIM_ConfigClockSource+0x1bc>
 8009624:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009628:	f000 8089 	beq.w	800973e <HAL_TIM_ConfigClockSource+0x1aa>
 800962c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009630:	f200 808e 	bhi.w	8009750 <HAL_TIM_ConfigClockSource+0x1bc>
 8009634:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009638:	d03e      	beq.n	80096b8 <HAL_TIM_ConfigClockSource+0x124>
 800963a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800963e:	f200 8087 	bhi.w	8009750 <HAL_TIM_ConfigClockSource+0x1bc>
 8009642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009646:	f000 8086 	beq.w	8009756 <HAL_TIM_ConfigClockSource+0x1c2>
 800964a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800964e:	d87f      	bhi.n	8009750 <HAL_TIM_ConfigClockSource+0x1bc>
 8009650:	2b70      	cmp	r3, #112	@ 0x70
 8009652:	d01a      	beq.n	800968a <HAL_TIM_ConfigClockSource+0xf6>
 8009654:	2b70      	cmp	r3, #112	@ 0x70
 8009656:	d87b      	bhi.n	8009750 <HAL_TIM_ConfigClockSource+0x1bc>
 8009658:	2b60      	cmp	r3, #96	@ 0x60
 800965a:	d050      	beq.n	80096fe <HAL_TIM_ConfigClockSource+0x16a>
 800965c:	2b60      	cmp	r3, #96	@ 0x60
 800965e:	d877      	bhi.n	8009750 <HAL_TIM_ConfigClockSource+0x1bc>
 8009660:	2b50      	cmp	r3, #80	@ 0x50
 8009662:	d03c      	beq.n	80096de <HAL_TIM_ConfigClockSource+0x14a>
 8009664:	2b50      	cmp	r3, #80	@ 0x50
 8009666:	d873      	bhi.n	8009750 <HAL_TIM_ConfigClockSource+0x1bc>
 8009668:	2b40      	cmp	r3, #64	@ 0x40
 800966a:	d058      	beq.n	800971e <HAL_TIM_ConfigClockSource+0x18a>
 800966c:	2b40      	cmp	r3, #64	@ 0x40
 800966e:	d86f      	bhi.n	8009750 <HAL_TIM_ConfigClockSource+0x1bc>
 8009670:	2b30      	cmp	r3, #48	@ 0x30
 8009672:	d064      	beq.n	800973e <HAL_TIM_ConfigClockSource+0x1aa>
 8009674:	2b30      	cmp	r3, #48	@ 0x30
 8009676:	d86b      	bhi.n	8009750 <HAL_TIM_ConfigClockSource+0x1bc>
 8009678:	2b20      	cmp	r3, #32
 800967a:	d060      	beq.n	800973e <HAL_TIM_ConfigClockSource+0x1aa>
 800967c:	2b20      	cmp	r3, #32
 800967e:	d867      	bhi.n	8009750 <HAL_TIM_ConfigClockSource+0x1bc>
 8009680:	2b00      	cmp	r3, #0
 8009682:	d05c      	beq.n	800973e <HAL_TIM_ConfigClockSource+0x1aa>
 8009684:	2b10      	cmp	r3, #16
 8009686:	d05a      	beq.n	800973e <HAL_TIM_ConfigClockSource+0x1aa>
 8009688:	e062      	b.n	8009750 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800969a:	f000 f991 	bl	80099c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80096ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	68ba      	ldr	r2, [r7, #8]
 80096b4:	609a      	str	r2, [r3, #8]
      break;
 80096b6:	e04f      	b.n	8009758 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80096c8:	f000 f97a 	bl	80099c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	689a      	ldr	r2, [r3, #8]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80096da:	609a      	str	r2, [r3, #8]
      break;
 80096dc:	e03c      	b.n	8009758 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096ea:	461a      	mov	r2, r3
 80096ec:	f000 f8ea 	bl	80098c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2150      	movs	r1, #80	@ 0x50
 80096f6:	4618      	mov	r0, r3
 80096f8:	f000 f944 	bl	8009984 <TIM_ITRx_SetConfig>
      break;
 80096fc:	e02c      	b.n	8009758 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800970a:	461a      	mov	r2, r3
 800970c:	f000 f909 	bl	8009922 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2160      	movs	r1, #96	@ 0x60
 8009716:	4618      	mov	r0, r3
 8009718:	f000 f934 	bl	8009984 <TIM_ITRx_SetConfig>
      break;
 800971c:	e01c      	b.n	8009758 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800972a:	461a      	mov	r2, r3
 800972c:	f000 f8ca 	bl	80098c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2140      	movs	r1, #64	@ 0x40
 8009736:	4618      	mov	r0, r3
 8009738:	f000 f924 	bl	8009984 <TIM_ITRx_SetConfig>
      break;
 800973c:	e00c      	b.n	8009758 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4619      	mov	r1, r3
 8009748:	4610      	mov	r0, r2
 800974a:	f000 f91b 	bl	8009984 <TIM_ITRx_SetConfig>
      break;
 800974e:	e003      	b.n	8009758 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	73fb      	strb	r3, [r7, #15]
      break;
 8009754:	e000      	b.n	8009758 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009756:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009768:	7bfb      	ldrb	r3, [r7, #15]
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	ffceff88 	.word	0xffceff88
 8009778:	00100040 	.word	0x00100040
 800977c:	00100030 	.word	0x00100030
 8009780:	00100020 	.word	0x00100020

08009784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009784:	b480      	push	{r7}
 8009786:	b085      	sub	sp, #20
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a43      	ldr	r2, [pc, #268]	@ (80098a4 <TIM_Base_SetConfig+0x120>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d013      	beq.n	80097c4 <TIM_Base_SetConfig+0x40>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097a2:	d00f      	beq.n	80097c4 <TIM_Base_SetConfig+0x40>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4a40      	ldr	r2, [pc, #256]	@ (80098a8 <TIM_Base_SetConfig+0x124>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d00b      	beq.n	80097c4 <TIM_Base_SetConfig+0x40>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a3f      	ldr	r2, [pc, #252]	@ (80098ac <TIM_Base_SetConfig+0x128>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d007      	beq.n	80097c4 <TIM_Base_SetConfig+0x40>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4a3e      	ldr	r2, [pc, #248]	@ (80098b0 <TIM_Base_SetConfig+0x12c>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d003      	beq.n	80097c4 <TIM_Base_SetConfig+0x40>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4a3d      	ldr	r2, [pc, #244]	@ (80098b4 <TIM_Base_SetConfig+0x130>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d108      	bne.n	80097d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	4a32      	ldr	r2, [pc, #200]	@ (80098a4 <TIM_Base_SetConfig+0x120>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d01f      	beq.n	800981e <TIM_Base_SetConfig+0x9a>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097e4:	d01b      	beq.n	800981e <TIM_Base_SetConfig+0x9a>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	4a2f      	ldr	r2, [pc, #188]	@ (80098a8 <TIM_Base_SetConfig+0x124>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d017      	beq.n	800981e <TIM_Base_SetConfig+0x9a>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4a2e      	ldr	r2, [pc, #184]	@ (80098ac <TIM_Base_SetConfig+0x128>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d013      	beq.n	800981e <TIM_Base_SetConfig+0x9a>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	4a2d      	ldr	r2, [pc, #180]	@ (80098b0 <TIM_Base_SetConfig+0x12c>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d00f      	beq.n	800981e <TIM_Base_SetConfig+0x9a>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4a2c      	ldr	r2, [pc, #176]	@ (80098b4 <TIM_Base_SetConfig+0x130>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d00b      	beq.n	800981e <TIM_Base_SetConfig+0x9a>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4a2b      	ldr	r2, [pc, #172]	@ (80098b8 <TIM_Base_SetConfig+0x134>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d007      	beq.n	800981e <TIM_Base_SetConfig+0x9a>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	4a2a      	ldr	r2, [pc, #168]	@ (80098bc <TIM_Base_SetConfig+0x138>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d003      	beq.n	800981e <TIM_Base_SetConfig+0x9a>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	4a29      	ldr	r2, [pc, #164]	@ (80098c0 <TIM_Base_SetConfig+0x13c>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d108      	bne.n	8009830 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	68fa      	ldr	r2, [r7, #12]
 800982c:	4313      	orrs	r3, r2
 800982e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	695b      	ldr	r3, [r3, #20]
 800983a:	4313      	orrs	r3, r2
 800983c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	689a      	ldr	r2, [r3, #8]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a14      	ldr	r2, [pc, #80]	@ (80098a4 <TIM_Base_SetConfig+0x120>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d00f      	beq.n	8009876 <TIM_Base_SetConfig+0xf2>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a16      	ldr	r2, [pc, #88]	@ (80098b4 <TIM_Base_SetConfig+0x130>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d00b      	beq.n	8009876 <TIM_Base_SetConfig+0xf2>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4a15      	ldr	r2, [pc, #84]	@ (80098b8 <TIM_Base_SetConfig+0x134>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d007      	beq.n	8009876 <TIM_Base_SetConfig+0xf2>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4a14      	ldr	r2, [pc, #80]	@ (80098bc <TIM_Base_SetConfig+0x138>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d003      	beq.n	8009876 <TIM_Base_SetConfig+0xf2>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4a13      	ldr	r2, [pc, #76]	@ (80098c0 <TIM_Base_SetConfig+0x13c>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d103      	bne.n	800987e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	691a      	ldr	r2, [r3, #16]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f043 0204 	orr.w	r2, r3, #4
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2201      	movs	r2, #1
 800988e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	601a      	str	r2, [r3, #0]
}
 8009896:	bf00      	nop
 8009898:	3714      	adds	r7, #20
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	40010000 	.word	0x40010000
 80098a8:	40000400 	.word	0x40000400
 80098ac:	40000800 	.word	0x40000800
 80098b0:	40000c00 	.word	0x40000c00
 80098b4:	40010400 	.word	0x40010400
 80098b8:	40014000 	.word	0x40014000
 80098bc:	40014400 	.word	0x40014400
 80098c0:	40014800 	.word	0x40014800

080098c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b087      	sub	sp, #28
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6a1b      	ldr	r3, [r3, #32]
 80098d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6a1b      	ldr	r3, [r3, #32]
 80098da:	f023 0201 	bic.w	r2, r3, #1
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	699b      	ldr	r3, [r3, #24]
 80098e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80098ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	011b      	lsls	r3, r3, #4
 80098f4:	693a      	ldr	r2, [r7, #16]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	f023 030a 	bic.w	r3, r3, #10
 8009900:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009902:	697a      	ldr	r2, [r7, #20]
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	4313      	orrs	r3, r2
 8009908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	693a      	ldr	r2, [r7, #16]
 800990e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	621a      	str	r2, [r3, #32]
}
 8009916:	bf00      	nop
 8009918:	371c      	adds	r7, #28
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009922:	b480      	push	{r7}
 8009924:	b087      	sub	sp, #28
 8009926:	af00      	add	r7, sp, #0
 8009928:	60f8      	str	r0, [r7, #12]
 800992a:	60b9      	str	r1, [r7, #8]
 800992c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6a1b      	ldr	r3, [r3, #32]
 8009932:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6a1b      	ldr	r3, [r3, #32]
 8009938:	f023 0210 	bic.w	r2, r3, #16
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	699b      	ldr	r3, [r3, #24]
 8009944:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800994c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	031b      	lsls	r3, r3, #12
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	4313      	orrs	r3, r2
 8009956:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800995e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	011b      	lsls	r3, r3, #4
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	4313      	orrs	r3, r2
 8009968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	693a      	ldr	r2, [r7, #16]
 800996e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	697a      	ldr	r2, [r7, #20]
 8009974:	621a      	str	r2, [r3, #32]
}
 8009976:	bf00      	nop
 8009978:	371c      	adds	r7, #28
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
	...

08009984 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	4b09      	ldr	r3, [pc, #36]	@ (80099bc <TIM_ITRx_SetConfig+0x38>)
 8009998:	4013      	ands	r3, r2
 800999a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800999c:	683a      	ldr	r2, [r7, #0]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	f043 0307 	orr.w	r3, r3, #7
 80099a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	68fa      	ldr	r2, [r7, #12]
 80099ac:	609a      	str	r2, [r3, #8]
}
 80099ae:	bf00      	nop
 80099b0:	3714      	adds	r7, #20
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr
 80099ba:	bf00      	nop
 80099bc:	ffcfff8f 	.word	0xffcfff8f

080099c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b087      	sub	sp, #28
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
 80099cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80099da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	021a      	lsls	r2, r3, #8
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	431a      	orrs	r2, r3
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	697a      	ldr	r2, [r7, #20]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	697a      	ldr	r2, [r7, #20]
 80099f2:	609a      	str	r2, [r3, #8]
}
 80099f4:	bf00      	nop
 80099f6:	371c      	adds	r7, #28
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d101      	bne.n	8009a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a14:	2302      	movs	r3, #2
 8009a16:	e06d      	b.n	8009af4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2202      	movs	r2, #2
 8009a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a30      	ldr	r2, [pc, #192]	@ (8009b00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d004      	beq.n	8009a4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a2f      	ldr	r2, [pc, #188]	@ (8009b04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d108      	bne.n	8009a5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009a52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a20      	ldr	r2, [pc, #128]	@ (8009b00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d022      	beq.n	8009ac8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a8a:	d01d      	beq.n	8009ac8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a1d      	ldr	r2, [pc, #116]	@ (8009b08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d018      	beq.n	8009ac8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8009b0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d013      	beq.n	8009ac8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a1a      	ldr	r2, [pc, #104]	@ (8009b10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d00e      	beq.n	8009ac8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a15      	ldr	r2, [pc, #84]	@ (8009b04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d009      	beq.n	8009ac8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a16      	ldr	r2, [pc, #88]	@ (8009b14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d004      	beq.n	8009ac8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a15      	ldr	r2, [pc, #84]	@ (8009b18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d10c      	bne.n	8009ae2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ace:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	68ba      	ldr	r2, [r7, #8]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3714      	adds	r7, #20
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr
 8009b00:	40010000 	.word	0x40010000
 8009b04:	40010400 	.word	0x40010400
 8009b08:	40000400 	.word	0x40000400
 8009b0c:	40000800 	.word	0x40000800
 8009b10:	40000c00 	.word	0x40000c00
 8009b14:	40001800 	.word	0x40001800
 8009b18:	40014000 	.word	0x40014000

08009b1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d101      	bne.n	8009b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e042      	b.n	8009bb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d106      	bne.n	8009b46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 f83b 	bl	8009bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2224      	movs	r2, #36	@ 0x24
 8009b4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f022 0201 	bic.w	r2, r2, #1
 8009b5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d002      	beq.n	8009b6c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fd9a 	bl	800a6a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 f82f 	bl	8009bd0 <UART_SetConfig>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d101      	bne.n	8009b7c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	e01b      	b.n	8009bb4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	685a      	ldr	r2, [r3, #4]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009b8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	689a      	ldr	r2, [r3, #8]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009b9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f042 0201 	orr.w	r2, r2, #1
 8009baa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fe19 	bl	800a7e4 <UART_CheckIdleState>
 8009bb2:	4603      	mov	r3, r0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3708      	adds	r7, #8
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8009bc4:	bf00      	nop
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bd4:	b092      	sub	sp, #72	@ 0x48
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	689a      	ldr	r2, [r3, #8]
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	691b      	ldr	r3, [r3, #16]
 8009be8:	431a      	orrs	r2, r3
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	695b      	ldr	r3, [r3, #20]
 8009bee:	431a      	orrs	r2, r3
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	69db      	ldr	r3, [r3, #28]
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	4bbe      	ldr	r3, [pc, #760]	@ (8009ef8 <UART_SetConfig+0x328>)
 8009c00:	4013      	ands	r3, r2
 8009c02:	697a      	ldr	r2, [r7, #20]
 8009c04:	6812      	ldr	r2, [r2, #0]
 8009c06:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009c08:	430b      	orrs	r3, r1
 8009c0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	68da      	ldr	r2, [r3, #12]
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	430a      	orrs	r2, r1
 8009c20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4ab3      	ldr	r2, [pc, #716]	@ (8009efc <UART_SetConfig+0x32c>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d004      	beq.n	8009c3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	6a1b      	ldr	r3, [r3, #32]
 8009c36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	689a      	ldr	r2, [r3, #8]
 8009c42:	4baf      	ldr	r3, [pc, #700]	@ (8009f00 <UART_SetConfig+0x330>)
 8009c44:	4013      	ands	r3, r2
 8009c46:	697a      	ldr	r2, [r7, #20]
 8009c48:	6812      	ldr	r2, [r2, #0]
 8009c4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009c4c:	430b      	orrs	r3, r1
 8009c4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c56:	f023 010f 	bic.w	r1, r3, #15
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	430a      	orrs	r2, r1
 8009c64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4aa6      	ldr	r2, [pc, #664]	@ (8009f04 <UART_SetConfig+0x334>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d177      	bne.n	8009d60 <UART_SetConfig+0x190>
 8009c70:	4ba5      	ldr	r3, [pc, #660]	@ (8009f08 <UART_SetConfig+0x338>)
 8009c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c78:	2b28      	cmp	r3, #40	@ 0x28
 8009c7a:	d86d      	bhi.n	8009d58 <UART_SetConfig+0x188>
 8009c7c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c84 <UART_SetConfig+0xb4>)
 8009c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c82:	bf00      	nop
 8009c84:	08009d29 	.word	0x08009d29
 8009c88:	08009d59 	.word	0x08009d59
 8009c8c:	08009d59 	.word	0x08009d59
 8009c90:	08009d59 	.word	0x08009d59
 8009c94:	08009d59 	.word	0x08009d59
 8009c98:	08009d59 	.word	0x08009d59
 8009c9c:	08009d59 	.word	0x08009d59
 8009ca0:	08009d59 	.word	0x08009d59
 8009ca4:	08009d31 	.word	0x08009d31
 8009ca8:	08009d59 	.word	0x08009d59
 8009cac:	08009d59 	.word	0x08009d59
 8009cb0:	08009d59 	.word	0x08009d59
 8009cb4:	08009d59 	.word	0x08009d59
 8009cb8:	08009d59 	.word	0x08009d59
 8009cbc:	08009d59 	.word	0x08009d59
 8009cc0:	08009d59 	.word	0x08009d59
 8009cc4:	08009d39 	.word	0x08009d39
 8009cc8:	08009d59 	.word	0x08009d59
 8009ccc:	08009d59 	.word	0x08009d59
 8009cd0:	08009d59 	.word	0x08009d59
 8009cd4:	08009d59 	.word	0x08009d59
 8009cd8:	08009d59 	.word	0x08009d59
 8009cdc:	08009d59 	.word	0x08009d59
 8009ce0:	08009d59 	.word	0x08009d59
 8009ce4:	08009d41 	.word	0x08009d41
 8009ce8:	08009d59 	.word	0x08009d59
 8009cec:	08009d59 	.word	0x08009d59
 8009cf0:	08009d59 	.word	0x08009d59
 8009cf4:	08009d59 	.word	0x08009d59
 8009cf8:	08009d59 	.word	0x08009d59
 8009cfc:	08009d59 	.word	0x08009d59
 8009d00:	08009d59 	.word	0x08009d59
 8009d04:	08009d49 	.word	0x08009d49
 8009d08:	08009d59 	.word	0x08009d59
 8009d0c:	08009d59 	.word	0x08009d59
 8009d10:	08009d59 	.word	0x08009d59
 8009d14:	08009d59 	.word	0x08009d59
 8009d18:	08009d59 	.word	0x08009d59
 8009d1c:	08009d59 	.word	0x08009d59
 8009d20:	08009d59 	.word	0x08009d59
 8009d24:	08009d51 	.word	0x08009d51
 8009d28:	2301      	movs	r3, #1
 8009d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d2e:	e222      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009d30:	2304      	movs	r3, #4
 8009d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d36:	e21e      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009d38:	2308      	movs	r3, #8
 8009d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d3e:	e21a      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009d40:	2310      	movs	r3, #16
 8009d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d46:	e216      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009d48:	2320      	movs	r3, #32
 8009d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d4e:	e212      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009d50:	2340      	movs	r3, #64	@ 0x40
 8009d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d56:	e20e      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009d58:	2380      	movs	r3, #128	@ 0x80
 8009d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d5e:	e20a      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a69      	ldr	r2, [pc, #420]	@ (8009f0c <UART_SetConfig+0x33c>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d130      	bne.n	8009dcc <UART_SetConfig+0x1fc>
 8009d6a:	4b67      	ldr	r3, [pc, #412]	@ (8009f08 <UART_SetConfig+0x338>)
 8009d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d6e:	f003 0307 	and.w	r3, r3, #7
 8009d72:	2b05      	cmp	r3, #5
 8009d74:	d826      	bhi.n	8009dc4 <UART_SetConfig+0x1f4>
 8009d76:	a201      	add	r2, pc, #4	@ (adr r2, 8009d7c <UART_SetConfig+0x1ac>)
 8009d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7c:	08009d95 	.word	0x08009d95
 8009d80:	08009d9d 	.word	0x08009d9d
 8009d84:	08009da5 	.word	0x08009da5
 8009d88:	08009dad 	.word	0x08009dad
 8009d8c:	08009db5 	.word	0x08009db5
 8009d90:	08009dbd 	.word	0x08009dbd
 8009d94:	2300      	movs	r3, #0
 8009d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d9a:	e1ec      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009d9c:	2304      	movs	r3, #4
 8009d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009da2:	e1e8      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009da4:	2308      	movs	r3, #8
 8009da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009daa:	e1e4      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009dac:	2310      	movs	r3, #16
 8009dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009db2:	e1e0      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009db4:	2320      	movs	r3, #32
 8009db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dba:	e1dc      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009dbc:	2340      	movs	r3, #64	@ 0x40
 8009dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dc2:	e1d8      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009dc4:	2380      	movs	r3, #128	@ 0x80
 8009dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dca:	e1d4      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a4f      	ldr	r2, [pc, #316]	@ (8009f10 <UART_SetConfig+0x340>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d130      	bne.n	8009e38 <UART_SetConfig+0x268>
 8009dd6:	4b4c      	ldr	r3, [pc, #304]	@ (8009f08 <UART_SetConfig+0x338>)
 8009dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dda:	f003 0307 	and.w	r3, r3, #7
 8009dde:	2b05      	cmp	r3, #5
 8009de0:	d826      	bhi.n	8009e30 <UART_SetConfig+0x260>
 8009de2:	a201      	add	r2, pc, #4	@ (adr r2, 8009de8 <UART_SetConfig+0x218>)
 8009de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de8:	08009e01 	.word	0x08009e01
 8009dec:	08009e09 	.word	0x08009e09
 8009df0:	08009e11 	.word	0x08009e11
 8009df4:	08009e19 	.word	0x08009e19
 8009df8:	08009e21 	.word	0x08009e21
 8009dfc:	08009e29 	.word	0x08009e29
 8009e00:	2300      	movs	r3, #0
 8009e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e06:	e1b6      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009e08:	2304      	movs	r3, #4
 8009e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e0e:	e1b2      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009e10:	2308      	movs	r3, #8
 8009e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e16:	e1ae      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009e18:	2310      	movs	r3, #16
 8009e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e1e:	e1aa      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009e20:	2320      	movs	r3, #32
 8009e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e26:	e1a6      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009e28:	2340      	movs	r3, #64	@ 0x40
 8009e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e2e:	e1a2      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009e30:	2380      	movs	r3, #128	@ 0x80
 8009e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e36:	e19e      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a35      	ldr	r2, [pc, #212]	@ (8009f14 <UART_SetConfig+0x344>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d130      	bne.n	8009ea4 <UART_SetConfig+0x2d4>
 8009e42:	4b31      	ldr	r3, [pc, #196]	@ (8009f08 <UART_SetConfig+0x338>)
 8009e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e46:	f003 0307 	and.w	r3, r3, #7
 8009e4a:	2b05      	cmp	r3, #5
 8009e4c:	d826      	bhi.n	8009e9c <UART_SetConfig+0x2cc>
 8009e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e54 <UART_SetConfig+0x284>)
 8009e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e54:	08009e6d 	.word	0x08009e6d
 8009e58:	08009e75 	.word	0x08009e75
 8009e5c:	08009e7d 	.word	0x08009e7d
 8009e60:	08009e85 	.word	0x08009e85
 8009e64:	08009e8d 	.word	0x08009e8d
 8009e68:	08009e95 	.word	0x08009e95
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e72:	e180      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009e74:	2304      	movs	r3, #4
 8009e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e7a:	e17c      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009e7c:	2308      	movs	r3, #8
 8009e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e82:	e178      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009e84:	2310      	movs	r3, #16
 8009e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e8a:	e174      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009e8c:	2320      	movs	r3, #32
 8009e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e92:	e170      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009e94:	2340      	movs	r3, #64	@ 0x40
 8009e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e9a:	e16c      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009e9c:	2380      	movs	r3, #128	@ 0x80
 8009e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ea2:	e168      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a1b      	ldr	r2, [pc, #108]	@ (8009f18 <UART_SetConfig+0x348>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d142      	bne.n	8009f34 <UART_SetConfig+0x364>
 8009eae:	4b16      	ldr	r3, [pc, #88]	@ (8009f08 <UART_SetConfig+0x338>)
 8009eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009eb2:	f003 0307 	and.w	r3, r3, #7
 8009eb6:	2b05      	cmp	r3, #5
 8009eb8:	d838      	bhi.n	8009f2c <UART_SetConfig+0x35c>
 8009eba:	a201      	add	r2, pc, #4	@ (adr r2, 8009ec0 <UART_SetConfig+0x2f0>)
 8009ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec0:	08009ed9 	.word	0x08009ed9
 8009ec4:	08009ee1 	.word	0x08009ee1
 8009ec8:	08009ee9 	.word	0x08009ee9
 8009ecc:	08009ef1 	.word	0x08009ef1
 8009ed0:	08009f1d 	.word	0x08009f1d
 8009ed4:	08009f25 	.word	0x08009f25
 8009ed8:	2300      	movs	r3, #0
 8009eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ede:	e14a      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009ee0:	2304      	movs	r3, #4
 8009ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ee6:	e146      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009ee8:	2308      	movs	r3, #8
 8009eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eee:	e142      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009ef0:	2310      	movs	r3, #16
 8009ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ef6:	e13e      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009ef8:	cfff69f3 	.word	0xcfff69f3
 8009efc:	58000c00 	.word	0x58000c00
 8009f00:	11fff4ff 	.word	0x11fff4ff
 8009f04:	40011000 	.word	0x40011000
 8009f08:	58024400 	.word	0x58024400
 8009f0c:	40004400 	.word	0x40004400
 8009f10:	40004800 	.word	0x40004800
 8009f14:	40004c00 	.word	0x40004c00
 8009f18:	40005000 	.word	0x40005000
 8009f1c:	2320      	movs	r3, #32
 8009f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f22:	e128      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009f24:	2340      	movs	r3, #64	@ 0x40
 8009f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f2a:	e124      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009f2c:	2380      	movs	r3, #128	@ 0x80
 8009f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f32:	e120      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4acb      	ldr	r2, [pc, #812]	@ (800a268 <UART_SetConfig+0x698>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d176      	bne.n	800a02c <UART_SetConfig+0x45c>
 8009f3e:	4bcb      	ldr	r3, [pc, #812]	@ (800a26c <UART_SetConfig+0x69c>)
 8009f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009f46:	2b28      	cmp	r3, #40	@ 0x28
 8009f48:	d86c      	bhi.n	800a024 <UART_SetConfig+0x454>
 8009f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f50 <UART_SetConfig+0x380>)
 8009f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f50:	08009ff5 	.word	0x08009ff5
 8009f54:	0800a025 	.word	0x0800a025
 8009f58:	0800a025 	.word	0x0800a025
 8009f5c:	0800a025 	.word	0x0800a025
 8009f60:	0800a025 	.word	0x0800a025
 8009f64:	0800a025 	.word	0x0800a025
 8009f68:	0800a025 	.word	0x0800a025
 8009f6c:	0800a025 	.word	0x0800a025
 8009f70:	08009ffd 	.word	0x08009ffd
 8009f74:	0800a025 	.word	0x0800a025
 8009f78:	0800a025 	.word	0x0800a025
 8009f7c:	0800a025 	.word	0x0800a025
 8009f80:	0800a025 	.word	0x0800a025
 8009f84:	0800a025 	.word	0x0800a025
 8009f88:	0800a025 	.word	0x0800a025
 8009f8c:	0800a025 	.word	0x0800a025
 8009f90:	0800a005 	.word	0x0800a005
 8009f94:	0800a025 	.word	0x0800a025
 8009f98:	0800a025 	.word	0x0800a025
 8009f9c:	0800a025 	.word	0x0800a025
 8009fa0:	0800a025 	.word	0x0800a025
 8009fa4:	0800a025 	.word	0x0800a025
 8009fa8:	0800a025 	.word	0x0800a025
 8009fac:	0800a025 	.word	0x0800a025
 8009fb0:	0800a00d 	.word	0x0800a00d
 8009fb4:	0800a025 	.word	0x0800a025
 8009fb8:	0800a025 	.word	0x0800a025
 8009fbc:	0800a025 	.word	0x0800a025
 8009fc0:	0800a025 	.word	0x0800a025
 8009fc4:	0800a025 	.word	0x0800a025
 8009fc8:	0800a025 	.word	0x0800a025
 8009fcc:	0800a025 	.word	0x0800a025
 8009fd0:	0800a015 	.word	0x0800a015
 8009fd4:	0800a025 	.word	0x0800a025
 8009fd8:	0800a025 	.word	0x0800a025
 8009fdc:	0800a025 	.word	0x0800a025
 8009fe0:	0800a025 	.word	0x0800a025
 8009fe4:	0800a025 	.word	0x0800a025
 8009fe8:	0800a025 	.word	0x0800a025
 8009fec:	0800a025 	.word	0x0800a025
 8009ff0:	0800a01d 	.word	0x0800a01d
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ffa:	e0bc      	b.n	800a176 <UART_SetConfig+0x5a6>
 8009ffc:	2304      	movs	r3, #4
 8009ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a002:	e0b8      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a004:	2308      	movs	r3, #8
 800a006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a00a:	e0b4      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a00c:	2310      	movs	r3, #16
 800a00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a012:	e0b0      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a014:	2320      	movs	r3, #32
 800a016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a01a:	e0ac      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a01c:	2340      	movs	r3, #64	@ 0x40
 800a01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a022:	e0a8      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a024:	2380      	movs	r3, #128	@ 0x80
 800a026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a02a:	e0a4      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a8f      	ldr	r2, [pc, #572]	@ (800a270 <UART_SetConfig+0x6a0>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d130      	bne.n	800a098 <UART_SetConfig+0x4c8>
 800a036:	4b8d      	ldr	r3, [pc, #564]	@ (800a26c <UART_SetConfig+0x69c>)
 800a038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a03a:	f003 0307 	and.w	r3, r3, #7
 800a03e:	2b05      	cmp	r3, #5
 800a040:	d826      	bhi.n	800a090 <UART_SetConfig+0x4c0>
 800a042:	a201      	add	r2, pc, #4	@ (adr r2, 800a048 <UART_SetConfig+0x478>)
 800a044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a048:	0800a061 	.word	0x0800a061
 800a04c:	0800a069 	.word	0x0800a069
 800a050:	0800a071 	.word	0x0800a071
 800a054:	0800a079 	.word	0x0800a079
 800a058:	0800a081 	.word	0x0800a081
 800a05c:	0800a089 	.word	0x0800a089
 800a060:	2300      	movs	r3, #0
 800a062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a066:	e086      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a068:	2304      	movs	r3, #4
 800a06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a06e:	e082      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a070:	2308      	movs	r3, #8
 800a072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a076:	e07e      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a078:	2310      	movs	r3, #16
 800a07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a07e:	e07a      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a080:	2320      	movs	r3, #32
 800a082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a086:	e076      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a088:	2340      	movs	r3, #64	@ 0x40
 800a08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a08e:	e072      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a090:	2380      	movs	r3, #128	@ 0x80
 800a092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a096:	e06e      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a75      	ldr	r2, [pc, #468]	@ (800a274 <UART_SetConfig+0x6a4>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d130      	bne.n	800a104 <UART_SetConfig+0x534>
 800a0a2:	4b72      	ldr	r3, [pc, #456]	@ (800a26c <UART_SetConfig+0x69c>)
 800a0a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0a6:	f003 0307 	and.w	r3, r3, #7
 800a0aa:	2b05      	cmp	r3, #5
 800a0ac:	d826      	bhi.n	800a0fc <UART_SetConfig+0x52c>
 800a0ae:	a201      	add	r2, pc, #4	@ (adr r2, 800a0b4 <UART_SetConfig+0x4e4>)
 800a0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b4:	0800a0cd 	.word	0x0800a0cd
 800a0b8:	0800a0d5 	.word	0x0800a0d5
 800a0bc:	0800a0dd 	.word	0x0800a0dd
 800a0c0:	0800a0e5 	.word	0x0800a0e5
 800a0c4:	0800a0ed 	.word	0x0800a0ed
 800a0c8:	0800a0f5 	.word	0x0800a0f5
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0d2:	e050      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a0d4:	2304      	movs	r3, #4
 800a0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0da:	e04c      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a0dc:	2308      	movs	r3, #8
 800a0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0e2:	e048      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a0e4:	2310      	movs	r3, #16
 800a0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ea:	e044      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a0ec:	2320      	movs	r3, #32
 800a0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0f2:	e040      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a0f4:	2340      	movs	r3, #64	@ 0x40
 800a0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0fa:	e03c      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a0fc:	2380      	movs	r3, #128	@ 0x80
 800a0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a102:	e038      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a5b      	ldr	r2, [pc, #364]	@ (800a278 <UART_SetConfig+0x6a8>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d130      	bne.n	800a170 <UART_SetConfig+0x5a0>
 800a10e:	4b57      	ldr	r3, [pc, #348]	@ (800a26c <UART_SetConfig+0x69c>)
 800a110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a112:	f003 0307 	and.w	r3, r3, #7
 800a116:	2b05      	cmp	r3, #5
 800a118:	d826      	bhi.n	800a168 <UART_SetConfig+0x598>
 800a11a:	a201      	add	r2, pc, #4	@ (adr r2, 800a120 <UART_SetConfig+0x550>)
 800a11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a120:	0800a139 	.word	0x0800a139
 800a124:	0800a141 	.word	0x0800a141
 800a128:	0800a149 	.word	0x0800a149
 800a12c:	0800a151 	.word	0x0800a151
 800a130:	0800a159 	.word	0x0800a159
 800a134:	0800a161 	.word	0x0800a161
 800a138:	2302      	movs	r3, #2
 800a13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a13e:	e01a      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a140:	2304      	movs	r3, #4
 800a142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a146:	e016      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a148:	2308      	movs	r3, #8
 800a14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a14e:	e012      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a150:	2310      	movs	r3, #16
 800a152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a156:	e00e      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a158:	2320      	movs	r3, #32
 800a15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a15e:	e00a      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a160:	2340      	movs	r3, #64	@ 0x40
 800a162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a166:	e006      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a168:	2380      	movs	r3, #128	@ 0x80
 800a16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a16e:	e002      	b.n	800a176 <UART_SetConfig+0x5a6>
 800a170:	2380      	movs	r3, #128	@ 0x80
 800a172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a3f      	ldr	r2, [pc, #252]	@ (800a278 <UART_SetConfig+0x6a8>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	f040 80f8 	bne.w	800a372 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a182:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a186:	2b20      	cmp	r3, #32
 800a188:	dc46      	bgt.n	800a218 <UART_SetConfig+0x648>
 800a18a:	2b02      	cmp	r3, #2
 800a18c:	f2c0 8082 	blt.w	800a294 <UART_SetConfig+0x6c4>
 800a190:	3b02      	subs	r3, #2
 800a192:	2b1e      	cmp	r3, #30
 800a194:	d87e      	bhi.n	800a294 <UART_SetConfig+0x6c4>
 800a196:	a201      	add	r2, pc, #4	@ (adr r2, 800a19c <UART_SetConfig+0x5cc>)
 800a198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19c:	0800a21f 	.word	0x0800a21f
 800a1a0:	0800a295 	.word	0x0800a295
 800a1a4:	0800a227 	.word	0x0800a227
 800a1a8:	0800a295 	.word	0x0800a295
 800a1ac:	0800a295 	.word	0x0800a295
 800a1b0:	0800a295 	.word	0x0800a295
 800a1b4:	0800a237 	.word	0x0800a237
 800a1b8:	0800a295 	.word	0x0800a295
 800a1bc:	0800a295 	.word	0x0800a295
 800a1c0:	0800a295 	.word	0x0800a295
 800a1c4:	0800a295 	.word	0x0800a295
 800a1c8:	0800a295 	.word	0x0800a295
 800a1cc:	0800a295 	.word	0x0800a295
 800a1d0:	0800a295 	.word	0x0800a295
 800a1d4:	0800a247 	.word	0x0800a247
 800a1d8:	0800a295 	.word	0x0800a295
 800a1dc:	0800a295 	.word	0x0800a295
 800a1e0:	0800a295 	.word	0x0800a295
 800a1e4:	0800a295 	.word	0x0800a295
 800a1e8:	0800a295 	.word	0x0800a295
 800a1ec:	0800a295 	.word	0x0800a295
 800a1f0:	0800a295 	.word	0x0800a295
 800a1f4:	0800a295 	.word	0x0800a295
 800a1f8:	0800a295 	.word	0x0800a295
 800a1fc:	0800a295 	.word	0x0800a295
 800a200:	0800a295 	.word	0x0800a295
 800a204:	0800a295 	.word	0x0800a295
 800a208:	0800a295 	.word	0x0800a295
 800a20c:	0800a295 	.word	0x0800a295
 800a210:	0800a295 	.word	0x0800a295
 800a214:	0800a287 	.word	0x0800a287
 800a218:	2b40      	cmp	r3, #64	@ 0x40
 800a21a:	d037      	beq.n	800a28c <UART_SetConfig+0x6bc>
 800a21c:	e03a      	b.n	800a294 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a21e:	f7fe fb7d 	bl	800891c <HAL_RCCEx_GetD3PCLK1Freq>
 800a222:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a224:	e03c      	b.n	800a2a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a226:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7fe fb8c 	bl	8008948 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a234:	e034      	b.n	800a2a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a236:	f107 0318 	add.w	r3, r7, #24
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fe fcd8 	bl	8008bf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a244:	e02c      	b.n	800a2a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a246:	4b09      	ldr	r3, [pc, #36]	@ (800a26c <UART_SetConfig+0x69c>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f003 0320 	and.w	r3, r3, #32
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d016      	beq.n	800a280 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a252:	4b06      	ldr	r3, [pc, #24]	@ (800a26c <UART_SetConfig+0x69c>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	08db      	lsrs	r3, r3, #3
 800a258:	f003 0303 	and.w	r3, r3, #3
 800a25c:	4a07      	ldr	r2, [pc, #28]	@ (800a27c <UART_SetConfig+0x6ac>)
 800a25e:	fa22 f303 	lsr.w	r3, r2, r3
 800a262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a264:	e01c      	b.n	800a2a0 <UART_SetConfig+0x6d0>
 800a266:	bf00      	nop
 800a268:	40011400 	.word	0x40011400
 800a26c:	58024400 	.word	0x58024400
 800a270:	40007800 	.word	0x40007800
 800a274:	40007c00 	.word	0x40007c00
 800a278:	58000c00 	.word	0x58000c00
 800a27c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a280:	4b9d      	ldr	r3, [pc, #628]	@ (800a4f8 <UART_SetConfig+0x928>)
 800a282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a284:	e00c      	b.n	800a2a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a286:	4b9d      	ldr	r3, [pc, #628]	@ (800a4fc <UART_SetConfig+0x92c>)
 800a288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a28a:	e009      	b.n	800a2a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a28c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a292:	e005      	b.n	800a2a0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a294:	2300      	movs	r3, #0
 800a296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a29e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a2a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f000 81de 	beq.w	800a664 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ac:	4a94      	ldr	r2, [pc, #592]	@ (800a500 <UART_SetConfig+0x930>)
 800a2ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2b6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2ba:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	685a      	ldr	r2, [r3, #4]
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	005b      	lsls	r3, r3, #1
 800a2c4:	4413      	add	r3, r2
 800a2c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d305      	bcc.n	800a2d8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d903      	bls.n	800a2e0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a2de:	e1c1      	b.n	800a664 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	60bb      	str	r3, [r7, #8]
 800a2e6:	60fa      	str	r2, [r7, #12]
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ec:	4a84      	ldr	r2, [pc, #528]	@ (800a500 <UART_SetConfig+0x930>)
 800a2ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	603b      	str	r3, [r7, #0]
 800a2f8:	607a      	str	r2, [r7, #4]
 800a2fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a302:	f7f5 ffe9 	bl	80002d8 <__aeabi_uldivmod>
 800a306:	4602      	mov	r2, r0
 800a308:	460b      	mov	r3, r1
 800a30a:	4610      	mov	r0, r2
 800a30c:	4619      	mov	r1, r3
 800a30e:	f04f 0200 	mov.w	r2, #0
 800a312:	f04f 0300 	mov.w	r3, #0
 800a316:	020b      	lsls	r3, r1, #8
 800a318:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a31c:	0202      	lsls	r2, r0, #8
 800a31e:	6979      	ldr	r1, [r7, #20]
 800a320:	6849      	ldr	r1, [r1, #4]
 800a322:	0849      	lsrs	r1, r1, #1
 800a324:	2000      	movs	r0, #0
 800a326:	460c      	mov	r4, r1
 800a328:	4605      	mov	r5, r0
 800a32a:	eb12 0804 	adds.w	r8, r2, r4
 800a32e:	eb43 0905 	adc.w	r9, r3, r5
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	469a      	mov	sl, r3
 800a33a:	4693      	mov	fp, r2
 800a33c:	4652      	mov	r2, sl
 800a33e:	465b      	mov	r3, fp
 800a340:	4640      	mov	r0, r8
 800a342:	4649      	mov	r1, r9
 800a344:	f7f5 ffc8 	bl	80002d8 <__aeabi_uldivmod>
 800a348:	4602      	mov	r2, r0
 800a34a:	460b      	mov	r3, r1
 800a34c:	4613      	mov	r3, r2
 800a34e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a352:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a356:	d308      	bcc.n	800a36a <UART_SetConfig+0x79a>
 800a358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a35a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a35e:	d204      	bcs.n	800a36a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a366:	60da      	str	r2, [r3, #12]
 800a368:	e17c      	b.n	800a664 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a36a:	2301      	movs	r3, #1
 800a36c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a370:	e178      	b.n	800a664 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	69db      	ldr	r3, [r3, #28]
 800a376:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a37a:	f040 80c5 	bne.w	800a508 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a37e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a382:	2b20      	cmp	r3, #32
 800a384:	dc48      	bgt.n	800a418 <UART_SetConfig+0x848>
 800a386:	2b00      	cmp	r3, #0
 800a388:	db7b      	blt.n	800a482 <UART_SetConfig+0x8b2>
 800a38a:	2b20      	cmp	r3, #32
 800a38c:	d879      	bhi.n	800a482 <UART_SetConfig+0x8b2>
 800a38e:	a201      	add	r2, pc, #4	@ (adr r2, 800a394 <UART_SetConfig+0x7c4>)
 800a390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a394:	0800a41f 	.word	0x0800a41f
 800a398:	0800a427 	.word	0x0800a427
 800a39c:	0800a483 	.word	0x0800a483
 800a3a0:	0800a483 	.word	0x0800a483
 800a3a4:	0800a42f 	.word	0x0800a42f
 800a3a8:	0800a483 	.word	0x0800a483
 800a3ac:	0800a483 	.word	0x0800a483
 800a3b0:	0800a483 	.word	0x0800a483
 800a3b4:	0800a43f 	.word	0x0800a43f
 800a3b8:	0800a483 	.word	0x0800a483
 800a3bc:	0800a483 	.word	0x0800a483
 800a3c0:	0800a483 	.word	0x0800a483
 800a3c4:	0800a483 	.word	0x0800a483
 800a3c8:	0800a483 	.word	0x0800a483
 800a3cc:	0800a483 	.word	0x0800a483
 800a3d0:	0800a483 	.word	0x0800a483
 800a3d4:	0800a44f 	.word	0x0800a44f
 800a3d8:	0800a483 	.word	0x0800a483
 800a3dc:	0800a483 	.word	0x0800a483
 800a3e0:	0800a483 	.word	0x0800a483
 800a3e4:	0800a483 	.word	0x0800a483
 800a3e8:	0800a483 	.word	0x0800a483
 800a3ec:	0800a483 	.word	0x0800a483
 800a3f0:	0800a483 	.word	0x0800a483
 800a3f4:	0800a483 	.word	0x0800a483
 800a3f8:	0800a483 	.word	0x0800a483
 800a3fc:	0800a483 	.word	0x0800a483
 800a400:	0800a483 	.word	0x0800a483
 800a404:	0800a483 	.word	0x0800a483
 800a408:	0800a483 	.word	0x0800a483
 800a40c:	0800a483 	.word	0x0800a483
 800a410:	0800a483 	.word	0x0800a483
 800a414:	0800a475 	.word	0x0800a475
 800a418:	2b40      	cmp	r3, #64	@ 0x40
 800a41a:	d02e      	beq.n	800a47a <UART_SetConfig+0x8aa>
 800a41c:	e031      	b.n	800a482 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a41e:	f7fc fac7 	bl	80069b0 <HAL_RCC_GetPCLK1Freq>
 800a422:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a424:	e033      	b.n	800a48e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a426:	f7fc fad9 	bl	80069dc <HAL_RCC_GetPCLK2Freq>
 800a42a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a42c:	e02f      	b.n	800a48e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a42e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a432:	4618      	mov	r0, r3
 800a434:	f7fe fa88 	bl	8008948 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a43c:	e027      	b.n	800a48e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a43e:	f107 0318 	add.w	r3, r7, #24
 800a442:	4618      	mov	r0, r3
 800a444:	f7fe fbd4 	bl	8008bf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a448:	69fb      	ldr	r3, [r7, #28]
 800a44a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a44c:	e01f      	b.n	800a48e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a44e:	4b2d      	ldr	r3, [pc, #180]	@ (800a504 <UART_SetConfig+0x934>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 0320 	and.w	r3, r3, #32
 800a456:	2b00      	cmp	r3, #0
 800a458:	d009      	beq.n	800a46e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a45a:	4b2a      	ldr	r3, [pc, #168]	@ (800a504 <UART_SetConfig+0x934>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	08db      	lsrs	r3, r3, #3
 800a460:	f003 0303 	and.w	r3, r3, #3
 800a464:	4a24      	ldr	r2, [pc, #144]	@ (800a4f8 <UART_SetConfig+0x928>)
 800a466:	fa22 f303 	lsr.w	r3, r2, r3
 800a46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a46c:	e00f      	b.n	800a48e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a46e:	4b22      	ldr	r3, [pc, #136]	@ (800a4f8 <UART_SetConfig+0x928>)
 800a470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a472:	e00c      	b.n	800a48e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a474:	4b21      	ldr	r3, [pc, #132]	@ (800a4fc <UART_SetConfig+0x92c>)
 800a476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a478:	e009      	b.n	800a48e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a47a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a47e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a480:	e005      	b.n	800a48e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a482:	2300      	movs	r3, #0
 800a484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a48c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a48e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a490:	2b00      	cmp	r3, #0
 800a492:	f000 80e7 	beq.w	800a664 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a49a:	4a19      	ldr	r2, [pc, #100]	@ (800a500 <UART_SetConfig+0x930>)
 800a49c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4a8:	005a      	lsls	r2, r3, #1
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	085b      	lsrs	r3, r3, #1
 800a4b0:	441a      	add	r2, r3
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4be:	2b0f      	cmp	r3, #15
 800a4c0:	d916      	bls.n	800a4f0 <UART_SetConfig+0x920>
 800a4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4c8:	d212      	bcs.n	800a4f0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a4ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	f023 030f 	bic.w	r3, r3, #15
 800a4d2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d6:	085b      	lsrs	r3, r3, #1
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	f003 0307 	and.w	r3, r3, #7
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a4ec:	60da      	str	r2, [r3, #12]
 800a4ee:	e0b9      	b.n	800a664 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a4f6:	e0b5      	b.n	800a664 <UART_SetConfig+0xa94>
 800a4f8:	03d09000 	.word	0x03d09000
 800a4fc:	003d0900 	.word	0x003d0900
 800a500:	0800ab74 	.word	0x0800ab74
 800a504:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a508:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a50c:	2b20      	cmp	r3, #32
 800a50e:	dc49      	bgt.n	800a5a4 <UART_SetConfig+0x9d4>
 800a510:	2b00      	cmp	r3, #0
 800a512:	db7c      	blt.n	800a60e <UART_SetConfig+0xa3e>
 800a514:	2b20      	cmp	r3, #32
 800a516:	d87a      	bhi.n	800a60e <UART_SetConfig+0xa3e>
 800a518:	a201      	add	r2, pc, #4	@ (adr r2, 800a520 <UART_SetConfig+0x950>)
 800a51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a51e:	bf00      	nop
 800a520:	0800a5ab 	.word	0x0800a5ab
 800a524:	0800a5b3 	.word	0x0800a5b3
 800a528:	0800a60f 	.word	0x0800a60f
 800a52c:	0800a60f 	.word	0x0800a60f
 800a530:	0800a5bb 	.word	0x0800a5bb
 800a534:	0800a60f 	.word	0x0800a60f
 800a538:	0800a60f 	.word	0x0800a60f
 800a53c:	0800a60f 	.word	0x0800a60f
 800a540:	0800a5cb 	.word	0x0800a5cb
 800a544:	0800a60f 	.word	0x0800a60f
 800a548:	0800a60f 	.word	0x0800a60f
 800a54c:	0800a60f 	.word	0x0800a60f
 800a550:	0800a60f 	.word	0x0800a60f
 800a554:	0800a60f 	.word	0x0800a60f
 800a558:	0800a60f 	.word	0x0800a60f
 800a55c:	0800a60f 	.word	0x0800a60f
 800a560:	0800a5db 	.word	0x0800a5db
 800a564:	0800a60f 	.word	0x0800a60f
 800a568:	0800a60f 	.word	0x0800a60f
 800a56c:	0800a60f 	.word	0x0800a60f
 800a570:	0800a60f 	.word	0x0800a60f
 800a574:	0800a60f 	.word	0x0800a60f
 800a578:	0800a60f 	.word	0x0800a60f
 800a57c:	0800a60f 	.word	0x0800a60f
 800a580:	0800a60f 	.word	0x0800a60f
 800a584:	0800a60f 	.word	0x0800a60f
 800a588:	0800a60f 	.word	0x0800a60f
 800a58c:	0800a60f 	.word	0x0800a60f
 800a590:	0800a60f 	.word	0x0800a60f
 800a594:	0800a60f 	.word	0x0800a60f
 800a598:	0800a60f 	.word	0x0800a60f
 800a59c:	0800a60f 	.word	0x0800a60f
 800a5a0:	0800a601 	.word	0x0800a601
 800a5a4:	2b40      	cmp	r3, #64	@ 0x40
 800a5a6:	d02e      	beq.n	800a606 <UART_SetConfig+0xa36>
 800a5a8:	e031      	b.n	800a60e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5aa:	f7fc fa01 	bl	80069b0 <HAL_RCC_GetPCLK1Freq>
 800a5ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a5b0:	e033      	b.n	800a61a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5b2:	f7fc fa13 	bl	80069dc <HAL_RCC_GetPCLK2Freq>
 800a5b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a5b8:	e02f      	b.n	800a61a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7fe f9c2 	bl	8008948 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5c8:	e027      	b.n	800a61a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5ca:	f107 0318 	add.w	r3, r7, #24
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7fe fb0e 	bl	8008bf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5d8:	e01f      	b.n	800a61a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5da:	4b2d      	ldr	r3, [pc, #180]	@ (800a690 <UART_SetConfig+0xac0>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f003 0320 	and.w	r3, r3, #32
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d009      	beq.n	800a5fa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a5e6:	4b2a      	ldr	r3, [pc, #168]	@ (800a690 <UART_SetConfig+0xac0>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	08db      	lsrs	r3, r3, #3
 800a5ec:	f003 0303 	and.w	r3, r3, #3
 800a5f0:	4a28      	ldr	r2, [pc, #160]	@ (800a694 <UART_SetConfig+0xac4>)
 800a5f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a5f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a5f8:	e00f      	b.n	800a61a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a5fa:	4b26      	ldr	r3, [pc, #152]	@ (800a694 <UART_SetConfig+0xac4>)
 800a5fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5fe:	e00c      	b.n	800a61a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a600:	4b25      	ldr	r3, [pc, #148]	@ (800a698 <UART_SetConfig+0xac8>)
 800a602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a604:	e009      	b.n	800a61a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a606:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a60c:	e005      	b.n	800a61a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a60e:	2300      	movs	r3, #0
 800a610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a612:	2301      	movs	r3, #1
 800a614:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a618:	bf00      	nop
    }

    if (pclk != 0U)
 800a61a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d021      	beq.n	800a664 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a624:	4a1d      	ldr	r2, [pc, #116]	@ (800a69c <UART_SetConfig+0xacc>)
 800a626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a62a:	461a      	mov	r2, r3
 800a62c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a62e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	085b      	lsrs	r3, r3, #1
 800a638:	441a      	add	r2, r3
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a642:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a646:	2b0f      	cmp	r3, #15
 800a648:	d909      	bls.n	800a65e <UART_SetConfig+0xa8e>
 800a64a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a64c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a650:	d205      	bcs.n	800a65e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a654:	b29a      	uxth	r2, r3
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	60da      	str	r2, [r3, #12]
 800a65c:	e002      	b.n	800a664 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	2201      	movs	r2, #1
 800a668:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	2201      	movs	r2, #1
 800a670:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	2200      	movs	r2, #0
 800a678:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	2200      	movs	r2, #0
 800a67e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a680:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a684:	4618      	mov	r0, r3
 800a686:	3748      	adds	r7, #72	@ 0x48
 800a688:	46bd      	mov	sp, r7
 800a68a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a68e:	bf00      	nop
 800a690:	58024400 	.word	0x58024400
 800a694:	03d09000 	.word	0x03d09000
 800a698:	003d0900 	.word	0x003d0900
 800a69c:	0800ab74 	.word	0x0800ab74

0800a6a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ac:	f003 0308 	and.w	r3, r3, #8
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d00a      	beq.n	800a6ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	430a      	orrs	r2, r1
 800a6c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ce:	f003 0301 	and.w	r3, r3, #1
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00a      	beq.n	800a6ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	430a      	orrs	r2, r1
 800a6ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6f0:	f003 0302 	and.w	r3, r3, #2
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00a      	beq.n	800a70e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	430a      	orrs	r2, r1
 800a70c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a712:	f003 0304 	and.w	r3, r3, #4
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00a      	beq.n	800a730 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	430a      	orrs	r2, r1
 800a72e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a734:	f003 0310 	and.w	r3, r3, #16
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d00a      	beq.n	800a752 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	430a      	orrs	r2, r1
 800a750:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a756:	f003 0320 	and.w	r3, r3, #32
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00a      	beq.n	800a774 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	430a      	orrs	r2, r1
 800a772:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d01a      	beq.n	800a7b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	430a      	orrs	r2, r1
 800a794:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a79a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a79e:	d10a      	bne.n	800a7b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	430a      	orrs	r2, r1
 800a7b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00a      	beq.n	800a7d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	430a      	orrs	r2, r1
 800a7d6:	605a      	str	r2, [r3, #4]
  }
}
 800a7d8:	bf00      	nop
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b098      	sub	sp, #96	@ 0x60
 800a7e8:	af02      	add	r7, sp, #8
 800a7ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a7f4:	f7f6 fdb6 	bl	8001364 <HAL_GetTick>
 800a7f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f003 0308 	and.w	r3, r3, #8
 800a804:	2b08      	cmp	r3, #8
 800a806:	d12f      	bne.n	800a868 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a808:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a80c:	9300      	str	r3, [sp, #0]
 800a80e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a810:	2200      	movs	r2, #0
 800a812:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 f88e 	bl	800a938 <UART_WaitOnFlagUntilTimeout>
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d022      	beq.n	800a868 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a82a:	e853 3f00 	ldrex	r3, [r3]
 800a82e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a832:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a836:	653b      	str	r3, [r7, #80]	@ 0x50
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	461a      	mov	r2, r3
 800a83e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a840:	647b      	str	r3, [r7, #68]	@ 0x44
 800a842:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a844:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a846:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a848:	e841 2300 	strex	r3, r2, [r1]
 800a84c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a84e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a850:	2b00      	cmp	r3, #0
 800a852:	d1e6      	bne.n	800a822 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2220      	movs	r2, #32
 800a858:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a864:	2303      	movs	r3, #3
 800a866:	e063      	b.n	800a930 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f003 0304 	and.w	r3, r3, #4
 800a872:	2b04      	cmp	r3, #4
 800a874:	d149      	bne.n	800a90a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a876:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a87a:	9300      	str	r3, [sp, #0]
 800a87c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a87e:	2200      	movs	r2, #0
 800a880:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 f857 	bl	800a938 <UART_WaitOnFlagUntilTimeout>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d03c      	beq.n	800a90a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a898:	e853 3f00 	ldrex	r3, [r3]
 800a89c:	623b      	str	r3, [r7, #32]
   return(result);
 800a89e:	6a3b      	ldr	r3, [r7, #32]
 800a8a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8b6:	e841 2300 	strex	r3, r2, [r1]
 800a8ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a8bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d1e6      	bne.n	800a890 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	3308      	adds	r3, #8
 800a8c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	e853 3f00 	ldrex	r3, [r3]
 800a8d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f023 0301 	bic.w	r3, r3, #1
 800a8d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	3308      	adds	r3, #8
 800a8e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8e2:	61fa      	str	r2, [r7, #28]
 800a8e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e6:	69b9      	ldr	r1, [r7, #24]
 800a8e8:	69fa      	ldr	r2, [r7, #28]
 800a8ea:	e841 2300 	strex	r3, r2, [r1]
 800a8ee:	617b      	str	r3, [r7, #20]
   return(result);
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1e5      	bne.n	800a8c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2220      	movs	r2, #32
 800a8fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a906:	2303      	movs	r3, #3
 800a908:	e012      	b.n	800a930 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2220      	movs	r2, #32
 800a90e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2220      	movs	r2, #32
 800a916:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	3758      	adds	r7, #88	@ 0x58
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	603b      	str	r3, [r7, #0]
 800a944:	4613      	mov	r3, r2
 800a946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a948:	e04f      	b.n	800a9ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a950:	d04b      	beq.n	800a9ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a952:	f7f6 fd07 	bl	8001364 <HAL_GetTick>
 800a956:	4602      	mov	r2, r0
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	1ad3      	subs	r3, r2, r3
 800a95c:	69ba      	ldr	r2, [r7, #24]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d302      	bcc.n	800a968 <UART_WaitOnFlagUntilTimeout+0x30>
 800a962:	69bb      	ldr	r3, [r7, #24]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d101      	bne.n	800a96c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a968:	2303      	movs	r3, #3
 800a96a:	e04e      	b.n	800aa0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f003 0304 	and.w	r3, r3, #4
 800a976:	2b00      	cmp	r3, #0
 800a978:	d037      	beq.n	800a9ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	2b80      	cmp	r3, #128	@ 0x80
 800a97e:	d034      	beq.n	800a9ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	2b40      	cmp	r3, #64	@ 0x40
 800a984:	d031      	beq.n	800a9ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	69db      	ldr	r3, [r3, #28]
 800a98c:	f003 0308 	and.w	r3, r3, #8
 800a990:	2b08      	cmp	r3, #8
 800a992:	d110      	bne.n	800a9b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2208      	movs	r2, #8
 800a99a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f000 f839 	bl	800aa14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2208      	movs	r2, #8
 800a9a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e029      	b.n	800aa0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	69db      	ldr	r3, [r3, #28]
 800a9bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a9c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9c4:	d111      	bne.n	800a9ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a9ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f000 f81f 	bl	800aa14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2220      	movs	r2, #32
 800a9da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a9e6:	2303      	movs	r3, #3
 800a9e8:	e00f      	b.n	800aa0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	69da      	ldr	r2, [r3, #28]
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	4013      	ands	r3, r2
 800a9f4:	68ba      	ldr	r2, [r7, #8]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	bf0c      	ite	eq
 800a9fa:	2301      	moveq	r3, #1
 800a9fc:	2300      	movne	r3, #0
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	461a      	mov	r2, r3
 800aa02:	79fb      	ldrb	r3, [r7, #7]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d0a0      	beq.n	800a94a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa08:	2300      	movs	r3, #0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
	...

0800aa14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b095      	sub	sp, #84	@ 0x54
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa24:	e853 3f00 	ldrex	r3, [r3]
 800aa28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	461a      	mov	r2, r3
 800aa38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa3a:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa42:	e841 2300 	strex	r3, r2, [r1]
 800aa46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1e6      	bne.n	800aa1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	3308      	adds	r3, #8
 800aa54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa56:	6a3b      	ldr	r3, [r7, #32]
 800aa58:	e853 3f00 	ldrex	r3, [r3]
 800aa5c:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa5e:	69fa      	ldr	r2, [r7, #28]
 800aa60:	4b1e      	ldr	r3, [pc, #120]	@ (800aadc <UART_EndRxTransfer+0xc8>)
 800aa62:	4013      	ands	r3, r2
 800aa64:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	3308      	adds	r3, #8
 800aa6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aa70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa76:	e841 2300 	strex	r3, r2, [r1]
 800aa7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d1e5      	bne.n	800aa4e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d118      	bne.n	800aabc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	e853 3f00 	ldrex	r3, [r3]
 800aa96:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	f023 0310 	bic.w	r3, r3, #16
 800aa9e:	647b      	str	r3, [r7, #68]	@ 0x44
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aaa8:	61bb      	str	r3, [r7, #24]
 800aaaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaac:	6979      	ldr	r1, [r7, #20]
 800aaae:	69ba      	ldr	r2, [r7, #24]
 800aab0:	e841 2300 	strex	r3, r2, [r1]
 800aab4:	613b      	str	r3, [r7, #16]
   return(result);
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d1e6      	bne.n	800aa8a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2220      	movs	r2, #32
 800aac0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2200      	movs	r2, #0
 800aac8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800aad0:	bf00      	nop
 800aad2:	3754      	adds	r7, #84	@ 0x54
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr
 800aadc:	effffffe 	.word	0xeffffffe

0800aae0 <memset>:
 800aae0:	4402      	add	r2, r0
 800aae2:	4603      	mov	r3, r0
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d100      	bne.n	800aaea <memset+0xa>
 800aae8:	4770      	bx	lr
 800aaea:	f803 1b01 	strb.w	r1, [r3], #1
 800aaee:	e7f9      	b.n	800aae4 <memset+0x4>

0800aaf0 <__libc_init_array>:
 800aaf0:	b570      	push	{r4, r5, r6, lr}
 800aaf2:	4d0d      	ldr	r5, [pc, #52]	@ (800ab28 <__libc_init_array+0x38>)
 800aaf4:	4c0d      	ldr	r4, [pc, #52]	@ (800ab2c <__libc_init_array+0x3c>)
 800aaf6:	1b64      	subs	r4, r4, r5
 800aaf8:	10a4      	asrs	r4, r4, #2
 800aafa:	2600      	movs	r6, #0
 800aafc:	42a6      	cmp	r6, r4
 800aafe:	d109      	bne.n	800ab14 <__libc_init_array+0x24>
 800ab00:	4d0b      	ldr	r5, [pc, #44]	@ (800ab30 <__libc_init_array+0x40>)
 800ab02:	4c0c      	ldr	r4, [pc, #48]	@ (800ab34 <__libc_init_array+0x44>)
 800ab04:	f000 f818 	bl	800ab38 <_init>
 800ab08:	1b64      	subs	r4, r4, r5
 800ab0a:	10a4      	asrs	r4, r4, #2
 800ab0c:	2600      	movs	r6, #0
 800ab0e:	42a6      	cmp	r6, r4
 800ab10:	d105      	bne.n	800ab1e <__libc_init_array+0x2e>
 800ab12:	bd70      	pop	{r4, r5, r6, pc}
 800ab14:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab18:	4798      	blx	r3
 800ab1a:	3601      	adds	r6, #1
 800ab1c:	e7ee      	b.n	800aafc <__libc_init_array+0xc>
 800ab1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab22:	4798      	blx	r3
 800ab24:	3601      	adds	r6, #1
 800ab26:	e7f2      	b.n	800ab0e <__libc_init_array+0x1e>
 800ab28:	0800ab94 	.word	0x0800ab94
 800ab2c:	0800ab94 	.word	0x0800ab94
 800ab30:	0800ab94 	.word	0x0800ab94
 800ab34:	0800ab98 	.word	0x0800ab98

0800ab38 <_init>:
 800ab38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab3a:	bf00      	nop
 800ab3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab3e:	bc08      	pop	{r3}
 800ab40:	469e      	mov	lr, r3
 800ab42:	4770      	bx	lr

0800ab44 <_fini>:
 800ab44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab46:	bf00      	nop
 800ab48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab4a:	bc08      	pop	{r3}
 800ab4c:	469e      	mov	lr, r3
 800ab4e:	4770      	bx	lr
